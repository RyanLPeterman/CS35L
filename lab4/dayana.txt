From 82b6c8d8f6a394ba58bc2bbc9a61d70f92793e8c Mon Sep 17 00:00:00 2001
From: Dayana Rios <classrio@lnxsrv04.seas.ucla.edu>
Date: Thu, 22 Oct 2015 11:15:04 -0700
Subject: [PATCH] 2008-01-30  Paul Eggert  <eggert@cs.ucla.edu>

	* doc/diff.texi: Update Back-Cover text to reflect new GNU wording.

2008-01-24  Paul Eggert  <eggert@cs.ucla.edu>

	* src/side.c [!HAVE_MBRTOWC]: Supply defns for mbstate_t and mbrtowc.
	Problem reported by Bruno Haible.

2008-01-23  Paul Eggert  <eggert@cs.ucla.edu>

	* src/side.c (print_half_line): Don't convert to unsigned char
	unnecessarily.

	Don't mishandle multibyte characters in side-by-side format.
	Problem reported by Erik Karlsson in
	<http://lists.gnu.org/archive/html/bug-gnu-utils/2008-01/msg00030.html>.
	* bootstrap.conf (gnulib_modules): Add wcwidth.
	* src/side.c: Include <wchar.h>.
	(print_half_line): Compute number of bytes and print widths of
	multibyte characters.  Inspired by an alternative solution from
	Bruno Haible in
	<http://lists.gnu.org/archive/html/bug-gnu-utils/2008-01/msg00032.html>.

2007-12-04  Paul Eggert  <eggert@cs.ucla.edu>

	* NEWS: New diff option --suppress-blank-empty (no longer -u default).
	* doc/diff.texi (Detailed Unified): Trailing spaces are no longer
	omitted.
	(Trailing Blanks): New section.
	(diff Options) Mention new option.
	* src/diff.h (suppress_blank_entry): New decl.
	* src/context.c (pr_unidiff_hunk): Support --suppress-blank-empty.
	* src/util.c (print_1_line): Likewise.
	* src/diff.c (longopts, main, option_help_msgid): Likewise.
	(SUPPRESS_BLANK_EMPTY_OPTION): New constant.

	* configure.ac: Invoke gl_USE_SYSTEM_EXTENSIONS after gl_EARLY,
	since gnulib now requires this order.

	* bootstrap: Import from gnulib.

2007-08-17  Paul Eggert  <eggert@cs.ucla.edu>

	Break out diffseq.h into a separate file, so that gettext can use
	this code.  Idea and code from Bruno Haible.
	* bootstrap.conf (gnulib_modules): Add diffseq.
	* src/analyze.c (xvec, yvec, fdiag, bdiag, too_expensive, SNAKE_LIMIT):
	(struct partition, diag, compareseq): Remove; now in diffseq.h.
	(ELEMENT, EQUAL, OFFSET, EXTRA_CONTEXT_FIELDS, NOTE_DELETE, NOTE_INSERT):
	(USE_HEURISTIC): New macros.
	Include "diffseq.h".
	(diff_2_files): Rewrite to use new diffseq.h interface.

	* bootstrap: Import from gnulib.

2007-08-15  Paul Eggert  <eggert@cs.ucla.edu>

	* src/diff.c (compare_files): Use last_component rather than base_name,
	adjusting to gnulib API change.  This avoids a memory leak.
	* src/sdiff.c (expand_name): Likewise.
	* src/util.c (dir_file_pathname): Likewise.

	* doc/diff.texi (Copying This Manual): Adjust to new fdl.texi layout.

2007-07-19  Paul Eggert  <eggert@cs.ucla.edu>

	* doc/diff.texi (White Space): Note that newline always ends a line,
	so -w doesn't ignore newline-related changes.  Problem reported by
	David Kastrup.

	* COPYING: New file.
	* AUTHORS: Update from GPLv2 to GPLv3.
	* Makefile.am: Likewise.
	* NEWS: Likewise.
	* README: Likewise.
	* README-hacking: Likewise.
	* bootstrap: Likewise.
	* bootstrap.conf: Likewise.
	* configure.ac: Likewise.
	* exgettext: Likewise.
	* doc/Makefile.am: Likewise.
	* lib/Makefile.am: Likewise.
	* lib/cmpbuf.c: Likewise.
	* lib/cmpbuf.h: Likewise.
	* lib/prepargs.c: Likewise.
	* m4/vararrays.m4: Likewise.
	* man/Makefile.am: Likewise.
	* ms/Makefile.am: Likewise.
	* ms/README: Likewise.
	* ms/config.bat: Likewise.
	* ms/config.sed: Likewise.
	* ms/config.site: Likewise.
	* po/POTFILES.in: Likewise.
	* src/Makefile.am: Likewise.
	* src/analyze.c: Likewise.
	* src/cmp.c: Likewise.
	* src/context.c: Likewise.
	* src/diff.c: Likewise.
	* src/diff.h: Likewise.
	* src/diff3.c: Likewise.
	* src/dir.c: Likewise.
	* src/ed.c: Likewise.
	* src/io.c: Likewise.
	* src/normal.c: Likewise.
	* src/sdiff.c: Likewise.
	* src/system.h: Likewise.
	* src/util.c: Likewise.

	* src/ifdef.c: Fix typo: "GNU DIFF General Public License" should be
	"GNU General Public License".  Reported by Erich Guenther.
	* src/side.c: Likewise.

2007-06-18  Paul Eggert  <eggert@cs.ucla.edu>

	* bootstrap.conf (gnulib_modules): Add inttypes.
	* src/context.c (print_context_label): Don't assume that time_t
	fits in long int, since it doesn't in FreeBSD/arm.  Problem
	reported by Xin Li in
	<http://lists.gnu.org/archive/html/bug-gnu-utils/2007-06/msg00091.html>.

2007-06-06  Paul Eggert  <eggert@cs.ucla.edu>

	* NEWS:  Mention new sdiff aliases 1 and 2 for l and r.
	* doc/diff.texi (Merge Commands): Likewise.
	* src/sdiff.c (give_help): Give help for them.
	(edit): Support them.

2007-04-11  Paul Eggert  <eggert@cs.ucla.edu>

	* doc/diff.texi (Detailed diff3 Normal): "range is a singleton" ->
	"there is only one line", for clarity.  Suggested by Jerry Peek.

2007-04-04  Paul Eggert  <eggert@cs.ucla.edu>

	* TODO: Mention possible sdiff improvement.

	* bootstrap: Sync from gnulib.
	* src/cmp.c: Don't include exit.h; no longer needed.
	* src/diff.c: Likewise.
	* src/sdiff.c: Likewise.
	* src/dir.c: Don't include strcase.h; no longer needed.
	* README-alpha: Remove, replacing with:
	* README-hacking: New file, taken from coreutils with some changes.
	The rename is required by the change to 'bootstrap'.

2006-11-15  Paul Eggert  <eggert@cs.ucla.edu>

	* src/analyze.c (build_reverse_script): Fix typo in comment.
	Problem and fix reported by Daniel Hipschman.

2006-11-14  Paul Eggert  <eggert@cs.ucla.edu>

	Don't assume SIGPIPE exists, and that sigblock and sigsetmask
	exist if sigprocmask does not.  Problem reported by Paul Edwards
	for MVS 3.8.
	* configure.ac (sigblock): Check whether this function is
	available, if sigprocmask is not.
	* src/sdiff.c (sigs): Omit SIGPIPE if it's not defined.
	Put SIGINT last; all uses changed.
	(handler_index_of_SIGPIPE): Omit if SIGPIPE is not defined.
	(sigblock, sigsetmask) [!HAVE_SIGBLOCK]: New macros.
	(sigprocmask): Don't dump core if O is null.

2006-11-04  Paul Eggert  <eggert@cs.ucla.edu>

	* src/sdiff.c (sigprocmask) [! HAVE_SIGPROCMASK]: Cast 2nd arg to
	sigset_t *, since it might be a literal 0.  Problem reported by
	Paul Edwards for MVS 3.8.

2006-09-05  Paul Eggert  <eggert@cs.ucla.edu>

	* NEWS: diff -u no longer outputs trailing white space unless the
	input data has it.  Suggested by Jim Meyering.
	* doc/diff.texi (Detailed Unified): Document this.
	* src/context.c (pr_unidiff_hunk): Implement this.

	Modernize bootstrap procedure to match current gnulib.
	* bootstrap: Sync with coreutils bootstrap, except check that
	the directory build-aux exists before trying to copy to it.
	* bootstrap.conf: New file.
	(gnulib_modules): Add config-h, dup2, extensions, fcntl, fdl,
	stat-macros, unistd.
	* configure.ac: Invoke gl_EARLY and gl_INIT rather than
	GNULIB_AUTOCONF_SNIPPET.
	(AC_CONFIG_HEADER): Rename config.h to lib/config.h.
	(AC_CHECK_HEADERS_ONCE): Don't check for fcntl.h, locale.h,
	sys/file.h, unistd.h.  We now use the fcntl and unistd modules,
	and locale.h can be assumed for any C89 compiler.
	(DIFFUTILS_PREREQUISITES): Remove.  No longer needed now that
	we use the stdint module.
	(AC_CHECK_FUNCS_ONCE): Remove dup2, which is no longer needed
	now that we use the dup2 module.
	(AM_GNU_GETTEXT): Use need-formatstring-macros, and ...
	(AM_GNU_GETTEXT_VERSION): specify version 0.15 instead of 0.14.5,
	to be consistent with coreutils.
	* lib/Makefile.am (noinst_LIBRARIES):
	(lib_SOURCES, libdiffutils_a_LIBADD):
	(libdiffutils_a_DEPENDENCIES, BUILT_SOURCES, EXTRA_DIST):
	(MOSTLYCLEANFILES): Remove; now computed automatically.
	(noinst_HEADERS, libdiffutils_a_SOURCES): Just append
	our special files now.
	* lib/cmpbuf.c: Include config.h unconditionally, since we
	no longer define HAVE_CONFIG_H.
	* lib/prepargs.c: Likewise.
	* src/Makefile.am (LDADD): Use $(LIBINTL), not @LIBINTL@.
	(diff_LDADD): Use $(LIB_CLOCK_GETTIME), not @LIB_CLOCK_GETTIME@.
	* src/dir.c (dir_read): Use _D_EXACT_NAMLEN, not NAMELEN.
	* src/system.h (volatile): Remove, since we assume C89 or better.
	Include stat-macros.h.
	(S_IRWXU, S_IRWXG, S_IRWXO, S_IRUSR, S_IWUSR):
	Remove, since we now use stat-macros.h.
	(SEEK_SET, SEEK_CUR): Remove, since we assume C89 or better.
	Include unistd.h unconditionally, since we use unistd.
	Likewise for fcntl.h.
	(dup2): Remove, since we now use dup2.
	(O_RDONLY, O_RWDR, O_BINARY): Remove, since we now use
	fcntl.
	Include dirent.h unconditionally.
	(NAMLEN): Remove, replacing with....
	(_D_EXACT_NAMLEN): New macro.
	Include inttypes.h unconditionally.
	(PTRDIFF_MAX, SIZE_MAX, UINTMAX_MAX, strtoumax): Remove, since
	we now use inttypes.
	Include locale.h unconditionally.
	(setlocale): Remove, since we now assume locale.h.

2006-09-04  Jim Meyering  <jim@meyering.net>

	* src/context.c (print_context_function): Do not print
	trailing white space in a context header.

2006-05-09  Paul Eggert  <eggert@cs.ucla.edu>

	* src/cmp.c (cmp): The previous fix wasn't quite right either, as
	it mishandled 'cmp A B >/dev/null' when A is shorter than B and
	differs before A's end-of-file, by outputting a bogus EOF message.
	Also, it was inefficient if A and B were large.

2006-05-07  Jim Meyering  <jim@meyering.net>  (tiny change)

	Fix bug introduced in 2006-03-09 change:
	cmp always exits successfully, when stdout is redirected to /dev/null.
	* src/cmp.c (cmp): When there's a difference, arrange to return nonzero
	also when comparison_type is the new (from 2006-03-09) type_no_stdout.

2006-05-07  Paul Eggert  <eggert@cs.ucla.edu>

	* src/context.c (pr_context_hunk, pr_unidiff_hunk):
	Prefer fputs or fputc to fprintf, since it's a tad more efficient
	with unlocked-IO on glibc.  Long ago we avoided fputs to
	work around an ancient SunOS bug, but that's no longer relevant.
	* src/diff3.c (output_diff3, dotlines, undotlines):
	(output_diff3_edscript, output_diff3_merge): Likewise.
	This also avoids a gcc -Wformat-security warning reported
	by Jim Meyering.
	* src/ed.c (print_ed_hunk, print_forward_ed_hunk, print_rcs_hunk):
	Likewise.
	* src/normal.c (print_normal_hunk): Likewise.

2006-05-06  Paul Eggert  <eggert@cs.ucla.edu>

	* src/io.c (find_identical_ends): Fix huge performance bug that I
	introduced in the 2001-11-25 change: the code to remove the
	identical suffix also looked at the trailing sentinel, which meant
	the common suffix length was always incorrectly calculated to be
	zero.  Problem and fix reported by Daniel Hipschman.  Instead of
	his fix, revert to the pre-2001 code.

	* doc/diff.texi: Switch from GFDL 1.1 to 1.2.

2006-03-13  Paul Eggert  <eggert@cs.ucla.edu>

	* src/system.h (PARAMS, PROTOTYPES): Remove; no longer needed.
	(IF_LINT): New macro, to pacify GCC.
	* src/analyze.c (diag, compareseq): Use IF_LINT.
	* src/cmp.c (cmp): Likewise.
	* src/diff3.c (process_diff): Likewise.  Also, prefer NULL to 0.
	* src/ifdef.c (do_printf_spec, scan_char_literal): Likewise.
	* src/sdiff.c (edit): Likewise.

2006-03-09  Paul Eggert  <eggert@cs.ucla.edu>

	* src/cmp.c (type_no_stdout): New constant.
	(main): Use it to avoid bug when the "EOF on foo" message is
	generated and stdout is /dev/null.
	Problem reported by Vincent Lefevre (Debian bug 356083).

2006-01-04  Paul Eggert  <eggert@cs.ucla.edu>

	* README-alpha: Describe CVS access better, using the README-alpha
	from GNU tar.
	* AUTHORS: Simplify list by removing legalisms.
	* THANKS: Add Larry Wall, who contributed to manual.  Update email
	addresses.
	* Makefile.am (SUBDIRS): Remove m4.  Put lib first, then other
	source files, so documentation can rely on programs being built.
	* bootstrap: Import changes from Bison bootstrap.  Add gettext,
	gettime, sh-quote, stat-time, verify, version-etc-fsf modules.
	Remove posixver module.  Retrieve doc/fdl.texi from gnulib.
	Handle gettext.m4 like glibc21.m4.  Don't remove po/en.po.
	* configure.ac (AC_PREREQ): Bump to 2.59.
	(AC_INIT): Bump version to 2.8.7-cvs.
	(AC_CONFIG_AUX_DIR): Change from config to build-aux.
	Prefer AC_CHECK_HEADERS_ONCE to AC_CHECK_HEADERS
	and AC_CHECK_FUNCS_ONCE to AC_CHECK_FUNCS.
	Remove jm_AC_TYPE_INTMAX_T, jm_AC_TYPE_UINTMAX_T,
	AC_STRUCT_ST_MTIM_NSEC.
	(DIFFUTILS_PREREQUISITES): New macro.  Call it.
	(REGEX_MALLOC): Remove; no longer needed.
	(AM_GNU_GETTEXT_VERSION): Now 0.14.15.
	(AM_GNU_GETTEXT): Call.
	(LIB_CLOCK_GETTIME): Remove; bootstrap now does that.
	(AC_FUNC_SETMODE_DOS): Remove.
	(AC_CONFIG_FILES): Remove m4/Makefile.
	* doc/diff.texi: Use @- at end of lines that should end in white space,
	so that Emacs doesn't remove the white space.
	(diff Options): "diff -NUM" is a pure extension to POSIX, so support
	it unconditionally.
	* lib/Makefile.am (noinst_HEADERS): Remove quotesys.h.
	(lib_SOURCES): Remove quotesys.c.
	(DISTCLEANFILES): Remove.
	(EXTRA_DIST): Remove setmode.h, waitpid.c.
	* lib/cmpbuf.c (block_read): Reword to avoid gcc -W warning.
	* lib/setmode.c, lib/setmode.h: Remove.
	* m4/setmode.m4, m4/gnu-source.m4, m4/Makefile.am.in: Remove.
	* m4/jm-glibc-io.m4: Remove.
	* src/cmp.c: Don't include <setmode.h>.
	(specify_ignore_initial): Reword to avoid gcc -W warnings.
	(main): Use freopen instead of setmode, since freopen is in POSIX.
	* src/context.c: Revert most 2004-09-01 changes.  Then:
	(TIMESPEC_NS): Remove.  All uses replaced by
	get_stat_mtime_ns.
	Include stat-time.h, strftime.h.
	(nstrtime): Remove decl.
	* src/diff.c: Revert most 2004-09-01 changes.  Then:
	Don't include <posixver.h>, <quotesys.h>, <setmode.h>.
	Include <sh-quote.h>, <stat-time.h>, <timespec.h>.
	All uses of quotesys replaced by sh-quote.
	(main, compare_files):
	Use freopen instead of setmode, since freopen is in POSIX.
	(main): Don't complain about "diff -NUM'.
	(main, set_mtime_to_now):
	Adjust to stat-time.h macros when accessing nanoseconds.
	* src/diff3.c: Include sh-quote.h rather than quotesys.  All uses
	changed.
	* src/dir.c (dir_read): excluded_filename renamed to
	excluded_file_name.
	* src/io.c: Don't include <setmode.h>.
	(sip, read_files): Remove binary file stuff, leaving a FIXME behind.
	A DOS expert needs to look at this.
	* src/diff.c: Include sh-quote.h rather than quotesys.h.
	All uses changed.
	* src/system.h: Include verify.h.
	(verify): Remove.  All uses changed to verify.h version.
	Include <intprops.h>.
	(TYPE_SIGNED, TYPE_MINIMUM, TYPE_MAXIMUM): Remove.  Now uses
	intprops.h versions.
	(O_BINARY): New defns, taken from coreutils.
	* src/util.c: Include sh-quote.h rather than quotesys.h.
	All uses changed.

2004-09-01  Paul Eggert  <eggert@cs.ucla.edu>

	* src/diff.c (recursive, new_file, unidirectional_new_file):
	(report_identical_files):
	Move into struct diffopt.  All uses changed.
	(exclude_options, compare_files, specify_style, check_stdout):
	New arg OPT.  All uses changed.
	(GDIFF_MAIN): Remove.  All uses removed.
	(function_regexp_list, ignore_regexp_list): No longer static; now
	locals in 'main'.
	(main): Set opt.function_regexp, opt.ignore_regexp if using regexps;
	all other code now tests these pointers rather than inspecting fastmap
	internals.
	New local OPT to hold former statics; initialize it.
	(init_regexp_list): New function, used by main.
	(summarize_regexp_list): Now returns struct re_pattern_buffer *, and
	assumes reglist->regexps is not NULL.  All uses changed.

	* src/context.c (find_function_last_search): Move into struct diffopt.
	All uses changed.
	(pr_context_label, pr_context_header,
	print_context_script, find_function, find_hunk, mark_ignorable,
	pr_context_hunk, pr_unidiff_hunk): New arg OPT.  All uses changed.
	(print_context_number_range,
	print_unidiff_number_range): New arg OUT.  All uses changed.

2004-07-19  Stepan Kasal  <kasal@ucw.cz>

	* src/ed.c (print_ed_hunk): Optimize the case where an insert's
	last line is a single-dot line.

2004-06-30  Paul Eggert  <eggert@cs.ucla.edu>

	* lib/setmode.c:
	Don't include <stdbool.h>, since setmode.h now does this.
	Include setmode.h first, to catch interface errors.
	Assume HAVE_SETMODE_DOS is defined.

	* lib/setmode.h: Include stdbool.h.

2004-04-26  Paul Eggert  <eggert@cs.ucla.edu>

	* bootstrap: Don't remove po/en.po.

2004-04-13  Paul Eggert  <eggert@twinsun.com>

	* NEWS, configure.ac (AC_INIT): Version 2.8.7.
	* configure.ac (AM_GNU_GETTEXT_VERSION): Add.
	(XGETTEXT): Restore from pre-2004-04-12 version.  This fixes
	a bug that lost many msgids in doc/diffutils.pot.
	* bootstrap: New file.
	* exgettext: Don't generate a temporary file, as this runs afoul
	of "make distcheck" which operates with read-only directories.
	* Makefile.am (EXTRA_DIST): Add bootstrap.
	Remove config/config.rpath as it is deduced automatically these days.

2004-04-12  Paul Eggert  <eggert@twinsun.com>

	* NEWS, configure.ac (AC_INIT): Version 2.8.6.

	* NEWS: Add news for 2.8.4, 2.8.6.

	* README: Move copyright notice to end.  Defer to "configure
	--help" for special "configure" options.  Suggest latest libiconv.
	Update version numbers of Autoconf etc. to current.

	* configure.ac: Quote various arguments better.
	(AC_CONFIG_MACRO_DIR): Add call, specifying "m4".
	(AC_CONFIG_HEADER): Replaces AM_CONFIG_HEADER.
	(gl_USE_SYSTEM_EXTENSIONS): Replaces AC_GNU_SOURCE.
	(AC_ISC_POSIX): Remove; nobody ports to ancient ISC any more.
	(AC_PROG_CPP, AC_PROG_INSTALL, AC_C_INLINE,
	AC_HEADER_STDBOOL, AC_HEADER_STDC, AM_GNU_GETTEXT, XGETTEXT,
	AC_HEADER_STAT, AC_FUNC_VPRINTF, jm_FUNC_GLIBC_UNLOCKED_IO,
	jm_FUNC_GNU_STRFTIME, jm_FUNC_MALLOC, jm_FUNC_REALLOC,
	jm_PREREQ_C_STACK, jm_PREREQ_ERROR, jm_PREREQ_HARD_LOCALE,
	jm_PREREQ_QUOTEARG, jm_PREREQ_REGEX, AC_FUNC_FNMATCH_GNU, jm_AC_DOS):
	Remove; not needed here, as our files don't use them directly
	or we rely on gnulib modules.
	(AC_C_CONST): Remove; we assume C89 now.
	(AC_CHECK_HEADERS): Remove libintl.h, limits.h, stdlib.h, string.h,
	time.h.
	(AC_CHECK_TYPE): Remove ptrdiff_t, ssize_t.
	(AC_CHECK_FUNCS): Remove diraccess, strchr, strerror, tmpnam).
	(AC_REPLACE_FUNCS): Remove memchr, mkstemp, strcasecmp.
	(GNULIB_AUTOCONF_SNIPPET): Add call.  This replaces much of
	the above.
	(AC_CONFIG_FILES): Remove lib/posix/Makefile.
	(AC_CONFIG_COMMANDS): Remove.

	* doc/diff.texi (dircategory): Change to "Text creation and
	manipulation" from "GNU packages".
	(Translations): New node.
	(Overview): Improve quality of algorithm citations.
	(Binary): -q doesn't exactly cause diff to assume files are binary.
	(Normal): Place after Side by Side, since it's less important.
	(Detailed Context, Detailed Unified, Detailed ed,
	Detailed if-then-else, diff3 Hunks, Detailed diff3 Normal):
	Place at end of menu.
	(Detailed Unified): Mention that fractional timestamps are
	omitted on hosts that don't support them.
	Mention what happens when hunks contain just one line.
	(Line Group Formats, Reject Names): Fix duplicate-word typos.
	(Comparing Directories): Trailing white space and empty lines are
	ignored in the -X file.
	(diff Options): Add --strip-trailing-cr.
	(Projects): gnu -> gvc@gnu.org.

	* lib/Makefile.am (SUBDIRS): Remove.
	(EXTRA_DIST, noinst_HEADERS): Remove most entries.
	(libdiffutils_a_SOURCES): Now just lib_SOURCES.
	(lib_SOURCES): New macro.
	(DISTCLEANFILES, MOSTLYCLEANFILES): Set to empty now.
	(gnulib.mk): Include: this does most of the work eliminated
	by the above changes.

	* lib/inttostr.c (inttostr): Protect i < 0 by compile-time
	test intended to suppress compiler warnings.
	* lib/inttostr.h: Include limits.h unilaterally.
	(CHAR_BIT): Remove.
	(PARAMS): Remove; all uses changed.
	* lib/setmode.c (__attribute__): New macro.
	(set_binary_mode): Define only if HAVE_SETMODE_DOS.
	Otherwise define a dummy static char, as C89 requires
	that we define something.
	* lib/setmode.h (set_binary_mode): Return true, not 1.

	* src/analyze.c, src/context.c, src/diff.c, src/io.c, src/util.c:
	Do not include regex.h, as diff.h does this now.

	* src/cmp.c: Sort includes.  Include <exit.h>, <unlocked-io.h>.
	(specify_comparison_type): Don't report an error if the comparison
	type has already been specified the same way as this one.

	* src/cmp.c (usage): Mention exit status.
	* src/diff.c (option_help_msgid): Likewise.
	* src/diff3.c (usage): Likewise.
	* src/sdiff.c (usage): Likewise.

	* src/cmp.c (main): Adjust to latest gnulib c_stack_action
	calling conventions.
	* src/diff.c (main): Likewise.
	* src/diff3.c (main): Likewise.
	* src/sdiff.c (main): Likewise.

	* src/cmp.c (main): Adjust to latest version_etc calling conventions.
	* src/diff.c (main): Likewise.
	* src/diff3.c (main): Likewise.
	* src/sdiff.c (main): Likewise.

	* src/diff.c: Include <exit.h>.
	(binary): Define to true if not declared.
	(longopts): Set tabsize flag to 1.
	(main): Don't output nanoseconds if platform lacks them.
	Don't treat files as binary if !binary.
	(set_mtime_to_now): Use 0, not NULL.
	(compare_files): Mark files as nonexistent if it looks like
	'patch' created inaccessible regular empty files to denote
	nonexistent backups.  Don't compare such files.
	Clear st_* members of status of	nonexistent file.
	Remove now-unnecessary tests.

	* src/diff.h: Include regex.h, unlocked-io.h.
	(struct file_data.changed): Now char *, not bool *, to save
	space on hosts where bool takes more space than char.
	All uses changed.

	* src/diff3.c: Include unlocked-io.h.
	(strip_trailing_cr): New var.
	(STRIP_TRAILING_CR_OPTION): New enum.
	(longopts, main, option_help_msgid, read_diff):
	Add --strip-trailing-cr support.
	(read_diff): Exit with status 126 (not 127) if errno != ENOENT
	after failed execvp in child.  Report this in parent.

	* src/dir.c: Include <strcase.h>.
	(failed_locale_specific_sorting): Renamed from failed_strcoll.
	All uses changed.
	(compare_names): Don't invoke strcasecmp first thing when
	ignore_file_name_case; if locale_specific_sorting, we should
	just use that.

	* src/ifdef.c (next_line): Remove; replace with...
	(next_line0, next_line1): New vars.
	(print_ifdef_script, print_ifdef_hunk):
	Use them to fix line-number computation bug.

	* src/io.c (find_and_hash_each_line): Don't convert char *
	to unsigned char *; just leave pointers as char *.  This
	lessens the number of potentially-dangerous casts.
	* src/util.c (lines_differ): Likewise.

	* src/sdiff.c: Include <unlocked-io.h>, <exit.h>.
	(check_child_status): Renamed from ck_editor_status, and
	accept a new arg MAX_OK_STATUS.  All callers changed.
	Handle status 126/127 as per POSIX.
	(edit): Likewise.
	(main): Likewise.  Fix getopt typo: -E wasn't supported.

	* src/system.h (S_IRWXU, S_IRWXG, S_IRWXO): Define if not defined.
	(S_IXUSR, S_IXGRP, S_IXOTH): Remove.
	Include <time.h> unconditionally, since we can assume C89 now.
	Likewise for <stdlib.h>, <string.h>.
	(getenv, EXIT_SUCCESS, EXIT_FAILURE, SSIZE_MAX, strchr, strrchr,
	memcmp, memcpy): Remove decl; no longer needed.
	(strcasecoll, strcasecmp): Define if not built in.
	(CTYPE_DOMAIN, ISPRINT, ISSPACE, TOLOWER, _tolower, errno): Remove;
	we now assume C89 or better.  All uses changed.
	Include <stdbool.h> unconditionally now, since gnulib supports it
	if the C compiler doesn't.  All boolean uses of 0 and 1 now
	changed to false and true.
	(lin_is_printable_as_long_int): Renamed from lin_is_printable_as_long.

	* src/util.c (begin_output): Fix bug: 0 wasn't cast to char * arg,
	which led to undefined behavior on 64-bit hosts.
	Use more-standard test for exit status 126 versus 127.
	(finish_output): Likewise.
	(analyze_hunk): Do not cast bool to int.

2004-03-15  Paul Eggert  <eggert@twinsun.com>

	* src/cmp.c (main): Don't consider two files with the same name to
	be the same, if their initial skip values differ.  This fixes a
	bug reported by Hideki Iwamoto in
	<http://mail.gnu.org/archive/html/bug-gnu-utils/2004-03/msg00024.html>.

2004-03-11  Paul Eggert  <eggert@twinsun.com>

	* src/analyze.c (diag): Return void, not lin, since the return
	value wasn't needed.  All callers changed.
	(diag, diff_2_files):
	Use 'true' and 'false' instead of '1' and '0', when appropriate.
	(compareseq): Use lin const * local variables instead of lin *.
	Don't bother checking diag's return value.
	(shift_boundaries, build_reverse_script, build_script, diff_2_files):
	Use char arrays, not bool arrays, since
	sizeof (bool) might be greater than 1.

2004-02-09  Paul Eggert  <eggert@twinsun.com>

	* m4/setmode.m4 (AC_FUNC_SETMODE_DOS): AC_LIBOBJ(setmode) if
	we would return true.

2002-10-14  Paul Eggert  <eggert@twinsun.com>

	* src/Makefile.am (diff3.$(OBJEXT), diff.$(OBJEXT),
	sdiff.$(OBJEXT)): Rename from (misspelled) diff3.$(OBJECT),
	diff.$(OBJECT), sdiff.$(OBJECT).  Patch by Paul D. Smith in
	<http://mail.gnu.org/pipermail/bug-gnu-utils/2002-October/003251.html>.
	Bug reported by Chris Bainbridge.

2002-10-13  Paul Eggert  <eggert@twinsun.com>

	* src/Makefile.am (MOSTLYCLEANFILES): Add paths.ht.
	(paths.h): Send output to paths.ht first, and then rename to
	paths.h at the end.  This avoids problems if the disk is full.
	It also works around what appears to be a bug with GNU make -j
	(3.79.1); see <http://bugs.gentoo.org/show_bug.cgi?id=8934>.

2002-06-27  Paul Eggert  <eggert@twinsun.com>

	* NEWS, configure.ac (AC_INIT): Version 2.8.4.

	* config/config.sub: Sync with latest version maintained in other
	packages.

	* lib/file-type.h: Protect against double inclusion.  Detect
	whether <sys/stat.h> has been included.  Fix from Jim Meyering.

	* src/analyze.c (briefly_report): Don't say "Binary files differ",
	since one of the files may not be a binary file.
	Bug reported by Dan Jacobson.

2002-06-22  Paul Eggert  <eggert@twinsun.com>

	* lib/c-stack.c (segv_handler, c_stack_action) [! defined
	SA_SIGINFO]: Do not assume SA_SIGINFO behavior.
	Bug reported by Jim Meyering on NetBSD 1.5.2.

2002-06-16  Paul Eggert  <eggert@twinsun.com>

	* NEWS, configure.ac (AC_INIT): Version 2.8.3.

	* config/depcomp, config/missing, README: Update to automake 1.6.2.

	* po/LINGUAS: Add en_US.
	* po/en_US.po: New file.
	* po/POTFILES.in: Remove lib/freesoft.c.
	Add lib/file-type.c, lib/version-etc.c, lib/xmalloc.c.

2002-06-15  Paul Eggert  <eggert@twinsun.com>

	* doc/diff.texi (Special Files): Document behavior of symlink
	loops.

	* lib/Makefile.am (noinst_HEADERS): Remove freesoft.h.
	Add version-etc.h.
	(libdiffutils_a_SOURCES): Remove freesoft.c.  Add version-etc.c.
	* lib/freesoft.c, lib/freesoft.h: Remove.
	* lib/version-etc.h (PARAMS): Remove; we now assume C89 at least.

	* lib/version-etc.h (version_etc): Remove package and version args.
	(version_etc_copyright): Remove.
	* lib/version-etc.c: Likewise.
	Do not include unlocked-io.h; no longer needed.
	Include gettext.h rather than libinto.h.
	(_): Define unconditionally.
	(version_etc): Adjust wording to match current GNU coding standards.
	Translate "(C)" if possible.

	* lib/version-etc.c, lib/version-etc.h: New files, taken from
	fileutils.

	* src/Makefile.am (cmp_SOURCES, diff3_SOURCES, sdiff_SOURCES,
	diff_SOURCES): Remove version.c.
	(MAINTAINERCLEANFILES, $(srcdir)/version.c): Remove.

	* src/cmp.c: Include version-etc.h, not freesoft.h.
	(copyright_notice): Remove.
	(main): Use version_etc to print version.
	* src/diff.c, src/diff3.c, src/sdiff.c: Likewise.

	* src/cmp.c (version_string): Remove decl.
	* src/diff.h, src/diff3.c, src/sdiff.c: Likewise.

2002-06-11  Paul Eggert  <eggert@twinsun.com>

	* lib/fnmatch.c, lib/fnmatch_loop.c (WIDE_CHAR_SUPPORT):
	New macro.  Use it uniformly instead of
	(defined HAVE_WCTYPE_H && defined HAVE_WCHAR_H).
	It also uses HAVE_BTOWC, to fix a porting bug on Solaris 2.5.1
	reported by Vin Shelton.
	* m4/fnmatch.m4 (_AC_LIBOBJ_FNMATCH): Check for btowc.

	* NEWS, configure.ac (AC_INIT): Version 2.8.2.

	* ABOUT-NLS, config/config.guess, config/config.sub,
	config/depcomp, config/texinfo.tex, lib/posix/regex.h,
	m4/c-bs-a.m4, m4/gettext.m4, m4/gnu-source.m4, m4/lib-link.m4,
	m4/malloc.m4:
	Update to recent version (maintained in other packages).
	* m4/prereq.m4 (jm_PREREQ_EXCLUSIVE): AC_FUNC_FNMATCH_GNU
	no longer takes a lib.

	* README: Incorporate contents from INSTALLME.
	* INSTALLME: Remove.
	* Makefile.am (EXTRA_DIST): Remove INSTALLME.

	* configure.ac (AC_GNU_SOURCE): Move up, so that it affects
	later compilations properly.
	(DEFAULT_DIFF_PROGRAM, AC_TYPE_SIGNAL): Remove.
	(jm_AC_TYPE_INTMAX_T): Add.
	(AC_FUNC_FNMATCH_GNU): Use this, instead of AC_FUNC_FNMATCH.
	(AC_CONFIG_LINKS): regex.hin renamed from regex_.h.

	* doc/diff.texi: Reword "@option{-f} and @option{--foo}" to
	"@option{-f} or @option{--foo}".
	Use @acronym instead of @sc where appropriate.
	(Specified Lines): Renamed from Specified Folding.
	(Comparison, Blank Lines):
	Clarify wordings for Blank Lines and Specified Lines nodes.
	(Binary): Mention --verbose and --print-bytes.
	(Tabs, sdiff Option Summary, diff Options):
	New option --tabsize=COLUMNS.

	* lib/Makefile.am (EXTRA_DIST): Add fnmatch_loop.c.
	(noinst_HEADERS): fnmatch_.h renamed from fnmatch.hin.
	regex_.h renamed from regex.hin.
	Add file-type.h.
	(libdiffutils_a_SOURCES): Add file-type.c.
	(DISTCLEANFILES): Remove fnmatch.hno, regex.hno.

	* lib/c-stack.c (__attribute__): New macro.
	(EOVERFLOW): Define if not defined.
	(stack_t): Define to struct sigaltstack if not defined or declared.
	Include <sys/resource.h>, <ucontext.h> if available.
	Include <stdio.h> if DEBUG.
	Do not include <inttypes.h> or <stdint.h>.
	(c_stack_die): Remove info and context args.  All uses changed.
	(segv_action): Likewise.
	(alternate_signal_stack): Change uintmax_t to long, to ease porting.
	(get_stack_location, min_address_from_argv, max_address_from_argv,
	null_action): New functions.
	(stack_base, stack_size): New vars.
	(segv_handler): context arg may not be used.
	Use global stack_base, stack_size if
	! HAVE_XSI_STACK_OVERFLOW_HEURISTIC.
	Add debug code.
	Invoke die (rather than segv_action) to exit.
	(c_stack_action): Accept new argv arg, and simpler handler arg.
	All uses changed.  Move code into new functions above.
	Allow null action.
	[! (defined SA_ONSTACK && defined _SC_PAGESIZE)]: Assume all segvs
	are stack overflows.
	(main) [DEBUG]: Describe what output should be like.

	* lib/c-stack.h (siginfo_t, c_stack_die): Remove decl.

	* lib/file-type.c, lib/file-type.h: New files.  These contain code
	that was in src/diff.c, but is now librarified and spiffed up a
	bit.  Jim Meyering suggested this.

	* lib/fnmatch.c (alloca, __builtin_expect): Define for non-GCC hosts.
	<strings.h>: Include only if HAVE_STRINGS_H.
	<stddef.h>: Include if we include stdlib.h.
	Do not comment out all code if ! HAVE_FNMATCH_GNU.
	(getenv): Do not declare if HAVE_DECL_GETENV.
	(__strchrnul, __wcschrnul): Remove; not used.
	(MEMPCPY): Use mempcpy if not _LIBC; use memcpy if neither _LIBC
	nor HAVE_MEMPCPY.
	(FOLD) [HANDLE_MULTIBYTE]: Do not pass wide char to ISUPPER.
	(STRLEN, STRCAT, MEMPCPY) [HANDLE_MULTIBYTE && !defined _LIBC]:
	Use wcslen rather than __wcslen, and likewise for wcscat, wmempcpy.
	(MEMPCPY) [HANDLE_MULTIBYTE]: Use wmempcpy if not _LIBC; use wmemcpy
	if neither _LIBC nor HAVE_WMEMPCPY.
	* lib/fnmatch_.h (__const): Do not define to empty, as this breaks
	Sun cc.  The code doesn't work with K&R anyway.
	* lib/fnmatch_loop.c (struct patternlist.str): Size 1, not 0,
	as C89 requires this.
	(NEW_PATTERN): Use offsetof, not sizeof, since str now has size 1.
	* lib/fnmatch_.h: Import from glibc fnmatch.h.
	* lib/fnmatch.c, lib/fnmatch_loop.c: Import from glibc.

	* lib/posixver.c: Include posixver.h.

	* lib/regex_.h: Renamed from lib/regex.hin.

	* m4/c-stack.m4 (jm_PREREQ_C_STACK): Do not AC_REQUIRE
	jm_AC_TYPE_UINTMAX_T and do not use uintmax_t.
	Check for sys/resource.h, uccontext.h.
	Check for decls and existence of getcontext, sigaltstack.
	Check for stack_t.

	* m4/codeset.m4, m4/glibc21.m4, m4/lcmessage.m4: Remove.

	* m4/fnmatch.m4: Update to latest Autoconf CVS for AC_FUNC_FNMATCH_GNU.
	* m4/gnu-source.m4: Likewise, for AC_GNU_SOURCE (renamed from
	AC__GNU_SOURCE).

	* m4/mbstate_t.m4 (AC_TYPE_MBSTATE_T): Renamed from AC_MBSTATE_T.
	All uses changed.  Upgrade to recent Autoconf CVS.

	* m4/stdbool.m4 (AC_HEADER_STDBOOL): Do not cast pointer to
	bool in integer constant expression; C99 does not allow it.
	Reported by Bruno Haible.

	* po/LINGUAS: Add hu, pt_BR.
	* po/hu.po, po/pt_BR.po: New files.

	* src/Makefile.am (noinst_HEADERS): Remove diff.h.
	(DEFS): Remove.
	(diff_sources): Add diff.h.
	(MOSTLYCLEANFILES): New macro.
	(cmp.$(OBJEXT) diff3.$(OBJECT) diff.$(OBJECT) sdiff.$(OBJECT)): Depend
	on paths.h.
	(paths.h): New rule.

	* src/analyze.c, src/cmp.c, src/diff.c, src/diff3.c, src/io.c,
	src/sdiff.c: Include <file-type.h>.

	* src/cmp.c: Include paths.h.
	(copyright_notice): Renamed from copyright_string.
	Now a msgid, so that copyright symbol can be translated.
	All uses changed.
	* src/diff.c, src/diff3.c, src/sdiff.c: Likewise.

	* src/diff.c: Include posixver.h.
	(TABSIZE_OPTION): New constant.
	(main): Allow widths up to SIZE_MAX.
	(filetype): Move to lib/file-type.c and rename to file_type.
	All uses changed.

	* src/diff.c (longopts, main, usage): New option --tabsize=COLUMNS.
	* src/io.c (find_and_hash_each_line): Likewise.

	* src/diff.h (TAB_WIDTH): Remove.
	(tabsize): New decl.
	(sdiff_half_width, sdiff_column2_offset): Now size_t rather than
	unsigned int.

	* src/diff3.c (skipwhite, readnum): New functions.
	(process_diff_control): Use them.
	(SKIPWHITE, READNUM): Remove.
	(read_diff): Don't worry about errno == ENOEXEC.

	* src/sdiff.c (catchsig, signal_handler, initial_action): Signal
	handlers return void, not RETSIGTYPE, since we no longer support
	K&R.
	(TABSIZE_OPTION): New constant.
	(longopts, usage, main): New option --tabsize=COLUMNS.
	(cleanup): New arg signo.  All uses changed.
	(ck_editor_status, main, edit): Don't worry about ENOEXEC.

	* src/side.c (tab_from_to, print_half_line, print_1sdiff_line):
	New option --tabsize=COLUMNS.

	* src/system.h (S_ISBLK, S_ISCHR, S_ISDIR, S_ISFIFO, S_ISREG,
	S_ISSOCK): Remove; now in lib/file-type.h.

	* src/util.c (finish_output): Check for ENOEXEC.
	(lines_differ, output_1_line): New option --tabsize=COLUMNS.
	(analyze_hunk): If -b or -w is also specified, -B now considers
	lines to be empty if they contain only white space.

2002-04-05  Paul Eggert  <eggert@sic.twinsun.com>

	* NEWS, configure.ac (AC_INIT): Version 2.8.1.

	* configure.ac (AC_HEADER_STDBOOL): Add.
	(AC_CHECK_HEADERS): Remove stdbool.h.
	* m4/stdbool.m4: New file.
	* m4/prereq.m4 (jm_PREREQ_EXCLUDE):
	Use AC_HEADER_STDBOOL rather than AC_CHECK_HEADERS(stdbool.h).
	(jm_PREREQ_HASH): Likewise.

	* src/system.h (SSIZE_MAX): Define if limits.h doesn't.

	* src/analyze.c (diff_2_files): Assign PTRDIFF_MAX - 1 to a
	size_t variable, just in case there's a problem with ptrdiff_t
	versus size_t.

	* lib/cmpbuf.c (errno): Remove decl; K&R C is no longer supported.
	Include limits.h.
	(SIZE_MAX, SSIZE_MAX): Define if standard headers don't.
	(MIN): New macro.
	(block_read): Do not attempt to read more than SSIZE_MAX bytes, as the
	resulting behavior is implementation-defined.  Work around bug in
	Tru64 5.1, which can't read more than INT_MAX bytes at a time.
	* src/cmp.c (cmp): Use block_read instead of read, to work
	around Tru64 5.1 bug.
	* src/diff3.c (read_diff): Likewise.
	* src/diff3.c: Include cmpbuf.h.

	* THANKS: Add Ulrich Drepper.

	* INSTALLME: Mention GNU texinfo.

	* doc/diff.texi:
	Use new @copying directive.
	Put @contents first, not last, since Texinfo now suggests this.
	Fix bug in -w documentation noted by Karl Berry.
	Mention links for speedup.
	New node "Speedups" for future speedups.
	Just say "Index", not "Concept Index".

2002-03-26  Paul Eggert  <eggert@twinsun.com>

	* src/Makefile.am:
	(INCLUDES): Remove this obsolete macro,	replacing it with:
	(AM_CPPFLAGS): New macro.

2002-03-26  Albert Chin-A-Young  <china@thewrittenword.com>

	* src/Makefile.am (datadir): Remove, as it conflicts with --datadir.

2002-03-26  Paul Eggert  <eggert@twinsun.com>

	* doc/diff.texi (dircategory GNU packages): Fix typo: a "* " was
	missing before the menu entry.  Bug diagnosed by Adam Heath.
	Also, put this dircategory after the Individual utilities dircategory,
	to work around a compatibility problem with Debian install-info.

2002-03-24  Eli Zaretskii  <eliz@is.elta.co.il>

	* src/io.c (sip): Do not mishandle buffered count when reverting
	to text mode.

2002-03-23  Paul Eggert  <eggert@twinsun.com>

	* NEWS, configure.ac (AC_INIT): Version 2.8.
	* configure.ac (AC_PREREQ): 2.53.
	* INSTALLME: Upgrade to gettext 0.11.1 and help2man 1.27.

	* doc/diff.texi: Upgrade the description of `patch' to GNU patch
	2.5.4, and revamp the documentation accordingly.

	* src/diff.c (main): Fix typo that prevented diff -y from working.
	Bug reported by Mitsuru Chinen.

2002-03-15  Paul Eggert  <eggert@twinsun.com>

	* lib/c-stack.c (c_stack_die) [!HAVE_SIGINFO_T]: Don't use info.
	Bug reported by Eli Zaretskii.

2002-03-15  Eli Zaretskii  <eliz@is.elta.co.il>

	* ms/config.sed: Tweak editing of install-info-am target.

2002-03-12  Paul Eggert  <eggert@twinsun.com>

	* NEWS, configure.ac (AC_INIT): Version 2.7.10.

	* NEWS: cmp -l -s and cmp -s -l are not allowed.
	Deprecate diff -h, -H, -L, -P, --inhibit-hunk-merge.

	* configure.ac (jm_PREREQ_HARD_LOCALE): Add.
	(AM_INIT_AUTOMAKE): Do not distribute shar file.

	* doc/diff.texi (Overview): byte != character.
	(Detailed Context, Detailed Unified, Alternate Names, diff Options):
	Do not document diff -L.
	(Comparing Directories, Making Patches, diff Options):
	Do not document diff -P.
	(diff Performance, sdiff Option Summary, diff Options, sdiff Options):
	Do not document diff -H.
	(diff Performance, diff Options): Do not document --horizon-lines.
	(cmp Options): Prefer -b to -c.
	(cmp Options, diff Options, diff3 Options, patch Options,
	sdiff Options): Put short options next to the similar long options.
	Document --help, and use the same wording for --verbose.
	(diff3 Options): Fix typo in description of -E, which used wrongly used
	"-e" instead of "-E".

	* lib/hard-locale.c (alloca): Remove.
	Include stdlib.h if available, for malloc.
	(hard_locale): Use malloc, not alloca, so that we need not worry about
	alloca issues.  Test for storage allocation failure.

	* m4/prereq.m4 (jm_PREREQ): Add jm_PREREQ_HARD_LOCALE.
	(jm_PREREQ_HARD_LOCALE): New macro.

	* src/cmp.c (specify_comparison_type): New function.
	(check_stdout): "indices and codes" -> "byte numbers and values"
	(main): Detect clashing options.
	(cmp): Use "byte" rather than "char" if a translation for "byte"
	is available, even when in the POSIX locale.

	* src/diff.c (option_help_msgid): Do not document -L, -P,
	--horizon-lines, --inhibit-hunk-merge, -H.
	* src/diff.h: -L -> --label

2002-03-11  Paul Eggert  <eggert@twinsun.com>

	* NEWS, configure.ac (AC_INIT): Version 2.7.9.

	* INSTALLME: Update to autoconf 2.53, automake 1.6, help2man
	1.25 with patch.

	* configure.ac (AC_INIT):
	Change package name from diff to diffutils.
	(AM_INIT_AUTOMAKE): Use new form, with option gnits,
	rather than old from that duplicated AC_INIT.
	(AM_MISSING_PROG): Add help2man.
	(REGEX_MALLOC): Define.
	(AC_CONFIG_FILES): Add man/Makefile.

	* Makefile.am (AUTOMAKE_OPTIONS): Remove.
	* doc/Makefile.am (AUTOMAKE_OPTIONS): Remove.
	* lib/Makefile.am (AUTOMAKE_OPTIONS): Likewise.
	* ms/Makefile.am (AUTOMAKE_OPTIONS): Likewise.
	* src/Makefile.am (AUTOMAKE_OPTIONS): Likewise.

	* lib/c-stack.c: Include <errno.h>
	(ENOTSUP): Define if errno.h doesn't.
	(SA_NODEFER, SA_ONSTACK, SA_RESETHAND, SA_SIGINFO, SIGSTKSZ,
	_SC_PAGESIZE, ALTERNATE_STACK_SIZE, stack_t, sigaltstack):
	Remove; we now assume them all when
	HAVE_XSI_STACK_OVERFLOW_HEURISTIC, so we don't need
	substitutes.
	(<ucontext.h>): Include only if HAVE_XSI_STACK_OVERFLOW_HEURISTIC.
	(alternate_signal_stack): Now of size SIGSTKSZ.
	(segv_handler): Simplify, under the assumption that
	HAVE_XSI_STACK_OVERFLOW_HEURISTIC is nonzero.
	(c_stack_action): Likewise.
	(exit_failure) [DEBUG]: Initialize to 0, not 1.
	(recurse, main) [DEBUG]: Remove main args.

	* m4/c-stack.m4 (AC_SYS_XSI_STACK_OVERFLOW_HEURISTIC): Change
	wording of message.  Do not check for stdbool.h or ucontext.h,
	or for ucontext_t or sigaction or sigaltstack.

	* po/LINGUAS: Add zh_TW.

	* Makefile.am (SUBDIRS): Add man.
	* man/Makefile.am: New file.
	* src/cmp.c (usage): Reword for help2man.
	* src/diff.c (option_help_msgid): Likewise.
	* src/diff3.c (option_help_msgid, usage): Likewise.
	* src/sdiff3.c (option_help_msgid, usage): Likewise.
	Reword for help2man.

	* THANKS: Add email address for Tower.

	* config/config.guess, config/config.sub, config/depcomp,
	config/install-sh, config/mdate-sh, config/missing,
	config/mkinstalldirs, config/texinfo.tex: Update
	to recent version (maintained in other packages).

2002-03-04  Bruno Haible <haible@ilog.fr>

	* m4/gettext.m4 (AM_GNU_GETTEXT): Set LIBINTL and LTLIBINTL to empty if
	no preinstalled GNU gettext was found.

2002-03-02  Eli Zaretskii  <eliz@is.elta.co.il>

	* ms/config.sed: Tweak editing of install-info-am and
	uninstall-info-am targets, to include 8+3-butchered names of Info
	files.

2002-02-28  Paul Eggert  <eggert@twinsun.com>

	* NEWS, configure.ac (AC_INIT, AM_INIT_AUTOMAKE): Version 2.7.8.

	* doc/diff.texi: Add vr index.
	Update copyright to 2002.
	(Standards conformance): New chapter.
	(Binary): Differing binary files are trouble unless the user asked for
	brief output.
	(Detailed Context): Prefer ISO time stamp format in discussion.
	(Detailed Unified, Pagination): Likewise.
	(Less Context): Likewise.  Also use short option.
	(Alternate Names): Separate option from arg.
	(Making Patches): Mention -U 2.
	(diff Options): Deprecate -LINES, as POSIX 1003.1-2001 does not
	allow it.

	* INSTALLME: Update advice for Solaris installation problems.
	We no longer use a test version of gettext.
	Autoconf test version updated from 2.52f to 2.52h.
	POSIX 1003.1-2001 patch for Automake.

	* configure.ac (AC__GNU_SOURCE): Add this,
	replacing AH_VERBATIM of _GNU_SOURCE.
	(tempname): Use AC_LIBOBJS, not LIBOBJS=, as now required by autoconf.
	(jm_PREREQ_C_STACK): Add.
	(AC_CONFIG_FILES): Remove intl/Makefile.
	(AM_GNU_GETTEXT): Add external arg, from gettext 0.11.

	* lib/c-stack.c, lib/c-stack.h, lib/exitfail.c, lib/exitfail.h,
	lib/posixver.c, lib/posixver.h, m4/c-stack.m4, m4/gnu-source.m4,
	po/cs.po, po/ja.po: New files.

	* intl/ChangeLog, intl/Makefile.in, intl/VERSION,
	intl/bindtextdom.c, intl/config.charset, intl/dcgettext.c,
	intl/dcigettext.c, intl/dcngettext.c, intl/dgettext.c,
	intl/dngettext.c, intl/explodename.c, intl/finddomain.c,
	intl/gettext.c, intl/gettextP.h, intl/gmo.h, intl/hash-string.h,
	intl/intl-compat.c, intl/l10nflist.c, intl/libgnuintl.h,
	intl/loadinfo.h, intl/loadmsgcat.c, intl/localcharset.c,
	intl/locale.alias, intl/localealias.c, intl/localename.c,
	intl/ngettext.c, intl/os2compat.c, intl/os2compat.h, intl/osdep.c,
	intl/plural-eval.c, intl/plural-exp.c, intl/plural-exp.h,
	intl/plural.c, intl/plural.y, intl/ref-add.sin, intl/ref-del.sin,
	intl/textdomain.c, m4/isc-posix.m4, m4/libtool.m4: Remove.

	* ABOUT-NLS: Update to Gettext 0.11.

	* Makefile.am (SUBDIRS): Remove intl.

	* config/config.guess, config/config.rpath, config/config.sub,
	config/texinfo.tex, config/depcomp, config/texinfo.tex,
	lib/tempname.c: Update to latest version from other packages.

	* lib/xalloc.h (xalloc_exit_failure): Remove; subsumed by exit_failure.
	* lib/xmalloc.c: Include exitfail.h.
	(xalloc_exit_failure): Remove; subsumed by exit_failure.
	All uses changed.

	* lib/Makefile.am (noinst_HEADERS): Add c-stack.h, exitfail.h.
	(libdiffutils_a_SOURCES): Add c-stack.c, exitfail.c, quotesys.c.
	(INCLUDES): Remove.

	* lib/cmpbuf.h (buffer_lcm): New arg LCM_MAX.
	* lib/cmpbuf.c: Include errno.h.
	(errno): Declare if !STDC_HEADERS.
	Include signal.h.
	(SA_RESTART): Define if not already defined.
	Include <inttypes.h>.
	(PTRDIFF_MAX): Define if not already defined.
	(TYPE_SIGNED, TYPE_MINIMUM, TYPE_MAXIMUM): Likewise.
	(block_read): Accommodate ancient AIX hosts that set errno to EINTR
	after uncaught SIGCONT.
	(buffer_lcm): Return a reasonable size if the multiple is too large.
	New arg LCM_MAX.  All callers changed.

	* lib/hard-locale.c: Include "hard-locale.h".
	(hard_locale): Ignore ENABLE_NLS, since we want to operate on
	locales other than LC_MESSAGES.

	* m4/prereq.m4 (jm_PREREQ): Add jm_PREREQ_POSIXVER.
	(jm_PREREQ_POSIXVER): New macro.

	* m4/setmode.m4 (AC_FUNC_SETMODE_DOS):
	Check for fcntl.h and unistd.h unconditionally.
	Suggested by Bruno Haible.

	* po/LINGUAS: Add cs, ja.
	* po/POTFILES.in: Add lib/c-stack.c, src/dir.c.

	* src/Makefile.am (datadir): @DATADIRNAME@ -> share.
	(INCLUDES): Remove intl.
	(LDADD): Change INTLLIBS to LIBINTL.
	No longer need to link libdiffutils.a twice.

	* src/analyze.c (diff_2_files):
	Avoid arithmetic overflow in buffer size calculation.

	* src/cmp.c: Include c-stack.h, exitfail.h.
	(hard_locale_LC_MESSAGES): Depend on ENABLE_NLS.
	(try_help, check_stdout, main, cmp): 2 -> EXIT_TROUBLE.
	(main): Check for stack overflow.
	0 -> EXIT_SUCCESS.
	1 -> EXIT_FAILURE.
	(cmp): Likewise.
	Accommodate ancient AIX hosts that set errno to
	EINTR after uncaught SIGCONT.

	* src/context.c (pr_context_hunk):
	Do not dump core if an enormous context causes an
	arithmetic overflow.
	(pr_unidiff_hunk): Likewise.
	(find_hunk): Likewise.

	* src/diff.h: unsigned -> unsigned int.
	* src/diff.c: Include c-stack.h, exitfail.h.
	Do not include signal.h.
	(specify_style, specify_value): Bring these routines back, as POSIX
	requires that the order of options not matter.
	(shortopts): New constant.
	(group_format_option, line_format_option): New constants.
	(main): 0 -> EXIT_SUCCESS, 1 -> EXIT_FAILURE, 2 -> EXIT_TROUBLE.
	Ensure that order of options does not matter.
	Check for stack overflow.
	If contexts overflow, substitute LIN_MAX, as that's good enough.
	If multiple contexts are specified, use their maximum.
	-c is equivalent to -C 3 now, instead of having an implicit context;
	likewise for -u and -U 3.
	Use specify_style and specify_value.
	(SIGCHLD): Do not define; now done in a header.
	Use new style time stamp format for -u / -U.
	Reject numeric-string options if operating in POSIX 1003.1-2001 mode.
	Avoid overflow problems with tab width.
	Simplify from-file and to-file code.
	(usage): Do not mention obsolete options.
	(filetype): Do not mention whether a file is executable.
	Add typed memory objects.
	(compare_files): 0 -> EXIT_SUCCESS, 1 -> EXIT_FAILURE, 2 ->
	EXIT_TROUBLE.

	* src/diff3.c: Include c-stack.h, exitfail.h.
	(ALLOCATE): Remove.  All uses changed to xmalloc, or to xmalloc plus
	an overflow check.
	(myread): Remove.
	(main): Check for stack overflow.
	0 -> EXIT_SUCCESS, 1 -> EXIT_FAIULRE, 2 -> EXIT_TROUBLE.
	(try_help): Likewise.
	(process_diff): Check for integer overflow, to avoid core dumps.
	2 -> EXIT_TROUBLE.
	(read_diff): Exit with status 126 if the file is not executable,
	for compatibility with POSIX 1003.1-2001.
	Accommodate ancient AIX hosts that set errno to EINTR after uncaught
	SIGCONT.
	Check for integer overflow to avoid core dumps.
	(fatal, perror_with_exit): 2 -> EXIT_TROUBLE.

	* src/dir.c (dir_read):
	Ignore st_size of directories: POSIX says it's garbage.
	Check for integer overflow to avoid core dumps.
	(diff_dirs): 0 -> EXIT_SUCCESS, 2 -> EXIT_TROUBLE.

	* src/ifdef.c: Include <xalloc.h>.
	(format_group, print_ifdef_lines): Avoid core dumps with bad formats.
	(do_printf_spec): Avoid alloca.

	* src/io.c (sip):
	Avoid integer overflow and core dumps if buffer alignments are
	preposterously incompatible.
	(slurp): Do not dump core if the file is growing as we read it.
	If a regular file grows, keep reading until we catch up with its EOF.
	(find_and_hash_each_line): Check for integer overflow to avoid cores.
	(GUESS_LINES): Remove.
	(guess_lines): New function.  Avoid integer overflow.
	(find_identical_ends): Use it.
	Avoid integer overflow and possible core dumps.

	* src/sdiff.c: Include c-stack.h, exitfail.h.  Do not include signal.h.
	0 -> EXIT_SUCCESS, 1 -> EXIT_FAILURE, 2 -> EXIT_TROUBLE.
	(ck_editor_status): New function.
	(main): Check for stack overflow.
	Adopt POSIX convention for subsidiary programs not found.
	(diffarg): Check for integer overflow to avoid core dumps.
	(trapsigs): Remove SA_INTERRUPT special case; now done by header.
	(SIGCHLD): Likewise.
	(edit): Adopt POSIX convention for subsidiary programs not found.

	* src/side.c: unsigned -> unsigned int.

	* src/system.h: Don't use alloca or include <alloca.h>.
	unsigned -> unsigned int
	(EXIT_SUCCESS, EXIT_FAILURE, EXIT_TROUBLE): Define if not defined.
	Include signal.h.
	(SA_RESTART): Define if not defined.
	(SIGCHLD): Likewise.

	* src/util.c: 2 -> EXIT_TROUBLE.
	Adopt POSIX convention for ENOEXEC and exit status 126.
	unsigned -> unsigned int

2002-01-24  Paul Eggert  <eggert@twinsun.com>

	* NEWS, configure.ac (AC_INIT, AM_INIT_AUTOMAKE): Version 2.7.7.

	* intl/plural.c: Regenerate with Bison 1.31.

	* ABOUT-NLS, intl/*: Update to Gettext 0.11-pre5++.
	* INSTALL: Update to Autoconf 2.52f.

	* INSTALLME: New file.
	* Makefile.am (EXTRA_DIST): Add config/config.rpath, INSTALLME.
	(DISTCLEANFILES): Remove.
	* NEWS: Reformat for imminent 2.8 release.
	* README: Mention INSTALLME.
	* README-alpha: Move most of contents to INSTALLME.
	* THANKS: Add Bruno Haible, Jim Meyering, and Eli Zaretskii.

	* config: New subdirectory, containing the following files from .:
	config.guess, config.sub, depcomp, missing, install-sh, mkinstalldirs.
	Move the following files here from doc: texinfo.tex, mdate-sh.
	* config/config.guess, config/config.sub, config/texinfo.tex:
	Update to latest version from FSF.
	* config/config.rpath: New file, from Gettext 0.11-pre5++.

	* configure.ac (AC_INIT): Use new 3-arg form.
	(AC_CONFIG_SRCDIR): Specify src/diff.c here, not in AC_INIT.
	(ALL_LINGUAS): Remove: now in po/LINGUAS as per Gettext 0.11.
	(AC_CONFIG_AUX_DIR): New macro invocation.

	* lib/Makefile.am (noinst_HEADERS): Add gettext.h.
	* lib/gettext.h: New file, from Gettext 0.11-pre5++.
	* lib/prepargs.c: Include <string.h>.  Reported by Bruno Haible.

	* m4/codeset.m4, m4/gettext.m4, glibc21.m4, iconv.m4, isc-posix.m4,
	lcmessage.m4, progtest.m4: Upgrade to Gettext 0.11-pre5++.
	* m4/lib-ld.m4, m4/lib-link.m4, m4/lib-prefix.m4: New files, from
	Gettext 0.11-pre5++.

	* po/LINGUAS: New file.
	* po/Makefile.in.in: Upgrade to Gettext 0.11-pre5++.
	* po/Makevars, po/Rules-quot, po/boldquot.sed: New files,
	from Gettext 0.11-pre5++.

	* src/cmp.c (copyright_string): Update to 2002.
	* src/diff.c (copyright_string): Likewise.
	* src/diff3.c (copyright_string): Likewise.
	* src/sdiff.c (copyright_string): Likewise.

	* src/cmp.c (specify_ignore_initial): Renamed from
	parse_ignore_initial, with different signature, to take the
	maximum of multiple options rather than the last one.
	All uses changed.

	* src/cmp.c (bytes, specify_ignore_initial, cmp): Use UINTMAX_MAX
	instead of (uintmax_t) -1, to avoid warnings on some compilers.
	* src/io.c (file_block_read): Likewise, for SIZE_MAX.

	* src/cmp.c (usage): Reformat messages to ease translation.
	* src/diff3.c (usage): Likewise.
	* src/sdiff.c (usage): Likewise.

	* src/cmp.c (main): Two files with the same name are identical
	only if the same offset is specified.
	(block_compare_and_count): Avoid cast to unsigned char.

	* src/diff3.c (main): Remove unused variable.

	* src/dir.c: Include <setjmp.h>
	(struct dirdata): New member nnames.
	(locale_specific_sorting, failed_strcoll): New vars.
	(dir_read): Renamed from dir_sort.  Don't sort the dir.
	Set new nnames member of struct dirdata.  All callers changed.
	(compare_names): Don't check for errno after strcasecmp.
	Use strcoll only if locale_specific_sorting is nonzero.
	If strcoll fails, longjmp out rather than returning a value
	that might result in an invalid comparison function that might
	make qsort dump core.
	(diff_dirs): Sort the directory ourselves.  Use setjmp to recover
	from strcoll failure, falling back on native byte comparison.
	Make local variables volatile if they need to preserve their value
	after setjmp/longjmp.

	* src/sdiff.c (handler_index_of_SIGINT, handler_index_of_SIGPIPE):
	New macros.
	(main): Do not confuse signal numbers with their indices.
	Bug reported by Bruno Haible.
	(edit): Cat lin to long before printing with %ld, since lin might
	be narrow than long.

	* src/system.h (UINTMAX_MAX): New macro.
	Include gettext.h, not libgettext.h.
	(N_): Do not wrap arg in parentheses.  Fix from Bruno Haible.

	* src/util.c (finish_output): Ensure that werrno is initialized.
	(lines_differ): Have an explicit do-nothing case for
	IGNORE_NO_WHITE_SPACE, to pacify gcc -Wall.

2001-12-29  Eli Zaretskii  <eliz@is.elta.co.il>

	* src/sdiff.c (interact): After extracting rlen from the editor
	command, test for a terminating null character, not for a newline.

	* ms/config.bat: Allow longer source directory names without
	overflowing the line length limits.  Create the cache in the
	build directory, not in the source directory
	* ms/config.sed: Fix AC_CONFIG_LINKS for when symlinks are
	unavailable.

2001-12-23  Paul Eggert  <eggert@twinsun.com>

	* NEWS, configure.ac (AM_INIT_AUTOMAKE): Version 2.7.6.

	* configure.ac (ALL_LINGUAS): Add tr.

	* src/util.c (begin_output):
	Have child exit with status 127 rather than reporting
	failure on its own.  Set errno to 0 before invoking popen.
	(finish_output): Report errno on pclose failure.
	Distinguish between subsidiary program not found, and failure.

	* src/sdiff.c (not_found, execdiff): Remove.
	(DIFF_PROGRAM_OPTION): New constant.
	(longopts, option_help_msgid, main): Add --diff-program=PROGRAM.
	(check_stdout): New function.
	(main): Remove DIFF_PROGRAM.  Check stdout after printing version.
	Use check_stdout after printing help.  Use execvp/perror_fatail rather
	than execdiff.  Set errno to 0 before invoking popen.
	Check for pclose failure properly.
	(main, edit): If child exec fails, exit with 127 rather than trying to
	print diagnostic.
	Distinguish between subsidiary program failing and not being found.
	(edit): Handle signals the same way, regardless of whether we're using
	system or fork+exec.  Check for system returning -1.

	* src/diff3.c (DIFF_PROGRAM_OPTION, HELP_OPTION): New constants.
	(longopts, main): Use them.
	(longopts, main, option_help_msgid): New option --diff-option=PROGRAM.
	(main): Remove DIFF_PROGRAM support.
	Check stdout after printing version.
	(check_stdout): Report errno info if fclose fails.
	(read_diff): Have child exit with status 127 when program is not found,
	rather than trying to have the child report failure.  Check for
	pclose returning -1.

	* src/diff.c (DEFAULT_WIDTH): Remove.
	(main): Use 130 instead of DEFAULT_WIDTH, since it's not really
	builder-settable.  Do not prepend DIFF_OPTIONS.
	(check-stdout): If fclose (stdout) fails, print errno info.
	(option_help_msgid): Default context is 3, not 2.
	(usage): Work even if ptrdiff_t is wider than int.

	* doc/diff.texi (diff Options): Remove DIFF_OPTIONS.
	(Invoking diff3, Invoking sdiff): Remove DIFF_PROGRAM.
	(diff3 Options, sdiff Options): Add --diff-program.

	* src/cmp.c (valid_suffixes):
	Add '0', to support suffixes like "MB" and "MiB".
	(check_stdout): Don't assume that the translations of "write failed"
	and of "standard output" lack '%'.
	(main): Check stdout after printing version.

	* lib/setmode.c: [HAVE_FCNTL_H && HAVE_SETMODE_DOS]: Include <fcntl.h>.
	[!HAVE_SETMODE_DOS]: Do not include <unistd.h>.
	(set_binary_mode): Return mode (not 1) if fd is a tty.
	Do not assume that O_TEXT is zero.

	* doc/diff.texi (cmp Options):
	In byte counts, a plain suffix (without any integer)
	is assumed to modify the integer 1.  Index terms like "kibibyte".
	Document plain "k".

	(Reporting Bugs): Mention bug-report archive and test version
	location.  Ask for "diff --version" in bug reports.

2001-12-13  Paul Eggert  <eggert@twinsun.com>

	* src/diff.c (DEFAULT_WIDTH): Remove; couldn't be changed without
	also changing option_help_msgid.  All uses replaced with 130.

	* lib/setmode.c: Include fcntl.h and unistd.h only if
	HAVE_SETMODE_DOS.
	(setmode): Assume a file is binary unless the mode is O_TEXT.
	* ms/README: Fix minor typos.

2001-12-13  Eli Zaretskii  <eliz@is.elta.co.il>

	* ms/README: New file.

	* lib/setmode.c (set_binary_mode) [HAVE_SETMODE_DOS]: Don't assume
	O_TEXT has a zero value.  If FD is a terminal device, do nothing
	and return MODE, thus pretending that it was already in the
	requested MODE.
	[HAVE_FCNTL_H]: Include fcntl.h (needed for O_BINARY).

	* ms/config.sed: Remove the split prevention of config.status.
	Fix Sed commands for converting absolute file names into
	top_srcdir-relative ones.

	* ms/config.bat: Fix typos.

2001-12-12  Neal H Walfield  <neal@cs.uml.edu>

	* diff.c (option_help_msgid): Correct the default context width
	from 2 to 3.

2001-12-11  Paul Eggert  <eggert@twinsun.com>

	* m4/Makefile.am.in: Remove jm-glibc-io.m4

	* NEWS, configure.ac (AM_INIT_AUTOMAKE): Version 2.7.5.

	* configure.ac (PR_PROGRAM): Use AC_DEFINE_UNQUOTED, so that
	$PR_PROGRAM is expanded by sh.
	(ptrdiff_t, ssize_t): Use AC_CHECK_TYPE with a default of int,
	not AC_CHECK_TYPES.
	(jm_AC_DOS, AC_FUNC_SETMODE_DOS): New macros.
	(AC_CONFIG_FILES): Add ms/Makefile.

	* doc/diff.texi: Add --no-ignore-file-name-case.
	File name case sensitivity now affects file name exclusion.
	Fix typos.

	* src/util.c: Include dirname.h.
	(dir_file_pathname): Use base_name rather than file_name_lastdirchar.

	* src/system.h (S_IXUSR, S_IXGRP, S_IXOTH): New macros.
	Include <libgettext.h> rather than rolling it ourselves.
	(file_name_lastdirchar, HAVE_SETMODE, set_binary_mode): Remove.

	* src/sdiff.c: Include <dirname.h>.
	(expand_name): Use base_name rather than file_name_lastdirchar, for
	portability to DOS.
	(main): Initialize xalloc_exit_failure before possibly invoking
	any memory allocator.

	* src/io.c: Include setmode.h.

	* src/diff3.c (main):
	Initialize xalloc_exit_failure before possibly invoking any memory
	allocator.

	* src/diff.c: Include dirname.h, setmode.h.

	(main): Later values and/or styles now silently override earlier.
	(specify_value, specify_style): Likewise.  All callers changed.
	Remove.
	(binary, main, option_help_msgid, compare_files):
	HAVE_SETMODE -> HAVE_SETMODE_DOS.
	(NO_IGNORE_FILE_NAME_CASE_OPTION): New constant.
	(longopts, main, option_help_msgid): Support it.
	(exclude_options): New function.
	(main): Use it. Initialize xalloc_exit_failure before potentially
	allocating memory.

	(filetype): Distinguish executable files from others, as POSIX
	suggests.

	(compare_files): Use base_name instead of file_name_lastdirchar.

	* src/cmp.c: Include <hard-locale.h>, <setmode.h>.
	(hard_locale_LC_MESSAGES): New macro.
	(sprintc): Remove int width arg; it's now the caller's responsibility
	to pad.  All callers changed.
	(stat_buf): New static var; was formerly a local var in 'main'.
	(valid_suffixes): Add 'K', for 'KiB'.
	(option_help_msgid): Don't confuse bytes with characters.
	(main): Set xalloc_exit_failure before invoking anything that might
	allocate memory.  Fix bug: -n was incorrectly ignored when optimizing
	the case of regular files with different lengths.
	(cmp): Use an index column wide enough to store this comparison's
	indexes.  In locales other than the POSIX locale, say "byte"
	rather than "char".

	* ms/config.bat: pc -> ms

	* ms/Makefile.am, m4/setmode.m4, lib/setmode.c, lib/setmode.h:
	New file.

	* lib/Makefile.am (noinst_HEADERS): Add dirname.h, setmode.h.
	(libdiffutils_a_SOURCES): Add basename.c, setmode.c.

	* Makefile.am (SUBDIRS): Add ms.

2001-12-10  Paul Eggert  <eggert@twinsun.com>

	* m4/fnmatch.m4: Test for FNM_CASEFOLD.

2001-12-03  Paul Eggert  <eggert@twinsun.com>

	* lib/posix/regex.h: Fix copyright notice.

2001-12-03  Paul Eggert  <eggert@twinsun.com>

	* NEWS, configure.ac (AM_INIT_AUTOMAKE): Version 2.7.4.

	* diff.texi (direntry, Overview, Comparison, Binary, Invoking cmp):
	Use "byte" rather than "character" when talking about cmp, since
	it compares bytes, not character.
	(Invoking cmp): New trailing operands FROM-SKIP and TO-SKIP.
	-i or --ignore-initial now accepts FROM-SKIP:TO-SKIP.
	New option -n or --bytes.
	Count operands now may be in octal or hex, and may be followed by a
	size multiplier.

	* configure.ac (DEFAULT_DIFF_PROGRAM):
	Define to "diff", not "$bindir/diff" (which didn't work anyway).
	(AC_CHECK_MEMBERS): Add struct stat.st_blksize, struct stat.st_rdev.
	(AC_STRUCT_ST_BLKSIZE, AC_STRUCT_ST_RDEV): Remove; obsolescent.
	(AC_FUNC_FORK): Use this, instead of obsolescent AC_FUNC_VFORK.
	(AC_CONFIG_FILES, AC_CONFIG_COMMANDS): Add.
	(AC_OUTPUT): Remove args; they were obsolescent.

	* util.c (setup_output, begin_output, finish_output):
	HAVE_FORK -> HAVE_WORKING_FORK || HAVE_WORKING_VFORK.
	* sdiff.c (diffpid, cleanup, main, edit): Likewise.
	* diff3.c (read_diff): Likewise.

	* system.h (STAT_BLOCKSIZE):
	Use HAVE_STRUCT_STAT_ST_BLKSIZE, not HAVE_ST_BLKSIZE.
	(vfork): New macro.
	(HAVE_FORK): Remove.
	(set_binary_mode): New macro.

	* sdiff.c (main): HAVE_VFORK -> HAVE_WORKING_VFORK.
	(edit): Reopen the temporary file after the editor has run, in case
	the editor operates by unlinking the old file and linking a new one.
	(P_tmpdir): Rename from PVT_tmpdir; this fixes a typo.
	All uses changed.

	* io.c (sip, read_files):
	Remove tests for HAVE_SETMODE; use set_binary_mode
	instead of setmode.
	(sip): Fix typo in backward lseek when reverting to text mode.

	* config.site, config.sed, config.bat: New file.

	* Makefile.am (EXTRA_DIST): Add xstrtol.c.
	(noinst_HEADERS): Add xstrtol.h.
	(libdiffutils_a_SOURCES): Add xstrtoumax.c.

	* cmp.c: <xstrtol.h>: Include.
	(ignore_initial): Now an array with 2 elements.  All uses changed.
	(bytes): New var.
	(HELP_OPTION): New constant.
	(long_options, main): Use it.
	(long_options, option_help_msgid, main, cmp):
	Add support for -n or --bytes.
	(parse_ignore_initial): New function.
	(option_help_msgid, main): Add -i M:N.
	(usage, main): Add two optional trailing operands, a la BSD.
	(main): setmode -> set_binary_mode.
	(cmp): Report byte number of what we've seen, not of the entire file.
	This is to be consistent with the line number, which is always relative
	with what we've seen.

2001-12-02  Paul Eggert  <eggert@twinsun.com>

	* diff.c (main, compare_files): setmode -> set_binary_mode.

	* xstrtol.c (__xstrtol): Don't accept 'Ki'; require 'KiB'.

	* xstrtol.c (__xstrtol): Add support for IEC 60027-2.

2001-11-25  Paul Eggert  <eggert@twinsun.com>

	* NEWS, configure.ac (AM_INIT_AUTOMAKE): Version 2.7.3.

	* README-alpha: New file.

	* src/Makefile.am (INCLUDES): Add -I../lib, for regex.h.

	* configure.ac:
	Don't set LIB_CLOCK_GETTIME to 'none required'; set it to
	the empty string instead.

	* lib/Makefile.am (EXTRA_DIST): Add strtoimax.c, strtol.c.

	* Makefile.am (SUBDIRS): Put intl before lib, so that libintl.h exists.

	* lib/Makefile.am (noinst_HEADERS): Add unlocked-io.h.

	* configure.ac (__EXTENSIONS__): New define, for the unlocked macros.

	* README: Add copyright notice.
	Remove stuff that doesn't apply any more.

	* doc/diff.texi: offsets -> indices for cmp

	* src/cmp.c (option_help_msgid): offsets -> indices

	* src/diff.c (option_help_msgid):
	Don't mention --binary on POSIX hosts.

	* src/sdiff.c (STRIP_TRAILING_CR_OPTION): New constant.
	(longopts, option_help_msgid, main): Add -E, --ignore-tab-expansion,
	--strip-trailing-cr.

	* doc/diff.texi: Change direcategory from Utilities to GNU Packages.
	Add individual utilities.
	Switch to Free Documentation License.
	@code -> @command
	@samp -> @option
	GNU -> @sc{gnu}
	Expand tabs to spaces, except when in an example that actually
	uses tabs.
	Prefer @node with just one arg.
	Document -E or --ignore-tab-expansion, --strip-trailing-cr,
	--ignore-file-name-case.
	Regular expressions are now grep style, not Emacs style.
	cmp's -c or --print-chars option is now -b or --print-bytes.
	Time stamps now depend on LC_TIME.
	-p now implies ^[[:alpha:]$_].
	Flags now include ' and 0.
	cmp -i is an alias for --ignore-initial
	Document --from-file, --to-file.
	Document DIFF_OPTIONS.

	* configure.ac (AC_CHECK_FUNCS): Add gettimeofday, clock_gettime.
	(LIB_CLOCK_GETTIME): New subst.

	* src/system.h: Assume C89 or better.
	(_GNU_SOURCE): Remove; config.h now defines it.
	(alloca): Declare like coreutils does it.
	(verify, TYPE_SIGNED, TYPE_MINIMUM, TYPE_MAXIMUM, O_RDWR,
	S_IRUSR, S_IWUSR): New macros.
	(STAT_BLOCKSIZE): Parenthesize definiens.
	<inttypes.h>: Include if HAVE_INTTYPES_H.
	(CHAR_MAX, INT_MAX): Remove.
	(PTRDIFF_MAX, SIZE_MAX): New macros.
	(strtoumax): New decl.
	Include stddef.h.
	(bzero): Remove.
	(bindtextdomain, textdomain, N_): New macros.
	(ISPRINT, ISSPACE): Remove ifndef wrappers.
	(ISUPPER, ISDIGIT): Remove.
	(TOLOWER): New macro.
	(MIN): Renamed from min; all callers changed.
	(MAX): Likewise, from max.
	(lin): New type.
	(LIN_MAX): New macro.
	(file_name_cmp): Renamed from filename_cmp.  All callers changed.
	(file_name_lastdirchar): Renamed from file_name_lastdirchar.
	All callers changed.
	(could_be_mvfs_stat_bug, could_be_nfs_stat_bug,
	dev_may_have_duplicate_ino): Remove.
	(HAVE_SETMODE, NULL_DEVICE): New macros.
	(same_file): Do not check attributes.
	(same_file_attributes): New macro.

	* src/util.c: Assume C89 or better.
	int -> bool for booleans.
	int -> lin for line numbers.
	int -> size_t for sizes.
	Use angle-brackets when including quotesys.h.
	Include error.h, regex.h, xalloc.h.
	(message5): sizeof -> offsetof
	(begin_output): Invoke pr without -f.
	(lines_differ): Renamed from line_cmp, and return bool not 3-way int.
	All callers changed.
	Add support for IGNORE_TAB_EXPANSION.
	(change_letter): Now an array rather than a function.  All
	callers changed.
	(translate_range): Translate line numbers to long, not lin,
	for convenience with printf.
	(analyze_hunk): Return enum changes instead of a count of
	inserts and deletes.  All callers changed.
	(zalloc): New function.

	* src/side.c: Assume C89 or better.
	int -> bool for booleans.
	int -> lin for line numbers.

	* src/sdiff.c: Assume C89 or better.
	int -> bool for booleans.
	int -> lin for line numbers.
	Use angle-brackets when including getopt.h, quotesys.h.
	Include error.h, freesoft.h, stdio.h, xalloc.h.
	(copyright_string): Use only most recent year.
	(authorship_msgid, option_help_msgid): Wrap in N_().

	(tmpname): Now volatile.
	(tmpmade): Remove.
	(tmp): New var.
	(private_tempnam, exists, letters): Remove.
	(temporary_file): New function.
	(edit): Use it.
	(interact): Use strtoumax, not atoi.

	* src/normal.c: Assume C89 or better.
	int -> lin for line numbers.

	* src/io.c: Assume C89 or better.
	int -> bool for booleans.
	int -> lin for line numbers.
	int -> size_t for sizes.
	Use angle-brackets when including cmpbuf.h.
	Include regex.h, xalloc.h.
	(word): Remove; now done in system.h.
	(hash_value): New type; use it instead of 'unsigned' for hash values.
	(file_block_read): New function.
	(sip, slurp): Use it.  Now static.
	(sip): Ensure block size is a multiple of word size.  Clear eof flag.
	(slurp): Use xalloc_die to report memory exhaustion.
	(find_and_hash_each_line): Use TOLOWER instead of _tolower.
	Add support for IGNORE_TAB_EXPANSION.
	(prepare_text_end): Strip trailing CR if requested.
	(find_identical_ends): Prepare the text only once,
	if they're duplicates.
	Let the compiler take advantage more of the fact that the buffers are
	word-aligned.
	(primes): Remove.
	(prime_offset): New var.
	(read_var): Use prime_offset instead of primes.
	Use zalloc instead of xmalloc + bzero.

	* src/ifdef.c: Assume C89 or better.
	int -> lin for line numbers.
	(format_group): Use strtoumax to parse line numbers.
	(format_group, print_ifdef_lines): Use do_printf_spec to
	handle printf specs.
	(groups_letter_value): Don't use _tolower; it's locale-dependent.
	(do_printf_spec): Renamed from scan_printf_spec; now does the printing.

	* src/ed.c: Assume C89 or better.
	int -> lin for line numbers (or 'long' when that's more convenient).
	(print_ed_hunk): Fix bug when handling double-dot inserts.

	* src/dir.c: Assume C89 or better.
	int -> bool for booleans.
	Include error.h, exclude.h, xalloc.h.

	(dir_sort): Return 0 on error, 1 on success.  All callers changed.
	compare_names -> compare_names_for_qsort.

	(compare_names): Try strcasecmp if ignore_file_name_case.  Then try
	strcoll.  Use file_name_cmp only as a last resort.  Warn about
	strcasecmp or strcoll failure.
	(compare_names_for_qsort): New function.

	(diff_dirs): Use compare_names rather than filename_cmp.

	* src/diff3.c: Assume C89 or better.
	int -> bool for booleans.
	int -> lin for line numbers.
	Use angle-brackets when including getopt.h, quotesys.h.
	Include error.h, freesoft.h, inttostr.h, xalloc.h.
	(copyright_string): Use only most recent year.
	(authorship_msgid, option_help_msgid): Wrap in N_().

	Rename the following variables for consistency with user-visible
	option spellings.  All uses changed.
	(text): Renamed from always_text.
	(initial_tab): Renamed from tab_align_flag.

	(horizon_lines): Remove.  Remove all uses.

	(main): Invoke bindtextdomain and textdomain after setlocale.
	Rename "DIFF" to "DIFF_PROGRAM".

	Try to compare file0 to file1, because this is where changes are
	expected to come from.  Diffing between these pairs of files is more
	likely to avoid phantom changes from file0 to file1.
	However, use file2 as the common file if this is a 3-way diff,
	for backward compatibility.  Suggested by Karl Tomlinson.

	(create_diff3_block): Use xcalloc instead of malloc + bzero.

	(INT_STRLEN_BOUND): Remove; now in system.h.

	(read_diff): Always use --horizon-lines=100 rather than trying
	to guess it.
	Do not pass --inhibit-hunk-merge.
	Minimum chunk size is 1, not 8KiB.
	Use xalloc_die to report memory exhaustion.
	(undotlines): Use long for start, not int.

	* src/diff.h: Assume C89 or better.
	int -> bool for booleans.
	int -> lin for line numbers.
	Don't include regex.h.
	(enum changes): New enum.
	(enum line_class): Remove; subsumed by enum changes.
	(enum output_style): New constant OUTPUT_UNSPECIFIED.

	(ignore_space_change_flag, ignore_all_space_flag): Remove.
	(ignore_white_space): New decl, subsuming the above two.  All
	uses changed.

	Rename the following decls for consistency with user-visible
	option spellings.  All uses changed.
	(text): Renamed from always_text_flag.
	(ignore_blank_lines): Renamed from ignore_blank_lines_flag.
	(ignore_case): Renamed from ignore_case_flag.
	(brief): Renamed from no_details_flag.
	(initial_tab): Renamed from tab_align_flag.
	(expand_tabs): Renamed from tab_expand_flag.
	(starting_file): Renamed from dir_start_file.
	(paginate): Renamed from paginate_flag.
	(sdiff_merge_assist): Renamed from sdiff_help_sdiff.
	(left_column): Renamed from sdiff_left_only.
	(suppress_common_lines): Renamed from sdiff_skip_common_lines.
	(speed_large_files): Renamed from heuristic.
	(minimal): Renamed from no_discards.

	(inhibit_hunk_merge): Remove.

	(strip_trailing_cr, excluded, time_format): New decls.

	(files_can_be_treated_as_binary): Renamed from ignore_some_changes.

	(group_format, line_format): Now char const *[], not char *[].

	(struct file_data): Buffer is now word*, not char*, as it's always
	aligned and this can help the compiler.  buffered_chars -> buffered
	(since it's a byte count, not a char count).  All uses changed.
	New member `eof'.

	(FILE_BUFFER): New macro.

	(excluded_filename, error, free_software_msgid): Remove decls; now in
	other .h files.

	(sip, slurp): Remove decls.
	(file_block_read): New decl.
	(change_letter): Now an array, not a function.
	(lines_differ): Renamed from line_cmp.
	(analyze_hunk): Now returns enum changes rather than two change counts.

	* src/Makefile.am (diff_LDADD): New symbol.

	* src/diff.c: Assume C89 or better.
	int -> bool for booleans.
	long -> off_t for line numbers.
	Use angle-brackets when including getopt.h, fnmatch.h, quotesys.h.
	Include error.h, exclude.h, freesoft.h, hard-locale.h, prepargs.h,
	regex.h, signal.h, xalloc.h.
	(copyright_string): Use only most recent year.
	(authorship_msgid, option_help_msgid): Wrap in N_().

	Rename the following variables for consistency with user-visible
	option spellings.  All uses changed.
	(binary): Renamed from binary_flag.
	(new_file): Renamed from entire_new_file_flag.
	(unidirectional_new_file): Renamed from unidirectional_new_file_flag.
	(report_identical_files): Renamed from print_file_same_flag.

	(numeric_arg): Remove.

	(exclude, exclude_alloc, exclude_count, excluded_filename, add_exclude,
	add_exclude_file):
	Remove; now done by exclude.h.

	(BINARY_OPTION, FROM_FILE_OPTION, HELP_OPTION, HORIZON_LINES_OPTION,
	IGNORE_FILE_NAME_CASE_OPTION, INHIBIT_HUNK_MERGE_OPTION,
	LEFT_COLUMN_OPTION, LINE_FORMAT_OPTION, NORMAL_OPTION,
	SDIFF_MERGE_ASSIST_OPTION, STRIP_TRAILING_CR_OPTION,
	SUPPRESS_COMMON_LINES_OPTION, TO_FILE_OPTION,
	UNCHANGED_LINE_FORMAT_OPTION, OLD_LINE_FORMAT_OPTION,
	NEW_LINE_FORMAT_OPTION, UNCHANGED_GROUP_FORMAT_OPTION,
	OLD_GROUP_FORMAT_OPTION, NEW_GROUP_FORMAT_OPTION,
	CHANGED_GROUP_FORMAT_OPTION): New constants.
	(longopts, main): Use them.

	(longopts, main, option_help_msgid): Add -E, --from-file, --to-file.

	(main): Invoke bindtextdomain and textdomain after setlocale.
	Use grep syntax, not Emacs, for regular expressions.
	Use exclude.h, not our own functions.
	Use ISO 8601 time format in hard locales.
	Prepend DIFF_OPTIONS.
	Don't update ignore_some_changes.
	Use strtoumax instead of numeric_arg.
	Use specify_value when appropriate.
	error -> try_help when appropriate.
	-p now means ^[[:alpha:]$_], not ^[_a-zA-Z$].
	Ignore --inhibit-hunk-merge.
	Prefer changed group formats to unchanged ones.
	Remove now-unnecessary casts.
	Set files_can_be_treated_as_binary.

	(specify_value): Renamed from specify_format.  All uses changed.

	(specify_style): Default is now unspecified, not normal.  All
	uses changed.

	(set_mtime_to_now): New function.
	(compare_files): Use it.  Use memset, not bzero.
	Set stdin mtime to current time even when stdin is not a regular file.
	Check for same file attributes, as well as for same file.
	Use files_can_be_treated_as_binary.
	"write failed" -> "standard output on output failure.

	* src/context.c: Assume C89 or better.
	int -> lin for line numbers.
	Include inttostr.h, regex.h.
	(TIMESPEC_NS): New macro.
	(nstrftime): New decl.
	(print_context_label): Use nstrftime and time_format to format times.
	Print numeric time stamp value if localtime fails.
	(print_context_function): New function.
	(pr_context_hunk, pr_unidiff_hunk): Use it.
	(find_function): Use size_t for sizes, not int.

	* src/cmp.c: Assume C89 or better.
	int -> bool for booleans.
	long -> off_t for line numbers.
	Use angle-brackets when including cmpbuf.h, getopt.h.
	Include error.h, freesoft.h, inttostr.h, xalloc.h.
	(copyright_string): Use only most recent year.
	(authorship_msgid): Wrap in N_().
	(buffer): Now word*, not char*.  All uses changed.
	(word): Remove macro; now in system.h.
	(long_options, option_help_msgid, main): -c --print-chars ->
	-b --print-bytes
	(check_stdout): "write failed" -> "standard output"
	(option_help_msgid): Wrap in N_().
	(main): Invoke bindtextdomain and textdomain after setlocale.
	Use strtoumax instead of doing the work ourselves.
	Check for same_file_attributes as well as same_file.
	(cmp): Use ssize_t for read returns, not size_t.
	Do not assume that size_t is not narrower than int.
	Do not assume that line numbers fit in 'long'.
	(block_compare_and_count, block_compare):
	Compiler now checks that buffers are word-aligned.
	(block_compare_and_count): Count sizes with size_t, not long.
	(sprintc): byte arg is unsigned char, not unsigned.

	* src/analyze.c: Assume C89 or better.
	int -> lin for line numbers.
	int -> bool for booleans.
	unsigned int -> size_t for sizes.
	Use angle-brackets when including cmpbuf.h.
	Include error.h, regex.h, xalloc.h.
	(discard_confusing_lines, diff_2_files): Use zalloc rather
	than xalloc+bzero.
	(discard_confusing_lines): unsigned int -> lin for values that
	are really line numbers.
	(shift_boundaries): Do not inhibit hunk merges.
	(build_reverse_script, build_script, diff_2_files): Use |, not ||.
	(diff_2_files): no_details_flag & ~ignore_some_changes ->
	files_can_be_treated_as_binary.  Esure that buffer size is a multiple
	of sizeof (word).  Use file_block_read to read buffers.
	(diff_2_files): Abort if output style is not one of the
	expected styles.

2001-11-23  Paul Eggert  <eggert@twinsun.com>

	* src/Makefile.am, m4/vararrays.m4: New file.

	* m4/prereq.m4 (jm_PREREQ_READUTMP):
	Remove, as it gives autoheader the willies.

	* m4/README, lib/prepargs.h, lib/prepargs.c, lib/offtostr.c,
	lib/umaxtostr.c, lib/inttostr.c, lib/inttostr.h,
	lib/imaxtostr.c, lib/freesoft.h: New files.

	* lib/freesoft.c: Include config.h, freesoft.h rather than diff.h.
	(free_software_msgid): Wrap contents in N_.

	* lib/cmpbuf.h: Use prototypes instead of old-style functions.

	* lib/cmpbuf.c:
	Don't include system.h; instead, include config.h, unistd.h.
	Use prototypes instead of old-style functions.
	(block_read): Don't assume that int is no wider than size_t.

	* lib/Makefile.am, po/POTFILES.in: New file.

2001-11-22  Paul Eggert  <eggert@twinsun.com>

	* pc/config.h:
	Define filename_cmp as an object-like macro, not as a function-like
	macro.

	* exgettext: Always operate in the C locale.
	Set AWK using a method that works even with broken shells.

	* doc/Makefile.am: New file.

	* configure.ac (AC_INIT):
	Use src/diff.c, not diff.h, as the source files got removed.
	(AM_CONFIG_HEADER): Switch from AC_CONFIG_HEADER.
	(AC_ARG_PROGRAM, AC_MINIX): Remove.

	(AC_PREREQ, AM_INIT_AUTOMAKE, ALL_LINGUAS, AC_PROG_AWK,
	AM_PROG_CC_STDC, AC_PROG_RANLIB, AC_C_INLINE, AC_C_VARARRAYS,
	DEFAULT_DIFF_PROGRAM, DEFAULT_EDITOR_PROGRAM,
	AC_STRUCT_ST_MTIM_NSEC): Add.

	(PR_PROGRAM): AC_DEFINE.

	(AC_SYS_LARGEFILE): Use instead of our homebrew version.

	(_GNU_SOURCE): Define if not defined.

	(AC_CHECK_HEADERS): Add stdbool.h, unistd.h.
	(AC_CHECK_TYPES): Add ptrdiff_t, uintmax_t.
	(AM_GNU_GETTEXT, XGETTEXT): Add.

	(WITH_MVFS_STAT_BUG, WITH_NFS_STAT_BUG): Remove.
	(HAVE_MEMCHR): Remove.
	(AC_CHECK_FUNCS): Add diraccess.
	(AC_REPLACE_FUNCS): Add memchr, waitpid.
	(jm_FUNC_GLIBC_UNLOCKED_IO, jm_FUNC_GNU_STRFTIME, jm_FUNC_MALLOC,
	 jm_FUNC_REALLOC, jm_PREREQ_ERROR, jm_PREREQ_QUOTEARG, jm_PREREQ_REGEX,
	 jm_PREREQ_TEMPNAME, jm_AC_PREREQ_XSTRTOUMAX, AC_FUNC_FNMATCH): Add.
	(fnmatch.h, regex.h): Do not create these files unless we're using
	our own fnmatch and regex.

	(AC_OUTPUT): Add doc/Makefile, intl/Makefile, lib/Makefile,
	lib/posix/Makefile, m4/Makefile, po/Makefile.in, src/Makefile.

	* Makefile.am: New file.

	* po/en_GB.po: Don't translate "program" to "programme".

2001-11-20  Paul Eggert  <eggert@twinsun.com>

	* m4/prereq.m4: New file.

2001-03-16  Paul Eggert  <eggert@twinsun.com>

	* lib/tempname.c (uint64_t):
	Define if not defined, and if UINT64_MAX is not defined.

2001-02-26  Paul Eggert  <eggert@twinsun.com>

	* lib/tempname.c: glibc 1.32

2001-02-17  Paul Eggert  <eggert@twinsun.com>

	* m4/Makefile.am.in: GNU fileutils 4.1

2001-01-09  Paul Eggert  <eggert@twinsun.com>

	* lib/tempname.c (struct_stat64): New macro.
	(direxists, __gen_tempname): Use it.  This avoids a portability problem
	with Solaris 8.

	* lib/tempname.c (<config.h>): Include if HAVE_CONFIG_H.
	(<stddef.h>, <stdint.h>, <string.h>):
	Include only if STDC_HEADERS || _LIBC.
	(<fcntl.h>): Include only if HAVE_FCNTL_H || _LIBC.
	(<unistd.h>): Include only if HAVE_UNISTD_H || _LIBC.
	(<sys/time.h>): Include only if HAVE_SYS_TIME_H || _LIBC.
	(__set_errno): Define this macro if <errno.h> doesn't.
	(P_tmpdir, TMP_MAX, __GT_FILE, __GT_BIGFILE, __GT_DIR, __GT_NOCREATE):
	Define these macros if <stdio.h> doesn't.
	(S_ISDIR, S_IRUSR, S_IWUSR, S_IXUSR):
	Define these macros if <sys/stat.h>
	doesn't.  Ignore <sys/stat.h> S_ISDIR if STAT_MACROS_BROKEN.
	(stat64, __getpid, __gettimeofday, __mkdir, __open, __open64, lxstat64,
	__xstat64): Define if not _LIBC.
	(__secure_getenv): Define if ! (HAVE___SECURE_GETENV || _LIBC).
	(__gen_tempname): Invoke gettimeofday only if HAVE_GETTIMEOFDAY
	|| _LIBC; otherwise, fall back on plain "time".
	Use macros like S_IRUSR | S_IWUSR rather than octal values like 0600.

	* lib/mkstemp.c (__GT_FILE): Define to zero if not defined.

2000-10-25  Paul Eggert  <eggert@twinsun.com>

	* lib/hard-locale.c: New file.

2000-02-05  Paul Eggert  <eggert@twinsun.com>

	* exgettext: From GCC repository

1999-07-06  Paul Eggert  <eggert@twinsun.com>

	* lib/mkstemp.c: glibc 2.2

1998-12-11  Paul Eggert  <eggert@twinsun.com>

	* src/sdiff.c (lf_snarf):
	Fix bug when help line wrapped around the input buffer.

1998-09-15  Paul Eggert  <eggert@twinsun.com>

	* diff.texi: Add @dircategory and @direntry.

1998-09-14  Paul Eggert  <eggert@twinsun.com>

	* Makefile.in (VERSION): Version 2.7.2.
	(DEFAULT_DIFF_PROGRAM): Renamed from DIFF_PROGRAM.
	(PR_PROGRAM): All `configure' to define it.
	(srcs): Add $(diffutils_srcs), freesoft.c, quotearg.c instead of
	quote.c, quotearg.h.
	(distfiles): Add acconfig.h, message/*.
	(all): Depend on $(destfiles), not info.
	(version.c): Parenthesize `GNU diffutils'.
	(common_o): Add freesoft.o
	(diff_o): quote.o -> quotearg.o
	(diff3_o, sdiff_o): Likewise.
	(diff.dvi): Depend on version.texi.
	(diff.o diff3.o quotearg.o sdiff.o util.o):
	New dependency on quotearg.h
	(diff3.o): DIFF_PROGRAM -> DEFAULT_DIFF_PROGRAM.
	(sdiff.o): Likewise.
	(messages.po): Remove.
	(message/msgid.po, message/template.po): New rules.
	(maintainer-clean): Renamed from realclean.
	(install): Install from source directory, if applicable.
	Invoke install-info if needed.
	(install-strip): New rule.
	(check): Set DIFF.
	(stamp-h.in): Don't put the date into the timestamp.
	(D_dirs): Add $D/message.
	($D.tar.gz): Compress with gzip -9.
	Don't use ln to create distribution; it doesn't work with symlinks.
	(srcs, distfiles, diff_o, diff3_o, sdiff_o): Rename quotearg.c to
	quotesys.c and quotearg.h to quotesys.h.

	* configure.in (AC_PATH_PROG): Add PR_PROGRAM.
	If available, prefer support for large files unless the user specified
	one of the CPPFLAGS, LDFLAGS, or LIBS variables.
	(AC_STRUCT_ST_RDEV): Add.
	(HAVE_ST_FSTYPE_STRING): Add.
	(--with-mvfs-stat-bug, --with-nfs-stat-bug): New options.
	(HAVE_MEMCHR): New macro.
	(AC_CHECK_FUNCS): Add sicprocmask.

	* diff.h (XTERN): Renamed from EXTERN.
	(struct filedata): Remove dir_p arg.
	(struct comparison): New type.
	(diff_2_files, diff_dirs)" Ise ot/
	(error): Add printf attribute if applicable.
	(free_software_msgid): New decl.
	(pr_program): New decl.
	(fatal): Add noreturn attribute.
	(pfatal_with_name): Likewise.

	* system.h (__attribute__): New macro.
	(getenv): Don't declare if HAVE_STDLIB_H.
	(CHAR_MAX): New macro.
	(<locale.h>): New include.
	(<locale.h>): Include before <libintl.h>.
	(could_be_mvfs_stat_bug, could_be_nfs_stat_bug,
	dev_may_have_duplicate_ino, same_special_file): New macros.
	(same_file): Use them.

	* cmp.c (authorship_msgid): New var.
	(free_software_msgid): New decl.
	(error): Now has printf attribute.
	(try_help): Likewise.
	(long_options): Don't assume ASCII.
	(try_help): Now accepts operand arg.
	(main): Check for -1, not EOF, when calling getopt_long.
	Report --ignore-initial value when complaining about it.
	Output copyright and free software info with -v.
	Don't assume ASCII.
	Report last operand when one is missing.
	Report text of extra operand.
	Move block_read into cmpbuf.c.

	* diff.c (authorship_msgid): New var.
	(quotesys.h): Include.
	(ck_atoi): Remove.
	(function_regexp_list, ignore_regexp_list): Now static.
	(binary_flag): Renamed from binary_I_O.
	(entire_new_file_flag, unidirectional_new_file_flag,
	print_file_same_flag): Now static.
	(numeric_arg): Renamed from ck_atoi.
	New argument specifying the argument type.
	(longopts, main): Don't assume ASCII.
	(longopts): Remove old aliases --file-label, --entire-new-file,
	--ascii, --print.
	(main): Check for -1, not EOF, when calling getopt_long.
	Use numeric_arg to report errors.
	Report error if -l specified but pagination is not supported.
	Report error if -S is specified twice with conflicting values.
	Have --version conform to the new GNU standards.
	Add new --from-file, --to-file, --inhibit-hun,-merge options.
	Make the horizon at least as large as the context.
	Add casts to pacify gcc -Wall.
	(try_help): Add operand arg.
	(option_help_msgid): Doc fix to match above.
	(usage): Indent option_help_msgid.
	(compare_files): Now takes struct comparison
	instead of two directory names and a depth.
	(NONEXISTENT, UNOPENED, ERRNO_ENCODE, ERRNO_DECODE):
	New macros.
	(DIR_P): New macro.
	Report error if fflush does.

	* cmpbuf.c (block_read): Moved here from cmp.c.

	* cmpbuf.h (block_read): New decl.

	* io.c (cmpbuf.h): Include.
	(slurp): Check for arithmetic overflow when computing buffer size.

	* dir.c (diff_dirs): Check for recursive directory loop.
	Arg is now struct comparison const *.
	(dir_loop): New function

	* analyze.c (no_discards): Remove.
	(inhibit): Remove.
	(shift_boundaries): Don't inhibit.  If inhibit_hunk_merge is nonzero,
	don't merge hunks.
	(briefly_report): Now returns 2 if trouble, CHANGES otherwise.
	(diff_2_files): Now takes struct comparison.  If briefly_report reports
	trouble, pass it on to caller.

	* side.c (print_half_line): Add brackets to pacify GCC -Wall.

	* sdiff.c (quotesys.h): Include.
	(DIFF_PROGRAM, DEFAULT_EDITOR_PROGRAM): Remove.
	(free_software_msgid, editor_program, not_found): New vars.
	(diffbin, edbin): Remove.
	(editor_program): Renamed from edbin.
	(edit, interact): Now take extra string arg.
	(exiterr, fatal, perror_fatal, try_help): Add noreturn attribute.
	(sigset_t, sigemptyset, sigmask, sigaddset, SIG_BLOCK, SIG_SETMASK):
	(sigprocmask): New macros, if !HAVE_SIGPROCMASK.
	(error): Now has printf attribute.
	(longopts, main): Don't assume ASCII.
	(try_help): New operand arg.
	(usage): Conform to new GNU standards.
	(main): Set static vars for editor and diff program.
	Compare getopt_long result to -1, not EOF.
	-v conforms to new GNU standard.
	Complain better about extra and missing operands.
	If HAVE_VFORK, block SIGINT and SIGPIPE in the parent, since when
	the child munges its handlers it may somp on the parent.
	Pass rname to intract.
	Translate not-found message before forking.
	(give_help): Just output it all at once.
	(edit): New args lname, lline, rname, rline.
	(edit): New command 'd'.
	(interact): New args lname, rname.

	* util.c (quotesys.h): Include.
	(PR_PROGRAM): New macro.
	(pfatal_with_name): Abort if error returns.
	(fatal): Likewise.
	(print_message_queue): Free message chain after printing.
	(currently_recursive): Renamed from current_depth, and now a boolean.
	(begin_output): Report error if fflush does.
	Avoid stdio and gettext in child.

	* diff3.c (quotesys.h): Include.
	(free_software_msgid): New decl.
	(RANGE_START, RANGE_END): Renamed from START and END.
	(fatal, perror_with_exit, try_help): Add noreturn attribute.
	(error): Add printf attribute.
	(diff_program): Now a ptr, not an array.
	Initialize to DEFAULT_DIFF_PROGRAM instead of DIFF_PROGRAM.
	(longopts, main): Don't assume ASCII.
	(main): Use DIFF environment var to specify name of diff program.
	Compare getopt_long result to -1, not EOF.
	-v now reports version according to new GNU standard.
	Report spelling of extra operand, or last operand before missing one.
	(try_help): Now takes operand arg.
	(option_help_ms): Fix typo: missing comma.
	(usage): Update as per current GNU standards.
	(environ): Remove decl.
	(read_diff): Invoke diff with --inhibit-hunk-merge.
	Translate `not found' message before forking.
	Quote name of diff program.
	Pass horizon lines.
	`memory exhausted' -> `Memory exhausted'

	* pc/makefile (%.exe): Remove.
	(pc-clean): Remove *.exe
	* pc/makefile.sed (DEFAULT_DIFF_PROGRAM): Renamed from DIFF_PROGRAM.
	When editing mkinstalldirs rule, look for exec_prefix and prefix.
	Add .exe when installing files.
	* pc/emx/config.h (same_file): Add.
	* pc/config.h (same_file): Remove.
	* pc/djgpp/config.h: Adjust to latest patch from eliz.
	* pc/djgpp/makefile.sed: Don't alter PROGRAMS.
	* pc/pc.c: Update FSF address.
	(quote_system_arg): Renamed from system_quote_arg.

	* README: Add --with-mvfs-stat-bug, --with-nfs-stat-bug.

	* getmsgids: Add copyright date and update FSF address.

	* diff.texi: Document recent changes.
	The patch doc still corresponds to patch 2.2, unfortunately.
	Update GNU bug reporting address.  Omit Larry Wall's address;
	it's obsolete and he's busy with perl.

	* context.c: Fix spacing.

	* NEWS: Mention --from-file=FILE, --to-file=FILE, ed.

	* acconfig.h, freesoft.c, message/de.po, message/en_UK.po,
	message/es.po, message/fr.po, message/pl.po, message/sv.po:
	New files.

	* ed.c: Remove `#if 0'ed code.

	* normal.c, waitpid.c: Update FSF address.

1998-03-15  Paul Eggert  <eggert@twinsun.com>

	* quotesys.c: Renamed from quotearg.c.

	* quotesys.h: Renamed from quotearg.h
	(__QUOTESYS_P): Renamed from __QUOTEARG_P.

1997-05-05  Paul Eggert  <eggert@twinsun.com>

	* quotesys.c, quotesys.h: New file.

Mon Nov 14 05:10:56 1994  Paul Eggert  <eggert@twinsun.com>

	Add internationalization support.
	Several messages have been changed slightly,
	to make them more consistent and easier to translate.
	All strings that are messages are passed through gettext once before
	being used, so that they can be localized.
	Each function and macro whose first parameter is a gettext msgid
	has had its first parameter's name changed so it ends in `msgid'.
	All arrays of msgids have had their names changed to end in `msgid'.
	`getmsgids' uses this to determine which strings are msgids.

	* pc/COPYING, pc/INSTALL, pc/config.h,
	pc/djgpp/config.h, pc/djgpp/makefile.sed,
	pc/emx/config.h, pc/emx/diff.def, pc/emx/gnuregex.def,
	pc/emx/makefile.sed,
	pc/makefile, pc/makefile.sed, pc/pc.c: New files, for PC support.

	* getmsgids: New file.

	* Makefile.in (PACKAGE, VERSION, diffutils_srcs, D): New vars.
	(version.c, version.texi, messages.po): New files.
	messages.po is built automatically from source files and `getmsgids'.
	(distfiles): Add them, pc/*, and getmsgids.
	(diff.info): Now depends on version.texi.
	(realclean): Clean messages.po, version.*.
	(dist): Just build $D.tar.gz.
	($D.tar.gz): New file, takes over old `dist' function.
	Don't assume $(distfiles) are all in same directory.

	* configure.in (AC_CHECK_HEADERS): Add libintl.h, locale.h.
	(AC_CHECK_LIB): Check for -lintl.

	* analyze.c (briefly_report): Rewrite `message (A?"B":"C")' as
	`if (A) message ("B") : message ("C")'; this is for getmsgids.
	(briefly_report, diff_2_files): For label, use file_label if set.
	* diff.c (compare_files): Likewise.

	* system.h (gettext): Declare; use a stub if ! HAVE_LIBINTL_H.
	(setlocale): Declare; use a stub if ! HAVE_LOCALE_H.

	* cmp.c, diff.c, diff3.c, sdiff.c (main):
	Invoke setlocale first thing, to tell library we're internationalized.
	(option_help_msgid): New constant.
	(usage): Use it, so message is translated one option at a time.
	* sdiff (help_msgid, give_help): Likewise.

	* cmp.c (sprintc): Renamed from `printc'.
	Now outputs to a buffer instead of stdout.
	(cmp): Use new sprintc; it's easier to internationalize.

	* diff.c (main): -D FOO now outputs `/* ! FOO */ instead of
	`/* not FOO */'.

	* sdiff.c (version_string): Fix decl typo: `const' was missing.
	(trapsigs): Ignore sigaction failure, to be compatible with `signal'.

	* util.c (struct msg, message5, print_message_queue):
	Allocate just one block of memory to save a message.

Wed Nov  9 17:42:44 1994  Paul Eggert  <eggert@twinsun.com>

	* sdiff.c (trapsigs): Don't check signal return value, since it's
	bogus under djgpp.

Mon Oct 31 07:27:27 1994  Paul Eggert  <eggert@twinsun.com>

	* Makefile.in (srcs, diff_o, diff3_o, sdiff_o):
	New files quote.c, quote.o.

	* diff.h (function_regexp, ignore_regexp): Replace lists of compiled
	regexps with these single compiled regexps.  All users changed.
	(regexp_list,function_regexp_list,ignore_regexp_list): Move to diff.c.
	* diff.c (add_regexp): Build one big regexp instead of a regexp list.
	(summarize_regexp_list): New function.
	(regexp_list): Redesigned struct; moved here from diff.h.
	(function_regexp_list, ignore_regexp_list): Likewise, for vars.

	* context.c (find_function): Simplify interface:
	don't return size of function line.  All callers changed.
	(print_context_script, find_function): INT_MAX now denotes no
	previous match; this is simpler than `- file->prefix_lines - 1'.

	* diff3.c (read_diff): Quote arguments with system_quote_arg.
	* sdiff.c (main): Use system_quote_arg to compute command.
	* diff.c (option_list): Quote options with system_quote_arg.
	* util.c (begin_output): Use system_quote_arg to compute command.

	* util.c (pr_program): New var.
	(analyze_hunk): Fix off-by-1 line length bug.
	Match with one big regexp instead of a list of regexps.
	Use new `trivial_length' local instead of comparing first byte to `\n'.
	Help the compiler with linbuf local vars.

	* system.h (system_quote_arg):
	New function; replaces SYSTEM_QUOTE_ARG macro.

Sat Oct 15 20:09:12 1994  Paul Eggert  <eggert@twinsun.com>

	* system.h (_tolower): Define if not already defined.
	* io.c (find_and_hash_each_line): Change tolower to _tolower; this
	speeds up diff -i considerably on some hosts (e.g. Solaris 2.3).
	* util.c (line_cmp): Likewise.
	* ifdef.c (groups_letter_value): Likewise.

	* diff.h (ignore_some_line_changes): Remove.  All users changed.
	* io.c (find_and_hash_each_line): Don't invoke line_cmp if the length
	differs and -i is in force.  Don't assume ISSPACE ('\n') is nonzero.

	* diff.h (xmalloc_exit_failure): New variable.
	All `main' programs set this variable at the start.
	xmalloc and xrealloc are now taken from GNU library.
	* cmp.c (main): Align buffer size to word size; some mallocs care.
	* io.c (slurp): Likewise.
	* diff.c (add_exclude): Can now assume xrealloc (0, ...) works.
	(add_regexp): Free storage on failure.  Allocate storage all at one go.
	* system.h (malloc, realloc): Remove unused declarations.
	* diff3.c, sdiff.c, util.c (xmalloc, xrealloc): Remove.
	* sdiff.c (diffarg): Take advantage of cleaner xrealloc semantics.

	* io.c (ROL): Use sizeof to make it more generic.

	* Makefile.in (common_o): New variable.
	Link error.o and xmalloc.o into all programs.
	(check): Depend on $(PROGRAMS).

	* diff.h (error): Change to GNU library standard.  All callers changed.
	* diff3.c (main): Use strerror (EISDIR) instead of "Is a directory".
	(fatal, perror_with_exit): Use `error'.
	* util.c (perror_with_name, fatal): Use GNU `error'.
	(error): Remove.

Wed Oct 12 17:04:40 1994  David J. MacKenzie  (djm@duality.gnu.ai.mit.edu)

	* cmp.c (main): Set xmalloc_exit_failure.

Sat Oct  1 05:24:19 1994  Paul Eggert  <eggert@twinsun.com>

	* Version 2.7 released.

	* configure.in (AC_HEADER_SYS_WAIT): Add.
	(AC_CHECK_HEADERS): Remove sys/wait.h.
	(AC_CHECK_FUNCS): Add tmpnam.
	* system.h (<sys/wait.h>, WEXITSTATUS): Use simpler scheme
	now that HAVE_SYS_WAIT_H is not set on hosts
	that are incompatible with Posix applications.

	* util.c (dir_file_pathname): Use filename_lastdirchar not strrchr.
	* sdiff.c (expand_name): Likewise.
	(private_tempnam): Use tmpnam if HAVE_TMPNAM; this simplifies porting.
	(exists, letters): Omit if HAVE_TMPNAM.

	* diff3.c (read_diff): If STAT_BLOCKSIZE yields zero,
	adjust it to a more reasonable value.

Sat Sep 24 20:36:40 1994  Paul Eggert  <eggert@twinsun.com>

	* sdiff.c (exists, private_tempname): Adopt latest GNU libc algorithm.
	(private_tempnam): Specialize for sdiff to avoid portability problems.

Thu Sep 22 16:47:00 1994  Paul Eggert  <eggert@twinsun.com>

	* configure.in (AC_ARG_PROGRAM): Added.
	(AC_OUTPUT): Add [date > stamp-h].

	* Makefile.in (DEFAULT_EDITOR_PROGRAM, DIFF_PROGRAM, LIBOBJS,
	NULL_DEVICE, PR_PROGRAM, PROGRAMS): New variables.
	(check, stamp-h.in, cmp.o, util.o): New targets.
	(edit_program_name): New variable; replaces old binprefix method.
	(install, uninstall): Use it.
	(binprefix): Removed.
	(distfiles): Add stamp-h.in.
	(clean): Clean stamp-h.
	(config.hin, config.h): Use time stamp files.
	(cmp_o): Add $(LIBOBJS).
	(install): Install info files from srcdir if they're not in `.'.

	* cmp.c, io.c (word): Don't define if already defined.

	* comp.c (main): Use setmode, not open(..., O_BINARY); this gets stdin.
	Use NULL_DEVICE instead of "/dev/null".
	(cmp): Use %lu instead of %ld when it is more likely to be right.

	* diff.h (PR_FILE_NAME): Rename to PR_PROGRAM and move to Makefile.in,
	util.c.

	* diff3.c (main): Give proper diagnostic if too many labels were given.
	(read_diff): Use SYSTEM_QUOTE_ARG.

	* system.h: <string.h>: Include if HAVE_STRING_H, too.
	<ctype.h>: Include here.  All includers changed.
	(CTYPE_DOMAIN, ISDIGIT, ISPRINT, ISSPACE, ISUPPER): New macros that
	work around common <ctype.h> problems.
	(O_BINARY): Remove.
	(SYSTEM_QUOTE_ARG): New macros.

	* diff.c: Add comment.

	* util.c (PR_PROGRAM): Moved here from diff.h.
	(begin_output): Use SYSTEM_QUOTE_ARG.

	* io.c (read_files): Set mode to binary before returning 1.

	* sdiff.c (TMPDIR_ENV): New macro.
	(DEFAULT_EDITOR_PROGRAM): Renamed from DEFAULT_EDITOR for consistency.
	(expand_name): Change `isdir' to `is_dir' to avoid theoretical ctype
	namespace contamination.
	(main): Use SYSTEM_QUOTE_ARG.
	(private_tempnam): Don't access "/tmp" directly; use PVT_tmpdir.

Tue Sep 13 18:46:43 1994  Paul Eggert  <eggert@twinsun.com>

	* configure.in (AC_FUNC_MEMCHR): Remove.  Autoconf didn't adopt this,
	since we need not worry about an old experimental library
	where memchr didn't work.
	(AC_FUNC_MEMCMP): Not needed, since we only test for equality.
	(AC_REPLACE_FUNCS): Add test for memchr.
	(AC_CHECK_FUNCS): Check for memchr, not memcpy, since it'll be cached.
	(AC_CHECK_HEADERS): Add string.h; regex.c uses on some old hosts.

	* system.h (memcmp): Define in terms of bcmp.
	Use HAVE_MEMCHR to test for all mem* routines.

	* Makefile.in (srcs): Remove memcmp.c.
	We use bcmp if memcmp doesn't work, since we only test for equality.

Mon Sep 12 15:52:22 1994  Paul Eggert  <eggert@twinsun.com>

	* configure.in (AC_CONFIG_HEADER): Rename config.h.in to config.hin.
	(AC_ISC_POSIX, AC_MINIX): Go back to these old names for Autoconf 2.
	(AC_CHECK_HEADERS): Remove now-redundant check for <string.h>.
	(AC_CHECK_FUNCS): Check for strchr.
	(AC_FUNC_MEMCHR, AC_FUNC_MEMCMP, AC_CHECK_FUNCS): Use special-purpose
	macros when suitable.
	* memcmp.c: New file.
	* Makefile.in (CPPFLAGS, DEFS, CFLAGS, LDFLAGS, prefix, exec_prefix):
	Default to autoconf-specified strings.
	(COMPILE): Use the defaults.
	(srcs): Add memcmp.c.
	(distfiles): Rename config.h.in->config.hin, install.sh->install-sh.
	(Makefile, config.h, config.hin, config.status): Rework for
	compatibility with Autoconf 2.
	* io.c (binary_file_p): Assume non-broken memchr.
	* memchr.c: Assume compiler understands void *; otherwise
	we don't match GCC's internal declaration of memchr.
	* system.h: Use more modern autoconf approach to standard C headers.
	* version.c: Include <config.h>, not "config.h".

	* diff.c, diff.h (ignore_some_line_changes):
	New variable; replaces `length_varies'.
	(line_end_char): Replace with '\n'; it wasn't being used consistently.

	* io.c (find_and_hash_each_line): Fix inconsistencies with -b -w -i and
	incomplete lines.  Put incomplete lines into their own bucket.
	This means line_cmp no longer needs line length arguments,
	and equivalence classes' line lengths no longer need to include \n.
	Invoke line_cmp only if ignore_some_line_changes.
	(prepare_text_end): -B no longer ignores missing newlines.
	(read_files): Allocate another bucket for incomplete lines.

	* util.c (line_cmp): Now takes just two arguments.  No longer
	optimizes for common case of exact equality; the caller does that
	optimization now.  The caller is changed accordingly.
	Optimize for the common case of mostly equality.
	Use isupper+tolower instead of islower+toupper, for consistency.

	* waitpid.c (waitpid): Fix typo with internal scoping.

Thu Sep  8 08:23:15 1994  Paul Eggert  <eggert@twinsun.com>

	* configure.in: Revamp for Autoconf 2.
	* memchr.c, waitpid.c: New source files for substitute functions.
	* Makefile.in (diff_o, diff3_o, sdiff_o): Add $(LIBOBJS).
	(srcs): Add memchr.c, waitpid.c.
	(distfiles): Add install.sh, memchr.c, waitpid.c, install.sh.
	* system.h: Use Autoconf 2 style HAVE_DIRENT_H etc. macros for dirs.
	* dir.c (dir_sort): Prefer NAMLEN (p) to strlen (p->d_name).
	Change VOID_CLOSEDIR to CLOSEDIR_VOID for Autoconf 2.
	* sdiff.c, util.c (memchr, waitpid): Remove; use new substitutes.
	* diff3.c (read_diff): Use new waitpid substitute.

	* cmp.c, diff.c, diff3.c, sdiff.c (check_stdout, try_help): New fns.
	(usage): Just print more detailed usage message; let caller exit.
	* diff.c (option_help): New variable.
	(filetype): Add Posix.1b file types.

Fri Sep  2 16:01:49 1994  Paul Eggert  <eggert@twinsun.com>

	* configure.in: Switch to new autoconf names.  Add sys/file.h test.
	* Makefile.in (distclean): Clean config.cache, config.log
	(used by new autoconf).

	* diff.c, diff3.c, (main), sdiff.c (trapsigs): If we'll have children,
	make sure SIGCHLD isn't ignored.

	* diff3.c (DIFF_CHUNK_SIZE): Removed.  Get size from STAT_BLOCKSIZE.
	(INT_STRLEN_BOUND): New macro.

	* ifdef.c (format_group, groups_letter_value):
	Use * instead of [] in prototypes.

	* system.h: Include <sys/file.h> only if HAVE_SYS_FILE_H.
	(S_IXGRP, S_IXOTH, S_IXUSR): Remove unused macros.

	* util.c (begin_output): Check fdopen result.

	The following changes simplify porting to non-Posix environments.
	* cmp.c, diff.c, diff3.c, sdiff.c, (main): Call initialize_main first.
	* diff.c (binary_I_O): New variable for --binary option.
	(main, usage, compare_files): Support --binary option.
	(compare_files): Use filename_lastdirchar to find last
	directory char in a file name.
	* cmp.c (main), diff.c (compare_files), dir.c (compare_names,
	diff_dirs): Use filename_cmp to compare file names.
	Use same_file to determine whether two files are the same.
	* context.c (print_context_label): Check whether ctime yields 0.
	* diff3.c (read_diff), sdiff.c (cleanup, main, waitpid),
	util.c (begin_output): Use popen+pclose if !HAVE_FORK.
	* io.c (sip): If HAVE_SETMODE, test for binary files in O_BINARY mode.
	* sdiff.c (ck_fdopen): Function removed.
	(edit): Use system if !HAVE_FORK.
	(execdiff): Now assumes caller has pushed all args, plus trailing 0.
	All callers changed.
	(private_tempnam): Try TMP if TMPDIR isn't defined.
	Fit temporary filenames into 8.3 limit.
	* system.h (STAT_BLOCKSIZE): Don't define if already defined.
	(min, max): Undef if already defined.
	(filename_cmp, filename_lastdirchar, HAVE_FORK, HAVE_SETMODE,
	initialize_main, O_BINARY, same_file): New macros.

Fri Jun 17 11:23:53 1994  David J. MacKenzie  (djm@geech.gnu.ai.mit.edu)

	* Makefile.in (info, dvi, diff.dvi): New targets.
	(clean): Remove TeX output files.

Fri Jun 17 05:37:52 1994  Paul Eggert  (eggert@twinsun.com)

	* cmp.c, io.c (word): Change from typedef to #define, to avoid
	collision with Unicos 8.0 <sys/types.h>, which also typedefs `word'.

Thu Apr 15 00:53:01 1994  Paul Eggert  (eggert@twinsun.com)

	* diff3.c (scan_diff_line), util.c (print_number_range): Don't
	rely on promotion to make the old-style parameter type agree
	with the prototype parameter type; this doesn't work on
	Apollos running bsd4.3.

Mon Jan  3 02:05:51 1994  Paul Eggert  (eggert@twinsun.com)

	* Makefile.in (LDFLAGS): Remove -g.  Change all link commands
	to use both $(CFLAGS) and $(LDFLAGS).

Mon Dec 13 12:23:27 1993  Paul Eggert  (eggert@twinsun.com)

	* system.h: Don't assume dirent.h exists just because
	_POSIX_VERSION is defined.

Fri Dec  3 18:39:39 1993  Paul Eggert  (eggert@twinsun.com)

	* diff.c (main): allow -pu.

Tue Nov 23 03:51:08 1993  Paul Eggert  (eggert@twinsun.com)

	* Makefile.in (distclean): Remove config.h.

Wed Nov 10 00:28:27 1993  Paul Eggert  (eggert@twinsun.com)

	* Version 2.6 released.

	* analyze.c (too_expensive): New variable, for heuristic to
	limit the worst-case cost to O(N**1.5 log N) at the price of
	producing suboptimal output for large inputs with many differences.
	(diff_2_files): Initialize it.
	(struct partition): New type.
	(SNAKE_LIMIT): New macro; merely documents already-used number 20.
	(diag): New `minimal' arg; all callers changed.  Put results into
	struct partition.  Apply `too_expensive' heuristic.  Tune.
	(compareseq): New `minimal' arg; all callers changed.  Tune.
	(shift_boundaries): Improve heuristic to also coalesce adjacent runs
	of changes more often.

	* diff.c (long_options, main, usage): Add `--help'.
	(main): Send version number to stdout, not stderr.
	(usage): Send usage to stdout, not stderr.
	(compare_files): Initialize `inf' properly.

	* io.c (word): Change to `int'; it makes a big difference on x86.
	(sip, slurp): Put off allocating room to hold the whole file until we
	have to read the whole file.  This wins if the file turns out
	to be binary.

	* util.c (xmalloc, xrealloc): "virtual memory" -> "memory"
	(primes): Omit large primes if INT_MAX is small.

	* sdiff.c (usage): Send usage to stdout, not stderr.
	(long_options, main, usage): Add `--help'.
	(main): Send version number to stdout, not stderr.  Exit afterwards.

	* diff3.c (usage): Send usage to stdout, not stderr.
	(long_options, main, usage): Add `--help'.
	(read_diff): Detect integer overflow in buffer size calculations.

	* cmp.c (word): New type.  All uses of `long' for
	word-at-a-time comparisons changed to `word'.
	(long_options, main, usage): Add `--help'.
	(usage): Send usage to stdout, not stderr.
	(main): Add `-v'.  Send version number to stdout, not stderr.

	* configure.in (AC_HAVE_HEADERS): Add unistd.h; remove AC_UNISTD_H.

Mon Sep 27 07:20:24 1993  Paul Eggert  (eggert@twinsun.com)

	* diff.c (add_exclude_file): Cast memchr to (char *)
	to suppress bogus warnings on some nonstandard hosts.

	* Makefile.in (cmp): Add version.o.

	* analyze.c (diff_2_files): Work around memcmp bug with size=0.

	* cmp.c (main, usage, version_string): Add --version option.

	* system.h (malloc, realloc): Declare only if !HAVE_STDLIB_H.
	(memchr): Declare only if !HAVE_MEMCHR.  These changes are
	needed to keep some nonstandard hosts happy.

	* util.c (memchr): Make first arg char const *
	to match standard.
	(xmalloc, xrealloc): Cast malloc, realloc
	to (VOID *) to suppress bogus warnings on some nonstandard hosts.

	* diff3.c (xmalloc, xrealloc): Cast malloc, realloc
	to (VOID *) to suppress bogus warnings on some nonstandard hosts.

	* sdiff.c (xmalloc, xrealloc): Cast malloc, realloc
	to (VOID *) to suppress bogus warnings on some nonstandard hosts.
	(lf_copy, lf_skip, lf_snarf): Cast memchr to (char *)
	to suppress bogus warnings on some nonstandard hosts.
	(memchr): Make first arg char const *
	to match standard.

Mon Sep 27 00:23:37 1993  Paul Eggert  (eggert@twinsun.com)

	* Version 2.5 released.

	* analyze.c (diff_2_files): Work around memcmp bug with size=0.

	* cmp.c (main, usage, version_string): Add --version option.
	* Makefile.in (cmp): Add version.o.

	* diff.c (add_exclude_file): Cast memchr to (char *)
	to suppress bogus warnings on some nonstandard hosts.
	* sdiff.c (lf_copy, lf_skip, lf_snarf): Likewise.

	* diff3.c, sdiff.c, util.c (xmalloc, xrealloc): Cast malloc, realloc
	to (VOID *) to suppress bogus warnings on some nonstandard hosts.

	* sdiff.c, util.c (memchr): Make first arg char const *
	to match standard.

	* system.h (malloc, realloc): Declare only if !HAVE_STDLIB_H.
	(memchr): Declare only if !HAVE_MEMCHR.  These changes are
	needed to keep some nonstandard hosts happy.

	* xmalloc.c: Include <sys/types.h> always; some nonstandard hosts
	need it for size_t even if STDC_HEADERS.

Sat Sep 18 01:33:07 1993  Paul Eggert  (eggert@twinsun.com)

	* configure.in (AC_STAT_MACROS_BROKEN): Add.
	* system.h (S_IS{BLK,CHR,DIR,FIFO,REG,SOCK}): Fix defns if
	STAT_MACROS_BROKEN.

	* Makefile.in (diff3, sdiff, cmp): Do not link $(ALLOCA).

	* analyze.c (discard_confusing_lines): Make defn static, like decl.
	* sdiff.c (xmalloc): Likewise.

	* ifdef.c (format_group): Ensure isdigit argument isn't < 0.

	* side.c (print_half_line): Use isprint, since some hosts lack isgraph.
	* util.c (output_1_line): Likewise.  Ensure its argument isn't < 0.
	(xmalloc, xrealloc): Remove needless casts.

	* system.h (volatile, const):
	Define these before including any system headers,
	so that they're used consistently in all system includes.
	(getenv, malloc, realloc): Declare even if HAVE_STDLIB_H, since some
	<stdlib.h>s don't declare them.
	(memchr): Likewise for <string.h>.

	* cmp.c, diff3.c, diff.h, sdiff.c: Include "system.h" first.
	* diff.c: Remove redundant "system.h" inclusion.

	* diff3.c (xmalloc): Now static.
	(xmalloc, realloc): Remove needless casts.
	(READNUM): Ensure isdigit argument isn't negative.

Wed Sep 14 07:14:15 1993  Paul Eggert  (eggert@twinsun.com)

	* Version 2.4 released.

	* ifdef.c (scan_char_literal): New function, for new %c'x' and
	%c'\ooo' format specs.
	(format_group, print_ifdef_lines): Use it.  Remove %0 format spec.

	* cmp.c (cmp): Don't try to read past end of file; this doesn't
	work on ttys.

	* system.h, version.c: #include <config.h>, not "config.h", to allow
	configuring in a separate directory when the source directory has
	already been configured.
	* Makefile.in (COMPILE): New defn, with proper -I options so that
	`#include <config.h>' works.
	(.c.o, diff3.o, sdiff.o): Use it.

Mon Sep 13 06:45:43 1993  Paul Eggert  (eggert@twinsun.com)

	* diff.c (main, longopts): Add --line-format=FORMAT option.
	(specify_format): Args no longer const pointers.  All callers changed.

	* ifdef.c: Add support for %?c, %(A=B?T:E), PRINTF_SPECn formats.
	(struct group): New struct.
	(print_ifdef_lines): Use it to simplify argument passing.
	Remove the convention that last arg -1 signifies that the lines
	from file 2 are the same as the lines from file 1; this
	convention no longer works, now that line numbers might be
	printed out, since the line numbers may differ.
	Add first FILE * argument to output to.  All callers changed.
	Use a faster test for the single-fwrite optimization.
	(format_group, scan_printf_spec, groups_letter_value): New functions.

	* diff.h (group_format, line_format): No longer const pointers.
	(format_ifdef): 1st arg is no longer const pointer.

	* configure.in: Configure HAVE_LIMITS_H, HAVE_STDLIB_H.
	* system.h <limits.h>, <stdlib.h>, <string.h>:
	Include only if HAVE_LIMITS_H etc.

	* system.h (memcmp, memcpy, strchr, strrchr, struct dirent): Prefer
	these standard names to the traditional names (bcmp, bcpy, index,
	rindex, struct direct).  All callers changed.

	* system.h (PARAMS, VOID):
	Define earlier so that malloc decl can use VOID.
	(STAT_BLOCKSIZE): Simplify ersatz defn; just use 8K.

Fri Sep  3 00:21:02 1993  Paul Eggert  (eggert@twinsun.com)

	* diff.c (compare_files): Two files with the same name must be
	the same file; avoid a needless `stat' in that case.

Fri Aug 27 06:59:03 1993  Paul Eggert  (eggert@twinsun.com)

	* Pervasive changes for portability to 64-bit hosts:
	Add prototypes to function declarations.
	Use size_t, not int, when needed.

	* Other pervasive changes:
	Use `const' more often.
	Use STD{IN,OUT,ERR}_FILENO instead of [012].
	Use 0, not NULL, for portability to broken hosts.

	* Makefile.in: (srcs, objs, distfiles, cmp): New files cmpbuf.[ch].
	(distfiles): New files config.h.in, mkinstalldirs.
	(.c.o): Add -DHAVE_CONFIG_H.

	* analyze.c: (diag): Pacify `gcc -Wall' with a useless assignment.
	(diff_2_files): Use l.c.m., not max, of files' buffer sizes.

	* cmp.c: Make globals static when possible.

	(file): Now a 2-element array; replaces `file1' and `file2'.
	(file_desc, buffer): Likewise, for file[12]_desc and buf[12].
	(main): Likewise, for stat_buf[12].  Index these variables with `i'.

	(ignore_initial): New var.
	(long_options): Now const.  Add `--ignore-initial'.
	(usage): Sort options and add `--ignore-initial'.
	(main, cmp): Add `--ignore-initial' support.

	(main): `cmp - -' now succeeds.
	When comparing standard input to a file, and using a shortcut (e.g.
	looking at file sizes or inode numbers), take the lseek offset into
	account before deciding whether the files are identical.
	Avoid mentioning `dev_t', `ino_t' for portability to nonstandard hosts.
	Use l.c.m. of files' buffer sizes, not 8 * 1024.
	ferror (stdout) does not imply errno has a useful value.
	If 2nd file is "-", treat it first, in case stdin is closed.

	(cmp): Always compute `char_number', `smaller' for speed and simplicity.
	Say `cmp: EOF on input', not `/usr/gnu/bin/cmp: EOF on input',
	as per Posix.2.

	(block_compare_and_count): Increment line_number argument.
	Remove end_char argument; it's always '\n'.  All callers changed.
	Do not assume sizeof(long) == 4; this isn't true on some 64-bit hosts.
	(block_compare): Minimize differences with block_compare_and_count.

	(block_read): Coalesce `bp += nread's.

	(printc): Remove `FILE *' arg; output to stdout.  All callers changed.

	* configure.in: Configure HAVE_SIGACTION, RETSIGTYPE, HAVE_VPRINTF.
	Configure into config.h.

	* context.c (print_context_label):
	Standard input's st_mtime is no longer a special case
	here, since `compare_files' now sets it to the current time.

	* diff.c (usage): Sort options.
	(filetype): New function.
	(compare_files): Set stdin's st_mtime to be the current time.
	Leave its name "-" instead of changing it to "Standard Input";
	to test whether a file is stdin, we must compare its name to "-" instead
	of its desc to 0, since if it's closed other file descs may be 0.
	When comparing standard input to a file, and using a shortcut (e.g.
	looking at file sizes or inode numbers), take the lseek offset into
	account before deciding whether the files are identical.
	Pretend that nonexistent files have the same filetype as existing files.
	Rename `errorcount' to `failed', since it's boolean.
	In directory comparisons, if a file is neither a regular file nor a
	directory, just print its type and the other file's type.

	* diff.h (Is_space, textchar): Remove.
	(struct msg, msg_chain, msg_chain_end): Move to util.c.
	(VOID): Move to system.h.
	(line_cmp, version_string, change_letter, print_number_range,
	find_change): New decls.

	* diff.texi:
	whitespace -> white space.  It now stands for whatever isspace yields.
	Add --ignore-initial.

	* diff3.c (VOID): Move to system.h.
	(version_string): Now char[].
	(usage): Sort options.
	(process_diff): Pacify `gcc -Wall' with a useless assignment.
	(read_diff): pid is of type pid_t, not int.  Use waitpid if available.
	(output_diff3): Simplify test for `\ No newline at end of file' message.

	* dir.c (struct dirdata): Rename `files' to `names' to avoid confusion
	with external struct file_data `files'.

	* io.c (line_cmp): Move declaration to diff.h.
	(textchar): Remove.
	(find_and_hash_each_line): Use locale's definition of white space
	instead of using one hardwired defn for -b and another for -w.

	* normal.c (change_letter, print_number_range, find_change):
	Move decls to diff.h.
	(print_normal_hunk): Now static.

	* sdiff.c (SEEK_SET): Move to system.h.
	(version_string): Now char[], not char*.
	(private_tempnam): Remove hardcoded limit on temporary file names.
	(exiterr, perror_fatal, main): When exiting because of a signal,
	exit with that signal's status.
	(lf_refill, main, skip_white, edit, interact): Check for signal.
	(ignore_SIGINT): Renamed from `ignore_signals'.
	(NUM_SIGS, initial_handler): New macros.
	(initial_action, signal_received, sigs_trapped): New vars.
	(catchsig, trapsigs): Use sigaction if possible, since this closes the
	windows of vulnerability that `signal' has.  Use RETSIGTYPE not void.
	When a signal comes in, just set a global variable; this is safer.
	(checksigs, untrapsig): New functions.
	(edit): Pacify `gcc -Wall' with a useless assignment.
	Respond to each empty line with help, not to every other empty line.
	(private_tempnam): Remove hardcoded limit on temporary file name length.
	Don't assume sizeof (pid_t) <= sizeof (int).

	* system.h: (S_IXOTH, S_IXGRP, S_IXUSR,
	SEEK_SET, SEEK_CUR,
	STDIN_FILENO, STDOUT_FILENO, STDERR_FILENO):
	New macros, if system doesn't define them.
	(volatile): Don't define if already defined.
	(PARAMS): New macro.
	(VOID): Move here from diff.h.

	* util.c (struct msg, msg_chain, msg_chain_end): Moved here from diff.h.
	(message5): New function.
	(pr_pid): New var.
	(begin_output): Allocate `name' more precisely.
	Put child pid into pr_pid, so that we can wait for it later.
	Don't check execl's return value, since any return must be an error.
	(finish_output): Detect and report output errors.
	Use waitpid if available.  Check pr exit status.
	(line_cmp): Use locale's definition of white space
	instead of using one hardwired defn for -b and another for -w.
	(analyze_cmp): Avoid double negation with `! nontrivial'.
	Pacify `gcc -Wall' be rewriting for-loop into do-while-loop.
	(dir_file_pathname): New function.

	* version.c (version_string): Now char[], not char*.

Thu Jul 29 20:44:30 1993  David J. MacKenzie  (djm@wookumz.gnu.ai.mit.edu)

	* Makefile.in (config.status): Run config.status --recheck, not
	configure, to get the right args passed.

Thu Jul 22 10:46:30 1993  Paul Eggert  (eggert@twinsun.com)

	* Makefile.in (dist): Replace `if [ ! TEST ]; then ACTION; fi'
	with `[ TEST ] || ACTION || exit' so that the containing for-loop exits
	with proper status for `make'.

Thu Jul  8 19:47:22 1993  David J. MacKenzie  (djm@goldman.gnu.ai.mit.edu)

	* Makefile.in (installdirs): New target.
	(install): Use it.
	(Makefile, config.status, configure): New targets.

Sat Jun  5 23:10:40 1993  Paul Eggert  (eggert@twinsun.com)

	* Makefile.in (dist): Switch from .z to .gz.

Wed May 26 17:16:02 1993  Paul Eggert  (eggert@twinsun.com)

	* diff.c (main): Cast args to compare_files, for traditional C.
	* side.c (print_sdiff_common_lines, print_sdiff_hunk): Likewise.
	* analyze.c, diff3.c, sdiff.c, util.c: Don't assume NULL is defined
	properly.

Tue May 25 14:54:05 1993  Paul Eggert  (eggert@twinsun.com)

	* analyze.c (diff_2_files):  With -q, do not report that files differ
	if all their differences are ignored.
	(briefly_report): New function.
	* diff.h (ignore_some_changes): New variable.
	* diff.c (compare_files): Don't use the file size shortcut if
	ignore_some_changes is nonzero, since the file size may differ
	merely due to ignored changes.
	(main):  Set ignore_some_changes if we might ignore some changes.
	Remove unsystematic assignment of 0 to static vars.
	* io.c (read_files): New argument PRETEND_BINARY says whether to
	pretend the files are binary.

	* diff3.c (tab_align_flag): New variable, for new -T option.
	(main, usage, output_diff3): Add support for -T.

Sun May 23 15:25:29 1993  Richard Stallman  (rms@mole.gnu.ai.mit.edu)

	* dir.c (dir_sort): Always init `data' to avoid GCC warning.

Sat May 22 15:35:02 1993  Paul Eggert  (eggert@twinsun.com)

	* Makefile.in (dist): Change name of package from diff to diffutils.
	Don't bother to build .Z dist; .z suffices.

Fri May 21 16:35:22 1993  Paul Eggert  (eggert@twinsun.com)

	* diff.c: Include "system.h" to get memchr declaration.
	* system.h (memchr): Declare if !HAVE_MEMCHR, not if
	!HAVE_MEMCHR && !STDC_HEADERS.

Wed May 19 17:43:55 1993  Paul Eggert  (eggert@twinsun.com)

	* Version 2.3 released.

Fri Apr 23 17:18:44 1993  Paul Eggert  (eggert@twinsun.com)

	* io.c (find_identical_ends): Do not discard the last HORIZON_LINES
	lines of the prefix, or the first HORIZON_LINES lines of the suffix.
	* diff.c (main, longopts, usage): Add --horizon-lines option.
	* diff3.c (main, process_diff, read_diff): Invoke second diff
	with --horizon-lines determined by the first diff.
	* diff.h, diff3.c (horizon_lines): New variable.

Mon Mar 22 16:16:00 1993  Roland McGrath  (roland@churchy.gnu.ai.mit.edu)

	* system.h [HAVE_STRING_H || STDC_HEADERS] (bcopy, bcmp, bzero):
	Don't define if already defined.

Fri Mar  5 00:20:16 1993  Richard Stallman  (rms@mole.gnu.ai.mit.edu)

	* diff.c (main): Use NULL in arg to compare_files.

Thu Feb 25 15:26:01 1993  Roland McGrath  (roland@churchy.gnu.ai.mit.edu)

	* system.h: Declare memchr #if !HAVE_MEMCHR && !STDC_HEADERS,
	not #if !HAVE_MEMCHR || !STDC_HEADERS.

Mon Feb 22 15:04:46 1993  Richard Stallman  (rms@geech.gnu.ai.mit.edu)

	* io.c (find_identical_ends): Move complicated arg outside GUESS_LINES.

Mon Feb 22 12:56:12 1993  Roland McGrath  (roland@churchy.gnu.ai.mit.edu)

	* Makefile.in (.c.o): Add -I$(srcdir); put $(CFLAGS) last before $<.

Sat Feb 20 19:18:56 1993  Richard Stallman  (rms@mole.gnu.ai.mit.edu)

	* io.c (binary_file_p): Return zero if file size is zero.

Fri Feb 19 17:31:32 1993  Roland McGrath  (roland@geech.gnu.ai.mit.edu)

	* Version 2.2 released.

	* system.h [HAVE_STRING_H || STDC_HEADERS] (index, rindex): Don't
	define if already defined.

Wed Feb 17 17:08:00 1993  Roland McGrath  (roland@churchy.gnu.ai.mit.edu)

	* Makefile.in (srcs): Remove limits.h.

Thu Feb 11 03:36:00 1993  Richard Stallman  (rms@mole.gnu.ai.mit.edu)

	* diff3.c (xmalloc): No longer static.

	* sdiff.c (edit): Allocate buf dynamically.

	* dir.c (dir_sort): Handle VOID_CLOSEDIR.

Wed Feb 10 00:15:54 1993  Richard Stallman  (rms@mole.gnu.ai.mit.edu)

	* limits.h: File deleted (should never have been there).

Tue Feb  9 03:53:22 1993  Richard Stallman  (rms@mole.gnu.ai.mit.edu)

	* Makefile.in (.c.o, diff3.o, sdiff.o): Put $(CFLAGS) last.

Wed Feb  3 15:42:10 1993  David J. MacKenzie  (djm@goldman.gnu.ai.mit.edu)

	* system.h: Don't #define const; let configure do it.

Mon Feb  1 02:13:23 1993  Paul Eggert  (eggert@hal.gnu.ai.mit.edu)

	* Version 2.1 released.

	* Makefile.in (dist): Survive ln failures.  Create .tar.z
	(gzipped tar) file as well as .tar.Z (compressed tar) file.

Fri Jan  8 22:31:41 1993  Paul Eggert  (eggert@twinsun.com)

	* side.c (print_half_line): When the input position falls
	outside the column, do not output a tab even if the output
	position still falls within the column.

Mon Dec 21 13:54:36 1992  David J. MacKenzie  (djm@kropotkin.gnu.ai.mit.edu)

	* Makefile.in (.c.o): Add -I.

Fri Dec 18 14:08:20 1992  Paul Eggert  (eggert@twinsun.com)

	* configure.in: Add HAVE_FCNTL_H, since system.h uses it.

Tue Nov 24 10:06:48 1992  David J. MacKenzie  (djm@goldman.gnu.ai.mit.edu)

	* Makefile.in: Note change from USG to HAVE_STRING_H.

Mon Nov 23 18:44:00 1992  Paul Eggert  (eggert@twinsun.com)

	* io.c (find_and_hash_each_line): When running out of lines,
	double the number of allocated lines, instead of just doubling
	that number minus the prefix lines.  This is more likely to
	avoid the need for further memory allocation.

Wed Nov 18 20:40:28 1992  Paul Eggert  (eggert@twinsun.com)

	* dir.c (dir_sort): Plug memory leak: space holding directory
	contents was not being reclaimed.  Get directory size from
	struct file_data for initial guess at memory needed.
	Detect errors when reading and closing directory.
	(diff_dirs): Pass struct file_data to dir_sort.  Finish plugging leak.
	* diff.c (compare_files): Pass struct file_data to diff_dirs.

	* io.c (find_and_hash_each_line): Don't assume alloc_lines is
	nonzero when allocating more lines.

Thu Nov 12 16:02:18 1992  Paul Eggert  (eggert@twinsun.com)

	* diff.c (main): Add `-U lines' as an alias for `--unified=lines'.

	* diff3.c (usage): Add third --label option in example.

	* util.c (analyze_hunk): Fix test for ignoring blank lines.

	* configure.in, system.h: Avoid USG; use HAVE_TIME_H etc. instead.

Mon Nov  9 05:13:25 1992  Paul Eggert  (eggert@twinsun.com)

	* diff3.c (main, usage): Add -A or --show-all.
	-m now defaults to -A, not -E.  Allow up to three -L options.
	(output_diff3_edscript, output_diff3_merge):
	Remove spurious differences between these two functions.
	Output ||||||| for -A.  Distinguish between conflicts and overlaps.
	(dotlines, undotlines): New functions that output `Ns', not `N,Ns'.
	(output_diff3_edscript, output_diff3_merge): Use them.

	* io.c (find_identical_ends): shift_boundaries needs an extra
	identical line at the end, not at the beginning.

	* sdiff.c (edit): execvp wants char **, not const char **.

Mon Oct 19 04:39:32 1992  Paul Eggert  (eggert@twinsun.com)

	* context.c (print_context_script, find_function): Context
	line numbers start with - file->prefix_lines, not 0.

	* io.c (binary_file_p): Undo last change; it was a library bug.

Sun Oct 18 00:17:29 1992  Richard Stallman  (rms@mole.gnu.ai.mit.edu)

	* io.c (binary_file_p): Consider empty file as non-binary.

Mon Oct  5 05:18:46 1992  Paul Eggert  (eggert@twinsun.com)

	* diff3.c (main, make_3way_diff, using_to_diff3_block): Don't
	report bogus differences (for one of -mexEX3) just because the
	file0-file1 diffs don't line up with the file0-file2 diffs.
	(This is entirely possible since we don't use diff's -n
	option.)  Always compare file1 to file2, so that diff3 sees
	those changes directly.  Typically, file2 is now the common
	file, not file0.
	(output_diff3_merge): The input file is file 0, not the common file.

	(FC, FO): New macros; they replace FILE1, FILE0 for two-way diffs,
	to distinguish them from three-way diffs.

	* diff3.c (using_to_diff3_block): Fold repeated code into loops.

	* diff3.c (make_3way_diff, process_diff): Have the *_end
	variable point to the next field to be changed, not to the last
	object allocated; this saves an if-then-else.

	* diff3.c (process_diff): Use D_NUMLINES instead of its definiens.

	* diff3.c: Make fns and vars static unless they must be external.

Wed Sep 30 09:21:59 1992  Paul Eggert  (eggert@twinsun.com)

	* analyze.c (diff_2_files): OUTPUT_IFDEF is now robust.
	* diff.h (ROBUST_OUTPUT_STYLE): Likewise.
	(default_line_format): Remove.  All refs removed.

	* ifdef.c (print_ifdef_lines): Add %L.  Optimize %l\n even if user
	specified it, as opposed to its being the default.

Tue Sep 29 19:01:28 1992  Paul Eggert  (eggert@twinsun.com)

	* diff.c (longopts, main): --{old,new,unchanged,changed}--group-format
	are new options, so that -D is no longer overloaded.  Set
	no_diff_means_no_output if --unchanged-{line,group}-format allows it.
	* diff.h (enum line_class): New type.
	(group_format, line_format): Use it to regularize option flags.
	All refs changed.

	* ifdef.c (format_ifdef, print_ifdef_lines): %n is no longer a format.

Mon Sep 28 04:51:42 1992  Paul Eggert  (eggert@twinsun.com)

	* diff.c (main, usage): Replace --line-prefix with the more general
	--{old,new,unchanged}-line-format options.
	* ifdef.c (format_ifdef, print_ifdef_lines): Likewise.
	* diff.h (line_format): Renamed from line_prefix.  All refs changed.
	* diff.h, ifdef.c (default_line_format): New variable.
	* util.c (output_1_line): New function.
	(print_1_line): Use it.

	* ifdef.c: (format_ifdef, print_ifdef_lines): Add %0 format.

Sun Sep 27 05:38:13 1992  Paul Eggert  (eggert@twinsun.com)

	* diff.c (main): Add -E or --line-prefix option.  Add -D'=xxx'
	for common lines.  Change default -D< format from copy of -D>
	format to to -D<%<; similarly for default -D> format.
	* diff.h (common_format, line_prefix): New variables.
	* ifdef.c (format_ifdef): New function.
	(print_ifdef_script, print_ifdef_hunk, print_ifdef_lines):
	Use it for -D'=xxx', -E.

	* context.c (find_hunk): Glue together two non-ignorable changes that
	are exactly CONTEXT * 2 lines apart.  This shortens output, removes
	a behavioral discontinuity at CONTEXT = 0, and is more compatible
	with traditional diff.

	* io.c (find_identical_ends): Slurp stdin at most once.

	* util.c (print_line_line): line_flag is const char *.

Thu Sep 24 15:18:07 1992  Paul Eggert  (eggert@twinsun.com)

	* ifdef.c (print_ifdef_lines): New function, which fwrites a sequence
	of lines all at once for speed.
	(print_ifdef_script, print_ifdef_hunk): Use it.

Thu Sep 24 05:54:14 1992  Paul Eggert  (eggert@twinsun.com)

	* diff.c (main): Support new -D options for if-then-else formats.
	(specify_format): New function.
	* diff.h (ifndef_format, ifdef_format, ifnelse_format): New variables.
	* ifdef.c (print_ifdef_hunk): Use the new variables instead of
	a hardwired format.

	* side.c (print_1sdiff_line): Represent incomplete lines on output.
	(print_sdiff_script): Likewise.  Don't print 'q' at end,
	since that doesn't work with incomplete lines.
	* sdiff.c (interact): Don't assume diff output ends with 'q' line.
	* diff.h (ROBUST_OUTPUT_STYLE): OUTPUT_SDIFF is now robust.

	* sdiff.c (lf_copy, lf_snarf): Use memchr instead of index,
	to avoid dumping core when files contain null characters.
	(memchr): New function (if memchr is missing).

	* io.c (sip): New arg SKIP_TEST to skip test for binary file.
	(read_files): Don't bother testing second file if first is binary.

Thu Sep 17 21:17:49 1992  David J. MacKenzie  (djm@nutrimat.gnu.ai.mit.edu)

	* system.h [!USG && !_POSIX_VERSION]: Protect from conflicting
	prototype for wait in sys/wait.h.

Wed Sep 16 12:32:18 1992  David J. MacKenzie  (djm@nutrimat.gnu.ai.mit.edu)

	* Makefile.in: Include binprefix in -DDIFF_PROGRAM.

Tue Sep 15 14:27:25 1992  David J. MacKenzie  (djm@nutrimat.gnu.ai.mit.edu)

	* Version 2.0.

Sat Sep 12 01:31:19 1992  David J. MacKenzie  (djm@nutrimat.gnu.ai.mit.edu)

	* util.c, diff.h, system.h [!HAVE_MEMCHR]: Don't use void *
	and const when declaring memchr replacement.  Declare memchr
	if !STDC_HEADERS && !USG.

Thu Sep 10 15:17:32 1992  David J. MacKenzie  (djm@nutrimat.gnu.ai.mit.edu)

	* Makefile.in (uninstall): New target.

	* diff.c (excluded_filename): Use fnmatch, not wildmat.
	(usage): Document -x, -X, --exclude, --exclude-from.
	Makefile.in: Use fnmatch.c, not wildmat.c.

Sun Sep  6 23:46:25 1992  Paul Eggert (eggert@twinsun.com)

	* configure.in: Add HAVE_MEMCHR.
	* diff.h, util.c: Use it instead of MEMCHR_MISSING.

Sun Sep  6 07:25:49 1992  Paul Eggert (eggert@twinsun.com)

	* diff.h: (struct line_def): Replace this 3-word struct with char *.
	This uses less memory, particularly for large files with short lines.
	(struct file_data): New member linbuf_base counts number of lines
	in common prefix that are not recorded in linbuf;
	this uses less memory if files are identical or differ only at end.
	New member buffered_lines counts possibly differing lines.
	New member valid_lines counts valid data.
	New member alloc_lines - linbuf_base replaces old linbufsize.
	linbuf[0] now always points at first differing line.
	Remove unused members ltran, suffix_lines.
	Add const where appropriate.
	(Is_space): New macro, for consistent definition of `white space'.
	(excluded_filename, memchr, sip, slurp): New declarations.
	* ed.c (print_ed_hunk): Adjust to diff.h's struct changes.
	* context.c (pr_context_hunk): Likewise.
	* ifdef.c (print_ifdef_script): Likewise.
	* side.c (print_sdiff_script, print_half_line): Likewise.
	* util.c (analyze_hunk, line_cmp, print_1_line): Likewise.

	* analyze.c (shift_boundaries): Remove unneeded variable `end' and
	unnecessary comparisons of `preceding' and `other_preceding' against 0.
	(diff_2_files): When comparing files byte-by-byte for equality,
	don't slurp them all in at once; just compare them a buffer at a time.
	This can win big if they differ early on.
	Move some code to compare_files to enable this change.
	Use only one buffer for stdin with `diff - -'.
	(discard_confusing_lines, diff_2_files): Coalesce malloc/free calls.
	(build_script): Remove obsolete OUTPUT_RCS code.

	* diff.c (add_exclude, add_exclude_file, excluded_filename): New fns.
	(main): Use them for the new --exclude and --exclude-from options.
	(compare_files): Don't open a file unless it must be read.
	Treat `diff file file' and `diff file dir' similarly.
	Move some code here from diff_2_files to enable this.
	Simplify file vs dir warning.

	* dir.c (dir_sort): Support new --exclude* options.

	* io.c (struct equivclass): Put hash code and line length here instead
	of struct line_def, so that they can be shared.
	(find_and_hash_each_line): Compute equivalence class as we go,
	instead of doing it in a separate pass; this thrashes memory less.
	Make buckets realloc-able, since we can't preallocate them.
	Record one more line start than there are lines, so that we can compute
	any line's length by subtracting its start from the next line's,
	instead of storing the length explicitly.  This saves memory.
	Move prefix-handling code to find_identical_ends;
	this wins with large prefixes.
	Use Is_space, not is_space, for consistent treatment of white space.
	(prepare_text_end): New function.
	(find_identical_ends): Move slurping here, so it's only done when
	needed.  Work even if the buffers are the same (because of `diff - -').
	Compare prefixes a word at a time for speed.
	(find_equiv_class): Delete; now done by find_and_hash_each_line.
	(read_files): Don't slurp unless needed.
	find_equiv_class's work is now folded into find_and_hash_each_line.
	Don't copy stdin buffer if `diff - -'.
	Check for running out of primes.
	(sip, slurp): Split first part of `slurp' into another function `sip'.
	`sip' sets things up and perhaps reads the first ST_BLKSIZE buffer to
	see whether the file is binary; `slurp' now just finishes the job.
	This lets diff_2_files compare binary files lazily.
	Allocate a one-word sentinel to allow word-at-a-time prefix comparison.
	Count prefix lines only if needed, only count the first file's prefix.
	Don't bother to count suffix lines; it's never needed.
	Set up linbuf[0] to point at first differing line.
	(binary_file_p): Change test for binary files:
	if it has a null byte in its first buffer, it's binary.
	(primes): Add more primes.

	* util.c (line_cmp): Use bcmp for speed.
	Use Is_space, not is_space, for consistent treatment of white space.
	(translate_line_number): Internal line numbers now count from 0
	starting after the prefix.
	(memchr): New function (if memchr is missing).

	* Makefile.in: Document HAVE_ST_BLKSIZE.  Link with wildmat.o.
	* system.h (STAT_BLOCKSIZE): New macro based on HAVE_ST_BLKSIZE.
	* configure.in: Add AC_ST_BLKSIZE.
	* wildmat.c: New file.

Fri Sep  4 01:28:51 1992  Richard Stallman  (rms@mole.gnu.ai.mit.edu)

	* sdiff.c (xmalloc): Renamed from ck_malloc.  Callers changed.

Thu Sep  3 15:28:59 1992  David J. MacKenzie  (djm@nutrimat.gnu.ai.mit.edu)

	* diff.h: Don't declare free, index, rindex.

Tue Aug 11 22:18:06 1992  John Gilmore  (gnu at cygnus.com)

	* io.c (binary_file_p):  Use heuristic to avoid declaring info
	files as binary files.  Allow about 1.5% non-printing
	characters (in info's case, ^_).

Tue Jul  7 01:09:26 1992  David J. MacKenzie  (djm@nutrimat.gnu.ai.mit.edu)

	* diff.h: Replace function_regexp and ignore_regexp with lists
	of compiled regexps.
	* analyze.c, context.c, util.c: Test whether the lists, not
	the old variables, are empty.
	* util.c (analyze_hunk), context.c (find_function): Compare
	lines with the lists of regexps.
	* diff.c (add_regexp): New function.
	(main): Use it.

	* diff3: Add -v --version option.
	* Makefile.in: Link with version.o.

	* system.h: New file.
	* diff.h, cmp.c, diff3.c, sdiff.c: Use it.

	* diff.h, diff3.c: Include string.h or strings.h, as appropriate.
	Declare malloc and realloc.

	* diff3.c (perror_with_exit): Include program name in message.

	* diff3.c: Lowercase error messages for GNU standards.

	* sdiff.c [USG || STDC_HEADERS]: Define bcopy in terms of memcpy.

	* sdiff.c: Use the version number from version.c.
	* Makefile.in: Link with version.o.

	* cmp.c error.c xmalloc.c: New files from textutils.
	* Makefile.in: Add rules for them.

	* diff.c (longopts): --unidirectional-new-file is like -P, not -N.
	Rename --file-label to --label (leave old name, but undocumented).

	* sdiff.c, diff.c (usage): Condense messages and fix some errors.

	* diff3.c (main, usage): Add long-named options.

Fri Jul  3 14:31:18 1992  David J. MacKenzie  (djm@nutrimat.gnu.ai.mit.edu)

	* diff.h, diff3.c, sdiff.c: Change FOO_MISSING macros to HAVE_FOO.

Thu Jun 25 16:59:47 1992  David J. MacKenzie  (djm@apple-gunkies.gnu.ai.mit.edu)

	* diff.c: --reversed-ed -> --forward-ed.

Wed Feb 26 12:17:32 1992  Paul Eggert  (eggert@yata.uucp)

	* analyze.c, diff.c, diff.h, io.c: For -y, compare even if same file.

Fri Feb 14 22:46:38 1992  Richard Stallman  (rms@mole.gnu.ai.mit.edu)

	* io.c, diff3.c, analyze.c: Add extra parentheses.

Sun Feb  9 00:22:42 1992  Richard Stallman  (rms@mole.gnu.ai.mit.edu)

	* diff.h (unidirectional_new_file_flag): New variable.
	* diff.c (main): Set that for -P.
	(compare_files): Support -P, somewhat like -N.
	(longopts): Support long name for -P.

Sat Jan  4 20:10:34 1992  Paul Eggert (eggert at yata.uucp)

	* Makefile.in: Distribute diff.info-* too.

	* README, sdiff.c: version number now matches version.c.

	* configure: Fix and document vfork test.

	* ifdef.c: Don't dump core if `diff -Dx f f'.

Mon Dec 23 23:36:08 1991  David J. MacKenzie  (djm at wookumz.gnu.ai.mit.edu)

	* diff.h, diff3.c, sdiff.c: Change POSIX ifdefs to
	HAVE_UNISTD_H and _POSIX_VERSION.

Wed Dec 18 17:00:31 1991  David J. MacKenzie  (djm at wookumz.gnu.ai.mit.edu)

	* Makefile.in (srcs): Add sdiff.c.
	(tapefiles): Add diff.texi and diff.info.

	* diff.h, diff3.c, sdiff.c: Use HAVE_VFORK_H instead of
	VFORK_HEADER and VFORK_WORKS.

Tue Dec 17 00:02:59 1991  Paul Eggert  (eggert at yata.uucp)

	* Makefile.in (all): Add diff.info, sdiff.

	* configure, diff.c, sdiff.c:
	Prefix long options with `--', not `+'.
	* diff.c: Regularize option names.

	* configure: Fix check for vfork.
	* configure, diff.c, diff.h, diff3.c, sdiff.c:
	Use Posix definitions when possible.

	* context.c: Align context with tab if -T is given.  Tune.
	* diff.c, diff.h, side.c: Calculate column widths so that tabs line up.
	* io.c: Add distinction between white space and printing chars.
	* side.c: Don't expand tabs unless -t is given.
	* side.c, util.c: Tab expansion now knows about '\b', '\f', '\r', '\v'.
	* util.c: -w skips all white space.  Remove lint.  Tune.

	* sdiff.c: Support many more diff options, e.g. `-', `sdiff file dir'.
	Ignore interrupts while the subsidiary editor is in control.
	Clean up temporary file and kill subsidiary diff if interrupted.
	Ensure subsidiary diff doesn't ignore SIGPIPE.
	Don't get confused while waiting for two subprocesses.
	Don't let buffers overflow.  Check for I/O errors.
	Convert to GNU style.  Tune.

	* sdiff.c, util.c: Don't lose errno.
	Don't confuse sdiff with messages like `Binary files differ'.
	* sdiff.c, side.c: Don't assume that common lines are identical.
	Simplify --sdiff-merge-assist format.

Mon Sep 16 16:42:01 1991  Tom Lord  (lord at churchy.gnu.ai.mit.edu)

	* Makefile.in, sdiff.c: introduced sdiff front end to diff.

	* Makefile.in, analyze.c, diff.c, diff.h, io.c, side.c: Added
	sdiff-style output format to diff.

Mon Aug 26 16:44:55 1991  David J. MacKenzie  (djm at pogo.gnu.ai.mit.edu)

	* Makefile.in, configure: Only put $< in Makefile if using VPATH,
	because older makes don't understand it.

Fri Aug  2 12:22:30 1991  David J. MacKenzie  (djm at apple-gunkies)

	* configure: Create config.status.  Remove it and Makefile if
	interrupted while creating them.

Thu Aug  1 22:24:31 1991  David J. MacKenzie  (djm at apple-gunkies)

	* configure: Check for +srcdir etc. arg and look for
	Makefile.in in that directory.  Set VPATH if srcdir is not `.'.
	* Makefile.in: Get rid of $(archpfx).

Tue Jul 30 21:28:44 1991  Richard Stallman  (rms at mole.gnu.ai.mit.edu)

	* Makefile.in (prefix): Renamed from DESTDIR.

Wed Jul 24 23:08:56 1991  David J. MacKenzie  (djm at wookumz.gnu.ai.mit.edu)

	* diff.h, diff3.c: Rearrange ifdefs to use POSIX,
	STDC_HEADERS, VFORK_MISSING, DIRENT.  This way it works on
	more systems that aren't pure USG or BSD.
	Don't not define const if __GNUC__ is defined -- that would
	break with -traditional.
	* configure: Check for those features.

Wed Jul 10 01:39:23 1991  David J. MacKenzie  (djm at wookumz.gnu.ai.mit.edu)

	* configure, Makefile.in: $(INSTALLPROG) -> $(INSTALL).

Sat Jul  6 16:39:04 1991  David J. MacKenzie  (djm at geech.gnu.ai.mit.edu)

	* Replace Makefile with configure and Makefile.in.
	Update README with current compilation instructions.

Sat Jul  6 14:03:29 1991  Richard Stallman  (rms at mole.gnu.ai.mit.edu)

	* util.c (setup_output): Just save the args for later use.
	(begin_output): Do the real work, with the values that were saved.
	It's safe to call begin_output more than once.
	Print the special headers for context format here.
	* analyze.c (diff_2_files): Don't print special headers here.
	* context.c (pr_context_hunk, pr_unidiff_hunk): Call begin_output.
	* ed.c (print_ed_hunk, print_forward_ed_hunk, print_rcs_hunk):
	* normal.c (print_normal_hunk): Likewise.
	* ifdef.c (print_ifdef_hunk): Likewise.
	* util.c (finish_output): Don't die if begin_output was not called.

Thu Jun 20 23:10:01 1991  David J. MacKenzie  (djm at geech.gnu.ai.mit.edu)

	* Makefile: Add TAGS, distclean, and realclean targets.
	Set SHELL.

Tue Apr 30 13:54:36 1991  Richard Stallman  (rms at mole.gnu.ai.mit.edu)

	* diff.h (TRUE, FALSE): Undefine these before defining.

Thu Mar 14 18:27:27 1991  Richard Stallman  (rms@mole.ai.mit.edu)

	* Makefile (objs): Include $(ALLOCA).

Sat Mar  9 22:34:03 1991  Richard Stallman  (rms at mole.ai.mit.edu)

	* diff.h: Include regex.h.

Thu Feb 28 18:59:53 1991  Richard Stallman  (rms at mole.ai.mit.edu)

	* Makefile (diff3): Link with GNU getopt.

Sat Feb 23 12:49:43 1991  Richard Stallman  (rms at mole.ai.mit.edu)

	* io.c (find_equiv_class): Make hash code unsigned before mod.

	* diff.h (files): Add EXTERN.

Sun Jan 13 21:33:01 1991  Richard Stallman  (rms at mole.ai.mit.edu)

	* diff.c: +print option renamed +paginate.  Remove +all-text.

Mon Jan  7 06:18:01 1991  David J. MacKenzie  (djm at geech.ai.mit.edu)

	* Makefile (dist): New target, replacing diff.tar and
	diff.tar.Z, to encode version number in distribution directory
	and tar file names.

Sun Jan  6 18:42:23 1991  Michael I Bushnell  (mib at geech.ai.mit.edu)

	* Version 1.15 released.

	* version.c: Updated from 1.15 alpha to 1.15

	* context.c (print_context_number_range,
	print_unidiff_number_range): Don't print N,M when N=M, print
	just N instead.

	* README: Updated for version 1.15.
	Makefile: Updated for version 1.15.

	* diff3.c (main): Don't get confused if one of the arguments
	is a directory.

	* diff.c (compare_files): Don't get confused if comparing
	standard input to a directory; print error instead.

	* analyze.c (diff_2_files), context.c (print_context_header,
	print_context_script), diff.c (main), diff.h (enum
	output_style): Tread unidiff as an output style in its own
	right.  This also generates an error when both -u and -c are
	given.

	* diff.c (main): Better error messages when regexps are bad.

	* diff.c (compare_files): Don't assume stdin is opened.

	* diff3.c (read_diff): Don't assume things about the order of
	descriptor assignment and closes.

	* util.c (setup_output): Don't assume things about the order
	of descriptor assignment and closes.

	* diff.c (compare_files): Set a flag so that closes don't
	happen more than once.

	* diff.c (main): Don't just flush stdout, do a close.  That
	way on broken systems we can still get errors.

Mon Dec 24 16:24:17 1990  Richard Stallman  (rms at mole.ai.mit.edu)

	* diff.c (usage): Use = for args of long options.

Mon Dec 17 18:19:20 1990  Michael I Bushnell  (mib at geech.ai.mit.edu)

	* context.c (print_context_label): Labels were interchanged badly.

	* context.c (pr_unidiff_hunk): Changes to deal with files
	ending in incomplete lines.
	* util.c (print_1_line): Other half of the changes.

Mon Dec  3 14:23:55 1990  Richard Stallman  (rms at mole.ai.mit.edu)

	* diff.c (longopts, usage): unidiff => unified.

Wed Nov  7 17:13:08 1990  Richard Stallman  (rms at mole.ai.mit.edu)

	* analyze.c (diff_2_files): No warnings about newlines for -D.

	* diff.c (pr_unidiff_hunk): Remove ref to output_patch_flag.

Tue Oct 23 23:19:18 1990  Richard Stallman  (rms at mole.ai.mit.edu)

	* diff.c (compare_files): For -D, compare even args are same file.
	* analyze.c (diff_2_files): Likewise.
	Also, output even if files have no differences.

	* analyze.c (diff_2_files): Print missing newline messages last.
	Return 2 if a newline is missing.
	Print them even if files end with identical text.

Mon Oct 22 19:40:09 1990  Richard Stallman  (rms at mole.ai.mit.edu)

	* diff.c (usage): Return 2.

Wed Oct 10 20:54:04 1990  Richard Stallman  (rms at mole.ai.mit.edu)

	* diff.c (longopts): Add +new-files.

Sun Sep 23 22:49:29 1990  Richard Stallman  (rms at mole.ai.mit.edu)

	* context.c (print_context_script): Handle unidiff_flag.
	(print_context_header): Likewise.
	(print_unidiff_number_range, pr_unidiff_hunk): New functions.
	* diff.c (longopts): Add element for +unidiff.
	(main): Handle +unidiff and -u.
	(usage): Mention them.

Wed Sep  5 16:33:22 1990  Richard Stallman  (rms at mole.ai.mit.edu)

	* io.c (find_and_hash_each_line): Deal with missing final newline
	after buffering necessary context lines.

Sat Sep  1 16:32:32 1990  Richard Stallman  (rms at mole.ai.mit.edu)

	* io.c (find_identical_ends): ROBUST_OUTPUT_FORMAT test was backward.

Thu Aug 23 17:17:20 1990  Richard Stallman  (rms at mole.ai.mit.edu)

	* diff3.c (WIFEXITED): Undef it if WEXITSTATUS is not defined.
	* context.c (find_function): Don't try to return values.

Wed Aug 22 11:54:39 1990  Richard Stallman  (rms at mole.ai.mit.edu)

	* diff.h (O_RDONLY): Define if not defined.

Tue Aug 21 13:49:26 1990  Richard Stallman  (rms at mole.ai.mit.edu)

	* Handle -L option.
	* context.c (print_context_label): New function.
	(print_context_header): Use that.
	* diff.c (main): Recognize the option.
	(usage): Updated.
	* diff.h (file_label): New variable.
	* diff3.c (main): Recognize -L instead of -t.

	* diff3.c (main): Support -m without other option.

	* diff3.c (WEXITSTATUS, WIFEXITED): Define whenever not defined.

	* diff3.c (bcopy, index, rindex): Delete definitions; not used.
	(D_LINENUM, D_LINELEN): Likewise.
	(struct diff_block): lengths includes newlines.
	(struct diff3_block): Likewise.
	(always_text, merge): New variables.
	(read_diff): Return address of end, not size read.  Calls changed.
	Pass -a to diff if given to diff3.
	current_chunk_size now an int.  Detect error in `pipe'.
	Check for incomplete line of output here.
	(scan_diff_line): Don't make scan_ptr + 2 before knowing it is valid.
	No need to check validity of diff output here.
	Include newline in length of line.
	(main): Compute rev_mapping here.  Handle -a and -m.
	Error message if excess -t operands.  Error for incompatible options.
	Error if `-' given more than once.
	Fix error storing in tag_strings.
	(output_diff3): REV_MAPPING is now an arg.  Call changed.
	Change syntax of "missing newline" message.
	Expect length of line to include newline.
	(output_diff3_edscript): Return just 0 or 1.
	REV_MAPPING is now an arg.  Call changed.
	(output_diff3_merge): New function.
	(process_diff): Better error message for bad diff format.
	(fatal, perror_with_exit): Return status 2.

	* analyze.c (diff_2_files): Report missing newline in either
	or both files, if not robust output style.

	* util.c (setup_output): Detect error from pipe.
	No need to close stdin.

	* util.c (print_1_line): Change format of missing-newline msg.
	Change if statements to switch.

	* io.c (slurp): Don't mention differences in final newline if -B.

	* io.c (binary_file_p): Use ISO char set as criterion, not ASCII.

	* io.c (find_identical_ends): Increase value of BEG0 by 1.
	Other changes in backwards scan to avoid decrementing pointers
	before start of array, and set LINES properly.

	* diff.h (ROBUST_OUTPUT_STYLE): New macro.
	* io.c (find_identical_ends, find_and_hash_each_line): Use that macro.

	* diff.h (dup2): Don't define if XENIX.

	* diff.c (main): Check for write error at end.

	* context.c (find_function): Don't return a value.
	Use argument FILE rather than global files.

	* analyze.c: Add external function declarations.
	* analyze.c (build_script): Turn off explicit check for final newline.

	* analyze.c (discard_confusing_lines): Make integers unsigned.

Tue Jul 31 21:37:16 1990  Richard Stallman  (rms at sugar-bombs.ai.mit.edu)

	* io.c (find_and_hash_each_line): Correct the criterion
	for leaving out the newline from the end of the line.

Tue May 29 21:28:16 1990  Richard Stallman  (rms at sugar-bombs.ai.mit.edu)

	* dir.c (diff_dirs): Free things only if nonzero.

Mon Apr 16 18:31:05 1990  Richard Stallman  (rms at sugar-bombs.ai.mit.edu)

	* diff.h (NDIR_IN_SYS): New macro controls location of ndir.h.

	* diff3.c (xmalloc, xrealloc): Don't die if size == 0 returns 0.

Sun Mar 25 15:58:42 1990  Richard Stallman  (rms at sugar-bombs.ai.mit.edu)

	* analyze.c (discard_confusing_lines):
	`many' wasn't being used; use it.
	Canceling provisionals near start of run must handle already
	canceled provisionals.
	Canceling subruns of provisionals was canceling last nonprovisional.

Sat Mar 24 14:02:51 1990  Richard Stallman  (rms at sugar-bombs.ai.mit.edu)

	* analyze.c (discard_confusing_lines):
	Threshold for line occurring many times scales by square root
	of total lines.
	Within each run, cancel any long subrun of provisionals.
	Don't update `provisional' while canceling provisionals.
	In big outer loop, handle provisional and nonprovisional separately.

Thu Mar 22 16:35:33 1990  Richard Stallman  (rms at sugar-bombs.ai.mit.edu)

	* analyze.c (discard_confusing_lines):
	The first loops to discard provisionals from ends failed to step.
	In second such loops, keep discarding all consecutive provisionals.
	Increase threshold for stopping discarding, and also check for
	consecutive nondiscardables as separate threshold.

Fri Mar 16 00:33:08 1990  Richard Stallman  (rms at sugar-bombs.ai.mit.edu)

	* diff3.c (read_diff): Pass -- as first arg to diff.

	* diff3.c: Include wait.h or define equivalent macros.
	(read_diff): Don't use stdio printing error in the inferior.
	Remember the pid and wait for it.  Report failing status.
	Report failure of vfork.

Sun Mar 11 17:10:32 1990  Richard Stallman  (rms at sugar-bombs.ai.mit.edu)

	* diff3.c (main): Accept -t options and pass to output_diff3_edscript.
	(usage): Mention -t.
	(read_diff): Use vfork.
	(vfork): Don't use it on Sparc.

	* diff.h (vfork): Don't use it on Sparc.

Tue Mar  6 22:37:20 1990  Richard Stallman  (rms at sugar-bombs.ai.mit.edu)

	* diff3.c (dup2): Don't define on Xenix.

	* Makefile: Comments for Xenix.

Thu Mar  1 17:19:23 1990  Richard Stallman  (rms at sugar-bombs.ai.mit.edu)

	* analyze.c (diff_2_files): `message' requires three args.

Fri Feb 23 10:56:50 1990  David J. MacKenzie  (djm at albert.ai.mit.edu)

	* diff.h, util.c, diff3.c: Change 'void *' to 'VOID *', with
	VOID defined as void if __STDC__, char if not.

Sun Feb 18 20:31:58 1990  David J. MacKenzie  (djm at albert.ai.mit.edu)

	* Makefile: Add rules for getopt.c, getopt1.c, getopt.h.

	* getopt.c, getopt.h, getopt1.c: New files.

	* main.c (main, usage): Add long options.

	* analyze.c (shift_boundaries): Remove unused var 'j_end'.

Thu Feb  8 02:43:16 1990  Jim Kingdon  (kingdon at pogo.ai.mit.edu)

	* GNUmakefile: include ../Makerules before Makefile.

Fri Feb  2 23:21:38 1990  Richard Stallman  (rms at sugar-bombs.ai.mit.edu)

	* analyze.c (diff_2_files): If -B or -I, don't return 1
	if all changes were ignored.

Wed Jan 24 20:43:57 1990  Richard Stallman  (rms at albert.ai.mit.edu)

	* diff3.c (fatal): Output to stderr.

Thu Jan 11 00:25:56 1990  David J. MacKenzie  (djm at hobbes.ai.mit.edu)

	* diff.c (usage): Mention -v.

Wed Jan 10 16:06:38 1990  Richard Stallman  (rms at sugar-bombs.ai.mit.edu)

	* diff3.c (output_diff3_edscript): Return number of overlaps.
	(main): If have overlaps, exit with status 1.

Sun Dec 24 10:29:20 1989  Richard Stallman  (rms at sugar-bombs.ai.mit.edu)

	* io.c (find_equiv_class): Fix typo that came from changing init of B
	to an assignment.

	* version.c: New file.
	* diff.c (main): -v prints version number.

	* io.c (binary_file_p): Null char implies binary file.

Fri Nov 17 23:44:55 1989  Richard Stallman  (rms at sugar-bombs.ai.mit.edu)

	* util.c (print_1_line): Fix off by 1 error.

Thu Nov 16 13:51:10 1989  Richard Stallman  (rms at sugar-bombs.ai.mit.edu)

	* util.c (xcalloc): Function deleted.

	* io.c (slurp): Null-terminate the buffer.

	* io.c (read_files): Delete unused vars.

	* io.c (find_equiv_class): Don't index by N if too low.

	* dir.c (dir_sort): Delete the extra declaration of compare_names.

	* diff.h: Don't declare xcalloc.  Declare some other functions.

	* analyze.c (shift_boundaries):
	Test for END at end of range before indexing by it.
	Fix misspelling of `preceding' in var names.

Sat Nov 11 14:04:16 1989  Richard Stallman  (rms at sugar-bombs.ai.mit.edu)

	* diff3.c (using_to_diff3_block): Delete unused vars.
	(make_3way_diff, process_diff_control, read_diff, output_diff3): Likewise.

Mon Nov  6 18:15:50 EST 1989 Jay Fenlason (hack@ai.mit.edu)

	* README Fix typo.

Fri Nov  3 15:27:47 1989  Richard Stallman  (rms at sugar-bombs.ai.mit.edu)

	* diff.c (usage): Mention -D.

	* ifdef.c (print_ifdef_hunk): Write comments on #else and #endif.

Sun Oct 29 16:41:07 1989  Richard Stallman  (rms at sugar-bombs.ai.mit.edu)

	* diff.c (compare_files): Don't fflush for identical files.

Wed Oct 25 17:57:12 1989  Randy Smith  (randy at apple-gunkies.ai.mit.edu)

	* diff3.c (using_to_diff3_block): When defaulting lines from
	FILE0, only copy up to just under the *lowest* line mentioned
	in the next diff.

	* diff3.c (fatal): Add \n to error messages.

Wed Oct 25 15:05:49 1989  Richard Stallman  (rms at sugar-bombs.ai.mit.edu)

	* Makefile (tapefiles): Add ChangeLog.

Tue Oct  3 00:51:17 1989  Richard Stallman  (rms at sugar-bombs.ai.mit.edu)

	* diff3.c (process_diff, create_diff3_block): Init ->next field.

Fri Sep 29 08:16:45 1989  Richard Stallman  (rms at sugar-bombs.ai.mit.edu)

	* util.c (line_cmp): Alter end char of line 2, not line 1.

Wed Sep 20 00:12:37 1989  Richard Stallman  (rms at sugar-bombs.ai.mit.edu)

	* Makefile (diff.tar): Expect ln to fail on some files;
	copy them with cp.

Mon Sep 18 02:54:29 1989  Richard Stallman  (rms at sugar-bombs.ai.mit.edu)

	* Handle -D option:
	* io.c (find_and_hash_each_line): Keep all lines of 1st file.
	* diff.c (main): Handle -D option.
	(compare_files): Reject -D if files spec'd are directories.
	* analyze.c (diff_2_files): Handle OUTPUT_IFDEF case.

Fri Sep  1 20:15:50 1989  Richard Stallman  (rms at sugar-bombs.ai.mit.edu)

	* diff.c (option_list): Rename arg VECTOR as OPTIONVEC.

Mon Aug 28 17:58:27 1989  Richard Stallman  (rms at sugar-bombs.ai.mit.edu)

	* diff.c (compare_files): Clear entire inf[i].stat.

Wed Aug 23 17:48:47 1989  Richard Stallman  (rms at apple-gunkies.ai.mit.edu)

	* io.c (find_identical_ends): Sign was backward
	determining where to bound the scan for the suffix.

Wed Aug 16 12:49:16 1989  Richard Stallman  (rms at hobbes.ai.mit.edu)

	* analyze.c (diff_2_files): If -q, treat all files as binary.
	* diff.c (main): Detect -q, record in no_details_flag.

Sun Jul 30 23:12:00 1989  Richard Stallman  (rms at sugar-bombs.ai.mit.edu)

	* diff.c (usage): New function.
	(main): Call it.

Wed Jul 26 02:02:19 1989  Richard Stallman  (rms at sugar-bombs.ai.mit.edu)

	* diff.c (main): Make -C imply -c.

Thu Jul 20 17:57:51 1989  Chris Hanson  (cph at kleph)

	* io.c (find_and_hash_each_line): Bug fix in context handling,
	introduced by last change.

Fri Jul 14 17:39:20 1989  Chris Hanson  (cph at kleph)

	* analyze.c: To make RCS work correctly on files that don't
	necessarily end in newline, introduce some changes that cause
	diffs to be sensitive to missing final newline.  Because
	non-RCS modes don't want to be affected by these changes, they
	are conditional on `output_style == OUTPUT_RCS'.
	(diff_2_files) [OUTPUT_RCS]: Suppress the "File X missing
	newline" message.
	(build_script) [OUTPUT_RCS]: Cause the last line to compare as
	different if exactly one of the files is missing its final
	newline.

	* io.c (find_and_hash_each_line): Bug fix in
	ignore_space_change mode.  Change line's length to include the
	newline.  For OUTPUT_RCS, decrement last line's length if
	there is no final newline.
	(find_identical_ends) [OUTPUT_RCS]: If one of the files is
	missing a final newline, make sure it's not included in either
	the prefix or suffix.

	* util.c (print_1_line): Change line output routine to account
	for line length including the newline.

Tue Jun 27 02:35:28 1989  Roland McGrath  (roland at hobbes.ai.mit.edu)

	* Makefile: Inserted $(archpfx) where appropriate.

Wed May 17 20:18:43 1989  Richard Stallman  (rms at sugar-bombs.ai.mit.edu)

	* diff3.c [USG]: Include fcntl.h.

	* diff.h [USG]: New compilation flags HAVE_NDIR, HAVE_DIRECT.

Wed Apr 26 15:35:57 1989  Richard Stallman  (rms at sugar-bombs.ai.mit.edu)

	* dir.c (diff_dirs): Two new args, NONEX1 and NONEX2, say to pretend
	nonex dirs are empty.
	(dir_sort): New arg NONEX, likewise.
	* diff.c (compare_files): Pass those args.
	Sometimes call diff_dirs if subdir exists in just one place.

Wed Apr 12 01:10:27 1989  Richard Stallman  (rms at sugar-bombs.ai.mit.edu)

	* io.c (find_identical_ends): Set END0 *after* last char
	during backward scan for suffix.

Sat Apr  8 15:49:49 1989  Randall Smith  (randy at apple-gunkies.ai.mit.edu)

	* diff3.c (using_to_diff3_block): Now find high marks in files 1
	and 2 through mapping off of the last difference instead of the
	first.

	* diff3.c: Many trivial changes to spelling inside comments.

Fri Feb 24 12:38:03 1989  Randall Smith  (randy at gluteus.ai.mit.edu)

	* util.c, normal.c, io.c, ed.c, dir.c, diff.h, diff.c, context.c,
	analyze.c, Makefile: Changed copyright header to conform with new
	GNU General Public license.
	* diff3.c: Changed copyright header to conform with new GNU
	General Public license.
	* COPYING: Made a hard link to /gp/rms/COPYING.

Fri Feb 24 10:01:58 1989  Richard Stallman  (rms at sugar-bombs.ai.mit.edu)

	* io.c (slurp): Leave 2 chars space at end of buffer, not one.
	(find_identical_ends): Special case if either file is empty;
	don't try to make a sentinel since could crash.

Wed Feb 15 14:24:48 1989  Jay Fenlason  (hack at apple-gunkies.ai.mit.edu)

	* diff3.c (message)  Re-wrote routine to avoid using alloca()

Wed Feb 15 06:19:14 1989  Richard Stallman  (rms at sugar-bombs.ai.mit.edu)

	* io.c (find_identical_ends): Delete the variable `bytes'.

Sun Feb 12 11:50:36 1989  Richard Stallman  (rms at sugar-bombs.ai.mit.edu)

	* io.c (slurp): ->bufsize is nominal amount we have room for;
	add room for sentinel when calling xmalloc or xrealloc.

	* io.c (find_identical_ends): Do need overrun check in finding suffix.

Fri Feb 10 01:28:15 1989  Richard Stallman  (rms at sugar-bombs.ai.mit.edu)

	* diff.c (main): -C now takes arg to specify context length.
	Now -p to show C function name--Damned IEEE!
	Fatal error if context length spec'd twice.

	* ed.c (print_ed_hunk): Now special treatment only for lines containing
	precisely a dot and nothing else.  Output `..', end the insert,
	substitute that one line, then resume the insert if nec.

	* io.c (find_and_hash_lines): When backing up over starting context,
	don't move past buffer-beg.

	* io.c (find_identical_ends): Use sentinels to make the loops faster.
	If files are identical, skip the 2nd loop and return quickly.
	(slurp): Leave 1 char extra space after each buffer.

	* analyze.c (diff_2_files): Mention difference in final newlines.

Wed Jan 25 22:44:44 1989  Richard Stallman  (rms at sugar-bombs.ai.mit.edu)

	* dir.c (diff_dirs): Use * when calling fcn ptr variable.

Sat Dec 17 14:12:06 1988  Richard Stallman  (rms at sugar-bombs.ai.mit.edu)

	* Makefile: New vars INSTALL and LIBS used in some rules;
	provide default defns plus commented-put defns for sysV.

Thu Nov 17 16:42:53 1988  Richard Stallman  (rms at sugar-bombs.ai.mit.edu)

	* dir.c (dir_sort): Open-trouble not fatal; just say # files is -1.
	(diff_dirs): If dir_sort does that, give up and return 2.

	* diff.c (compare_files): Don't open directories.
	Don't close them specially either.
	Cross-propagate inf[i].dir_p sooner.

Sun Nov 13 11:19:36 1988  Richard Stallman  (rms at sugar-bombs.ai.mit.edu)

	* diff.h: Declare index, rindex.

	* diff.c (compare_files): If comparing foodir with b/f,
	use foodir/f, not foodir/b/f.

	* diff.c (compare_files): Don't print "are identical" msg for 2 dirs.
	Status now 1 if one file is a dir and the other isn't, etc.

Thu Nov  3 16:30:24 1988  Randall Smith  (randy at gluteus.ai.mit.edu)

	* Makefile: Added a define for diff3 to define DIFF_PROGRAM.

	* util.c: Added hack to make sure that perror was not called with
	a null pointer.

	* diff.c: Changed S_IFDIR to S_IFMT in masking type of file bits
	out.

	* diff3.c: Included USG compatibility defines.

	* diff.h: Moved sys/file.h into #else USG section (not needed or
	wanted on System V).

	* ed.c, analyze.c, context.c: Shortened names to 12 characters for
	the sake of System V (too simple not to do).

	-----

	Copyright (C) 1988-1994, 1997-2002, 2004, 2006, 2009-2010 Free Software
	Foundation, Inc.

	Copying and distribution of this file, with or without
	modification, are permitted provided the copyright notice and this
	notice are preserved.
---
 diffutils-3.0-patch/Makefile.am  |   55 ++
 diffutils-3.0-patch/analyze.c    |  723 ++++++++++++++++
 diffutils-3.0-patch/cmp          |  Bin 0 -> 172081 bytes
 diffutils-3.0-patch/cmp.c        |  685 +++++++++++++++
 diffutils-3.0-patch/context.c    |  493 +++++++++++
 diffutils-3.0-patch/diff         |  Bin 0 -> 774860 bytes
 diffutils-3.0-patch/diff.c       | 1330 +++++++++++++++++++++++++++++
 diffutils-3.0-patch/diff.h       |  373 ++++++++
 diffutils-3.0-patch/diff3        |  Bin 0 -> 238717 bytes
 diffutils-3.0-patch/diff3.c      | 1747 ++++++++++++++++++++++++++++++++++++++
 diffutils-3.0-patch/dir.c        |  283 ++++++
 diffutils-3.0-patch/ed.c         |  175 ++++
 diffutils-3.0-patch/ifdef.c      |  430 ++++++++++
 diffutils-3.0-patch/io.c         |  845 ++++++++++++++++++
 diffutils-3.0-patch/normal.c     |   69 ++
 diffutils-3.0-patch/paths.h      |    2 +
 diffutils-3.0-patch/sdiff        |  Bin 0 -> 182580 bytes
 diffutils-3.0-patch/sdiff.c      | 1236 +++++++++++++++++++++++++++
 diffutils-3.0-patch/side.c       |  320 +++++++
 diffutils-3.0-patch/system.h     |  228 +++++
 diffutils-3.0-patch/util.c       |  788 +++++++++++++++++
 diffutils-3.0/Makefile.am        |   55 ++
 diffutils-3.0/analyze.c          |  723 ++++++++++++++++
 diffutils-3.0/cmp                |  Bin 0 -> 172081 bytes
 diffutils-3.0/cmp.c              |  685 +++++++++++++++
 diffutils-3.0/context.c          |  493 +++++++++++
 diffutils-3.0/diff               |  Bin 0 -> 774860 bytes
 diffutils-3.0/diff.c             | 1330 +++++++++++++++++++++++++++++
 diffutils-3.0/diff.h             |  373 ++++++++
 diffutils-3.0/diff3              |  Bin 0 -> 238717 bytes
 diffutils-3.0/diff3.c            | 1747 ++++++++++++++++++++++++++++++++++++++
 diffutils-3.0/dir.c              |  283 ++++++
 diffutils-3.0/ed.c               |  175 ++++
 diffutils-3.0/ifdef.c            |  430 ++++++++++
 diffutils-3.0/io.c               |  845 ++++++++++++++++++
 diffutils-3.0/normal.c           |   69 ++
 diffutils-3.0/paths.h            |    2 +
 diffutils-3.0/sdiff              |  Bin 0 -> 182580 bytes
 diffutils-3.0/sdiff.c            | 1236 +++++++++++++++++++++++++++
 diffutils-3.0/side.c             |  320 +++++++
 diffutils-3.0/system.h           |  228 +++++
 diffutils-3.0/util.c             |  788 +++++++++++++++++
 quote-3.0-patch.txt              |  357 ++++++++
 quote-3.0-test.txt               |    1 +
 src/cmp.c.orig                   |  685 +++++++++++++++
 src/diff.c.orig                  | 1330 +++++++++++++++++++++++++++++
 src/diff3.c.orig                 | 1747 ++++++++++++++++++++++++++++++++++++++
 src/dir.c.orig                   |  283 ++++++
 src/sdiff.c.orig                 | 1236 +++++++++++++++++++++++++++
 src/util.c.orig                  |  788 +++++++++++++++++
 50 files changed, 25991 insertions(+), 0 deletions(-)
 create mode 100644 diffutils-3.0-patch/Makefile.am
 create mode 100644 diffutils-3.0-patch/analyze.c
 create mode 100755 diffutils-3.0-patch/cmp
 create mode 100644 diffutils-3.0-patch/cmp.c
 create mode 100644 diffutils-3.0-patch/context.c
 create mode 100755 diffutils-3.0-patch/diff
 create mode 100644 diffutils-3.0-patch/diff.c
 create mode 100644 diffutils-3.0-patch/diff.h
 create mode 100755 diffutils-3.0-patch/diff3
 create mode 100644 diffutils-3.0-patch/diff3.c
 create mode 100644 diffutils-3.0-patch/dir.c
 create mode 100644 diffutils-3.0-patch/ed.c
 create mode 100644 diffutils-3.0-patch/ifdef.c
 create mode 100644 diffutils-3.0-patch/io.c
 create mode 100644 diffutils-3.0-patch/normal.c
 create mode 100644 diffutils-3.0-patch/paths.h
 create mode 100755 diffutils-3.0-patch/sdiff
 create mode 100644 diffutils-3.0-patch/sdiff.c
 create mode 100644 diffutils-3.0-patch/side.c
 create mode 100644 diffutils-3.0-patch/system.h
 create mode 100644 diffutils-3.0-patch/util.c
 create mode 100644 diffutils-3.0/Makefile.am
 create mode 100644 diffutils-3.0/analyze.c
 create mode 100755 diffutils-3.0/cmp
 create mode 100644 diffutils-3.0/cmp.c
 create mode 100644 diffutils-3.0/context.c
 create mode 100755 diffutils-3.0/diff
 create mode 100644 diffutils-3.0/diff.c
 create mode 100644 diffutils-3.0/diff.h
 create mode 100755 diffutils-3.0/diff3
 create mode 100644 diffutils-3.0/diff3.c
 create mode 100644 diffutils-3.0/dir.c
 create mode 100644 diffutils-3.0/ed.c
 create mode 100644 diffutils-3.0/ifdef.c
 create mode 100644 diffutils-3.0/io.c
 create mode 100644 diffutils-3.0/normal.c
 create mode 100644 diffutils-3.0/paths.h
 create mode 100644 diffutils-3.0/quote-3.0-test.txt
 create mode 100755 diffutils-3.0/sdiff
 create mode 100644 diffutils-3.0/sdiff.c
 create mode 100644 diffutils-3.0/side.c
 create mode 100644 diffutils-3.0/system.h
 create mode 100644 diffutils-3.0/util.c
 create mode 100644 quote-3.0-patch.txt
 create mode 100644 quote-3.0-test.txt
 create mode 100644 src/cmp.c.orig
 create mode 100644 src/diff.c.orig
 create mode 100644 src/diff3.c.orig
 create mode 100644 src/dir.c.orig
 create mode 100644 src/sdiff.c.orig
 create mode 100644 src/util.c.orig

diff --git a/diffutils-3.0-patch/Makefile.am b/diffutils-3.0-patch/Makefile.am
new file mode 100644
index 0000000..48fbf7d
--- /dev/null
+++ b/diffutils-3.0-patch/Makefile.am
@@ -0,0 +1,55 @@
+# Automakefile for GNU diffutils programs.
+
+# Copyright (C) 2001-2002, 2006, 2009-2010 Free Software Foundation, Inc.
+
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+
+# You should have received a copy of the GNU General Public License
+# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+bin_PROGRAMS = cmp diff diff3 sdiff
+
+noinst_HEADERS = system.h
+
+localedir = $(datadir)/locale
+
+AM_CPPFLAGS = -I../lib -I$(top_srcdir)/lib
+AM_CFLAGS = $(WARN_CFLAGS) $(WERROR_CFLAGS)
+
+LDADD = \
+  ../lib/libdiffutils.a \
+  $(LIBCSTACK) \
+  $(LIBINTL) \
+  $(LIBICONV) \
+  $(LIBSIGSEGV) \
+  $(LIB_CLOCK_GETTIME)
+
+diff_LDADD = $(LDADD)
+cmp_LDADD = $(LDADD)
+sdiff_LDADD = $(LDADD)
+diff3_LDADD = $(LDADD)
+
+cmp_SOURCES = cmp.c
+diff3_SOURCES = diff3.c
+sdiff_SOURCES = sdiff.c
+diff_SOURCES = \
+  analyze.c context.c diff.c diff.h dir.c ed.c ifdef.c io.c \
+  normal.c side.c util.c
+
+MOSTLYCLEANFILES = paths.h paths.ht
+
+cmp.$(OBJEXT) diff3.$(OBJEXT) diff.$(OBJEXT) sdiff.$(OBJEXT): paths.h
+
+gdiff = `echo diff|sed '$(transform)'`
+BUILT_SOURCES = paths.h
+paths.h: Makefile.am
+	$(AM_V_GEN)(echo '#define DEFAULT_DIFF_PROGRAM "'$(gdiff)'"' && \
+	  echo '#define LOCALEDIR "$(localedir)"') >$@t && mv $@t $@
diff --git a/diffutils-3.0-patch/analyze.c b/diffutils-3.0-patch/analyze.c
new file mode 100644
index 0000000..e797248
--- /dev/null
+++ b/diffutils-3.0-patch/analyze.c
@@ -0,0 +1,723 @@
+/* Analyze file differences for GNU DIFF.
+
+   Copyright (C) 1988-1989, 1992-1995, 1998, 2001-2002, 2004, 2006-2007,
+   2009-2010 Free Software Foundation, Inc.
+
+   This file is part of GNU DIFF.
+
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+#include "diff.h"
+#include <cmpbuf.h>
+#include <error.h>
+#include <file-type.h>
+#include <xalloc.h>
+
+/* The core of the Diff algorithm.  */
+#define ELEMENT lin
+#define EQUAL(x,y) ((x) == (y))
+#define OFFSET lin
+#define EXTRA_CONTEXT_FIELDS /* none */
+#define NOTE_DELETE(c, xoff) (files[0].changed[files[0].realindexes[xoff]] = 1)
+#define NOTE_INSERT(c, yoff) (files[1].changed[files[1].realindexes[yoff]] = 1)
+#define USE_HEURISTIC 1
+#include <diffseq.h>
+
+/* Discard lines from one file that have no matches in the other file.
+
+   A line which is discarded will not be considered by the actual
+   comparison algorithm; it will be as if that line were not in the file.
+   The file's `realindexes' table maps virtual line numbers
+   (which don't count the discarded lines) into real line numbers;
+   this is how the actual comparison algorithm produces results
+   that are comprehensible when the discarded lines are counted.
+
+   When we discard a line, we also mark it as a deletion or insertion
+   so that it will be printed in the output.  */
+
+static void
+discard_confusing_lines (struct file_data filevec[])
+{
+  int f;
+  lin i;
+  char *discarded[2];
+  lin *equiv_count[2];
+  lin *p;
+
+  /* Allocate our results.  */
+  p = xmalloc ((filevec[0].buffered_lines + filevec[1].buffered_lines)
+	       * (2 * sizeof *p));
+  for (f = 0; f < 2; f++)
+    {
+      filevec[f].undiscarded = p;  p += filevec[f].buffered_lines;
+      filevec[f].realindexes = p;  p += filevec[f].buffered_lines;
+    }
+
+  /* Set up equiv_count[F][I] as the number of lines in file F
+     that fall in equivalence class I.  */
+
+  p = zalloc (filevec[0].equiv_max * (2 * sizeof *p));
+  equiv_count[0] = p;
+  equiv_count[1] = p + filevec[0].equiv_max;
+
+  for (i = 0; i < filevec[0].buffered_lines; ++i)
+    ++equiv_count[0][filevec[0].equivs[i]];
+  for (i = 0; i < filevec[1].buffered_lines; ++i)
+    ++equiv_count[1][filevec[1].equivs[i]];
+
+  /* Set up tables of which lines are going to be discarded.  */
+
+  discarded[0] = zalloc (filevec[0].buffered_lines
+			 + filevec[1].buffered_lines);
+  discarded[1] = discarded[0] + filevec[0].buffered_lines;
+
+  /* Mark to be discarded each line that matches no line of the other file.
+     If a line matches many lines, mark it as provisionally discardable.  */
+
+  for (f = 0; f < 2; f++)
+    {
+      size_t end = filevec[f].buffered_lines;
+      char *discards = discarded[f];
+      lin *counts = equiv_count[1 - f];
+      lin *equivs = filevec[f].equivs;
+      size_t many = 5;
+      size_t tem = end / 64;
+
+      /* Multiply MANY by approximate square root of number of lines.
+	 That is the threshold for provisionally discardable lines.  */
+      while ((tem = tem >> 2) > 0)
+	many *= 2;
+
+      for (i = 0; i < end; i++)
+	{
+	  lin nmatch;
+	  if (equivs[i] == 0)
+	    continue;
+	  nmatch = counts[equivs[i]];
+	  if (nmatch == 0)
+	    discards[i] = 1;
+	  else if (nmatch > many)
+	    discards[i] = 2;
+	}
+    }
+
+  /* Don't really discard the provisional lines except when they occur
+     in a run of discardables, with nonprovisionals at the beginning
+     and end.  */
+
+  for (f = 0; f < 2; f++)
+    {
+      lin end = filevec[f].buffered_lines;
+      register char *discards = discarded[f];
+
+      for (i = 0; i < end; i++)
+	{
+	  /* Cancel provisional discards not in middle of run of discards.  */
+	  if (discards[i] == 2)
+	    discards[i] = 0;
+	  else if (discards[i] != 0)
+	    {
+	      /* We have found a nonprovisional discard.  */
+	      register lin j;
+	      lin length;
+	      lin provisional = 0;
+
+	      /* Find end of this run of discardable lines.
+		 Count how many are provisionally discardable.  */
+	      for (j = i; j < end; j++)
+		{
+		  if (discards[j] == 0)
+		    break;
+		  if (discards[j] == 2)
+		    ++provisional;
+		}
+
+	      /* Cancel provisional discards at end, and shrink the run.  */
+	      while (j > i && discards[j - 1] == 2)
+		discards[--j] = 0, --provisional;
+
+	      /* Now we have the length of a run of discardable lines
+		 whose first and last are not provisional.  */
+	      length = j - i;
+
+	      /* If 1/4 of the lines in the run are provisional,
+		 cancel discarding of all provisional lines in the run.  */
+	      if (provisional * 4 > length)
+		{
+		  while (j > i)
+		    if (discards[--j] == 2)
+		      discards[j] = 0;
+		}
+	      else
+		{
+		  register lin consec;
+		  lin minimum = 1;
+		  lin tem = length >> 2;
+
+		  /* MINIMUM is approximate square root of LENGTH/4.
+		     A subrun of two or more provisionals can stand
+		     when LENGTH is at least 16.
+		     A subrun of 4 or more can stand when LENGTH >= 64.  */
+		  while (0 < (tem >>= 2))
+		    minimum <<= 1;
+		  minimum++;
+
+		  /* Cancel any subrun of MINIMUM or more provisionals
+		     within the larger run.  */
+		  for (j = 0, consec = 0; j < length; j++)
+		    if (discards[i + j] != 2)
+		      consec = 0;
+		    else if (minimum == ++consec)
+		      /* Back up to start of subrun, to cancel it all.  */
+		      j -= consec;
+		    else if (minimum < consec)
+		      discards[i + j] = 0;
+
+		  /* Scan from beginning of run
+		     until we find 3 or more nonprovisionals in a row
+		     or until the first nonprovisional at least 8 lines in.
+		     Until that point, cancel any provisionals.  */
+		  for (j = 0, consec = 0; j < length; j++)
+		    {
+		      if (j >= 8 && discards[i + j] == 1)
+			break;
+		      if (discards[i + j] == 2)
+			consec = 0, discards[i + j] = 0;
+		      else if (discards[i + j] == 0)
+			consec = 0;
+		      else
+			consec++;
+		      if (consec == 3)
+			break;
+		    }
+
+		  /* I advances to the last line of the run.  */
+		  i += length - 1;
+
+		  /* Same thing, from end.  */
+		  for (j = 0, consec = 0; j < length; j++)
+		    {
+		      if (j >= 8 && discards[i - j] == 1)
+			break;
+		      if (discards[i - j] == 2)
+			consec = 0, discards[i - j] = 0;
+		      else if (discards[i - j] == 0)
+			consec = 0;
+		      else
+			consec++;
+		      if (consec == 3)
+			break;
+		    }
+		}
+	    }
+	}
+    }
+
+  /* Actually discard the lines. */
+  for (f = 0; f < 2; f++)
+    {
+      char *discards = discarded[f];
+      lin end = filevec[f].buffered_lines;
+      lin j = 0;
+      for (i = 0; i < end; ++i)
+	if (minimal || discards[i] == 0)
+	  {
+	    filevec[f].undiscarded[j] = filevec[f].equivs[i];
+	    filevec[f].realindexes[j++] = i;
+	  }
+	else
+	  filevec[f].changed[i] = 1;
+      filevec[f].nondiscarded_lines = j;
+    }
+
+  free (discarded[0]);
+  free (equiv_count[0]);
+}
+
+/* Adjust inserts/deletes of identical lines to join changes
+   as much as possible.
+
+   We do something when a run of changed lines include a
+   line at one end and have an excluded, identical line at the other.
+   We are free to choose which identical line is included.
+   `compareseq' usually chooses the one at the beginning,
+   but usually it is cleaner to consider the following identical line
+   to be the "change".  */
+
+static void
+shift_boundaries (struct file_data filevec[])
+{
+  int f;
+
+  for (f = 0; f < 2; f++)
+    {
+      char *changed = filevec[f].changed;
+      char *other_changed = filevec[1 - f].changed;
+      lin const *equivs = filevec[f].equivs;
+      lin i = 0;
+      lin j = 0;
+      lin i_end = filevec[f].buffered_lines;
+
+      while (1)
+	{
+	  lin runlength, start, corresponding;
+
+	  /* Scan forwards to find beginning of another run of changes.
+	     Also keep track of the corresponding point in the other file.  */
+
+	  while (i < i_end && !changed[i])
+	    {
+	      while (other_changed[j++])
+		continue;
+	      i++;
+	    }
+
+	  if (i == i_end)
+	    break;
+
+	  start = i;
+
+	  /* Find the end of this run of changes.  */
+
+	  while (changed[++i])
+	    continue;
+	  while (other_changed[j])
+	    j++;
+
+	  do
+	    {
+	      /* Record the length of this run of changes, so that
+		 we can later determine whether the run has grown.  */
+	      runlength = i - start;
+
+	      /* Move the changed region back, so long as the
+		 previous unchanged line matches the last changed one.
+		 This merges with previous changed regions.  */
+
+	      while (start && equivs[start - 1] == equivs[i - 1])
+		{
+		  changed[--start] = 1;
+		  changed[--i] = 0;
+		  while (changed[start - 1])
+		    start--;
+		  while (other_changed[--j])
+		    continue;
+		}
+
+	      /* Set CORRESPONDING to the end of the changed run, at the last
+		 point where it corresponds to a changed run in the other file.
+		 CORRESPONDING == I_END means no such point has been found.  */
+	      corresponding = other_changed[j - 1] ? i : i_end;
+
+	      /* Move the changed region forward, so long as the
+		 first changed line matches the following unchanged one.
+		 This merges with following changed regions.
+		 Do this second, so that if there are no merges,
+		 the changed region is moved forward as far as possible.  */
+
+	      while (i != i_end && equivs[start] == equivs[i])
+		{
+		  changed[start++] = 0;
+		  changed[i++] = 1;
+		  while (changed[i])
+		    i++;
+		  while (other_changed[++j])
+		    corresponding = i;
+		}
+	    }
+	  while (runlength != i - start);
+
+	  /* If possible, move the fully-merged run of changes
+	     back to a corresponding run in the other file.  */
+
+	  while (corresponding < i)
+	    {
+	      changed[--start] = 1;
+	      changed[--i] = 0;
+	      while (other_changed[--j])
+		continue;
+	    }
+	}
+    }
+}
+
+/* Cons an additional entry onto the front of an edit script OLD.
+   LINE0 and LINE1 are the first affected lines in the two files (origin 0).
+   DELETED is the number of lines deleted here from file 0.
+   INSERTED is the number of lines inserted here in file 1.
+
+   If DELETED is 0 then LINE0 is the number of the line before
+   which the insertion was done; vice versa for INSERTED and LINE1.  */
+
+static struct change *
+add_change (lin line0, lin line1, lin deleted, lin inserted,
+	    struct change *old)
+{
+  struct change *new = xmalloc (sizeof *new);
+
+  new->line0 = line0;
+  new->line1 = line1;
+  new->inserted = inserted;
+  new->deleted = deleted;
+  new->link = old;
+  return new;
+}
+
+/* Scan the tables of which lines are inserted and deleted,
+   producing an edit script in reverse order.  */
+
+static struct change *
+build_reverse_script (struct file_data const filevec[])
+{
+  struct change *script = 0;
+  char *changed0 = filevec[0].changed;
+  char *changed1 = filevec[1].changed;
+  lin len0 = filevec[0].buffered_lines;
+  lin len1 = filevec[1].buffered_lines;
+
+  /* Note that changedN[lenN] does exist, and is 0.  */
+
+  lin i0 = 0, i1 = 0;
+
+  while (i0 < len0 || i1 < len1)
+    {
+      if (changed0[i0] | changed1[i1])
+	{
+	  lin line0 = i0, line1 = i1;
+
+	  /* Find # lines changed here in each file.  */
+	  while (changed0[i0]) ++i0;
+	  while (changed1[i1]) ++i1;
+
+	  /* Record this change.  */
+	  script = add_change (line0, line1, i0 - line0, i1 - line1, script);
+	}
+
+      /* We have reached lines in the two files that match each other.  */
+      i0++, i1++;
+    }
+
+  return script;
+}
+
+/* Scan the tables of which lines are inserted and deleted,
+   producing an edit script in forward order.  */
+
+static struct change *
+build_script (struct file_data const filevec[])
+{
+  struct change *script = 0;
+  char *changed0 = filevec[0].changed;
+  char *changed1 = filevec[1].changed;
+  lin i0 = filevec[0].buffered_lines, i1 = filevec[1].buffered_lines;
+
+  /* Note that changedN[-1] does exist, and is 0.  */
+
+  while (i0 >= 0 || i1 >= 0)
+    {
+      if (changed0[i0 - 1] | changed1[i1 - 1])
+	{
+	  lin line0 = i0, line1 = i1;
+
+	  /* Find # lines changed here in each file.  */
+	  while (changed0[i0 - 1]) --i0;
+	  while (changed1[i1 - 1]) --i1;
+
+	  /* Record this change.  */
+	  script = add_change (i0, i1, line0 - i0, line1 - i1, script);
+	}
+
+      /* We have reached lines in the two files that match each other.  */
+      i0--, i1--;
+    }
+
+  return script;
+}
+
+/* If CHANGES, briefly report that two files differed.
+   Return 2 if trouble, CHANGES otherwise.  */
+static int
+briefly_report (int changes, struct file_data const filevec[])
+{
+  if (changes)
+    {
+      char const *label0 = file_label[0] ? file_label[0] : filevec[0].name;
+      char const *label1 = file_label[1] ? file_label[1] : filevec[1].name;
+
+      if (brief)
+	message ("Files %s and %s differ\n", label0, label1);
+      else
+	{
+	  message ("Binary files %s and %s differ\n", label0, label1);
+	  changes = 2;
+	}
+    }
+
+  return changes;
+}
+
+/* Report the differences of two files.  */
+int
+diff_2_files (struct comparison *cmp)
+{
+  int f;
+  struct change *e, *p;
+  struct change *script;
+  int changes;
+
+
+  /* If we have detected that either file is binary,
+     compare the two files as binary.  This can happen
+     only when the first chunk is read.
+     Also, --brief without any --ignore-* options means
+     we can speed things up by treating the files as binary.  */
+
+  if (read_files (cmp->file, files_can_be_treated_as_binary))
+    {
+      /* Files with different lengths must be different.  */
+      if (cmp->file[0].stat.st_size != cmp->file[1].stat.st_size
+	  && (cmp->file[0].desc < 0 || S_ISREG (cmp->file[0].stat.st_mode))
+	  && (cmp->file[1].desc < 0 || S_ISREG (cmp->file[1].stat.st_mode)))
+	changes = 1;
+
+      /* Standard input equals itself.  */
+      else if (cmp->file[0].desc == cmp->file[1].desc)
+	changes = 0;
+
+      else
+	/* Scan both files, a buffer at a time, looking for a difference.  */
+	{
+	  /* Allocate same-sized buffers for both files.  */
+	  size_t lcm_max = PTRDIFF_MAX - 1;
+	  size_t buffer_size =
+	    buffer_lcm (sizeof (word),
+			buffer_lcm (STAT_BLOCKSIZE (cmp->file[0].stat),
+				    STAT_BLOCKSIZE (cmp->file[1].stat),
+				    lcm_max),
+			lcm_max);
+	  for (f = 0; f < 2; f++)
+	    cmp->file[f].buffer = xrealloc (cmp->file[f].buffer, buffer_size);
+
+	  for (;; cmp->file[0].buffered = cmp->file[1].buffered = 0)
+	    {
+	      /* Read a buffer's worth from both files.  */
+	      for (f = 0; f < 2; f++)
+		if (0 <= cmp->file[f].desc)
+		  file_block_read (&cmp->file[f],
+				   buffer_size - cmp->file[f].buffered);
+
+	      /* If the buffers differ, the files differ.  */
+	      if (cmp->file[0].buffered != cmp->file[1].buffered
+		  || memcmp (cmp->file[0].buffer,
+			     cmp->file[1].buffer,
+			     cmp->file[0].buffered))
+		{
+		  changes = 1;
+		  break;
+		}
+
+	      /* If we reach end of file, the files are the same.  */
+	      if (cmp->file[0].buffered != buffer_size)
+		{
+		  changes = 0;
+		  break;
+		}
+	    }
+	}
+
+      changes = briefly_report (changes, cmp->file);
+    }
+  else
+    {
+      struct context ctxt;
+      lin diags;
+      lin too_expensive;
+
+      /* Allocate vectors for the results of comparison:
+	 a flag for each line of each file, saying whether that line
+	 is an insertion or deletion.
+	 Allocate an extra element, always 0, at each end of each vector.  */
+
+      size_t s = cmp->file[0].buffered_lines + cmp->file[1].buffered_lines + 4;
+      char *flag_space = zalloc (s);
+      cmp->file[0].changed = flag_space + 1;
+      cmp->file[1].changed = flag_space + cmp->file[0].buffered_lines + 3;
+
+      /* Some lines are obviously insertions or deletions
+	 because they don't match anything.  Detect them now, and
+	 avoid even thinking about them in the main comparison algorithm.  */
+
+      discard_confusing_lines (cmp->file);
+
+      /* Now do the main comparison algorithm, considering just the
+	 undiscarded lines.  */
+
+      ctxt.xvec = cmp->file[0].undiscarded;
+      ctxt.yvec = cmp->file[1].undiscarded;
+      diags = (cmp->file[0].nondiscarded_lines
+	       + cmp->file[1].nondiscarded_lines + 3);
+      ctxt.fdiag = xmalloc (diags * (2 * sizeof *ctxt.fdiag));
+      ctxt.bdiag = ctxt.fdiag + diags;
+      ctxt.fdiag += cmp->file[1].nondiscarded_lines + 1;
+      ctxt.bdiag += cmp->file[1].nondiscarded_lines + 1;
+
+      ctxt.heuristic = speed_large_files;
+
+      /* Set TOO_EXPENSIVE to be approximate square root of input size,
+	 bounded below by 256.  */
+      too_expensive = 1;
+      for (;  diags != 0;  diags >>= 2)
+	too_expensive <<= 1;
+      ctxt.too_expensive = MAX (256, too_expensive);
+
+      files[0] = cmp->file[0];
+      files[1] = cmp->file[1];
+
+      compareseq (0, cmp->file[0].nondiscarded_lines,
+		  0, cmp->file[1].nondiscarded_lines, minimal, &ctxt);
+
+      free (ctxt.fdiag - (cmp->file[1].nondiscarded_lines + 1));
+
+      /* Modify the results slightly to make them prettier
+	 in cases where that can validly be done.  */
+
+      shift_boundaries (cmp->file);
+
+      /* Get the results of comparison in the form of a chain
+	 of `struct change's -- an edit script.  */
+
+      if (output_style == OUTPUT_ED)
+	script = build_reverse_script (cmp->file);
+      else
+	script = build_script (cmp->file);
+
+      /* Set CHANGES if we had any diffs.
+	 If some changes are ignored, we must scan the script to decide.  */
+      if (ignore_blank_lines || ignore_regexp.fastmap)
+	{
+	  struct change *next = script;
+	  changes = 0;
+
+	  while (next && changes == 0)
+	    {
+	      struct change *this, *end;
+	      lin first0, last0, first1, last1;
+
+	      /* Find a set of changes that belong together.  */
+	      this = next;
+	      end = find_change (next);
+
+	      /* Disconnect them from the rest of the changes, making them
+		 a hunk, and remember the rest for next iteration.  */
+	      next = end->link;
+	      end->link = 0;
+
+	      /* Determine whether this hunk is really a difference.  */
+	      if (analyze_hunk (this, &first0, &last0, &first1, &last1))
+		changes = 1;
+
+	      /* Reconnect the script so it will all be freed properly.  */
+	      end->link = next;
+	    }
+	}
+      else
+	changes = (script != 0);
+
+      if (brief)
+	changes = briefly_report (changes, cmp->file);
+      else
+	{
+	  if (changes || !no_diff_means_no_output)
+	    {
+	      /* Record info for starting up output,
+		 to be used if and when we have some output to print.  */
+	      setup_output (file_label[0] ? file_label[0] : cmp->file[0].name,
+			    file_label[1] ? file_label[1] : cmp->file[1].name,
+			    cmp->parent != 0);
+
+	      switch (output_style)
+		{
+		case OUTPUT_CONTEXT:
+		  print_context_script (script, false);
+		  break;
+
+		case OUTPUT_UNIFIED:
+		  print_context_script (script, true);
+		  break;
+
+		case OUTPUT_ED:
+		  print_ed_script (script);
+		  break;
+
+		case OUTPUT_FORWARD_ED:
+		  pr_forward_ed_script (script);
+		  break;
+
+		case OUTPUT_RCS:
+		  print_rcs_script (script);
+		  break;
+
+		case OUTPUT_NORMAL:
+		  print_normal_script (script);
+		  break;
+
+		case OUTPUT_IFDEF:
+		  print_ifdef_script (script);
+		  break;
+
+		case OUTPUT_SDIFF:
+		  print_sdiff_script (script);
+		  break;
+
+		default:
+		  abort ();
+		}
+
+	      finish_output ();
+	    }
+	}
+
+      free (cmp->file[0].undiscarded);
+
+      free (flag_space);
+
+      for (f = 0; f < 2; f++)
+	{
+	  free (cmp->file[f].equivs);
+	  free (cmp->file[f].linbuf + cmp->file[f].linbuf_base);
+	}
+
+      for (e = script; e; e = p)
+	{
+	  p = e->link;
+	  free (e);
+	}
+
+      if (! ROBUST_OUTPUT_STYLE (output_style))
+	for (f = 0; f < 2; ++f)
+	  if (cmp->file[f].missing_newline)
+	    {
+	      error (0, 0, "%s: %s\n",
+		     file_label[f] ? file_label[f] : cmp->file[f].name,
+		     _("No newline at end of file"));
+	      changes = 2;
+	    }
+    }
+
+  if (cmp->file[0].buffer != cmp->file[1].buffer)
+    free (cmp->file[0].buffer);
+  free (cmp->file[1].buffer);
+
+  return changes;
+}
diff --git a/diffutils-3.0-patch/cmp b/diffutils-3.0-patch/cmp
new file mode 100755
index 0000000000000000000000000000000000000000..4e05caa794e9a4a3a3739057ff1613cd1aeac29f
GIT binary patch
literal 172081
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
b?A>HdDHBC~4^XOuS29cOc6h>izW)CJXRL$`

literal 0
HcmV?d00001

diff --git a/diffutils-3.0-patch/cmp.c b/diffutils-3.0-patch/cmp.c
new file mode 100644
index 0000000..ee3cde6
--- /dev/null
+++ b/diffutils-3.0-patch/cmp.c
@@ -0,0 +1,685 @@
+/* cmp - compare two files byte by byte
+
+   Copyright (C) 1990-1996, 1998, 2001-2002, 2004, 2006-2007, 2009-2010 Free
+   Software Foundation, Inc.
+
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+#include "system.h"
+#include "paths.h"
+
+#include <stdio.h>
+
+#include <c-stack.h>
+#include <cmpbuf.h>
+#include <error.h>
+#include <exitfail.h>
+#include <file-type.h>
+#include <getopt.h>
+#include <hard-locale.h>
+#include <inttostr.h>
+#include <progname.h>
+#include <unlocked-io.h>
+#include <version-etc.h>
+#include <xalloc.h>
+#include <xfreopen.h>
+#include <xstrtol.h>
+
+/* The official name of this program (e.g., no `g' prefix).  */
+#define PROGRAM_NAME "cmp"
+
+#define AUTHORS \
+  proper_name_utf8 ("Torbjorn Granlund", "Torbj\303\266rn Granlund"), \
+  proper_name ("David MacKenzie")
+
+#if defined LC_MESSAGES && ENABLE_NLS
+# define hard_locale_LC_MESSAGES hard_locale (LC_MESSAGES)
+#else
+# define hard_locale_LC_MESSAGES 0
+#endif
+
+static int cmp (void);
+static off_t file_position (int);
+static size_t block_compare (word const *, word const *);
+static size_t block_compare_and_count (word const *, word const *, off_t *);
+static void sprintc (char *, unsigned char);
+
+/* Filenames of the compared files.  */
+static char const *file[2];
+
+/* File descriptors of the files.  */
+static int file_desc[2];
+
+/* Status of the files.  */
+static struct stat stat_buf[2];
+
+/* Read buffers for the files.  */
+static word *buffer[2];
+
+/* Optimal block size for the files.  */
+static size_t buf_size;
+
+/* Initial prefix to ignore for each file.  */
+static off_t ignore_initial[2];
+
+/* Number of bytes to compare.  */
+static uintmax_t bytes = UINTMAX_MAX;
+
+/* Output format.  */
+static enum comparison_type
+  {
+    type_first_diff,	/* Print the first difference.  */
+    type_all_diffs,	/* Print all differences.  */
+    type_no_stdout,	/* Do not output to stdout; only stderr.  */
+    type_status		/* Exit status only.  */
+  } comparison_type;
+
+/* If nonzero, print values of bytes quoted like cat -t does. */
+static bool opt_print_bytes;
+
+/* Values for long options that do not have single-letter equivalents.  */
+enum
+{
+  HELP_OPTION = CHAR_MAX + 1
+};
+
+static struct option const long_options[] =
+{
+  {"print-bytes", 0, 0, 'b'},
+  {"print-chars", 0, 0, 'c'}, /* obsolescent as of diffutils 2.7.3 */
+  {"ignore-initial", 1, 0, 'i'},
+  {"verbose", 0, 0, 'l'},
+  {"bytes", 1, 0, 'n'},
+  {"silent", 0, 0, 's'},
+  {"quiet", 0, 0, 's'},
+  {"version", 0, 0, 'v'},
+  {"help", 0, 0, HELP_OPTION},
+  {0, 0, 0, 0}
+};
+
+static void try_help (char const *, char const *) __attribute__((noreturn));
+static void
+try_help (char const *reason_msgid, char const *operand)
+{
+  if (reason_msgid)
+    error (0, 0, _(reason_msgid), operand);
+  error (EXIT_TROUBLE, 0,
+	 _("Try '%s --help' for more information."), program_name);
+  abort ();
+}
+
+static char const valid_suffixes[] = "kKMGTPEZY0";
+
+/* Update ignore_initial[F] according to the result of parsing an
+   *operand ARGPTR of --ignore-initial, updating *ARGPTR to point
+   *after the operand.  If DELIMITER is nonzero, the operand may be
+   *followed by DELIMITER; otherwise it must be null-terminated.  */
+static void
+specify_ignore_initial (int f, char **argptr, char delimiter)
+{
+  uintmax_t val;
+  char const *arg = *argptr;
+  strtol_error e = xstrtoumax (arg, argptr, 0, &val, valid_suffixes);
+  if (! (e == LONGINT_OK
+	 || (e == LONGINT_INVALID_SUFFIX_CHAR && **argptr == delimiter))
+      || TYPE_MAXIMUM (off_t) < val)
+    try_help ("invalid --ignore-initial value '%s'", arg);
+  if (ignore_initial[f] < val)
+    ignore_initial[f] = val;
+}
+
+/* Specify the output format.  */
+static void
+specify_comparison_type (enum comparison_type t)
+{
+  if (comparison_type && comparison_type != t)
+    try_help ("options -l and -s are incompatible", 0);
+  comparison_type = t;
+}
+
+static void
+check_stdout (void)
+{
+  if (ferror (stdout))
+    error (EXIT_TROUBLE, 0, "%s", _("write failed"));
+  else if (fclose (stdout) != 0)
+    error (EXIT_TROUBLE, errno, "%s", _("standard output"));
+}
+
+static char const * const option_help_msgid[] = {
+  N_("-b  --print-bytes  Print differing bytes."),
+  N_("-i SKIP  --ignore-initial=SKIP  Skip the first SKIP bytes of input."),
+  N_("-i SKIP1:SKIP2  --ignore-initial=SKIP1:SKIP2"),
+  N_("  Skip the first SKIP1 bytes of FILE1 and the first SKIP2 bytes of FILE2."),
+  N_("-l  --verbose  Output byte numbers and values of all differing bytes."),
+  N_("-n LIMIT  --bytes=LIMIT  Compare at most LIMIT bytes."),
+  N_("-s  --quiet  --silent  Output nothing; yield exit status only."),
+  N_("-v  --version  Output version info."),
+  N_("--help  Output this help."),
+  0
+};
+
+static void
+usage (void)
+{
+  char const * const *p;
+
+  printf (_("Usage: %s [OPTION]... FILE1 [FILE2 [SKIP1 [SKIP2]]]\n"),
+	  program_name);
+  printf ("%s\n\n", _("Compare two files byte by byte."));
+  for (p = option_help_msgid;  *p;  p++)
+    printf ("  %s\n", _(*p));
+  printf ("\n%s\n%s\n\n%s\n%s\n",
+	  _("SKIP1 and SKIP2 are the number of bytes to skip in each file."),
+	  _("SKIP values may be followed by the following multiplicative suffixes:\n\
+kB 1000, K 1024, MB 1,000,000, M 1,048,576,\n\
+GB 1,000,000,000, G 1,073,741,824, and so on for T, P, E, Z, Y."),
+	  _("If a FILE is '-' or missing, read standard input."),
+	  _("Exit status is 0 if inputs are the same, 1 if different, 2 if trouble."));
+  emit_bug_reporting_address ();
+}
+
+int
+main (int argc, char **argv)
+{
+  int c, f, exit_status;
+  size_t words_per_buffer;
+
+  exit_failure = EXIT_TROUBLE;
+  initialize_main (&argc, &argv);
+  set_program_name (argv[0]);
+  setlocale (LC_ALL, "");
+  bindtextdomain (PACKAGE, LOCALEDIR);
+  textdomain (PACKAGE);
+  c_stack_action (0);
+
+  /* Parse command line options.  */
+
+  while ((c = getopt_long (argc, argv, "bci:ln:sv", long_options, 0))
+	 != -1)
+    switch (c)
+      {
+      case 'b':
+      case 'c': /* 'c' is obsolescent as of diffutils 2.7.3 */
+	opt_print_bytes = true;
+	break;
+
+      case 'i':
+	specify_ignore_initial (0, &optarg, ':');
+	if (*optarg++ == ':')
+	  specify_ignore_initial (1, &optarg, 0);
+	else if (ignore_initial[1] < ignore_initial[0])
+	  ignore_initial[1] = ignore_initial[0];
+	break;
+
+      case 'l':
+	specify_comparison_type (type_all_diffs);
+	break;
+
+      case 'n':
+	{
+	  uintmax_t n;
+	  if (xstrtoumax (optarg, 0, 0, &n, valid_suffixes) != LONGINT_OK)
+	    try_help ("invalid --bytes value '%s'", optarg);
+	  if (n < bytes)
+	    bytes = n;
+	}
+	break;
+
+      case 's':
+	specify_comparison_type (type_status);
+	break;
+
+      case 'v':
+	version_etc (stdout, PROGRAM_NAME, PACKAGE_NAME, PACKAGE_VERSION,
+		     AUTHORS, (char *) NULL);
+	check_stdout ();
+	return EXIT_SUCCESS;
+
+      case HELP_OPTION:
+	usage ();
+	check_stdout ();
+	return EXIT_SUCCESS;
+
+      default:
+	try_help (0, 0);
+      }
+
+  if (optind == argc)
+    try_help ("missing operand after '%s'", argv[argc - 1]);
+
+  file[0] = argv[optind++];
+  file[1] = optind < argc ? argv[optind++] : "-";
+
+  for (f = 0; f < 2 && optind < argc; f++)
+    {
+      char *arg = argv[optind++];
+      specify_ignore_initial (f, &arg, 0);
+    }
+
+  if (optind < argc)
+    try_help ("extra operand '%s'", argv[optind]);
+
+  for (f = 0; f < 2; f++)
+    {
+      /* If file[1] is "-", treat it first; this avoids a misdiagnostic if
+	 stdin is closed and opening file[0] yields file descriptor 0.  */
+      int f1 = f ^ (STREQ (file[1], "-"));
+
+      /* Two files with the same name and offset are identical.
+	 But wait until we open the file once, for proper diagnostics.  */
+      if (f && ignore_initial[0] == ignore_initial[1]
+	  && file_name_cmp (file[0], file[1]) == 0)
+	return EXIT_SUCCESS;
+
+      if (STREQ (file[f1], "-"))
+	{
+	  file_desc[f1] = STDIN_FILENO;
+	  if (O_BINARY && ! isatty (STDIN_FILENO))
+	    xfreopen (NULL, "rb", stdin);
+	}
+      else
+	file_desc[f1] = open (file[f1], O_RDONLY | O_BINARY, 0);
+
+      if (file_desc[f1] < 0 || fstat (file_desc[f1], stat_buf + f1) != 0)
+	{
+	  if (file_desc[f1] < 0 && comparison_type == type_status)
+	    exit (EXIT_TROUBLE);
+	  else
+	    error (EXIT_TROUBLE, errno, "%s", file[f1]);
+	}
+    }
+
+  /* If the files are links to the same inode and have the same file position,
+     they are identical.  */
+
+  if (0 < same_file (&stat_buf[0], &stat_buf[1])
+      && same_file_attributes (&stat_buf[0], &stat_buf[1])
+      && file_position (0) == file_position (1))
+    return EXIT_SUCCESS;
+
+  /* If output is redirected to the null device, we can avoid some of
+     the work.  */
+
+  if (comparison_type != type_status)
+    {
+      struct stat outstat, nullstat;
+
+      if (fstat (STDOUT_FILENO, &outstat) == 0
+	  && stat (NULL_DEVICE, &nullstat) == 0
+	  && 0 < same_file (&outstat, &nullstat))
+	comparison_type = type_no_stdout;
+    }
+
+  /* If only a return code is needed,
+     and if both input descriptors are associated with plain files,
+     conclude that the files differ if they have different sizes
+     and if more bytes will be compared than are in the smaller file.  */
+
+  if (comparison_type == type_status
+      && S_ISREG (stat_buf[0].st_mode)
+      && S_ISREG (stat_buf[1].st_mode))
+    {
+      off_t s0 = stat_buf[0].st_size - file_position (0);
+      off_t s1 = stat_buf[1].st_size - file_position (1);
+      if (s0 < 0)
+	s0 = 0;
+      if (s1 < 0)
+	s1 = 0;
+      if (s0 != s1 && MIN (s0, s1) < bytes)
+	exit (EXIT_FAILURE);
+    }
+
+  /* Get the optimal block size of the files.  */
+
+  buf_size = buffer_lcm (STAT_BLOCKSIZE (stat_buf[0]),
+			 STAT_BLOCKSIZE (stat_buf[1]),
+			 PTRDIFF_MAX - sizeof (word));
+
+  /* Allocate word-aligned buffers, with space for sentinels at the end.  */
+
+  words_per_buffer = (buf_size + 2 * sizeof (word) - 1) / sizeof (word);
+  buffer[0] = xmalloc (2 * sizeof (word) * words_per_buffer);
+  buffer[1] = buffer[0] + words_per_buffer;
+
+  exit_status = cmp ();
+
+  for (f = 0; f < 2; f++)
+    if (close (file_desc[f]) != 0)
+      error (EXIT_TROUBLE, errno, "%s", file[f]);
+  if (exit_status != EXIT_SUCCESS && comparison_type < type_no_stdout)
+    check_stdout ();
+  exit (exit_status);
+  return exit_status;
+}
+
+/* Compare the two files already open on `file_desc[0]' and `file_desc[1]',
+   using `buffer[0]' and `buffer[1]'.
+   Return EXIT_SUCCESS if identical, EXIT_FAILURE if different,
+   >1 if error.  */
+
+static int
+cmp (void)
+{
+  off_t line_number = 1;	/* Line number (1...) of difference. */
+  off_t byte_number = 1;	/* Byte number (1...) of difference. */
+  uintmax_t remaining = bytes;	/* Remaining number of bytes to compare.  */
+  size_t read0, read1;		/* Number of bytes read from each file. */
+  size_t first_diff;		/* Offset (0...) in buffers of 1st diff. */
+  size_t smaller;		/* The lesser of 'read0' and 'read1'. */
+  word *buffer0 = buffer[0];
+  word *buffer1 = buffer[1];
+  char *buf0 = (char *) buffer0;
+  char *buf1 = (char *) buffer1;
+  int differing = 0;
+  int f;
+  int offset_width IF_LINT (= 0);
+
+  if (comparison_type == type_all_diffs)
+    {
+      off_t byte_number_max = MIN (bytes, TYPE_MAXIMUM (off_t));
+
+      for (f = 0; f < 2; f++)
+	if (S_ISREG (stat_buf[f].st_mode))
+	  {
+	    off_t file_bytes = stat_buf[f].st_size - file_position (f);
+	    if (file_bytes < byte_number_max)
+	      byte_number_max = file_bytes;
+	  }
+
+      for (offset_width = 1; (byte_number_max /= 10) != 0; offset_width++)
+	continue;
+    }
+
+  for (f = 0; f < 2; f++)
+    {
+      off_t ig = ignore_initial[f];
+      if (ig && file_position (f) == -1)
+	{
+	  /* lseek failed; read and discard the ignored initial prefix.  */
+	  do
+	    {
+	      size_t bytes_to_read = MIN (ig, buf_size);
+	      size_t r = block_read (file_desc[f], buf0, bytes_to_read);
+	      if (r != bytes_to_read)
+		{
+		  if (r == SIZE_MAX)
+		    error (EXIT_TROUBLE, errno, "%s", file[f]);
+		  break;
+		}
+	      ig -= r;
+	    }
+	  while (ig);
+	}
+    }
+
+  do
+    {
+      size_t bytes_to_read = buf_size;
+
+      if (remaining != UINTMAX_MAX)
+	{
+	  if (remaining < bytes_to_read)
+	    bytes_to_read = remaining;
+	  remaining -= bytes_to_read;
+	}
+
+      read0 = block_read (file_desc[0], buf0, bytes_to_read);
+      if (read0 == SIZE_MAX)
+	error (EXIT_TROUBLE, errno, "%s", file[0]);
+      read1 = block_read (file_desc[1], buf1, bytes_to_read);
+      if (read1 == SIZE_MAX)
+	error (EXIT_TROUBLE, errno, "%s", file[1]);
+
+      /* Insert sentinels for the block compare.  */
+
+      buf0[read0] = ~buf1[read0];
+      buf1[read1] = ~buf0[read1];
+
+      /* If the line number should be written for differing files,
+	 compare the blocks and count the number of newlines
+	 simultaneously.  */
+      first_diff = (comparison_type == type_first_diff
+		    ? block_compare_and_count (buffer0, buffer1, &line_number)
+		    : block_compare (buffer0, buffer1));
+
+      byte_number += first_diff;
+      smaller = MIN (read0, read1);
+
+      if (first_diff < smaller)
+	{
+	  switch (comparison_type)
+	    {
+	    case type_first_diff:
+	      {
+		char byte_buf[INT_BUFSIZE_BOUND (off_t)];
+		char line_buf[INT_BUFSIZE_BOUND (off_t)];
+		char const *byte_num = offtostr (byte_number, byte_buf);
+		char const *line_num = offtostr (line_number, line_buf);
+		if (!opt_print_bytes)
+		  {
+		    /* See POSIX 1003.1-2001 for this format.  This
+		       message is used only in the POSIX locale, so it
+		       need not be translated.  */
+		    static char const char_message[] =
+		      "%s %s differ: char %s, line %s\n";
+
+		    /* The POSIX rationale recommends using the word
+		       "byte" outside the POSIX locale.  Some gettext
+		       implementations translate even in the POSIX
+		       locale if certain other environment variables
+		       are set, so use "byte" if a translation is
+		       available, or if outside the POSIX locale.  */
+		    static char const byte_msgid[] =
+		      N_("%s %s differ: byte %s, line %s\n");
+		    char const *byte_message = _(byte_msgid);
+		    bool use_byte_message = (byte_message != byte_msgid
+					     || hard_locale_LC_MESSAGES);
+
+		    printf (use_byte_message ? byte_message : char_message,
+			    file[0], file[1], byte_num, line_num);
+		  }
+		else
+		  {
+		    unsigned char c0 = buf0[first_diff];
+		    unsigned char c1 = buf1[first_diff];
+		    char s0[5];
+		    char s1[5];
+		    sprintc (s0, c0);
+		    sprintc (s1, c1);
+		    printf (_("%s %s differ: byte %s, line %s is %3o %s %3o %s\n"),
+			    file[0], file[1], byte_num, line_num,
+			    c0, s0, c1, s1);
+		}
+	      }
+	      /* Fall through.  */
+	    case type_status:
+	      return EXIT_FAILURE;
+
+	    case type_all_diffs:
+	      do
+		{
+		  unsigned char c0 = buf0[first_diff];
+		  unsigned char c1 = buf1[first_diff];
+		  if (c0 != c1)
+		    {
+		      char byte_buf[INT_BUFSIZE_BOUND (off_t)];
+		      char const *byte_num = offtostr (byte_number, byte_buf);
+		      if (!opt_print_bytes)
+			{
+			  /* See POSIX 1003.1-2001 for this format.  */
+			  printf ("%*s %3o %3o\n",
+				  offset_width, byte_num, c0, c1);
+			}
+		      else
+			{
+			  char s0[5];
+			  char s1[5];
+			  sprintc (s0, c0);
+			  sprintc (s1, c1);
+			  printf ("%*s %3o %-4s %3o %s\n",
+				  offset_width, byte_num, c0, s0, c1, s1);
+			}
+		    }
+		  byte_number++;
+		  first_diff++;
+		}
+	      while (first_diff < smaller);
+	      differing = -1;
+	      break;
+
+	    case type_no_stdout:
+	      differing = 1;
+	      break;
+	    }
+	}
+
+      if (read0 != read1)
+	{
+	  if (differing <= 0 && comparison_type != type_status)
+	    {
+	      /* See POSIX 1003.1-2001 for this format.  */
+	      fprintf (stderr, _("cmp: EOF on %s\n"), file[read1 < read0]);
+	    }
+
+	  return EXIT_FAILURE;
+	}
+    }
+  while (differing <= 0 && read0 == buf_size);
+
+  return differing == 0 ? EXIT_SUCCESS : EXIT_FAILURE;
+}
+
+/* Compare two blocks of memory P0 and P1 until they differ,
+   and count the number of '\n' occurrences in the common
+   part of P0 and P1.
+   If the blocks are not guaranteed to be different, put sentinels at the ends
+   of the blocks before calling this function.
+
+   Return the offset of the first byte that differs.
+   Increment *COUNT by the count of '\n' occurrences.  */
+
+static size_t
+block_compare_and_count (word const *p0, word const *p1, off_t *count)
+{
+  word l;		/* One word from first buffer. */
+  word const *l0, *l1;	/* Pointers into each buffer. */
+  char const *c0, *c1;	/* Pointers for finding exact address. */
+  size_t cnt = 0;	/* Number of '\n' occurrences. */
+  word nnnn;		/* Newline, sizeof (word) times.  */
+  int i;
+
+  nnnn = 0;
+  for (i = 0; i < sizeof nnnn; i++)
+    nnnn = (nnnn << CHAR_BIT) | '\n';
+
+  /* Find the rough position of the first difference by reading words,
+     not bytes.  */
+
+  for (l0 = p0, l1 = p1;  (l = *l0) == *l1;  l0++, l1++)
+    {
+      l ^= nnnn;
+      for (i = 0; i < sizeof l; i++)
+	{
+	  unsigned char uc = l;
+	  cnt += ! uc;
+	  l >>= CHAR_BIT;
+	}
+    }
+
+  /* Find the exact differing position (endianness independent).  */
+
+  for (c0 = (char const *) l0, c1 = (char const *) l1;
+       *c0 == *c1;
+       c0++, c1++)
+    cnt += *c0 == '\n';
+
+  *count += cnt;
+  return c0 - (char const *) p0;
+}
+
+/* Compare two blocks of memory P0 and P1 until they differ.
+   If the blocks are not guaranteed to be different, put sentinels at the ends
+   of the blocks before calling this function.
+
+   Return the offset of the first byte that differs.  */
+
+static size_t
+block_compare (word const *p0, word const *p1)
+{
+  word const *l0, *l1;
+  char const *c0, *c1;
+
+  /* Find the rough position of the first difference by reading words,
+     not bytes.  */
+
+  for (l0 = p0, l1 = p1;  *l0 == *l1;  l0++, l1++)
+    continue;
+
+  /* Find the exact differing position (endianness independent).  */
+
+  for (c0 = (char const *) l0, c1 = (char const *) l1;
+       *c0 == *c1;
+       c0++, c1++)
+    continue;
+
+  return c0 - (char const *) p0;
+}
+
+/* Put into BUF the unsigned char C, making unprintable bytes
+   visible by quoting like cat -t does.  */
+
+static void
+sprintc (char *buf, unsigned char c)
+{
+  if (! isprint (c))
+    {
+      if (c >= 128)
+	{
+	  *buf++ = 'M';
+	  *buf++ = '-';
+	  c -= 128;
+	}
+      if (c < 32)
+	{
+	  *buf++ = '^';
+	  c += 64;
+	}
+      else if (c == 127)
+	{
+	  *buf++ = '^';
+	  c = '?';
+	}
+    }
+
+  *buf++ = c;
+  *buf = 0;
+}
+
+/* Position file F to ignore_initial[F] bytes from its initial position,
+   and yield its new position.  Don't try more than once.  */
+
+static off_t
+file_position (int f)
+{
+  static bool positioned[2];
+  static off_t position[2];
+
+  if (! positioned[f])
+    {
+      positioned[f] = true;
+      position[f] = lseek (file_desc[f], ignore_initial[f], SEEK_CUR);
+    }
+  return position[f];
+}
diff --git a/diffutils-3.0-patch/context.c b/diffutils-3.0-patch/context.c
new file mode 100644
index 0000000..0be8cc5
--- /dev/null
+++ b/diffutils-3.0-patch/context.c
@@ -0,0 +1,493 @@
+/* Context-format output routines for GNU DIFF.
+
+   Copyright (C) 1988-1989, 1991-1995, 1998, 2001-2002, 2004, 2006, 2009-2010
+   Free Software Foundation, Inc.
+
+   This file is part of GNU DIFF.
+
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+#include "diff.h"
+#include "c-ctype.h"
+#include <inttostr.h>
+#include <stat-time.h>
+#include <strftime.h>
+
+static char const *find_function (char const * const *, lin);
+static struct change *find_hunk (struct change *);
+static void mark_ignorable (struct change *);
+static void pr_context_hunk (struct change *);
+static void pr_unidiff_hunk (struct change *);
+
+/* Last place find_function started searching from.  */
+static lin find_function_last_search;
+
+/* The value find_function returned when it started searching there.  */
+static lin find_function_last_match;
+
+/* Print a label for a context diff, with a file name and date or a label.  */
+
+static void
+print_context_label (char const *mark,
+		     struct file_data *inf,
+		     char const *label)
+{
+  if (label)
+    fprintf (outfile, "%s %s\n", mark, label);
+  else
+    {
+      char buf[MAX (INT_STRLEN_BOUND (int) + 32,
+		    INT_STRLEN_BOUND (time_t) + 11)];
+      struct tm const *tm = localtime (&inf->stat.st_mtime);
+      int nsec = get_stat_mtime_ns (&inf->stat);
+      if (! (tm && nstrftime (buf, sizeof buf, time_format, tm, 0, nsec)))
+	{
+	  verify (TYPE_IS_INTEGER (time_t));
+	  if (LONG_MIN <= TYPE_MINIMUM (time_t)
+	      && TYPE_MAXIMUM (time_t) <= LONG_MAX)
+	    {
+	      long int sec = inf->stat.st_mtime;
+	      sprintf (buf, "%ld.%.9d", sec, nsec);
+	    }
+	  else if (TYPE_MAXIMUM (time_t) <= INTMAX_MAX)
+	    {
+	      intmax_t sec = inf->stat.st_mtime;
+	      sprintf (buf, "%"PRIdMAX".%.9d", sec, nsec);
+	    }
+	  else
+	    {
+	      uintmax_t sec = inf->stat.st_mtime;
+	      sprintf (buf, "%"PRIuMAX".%.9d", sec, nsec);
+	    }
+	}
+      fprintf (outfile, "%s %s\t%s\n", mark, inf->name, buf);
+    }
+}
+
+/* Print a header for a context diff, with the file names and dates.  */
+
+void
+print_context_header (struct file_data inf[], bool unidiff)
+{
+  if (unidiff)
+    {
+      print_context_label ("---", &inf[0], file_label[0]);
+      print_context_label ("+++", &inf[1], file_label[1]);
+    }
+  else
+    {
+      print_context_label ("***", &inf[0], file_label[0]);
+      print_context_label ("---", &inf[1], file_label[1]);
+    }
+}
+
+/* Print an edit script in context format.  */
+
+void
+print_context_script (struct change *script, bool unidiff)
+{
+  if (ignore_blank_lines || ignore_regexp.fastmap)
+    mark_ignorable (script);
+  else
+    {
+      struct change *e;
+      for (e = script; e; e = e->link)
+	e->ignore = false;
+    }
+
+  find_function_last_search = - files[0].prefix_lines;
+  find_function_last_match = LIN_MAX;
+
+  if (unidiff)
+    print_script (script, find_hunk, pr_unidiff_hunk);
+  else
+    print_script (script, find_hunk, pr_context_hunk);
+}
+
+/* Print a pair of line numbers with a comma, translated for file FILE.
+   If the second number is not greater, use the first in place of it.
+
+   Args A and B are internal line numbers.
+   We print the translated (real) line numbers.  */
+
+static void
+print_context_number_range (struct file_data const *file, lin a, lin b)
+{
+  long int trans_a, trans_b;
+  translate_range (file, a, b, &trans_a, &trans_b);
+
+  /* We can have B <= A in the case of a range of no lines.
+     In this case, we should print the line number before the range,
+     which is B.
+
+     POSIX 1003.1-2001 requires two line numbers separated by a comma
+     even if the line numbers are the same.  However, this does not
+     match existing practice and is surely an error in the
+     specification.  */
+
+  if (trans_b <= trans_a)
+    fprintf (outfile, "%ld", trans_b);
+  else
+    fprintf (outfile, "%ld,%ld", trans_a, trans_b);
+}
+
+/* Print FUNCTION in a context header.  */
+static void
+print_context_function (FILE *out, char const *function)
+{
+  int i, j;
+  putc (' ', out);
+  for (i = 0; c_isspace ((unsigned char) function[i]) && function[i] != '\n'; i++)
+    continue;
+  for (j = i; j < i + 40 && function[j] != '\n'; j++)
+    continue;
+  while (i < j && c_isspace ((unsigned char) function[j - 1]))
+    j--;
+  fwrite (function + i, sizeof (char), j - i, out);
+}
+
+/* Print a portion of an edit script in context format.
+   HUNK is the beginning of the portion to be printed.
+   The end is marked by a `link' that has been nulled out.
+
+   Prints out lines from both files, and precedes each
+   line with the appropriate flag-character.  */
+
+static void
+pr_context_hunk (struct change *hunk)
+{
+  lin first0, last0, first1, last1, i;
+  char const *prefix;
+  char const *function;
+  FILE *out;
+
+  /* Determine range of line numbers involved in each file.  */
+
+  enum changes changes = analyze_hunk (hunk, &first0, &last0, &first1, &last1);
+  if (! changes)
+    return;
+
+  /* Include a context's width before and after.  */
+
+  i = - files[0].prefix_lines;
+  first0 = MAX (first0 - context, i);
+  first1 = MAX (first1 - context, i);
+  if (last0 < files[0].valid_lines - context)
+    last0 += context;
+  else
+    last0 = files[0].valid_lines - 1;
+  if (last1 < files[1].valid_lines - context)
+    last1 += context;
+  else
+    last1 = files[1].valid_lines - 1;
+
+  /* If desired, find the preceding function definition line in file 0.  */
+  function = NULL;
+  if (function_regexp.fastmap)
+    function = find_function (files[0].linbuf, first0);
+
+  begin_output ();
+  out = outfile;
+
+  fputs ("***************", out);
+
+  if (function)
+    print_context_function (out, function);
+
+  fputs ("\n*** ", out);
+  print_context_number_range (&files[0], first0, last0);
+  fputs (" ****\n", out);
+
+  if (changes & OLD)
+    {
+      struct change *next = hunk;
+
+      for (i = first0; i <= last0; i++)
+	{
+	  /* Skip past changes that apply (in file 0)
+	     only to lines before line I.  */
+
+	  while (next && next->line0 + next->deleted <= i)
+	    next = next->link;
+
+	  /* Compute the marking for line I.  */
+
+	  prefix = " ";
+	  if (next && next->line0 <= i)
+	    /* The change NEXT covers this line.
+	       If lines were inserted here in file 1, this is "changed".
+	       Otherwise it is "deleted".  */
+	    prefix = (next->inserted > 0 ? "!" : "-");
+
+	  print_1_line (prefix, &files[0].linbuf[i]);
+	}
+    }
+
+  fputs ("--- ", out);
+  print_context_number_range (&files[1], first1, last1);
+  fputs (" ----\n", out);
+
+  if (changes & NEW)
+    {
+      struct change *next = hunk;
+
+      for (i = first1; i <= last1; i++)
+	{
+	  /* Skip past changes that apply (in file 1)
+	     only to lines before line I.  */
+
+	  while (next && next->line1 + next->inserted <= i)
+	    next = next->link;
+
+	  /* Compute the marking for line I.  */
+
+	  prefix = " ";
+	  if (next && next->line1 <= i)
+	    /* The change NEXT covers this line.
+	       If lines were deleted here in file 0, this is "changed".
+	       Otherwise it is "inserted".  */
+	    prefix = (next->deleted > 0 ? "!" : "+");
+
+	  print_1_line (prefix, &files[1].linbuf[i]);
+	}
+    }
+}
+
+/* Print a pair of line numbers with a comma, translated for file FILE.
+   If the second number is smaller, use the first in place of it.
+   If the numbers are equal, print just one number.
+
+   Args A and B are internal line numbers.
+   We print the translated (real) line numbers.  */
+
+static void
+print_unidiff_number_range (struct file_data const *file, lin a, lin b)
+{
+  long int trans_a, trans_b;
+  translate_range (file, a, b, &trans_a, &trans_b);
+
+  /* We can have B < A in the case of a range of no lines.
+     In this case, we print the line number before the range,
+     which is B.  It would be more logical to print A, but
+     'patch' expects B in order to detect diffs against empty files.  */
+  if (trans_b <= trans_a)
+    fprintf (outfile, trans_b < trans_a ? "%ld,0" : "%ld", trans_b);
+  else
+    fprintf (outfile, "%ld,%ld", trans_a, trans_b - trans_a + 1);
+}
+
+/* Print a portion of an edit script in unidiff format.
+   HUNK is the beginning of the portion to be printed.
+   The end is marked by a `link' that has been nulled out.
+
+   Prints out lines from both files, and precedes each
+   line with the appropriate flag-character.  */
+
+static void
+pr_unidiff_hunk (struct change *hunk)
+{
+  lin first0, last0, first1, last1;
+  lin i, j, k;
+  struct change *next;
+  char const *function;
+  FILE *out;
+
+  /* Determine range of line numbers involved in each file.  */
+
+  if (! analyze_hunk (hunk, &first0, &last0, &first1, &last1))
+    return;
+
+  /* Include a context's width before and after.  */
+
+  i = - files[0].prefix_lines;
+  first0 = MAX (first0 - context, i);
+  first1 = MAX (first1 - context, i);
+  if (last0 < files[0].valid_lines - context)
+    last0 += context;
+  else
+    last0 = files[0].valid_lines - 1;
+  if (last1 < files[1].valid_lines - context)
+    last1 += context;
+  else
+    last1 = files[1].valid_lines - 1;
+
+  /* If desired, find the preceding function definition line in file 0.  */
+  function = NULL;
+  if (function_regexp.fastmap)
+    function = find_function (files[0].linbuf, first0);
+
+  begin_output ();
+  out = outfile;
+
+  fputs ("@@ -", out);
+  print_unidiff_number_range (&files[0], first0, last0);
+  fputs (" +", out);
+  print_unidiff_number_range (&files[1], first1, last1);
+  fputs (" @@", out);
+
+  if (function)
+    print_context_function (out, function);
+
+  putc ('\n', out);
+
+  next = hunk;
+  i = first0;
+  j = first1;
+
+  while (i <= last0 || j <= last1)
+    {
+
+      /* If the line isn't a difference, output the context from file 0. */
+
+      if (!next || i < next->line0)
+	{
+	  char const *const *line = &files[0].linbuf[i++];
+	  if (! (suppress_blank_empty && **line == '\n'))
+	    putc (initial_tab ? '\t' : ' ', out);
+	  print_1_line (NULL, line);
+	  j++;
+	}
+      else
+	{
+	  /* For each difference, first output the deleted part. */
+
+	  k = next->deleted;
+	  while (k--)
+	    {
+	      char const * const *line = &files[0].linbuf[i++];
+	      putc ('-', out);
+	      if (initial_tab && ! (suppress_blank_empty && **line == '\n'))
+		putc ('\t', out);
+	      print_1_line (NULL, line);
+	    }
+
+	  /* Then output the inserted part. */
+
+	  k = next->inserted;
+	  while (k--)
+	    {
+	      char const * const *line = &files[1].linbuf[j++];
+	      putc ('+', out);
+	      if (initial_tab && ! (suppress_blank_empty && **line == '\n'))
+		putc ('\t', out);
+	      print_1_line (NULL, line);
+	    }
+
+	  /* We're done with this hunk, so on to the next! */
+
+	  next = next->link;
+	}
+    }
+}
+
+/* Scan a (forward-ordered) edit script for the first place that more than
+   2*CONTEXT unchanged lines appear, and return a pointer
+   to the `struct change' for the last change before those lines.  */
+
+static struct change *
+find_hunk (struct change *start)
+{
+  struct change *prev;
+  lin top0, top1;
+  lin thresh;
+
+  /* Threshold distance is 2 * CONTEXT + 1 between two non-ignorable
+     changes, but only CONTEXT if one is ignorable.  Watch out for
+     integer overflow, though.  */
+  lin non_ignorable_threshold =
+    (LIN_MAX - 1) / 2 < context ? LIN_MAX : 2 * context + 1;
+  lin ignorable_threshold = context;
+
+  do
+    {
+      /* Compute number of first line in each file beyond this changed.  */
+      top0 = start->line0 + start->deleted;
+      top1 = start->line1 + start->inserted;
+      prev = start;
+      start = start->link;
+      thresh = (prev->ignore || (start && start->ignore)
+		? ignorable_threshold
+		: non_ignorable_threshold);
+      /* It is not supposed to matter which file we check in the end-test.
+	 If it would matter, crash.  */
+      if (start && start->line0 - top0 != start->line1 - top1)
+	abort ();
+    } while (start
+	     /* Keep going if less than THRESH lines
+		elapse before the affected line.  */
+	     && start->line0 - top0 < thresh);
+
+  return prev;
+}
+
+/* Set the `ignore' flag properly in each change in SCRIPT.
+   It should be 1 if all the lines inserted or deleted in that change
+   are ignorable lines.  */
+
+static void
+mark_ignorable (struct change *script)
+{
+  while (script)
+    {
+      struct change *next = script->link;
+      lin first0, last0, first1, last1;
+
+      /* Turn this change into a hunk: detach it from the others.  */
+      script->link = NULL;
+
+      /* Determine whether this change is ignorable.  */
+      script->ignore = ! analyze_hunk (script,
+				       &first0, &last0, &first1, &last1);
+
+      /* Reconnect the chain as before.  */
+      script->link = next;
+
+      /* Advance to the following change.  */
+      script = next;
+    }
+}
+
+/* Find the last function-header line in LINBUF prior to line number LINENUM.
+   This is a line containing a match for the regexp in `function_regexp'.
+   Return the address of the text, or NULL if no function-header is found.  */
+
+static char const *
+find_function (char const * const *linbuf, lin linenum)
+{
+  lin i = linenum;
+  lin last = find_function_last_search;
+  find_function_last_search = i;
+
+  while (last <= --i)
+    {
+      /* See if this line is what we want.  */
+      char const *line = linbuf[i];
+      size_t linelen = linbuf[i + 1] - line - 1;
+
+      /* FIXME: re_search's size args should be size_t, not int.  */
+      int len = MIN (linelen, INT_MAX);
+
+      if (0 <= re_search (&function_regexp, line, len, 0, len, NULL))
+	{
+	  find_function_last_match = i;
+	  return line;
+	}
+    }
+  /* If we search back to where we started searching the previous time,
+     find the line we found last time.  */
+  if (find_function_last_match != LIN_MAX)
+    return linbuf[find_function_last_match];
+
+  return NULL;
+}
diff --git a/diffutils-3.0-patch/diff b/diffutils-3.0-patch/diff
new file mode 100755
index 0000000000000000000000000000000000000000..7f5e3838a841b48fbdb3510d3f4eceb45289159c
GIT binary patch
literal 774860
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

literal 0
HcmV?d00001

diff --git a/diffutils-3.0-patch/diff.c b/diffutils-3.0-patch/diff.c
new file mode 100644
index 0000000..d6e517b
--- /dev/null
+++ b/diffutils-3.0-patch/diff.c
@@ -0,0 +1,1330 @@
+/* diff - compare files line by line
+
+   Copyright (C) 1988-1989, 1992-1994, 1996, 1998, 2001-2002, 2004, 2006-2007,
+   2009-2010 Free Software Foundation, Inc.
+
+   This file is part of GNU DIFF.
+
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+#define GDIFF_MAIN
+#include "diff.h"
+#include <assert.h>
+#include "paths.h"
+#include <c-stack.h>
+#include <dirname.h>
+#include <error.h>
+#include <exclude.h>
+#include <exitfail.h>
+#include <file-type.h>
+#include <fnmatch.h>
+#include <getopt.h>
+#include <hard-locale.h>
+#include <prepargs.h>
+#include <progname.h>
+#include <sh-quote.h>
+#include <stat-time.h>
+#include <timespec.h>
+#include <version-etc.h>
+#include <xalloc.h>
+#include <xfreopen.h>
+
+/* The official name of this program (e.g., no `g' prefix).  */
+#define PROGRAM_NAME "diff"
+
+#define AUTHORS \
+  proper_name ("Paul Eggert"), \
+  proper_name ("Mike Haertel"), \
+  proper_name ("David Hayes"), \
+  proper_name ("Richard Stallman"), \
+  proper_name ("Len Tower")
+
+#ifndef GUTTER_WIDTH_MINIMUM
+# define GUTTER_WIDTH_MINIMUM 3
+#endif
+
+struct regexp_list
+{
+  char *regexps;	/* chars representing disjunction of the regexps */
+  size_t len;		/* chars used in 'regexps' */
+  size_t size;		/* size malloc'ed for 'regexps'; 0 if not malloc'ed */
+  bool multiple_regexps;/* Does 'regexps' represent a disjunction?  */
+  struct re_pattern_buffer *buf;
+};
+
+static int compare_files (struct comparison const *, char const *, char const *);
+static void add_regexp (struct regexp_list *, char const *);
+static void summarize_regexp_list (struct regexp_list *);
+static void specify_style (enum output_style);
+static void specify_value (char const **, char const *, char const *);
+static void try_help (char const *, char const *) __attribute__((noreturn));
+static void check_stdout (void);
+static void usage (void);
+
+/* If comparing directories, compare their common subdirectories
+   recursively.  */
+static bool recursive;
+
+/* In context diffs, show previous lines that match these regexps.  */
+static struct regexp_list function_regexp_list;
+
+/* Ignore changes affecting only lines that match these regexps.  */
+static struct regexp_list ignore_regexp_list;
+
+#if O_BINARY
+/* Use binary I/O when reading and writing data (--binary).
+   On POSIX hosts, this has no effect.  */
+static bool binary;
+#else
+enum { binary = true };
+#endif
+
+/* When comparing directories, if a file appears only in one
+   directory, treat it as present but empty in the other (-N).
+   Then `patch' would create the file with appropriate contents.  */
+static bool new_file;
+
+/* When comparing directories, if a file appears only in the second
+   directory of the two, treat it as present but empty in the other
+   (--unidirectional-new-file).
+   Then `patch' would create the file with appropriate contents.  */
+static bool unidirectional_new_file;
+
+/* Report files compared that are the same (-s).
+   Normally nothing is output when that happens.  */
+static bool report_identical_files;
+
+static char const shortopts[] =
+"0123456789abBcC:dD:eEfF:hHiI:lL:nNpPqrsS:tTuU:vwW:x:X:y";
+
+/* Values for long options that do not have single-letter equivalents.  */
+enum
+{
+  BINARY_OPTION = CHAR_MAX + 1,
+  FROM_FILE_OPTION,
+  HELP_OPTION,
+  HORIZON_LINES_OPTION,
+  IGNORE_FILE_NAME_CASE_OPTION,
+  INHIBIT_HUNK_MERGE_OPTION,
+  LEFT_COLUMN_OPTION,
+  LINE_FORMAT_OPTION,
+  NO_IGNORE_FILE_NAME_CASE_OPTION,
+  NORMAL_OPTION,
+  SDIFF_MERGE_ASSIST_OPTION,
+  STRIP_TRAILING_CR_OPTION,
+  SUPPRESS_BLANK_EMPTY_OPTION,
+  SUPPRESS_COMMON_LINES_OPTION,
+  TABSIZE_OPTION,
+  TO_FILE_OPTION,
+
+  /* These options must be in sequence.  */
+  UNCHANGED_LINE_FORMAT_OPTION,
+  OLD_LINE_FORMAT_OPTION,
+  NEW_LINE_FORMAT_OPTION,
+
+  /* These options must be in sequence.  */
+  UNCHANGED_GROUP_FORMAT_OPTION,
+  OLD_GROUP_FORMAT_OPTION,
+  NEW_GROUP_FORMAT_OPTION,
+  CHANGED_GROUP_FORMAT_OPTION
+};
+
+static char const group_format_option[][sizeof "--unchanged-group-format"] =
+  {
+    "--unchanged-group-format",
+    "--old-group-format",
+    "--new-group-format",
+    "--changed-group-format"
+  };
+
+static char const line_format_option[][sizeof "--unchanged-line-format"] =
+  {
+    "--unchanged-line-format",
+    "--old-line-format",
+    "--new-line-format"
+  };
+
+static struct option const longopts[] =
+{
+  {"binary", 0, 0, BINARY_OPTION},
+  {"brief", 0, 0, 'q'},
+  {"changed-group-format", 1, 0, CHANGED_GROUP_FORMAT_OPTION},
+  {"context", 2, 0, 'C'},
+  {"ed", 0, 0, 'e'},
+  {"exclude", 1, 0, 'x'},
+  {"exclude-from", 1, 0, 'X'},
+  {"expand-tabs", 0, 0, 't'},
+  {"forward-ed", 0, 0, 'f'},
+  {"from-file", 1, 0, FROM_FILE_OPTION},
+  {"help", 0, 0, HELP_OPTION},
+  {"horizon-lines", 1, 0, HORIZON_LINES_OPTION},
+  {"ifdef", 1, 0, 'D'},
+  {"ignore-all-space", 0, 0, 'w'},
+  {"ignore-blank-lines", 0, 0, 'B'},
+  {"ignore-case", 0, 0, 'i'},
+  {"ignore-file-name-case", 0, 0, IGNORE_FILE_NAME_CASE_OPTION},
+  {"ignore-matching-lines", 1, 0, 'I'},
+  {"ignore-space-change", 0, 0, 'b'},
+  {"ignore-tab-expansion", 0, 0, 'E'},
+  {"inhibit-hunk-merge", 0, 0, INHIBIT_HUNK_MERGE_OPTION},
+  {"initial-tab", 0, 0, 'T'},
+  {"label", 1, 0, 'L'},
+  {"left-column", 0, 0, LEFT_COLUMN_OPTION},
+  {"line-format", 1, 0, LINE_FORMAT_OPTION},
+  {"minimal", 0, 0, 'd'},
+  {"new-file", 0, 0, 'N'},
+  {"new-group-format", 1, 0, NEW_GROUP_FORMAT_OPTION},
+  {"new-line-format", 1, 0, NEW_LINE_FORMAT_OPTION},
+  {"no-ignore-file-name-case", 0, 0, NO_IGNORE_FILE_NAME_CASE_OPTION},
+  {"normal", 0, 0, NORMAL_OPTION},
+  {"old-group-format", 1, 0, OLD_GROUP_FORMAT_OPTION},
+  {"old-line-format", 1, 0, OLD_LINE_FORMAT_OPTION},
+  {"paginate", 0, 0, 'l'},
+  {"rcs", 0, 0, 'n'},
+  {"recursive", 0, 0, 'r'},
+  {"report-identical-files", 0, 0, 's'},
+  {"sdiff-merge-assist", 0, 0, SDIFF_MERGE_ASSIST_OPTION},
+  {"show-c-function", 0, 0, 'p'},
+  {"show-function-line", 1, 0, 'F'},
+  {"side-by-side", 0, 0, 'y'},
+  {"speed-large-files", 0, 0, 'H'},
+  {"starting-file", 1, 0, 'S'},
+  {"strip-trailing-cr", 0, 0, STRIP_TRAILING_CR_OPTION},
+  {"suppress-blank-empty", 0, 0, SUPPRESS_BLANK_EMPTY_OPTION},
+  {"suppress-common-lines", 0, 0, SUPPRESS_COMMON_LINES_OPTION},
+  {"tabsize", 1, 0, TABSIZE_OPTION},
+  {"text", 0, 0, 'a'},
+  {"to-file", 1, 0, TO_FILE_OPTION},
+  {"unchanged-group-format", 1, 0, UNCHANGED_GROUP_FORMAT_OPTION},
+  {"unchanged-line-format", 1, 0, UNCHANGED_LINE_FORMAT_OPTION},
+  {"unidirectional-new-file", 0, 0, 'P'},
+  {"unified", 2, 0, 'U'},
+  {"version", 0, 0, 'v'},
+  {"width", 1, 0, 'W'},
+  {0, 0, 0, 0}
+};
+
+/* Return a string containing the command options with which diff was invoked.
+   Spaces appear between what were separate ARGV-elements.
+   There is a space at the beginning but none at the end.
+   If there were no options, the result is an empty string.
+
+   Arguments: OPTIONVEC, a vector containing separate ARGV-elements, and COUNT,
+   the length of that vector.  */
+
+static char *
+option_list (char **optionvec, int count)
+{
+  int i;
+  size_t size = 1;
+  char *result;
+  char *p;
+
+  for (i = 0; i < count; i++)
+    size += 1 + shell_quote_length (optionvec[i]);
+
+  p = result = xmalloc (size);
+
+  for (i = 0; i < count; i++)
+    {
+      *p++ = ' ';
+      p = shell_quote_copy (p, optionvec[i]);
+    }
+
+  *p = '\0';
+  return result;
+}
+
+
+/* Return an option value suitable for add_exclude.  */
+
+static int
+exclude_options (void)
+{
+  return EXCLUDE_WILDCARDS | (ignore_file_name_case ? FNM_CASEFOLD : 0);
+}
+
+int
+main (int argc, char **argv)
+{
+  int exit_status = EXIT_SUCCESS;
+  int c;
+  int i;
+  int prev = -1;
+  lin ocontext = -1;
+  bool explicit_context = false;
+  size_t width = 0;
+  bool show_c_function = false;
+  char const *from_file = NULL;
+  char const *to_file = NULL;
+  uintmax_t numval;
+  char *numend;
+
+  /* Do our initializations.  */
+  exit_failure = EXIT_TROUBLE;
+  initialize_main (&argc, &argv);
+  set_program_name (argv[0]);
+  setlocale (LC_ALL, "");
+  bindtextdomain (PACKAGE, LOCALEDIR);
+  textdomain (PACKAGE);
+  c_stack_action (0);
+  function_regexp_list.buf = &function_regexp;
+  ignore_regexp_list.buf = &ignore_regexp;
+  re_set_syntax (RE_SYNTAX_GREP | RE_NO_POSIX_BACKTRACKING);
+  excluded = new_exclude ();
+
+  /* Decode the options.  */
+
+  while ((c = getopt_long (argc, argv, shortopts, longopts, NULL)) != -1)
+    {
+      switch (c)
+	{
+	case 0:
+	  break;
+
+	case '0':
+	case '1':
+	case '2':
+	case '3':
+	case '4':
+	case '5':
+	case '6':
+	case '7':
+	case '8':
+	case '9':
+	  if (! ISDIGIT (prev))
+	    ocontext = c - '0';
+	  else if (LIN_MAX / 10 < ocontext
+		   || ((ocontext = 10 * ocontext + c - '0') < 0))
+	    ocontext = LIN_MAX;
+	  break;
+
+	case 'a':
+	  text = true;
+	  break;
+
+	case 'b':
+	  if (ignore_white_space < IGNORE_SPACE_CHANGE)
+	    ignore_white_space = IGNORE_SPACE_CHANGE;
+	  break;
+
+	case 'B':
+	  ignore_blank_lines = true;
+	  break;
+
+	case 'C':
+	case 'U':
+	  {
+	    if (optarg)
+	      {
+		numval = strtoumax (optarg, &numend, 10);
+		if (*numend)
+		  try_help ("invalid context length '%s'", optarg);
+		if (LIN_MAX < numval)
+		  numval = LIN_MAX;
+	      }
+	    else
+	      numval = 3;
+
+	    specify_style (c == 'U' ? OUTPUT_UNIFIED : OUTPUT_CONTEXT);
+	    if (context < numval)
+	      context = numval;
+	    explicit_context = true;
+	  }
+	  break;
+
+	case 'c':
+	  specify_style (OUTPUT_CONTEXT);
+	  if (context < 3)
+	    context = 3;
+	  break;
+
+	case 'd':
+	  minimal = true;
+	  break;
+
+	case 'D':
+	  specify_style (OUTPUT_IFDEF);
+	  {
+	    static char const C_ifdef_group_formats[] =
+	      "%%=%c#ifndef %s\n%%<#endif /* ! %s */\n%c#ifdef %s\n%%>#endif /* %s */\n%c#ifndef %s\n%%<#else /* %s */\n%%>#endif /* %s */\n";
+	    char *b = xmalloc (sizeof C_ifdef_group_formats
+			       + 7 * strlen (optarg) - 14 /* 7*"%s" */
+			       - 8 /* 5*"%%" + 3*"%c" */);
+	    sprintf (b, C_ifdef_group_formats,
+		     0,
+		     optarg, optarg, 0,
+		     optarg, optarg, 0,
+		     optarg, optarg, optarg);
+	    for (i = 0; i < sizeof group_format / sizeof group_format[0]; i++)
+	      {
+		specify_value (&group_format[i], b, "-D");
+		b += strlen (b) + 1;
+	      }
+	  }
+	  break;
+
+	case 'e':
+	  specify_style (OUTPUT_ED);
+	  break;
+
+	case 'E':
+	  if (ignore_white_space < IGNORE_TAB_EXPANSION)
+	    ignore_white_space = IGNORE_TAB_EXPANSION;
+	  break;
+
+	case 'f':
+	  specify_style (OUTPUT_FORWARD_ED);
+	  break;
+
+	case 'F':
+	  add_regexp (&function_regexp_list, optarg);
+	  break;
+
+	case 'h':
+	  /* Split the files into chunks for faster processing.
+	     Usually does not change the result.
+
+	     This currently has no effect.  */
+	  break;
+
+	case 'H':
+	  speed_large_files = true;
+	  break;
+
+	case 'i':
+	  ignore_case = true;
+	  break;
+
+	case 'I':
+	  add_regexp (&ignore_regexp_list, optarg);
+	  break;
+
+	case 'l':
+	  if (!pr_program[0])
+	    try_help ("pagination not supported on this host", NULL);
+	  paginate = true;
+#ifdef SIGCHLD
+	  /* Pagination requires forking and waiting, and
+	     System V fork+wait does not work if SIGCHLD is ignored.  */
+	  signal (SIGCHLD, SIG_DFL);
+#endif
+	  break;
+
+	case 'L':
+	  if (!file_label[0])
+	    file_label[0] = optarg;
+	  else if (!file_label[1])
+	    file_label[1] = optarg;
+	  else
+	    fatal ("too many file label options");
+	  break;
+
+	case 'n':
+	  specify_style (OUTPUT_RCS);
+	  break;
+
+	case 'N':
+	  new_file = true;
+	  break;
+
+	case 'p':
+	  show_c_function = true;
+	  add_regexp (&function_regexp_list, "^[[:alpha:]$_]");
+	  break;
+
+	case 'P':
+	  unidirectional_new_file = true;
+	  break;
+
+	case 'q':
+	  brief = true;
+	  break;
+
+	case 'r':
+	  recursive = true;
+	  break;
+
+	case 's':
+	  report_identical_files = true;
+	  break;
+
+	case 'S':
+	  specify_value (&starting_file, optarg, "-S");
+	  break;
+
+	case 't':
+	  expand_tabs = true;
+	  break;
+
+	case 'T':
+	  initial_tab = true;
+	  break;
+
+	case 'u':
+	  specify_style (OUTPUT_UNIFIED);
+	  if (context < 3)
+	    context = 3;
+	  break;
+
+	case 'v':
+	  version_etc (stdout, PROGRAM_NAME, PACKAGE_NAME, PACKAGE_VERSION,
+		       AUTHORS, (char *) NULL);
+	  check_stdout ();
+	  return EXIT_SUCCESS;
+
+	case 'w':
+	  ignore_white_space = IGNORE_ALL_SPACE;
+	  break;
+
+	case 'x':
+	  add_exclude (excluded, optarg, exclude_options ());
+	  break;
+
+	case 'X':
+	  if (add_exclude_file (add_exclude, excluded, optarg,
+				exclude_options (), '\n'))
+	    pfatal_with_name (optarg);
+	  break;
+
+	case 'y':
+	  specify_style (OUTPUT_SDIFF);
+	  break;
+
+	case 'W':
+	  numval = strtoumax (optarg, &numend, 10);
+	  if (! (0 < numval && numval <= SIZE_MAX) || *numend)
+	    try_help ("invalid width '%s'", optarg);
+	  if (width != numval)
+	    {
+	      if (width)
+		fatal ("conflicting width options");
+	      width = numval;
+	    }
+	  break;
+
+	case BINARY_OPTION:
+#if O_BINARY
+	  binary = true;
+	  if (! isatty (STDOUT_FILENO))
+	    xfreopen (NULL, "wb", stdout);
+#endif
+	  break;
+
+	case FROM_FILE_OPTION:
+	  specify_value (&from_file, optarg, "--from-file");
+	  break;
+
+	case HELP_OPTION:
+	  usage ();
+	  check_stdout ();
+	  return EXIT_SUCCESS;
+
+	case HORIZON_LINES_OPTION:
+	  numval = strtoumax (optarg, &numend, 10);
+	  if (*numend)
+	    try_help ("invalid horizon length '%s'", optarg);
+	  horizon_lines = MAX (horizon_lines, MIN (numval, LIN_MAX));
+	  break;
+
+	case IGNORE_FILE_NAME_CASE_OPTION:
+	  ignore_file_name_case = true;
+	  break;
+
+	case INHIBIT_HUNK_MERGE_OPTION:
+	  /* This option is obsolete, but accept it for backward
+             compatibility.  */
+	  break;
+
+	case LEFT_COLUMN_OPTION:
+	  left_column = true;
+	  break;
+
+	case LINE_FORMAT_OPTION:
+	  specify_style (OUTPUT_IFDEF);
+	  for (i = 0; i < sizeof line_format / sizeof line_format[0]; i++)
+	    specify_value (&line_format[i], optarg, "--line-format");
+	  break;
+
+	case NO_IGNORE_FILE_NAME_CASE_OPTION:
+	  ignore_file_name_case = false;
+	  break;
+
+	case NORMAL_OPTION:
+	  specify_style (OUTPUT_NORMAL);
+	  break;
+
+	case SDIFF_MERGE_ASSIST_OPTION:
+	  specify_style (OUTPUT_SDIFF);
+	  sdiff_merge_assist = true;
+	  break;
+
+	case STRIP_TRAILING_CR_OPTION:
+	  strip_trailing_cr = true;
+	  break;
+
+	case SUPPRESS_BLANK_EMPTY_OPTION:
+	  suppress_blank_empty = true;
+	  break;
+
+	case SUPPRESS_COMMON_LINES_OPTION:
+	  suppress_common_lines = true;
+	  break;
+
+	case TABSIZE_OPTION:
+	  numval = strtoumax (optarg, &numend, 10);
+	  if (! (0 < numval && numval <= SIZE_MAX) || *numend)
+	    try_help ("invalid tabsize '%s'", optarg);
+	  if (tabsize != numval)
+	    {
+	      if (tabsize)
+		fatal ("conflicting tabsize options");
+	      tabsize = numval;
+	    }
+	  break;
+
+	case TO_FILE_OPTION:
+	  specify_value (&to_file, optarg, "--to-file");
+	  break;
+
+	case UNCHANGED_LINE_FORMAT_OPTION:
+	case OLD_LINE_FORMAT_OPTION:
+	case NEW_LINE_FORMAT_OPTION:
+	  specify_style (OUTPUT_IFDEF);
+	  c -= UNCHANGED_LINE_FORMAT_OPTION;
+	  specify_value (&line_format[c], optarg, line_format_option[c]);
+	  break;
+
+	case UNCHANGED_GROUP_FORMAT_OPTION:
+	case OLD_GROUP_FORMAT_OPTION:
+	case NEW_GROUP_FORMAT_OPTION:
+	case CHANGED_GROUP_FORMAT_OPTION:
+	  specify_style (OUTPUT_IFDEF);
+	  c -= UNCHANGED_GROUP_FORMAT_OPTION;
+	  specify_value (&group_format[c], optarg, group_format_option[c]);
+	  break;
+
+	default:
+	  try_help (NULL, NULL);
+	}
+      prev = c;
+    }
+
+  if (output_style == OUTPUT_UNSPECIFIED)
+    {
+      if (show_c_function)
+	{
+	  specify_style (OUTPUT_CONTEXT);
+	  if (ocontext < 0)
+	    context = 3;
+	}
+      else
+	specify_style (OUTPUT_NORMAL);
+    }
+
+  if (output_style != OUTPUT_CONTEXT || hard_locale (LC_TIME))
+    {
+#if (defined STAT_TIMESPEC || defined STAT_TIMESPEC_NS \
+     || defined HAVE_STRUCT_STAT_ST_SPARE1)
+      time_format = "%Y-%m-%d %H:%M:%S.%N %z";
+#else
+      time_format = "%Y-%m-%d %H:%M:%S %z";
+#endif
+    }
+  else
+    {
+      /* See POSIX 1003.1-2001 for this format.  */
+      time_format = "%a %b %e %T %Y";
+    }
+
+  if (0 <= ocontext
+      && (output_style == OUTPUT_CONTEXT
+	  || output_style == OUTPUT_UNIFIED)
+      && (context < ocontext
+	  || (ocontext < context && ! explicit_context)))
+    context = ocontext;
+
+  if (! tabsize)
+    tabsize = 8;
+  if (! width)
+    width = 130;
+
+  {
+    /* Maximize first the half line width, and then the gutter width,
+       according to the following constraints:
+
+	1.  Two half lines plus a gutter must fit in a line.
+	2.  If the half line width is nonzero:
+	    a.  The gutter width is at least GUTTER_WIDTH_MINIMUM.
+	    b.  If tabs are not expanded to spaces,
+		a half line plus a gutter is an integral number of tabs,
+		so that tabs in the right column line up.  */
+
+    intmax_t t = expand_tabs ? 1 : tabsize;
+    intmax_t w = width;
+    intmax_t off = (w + t + GUTTER_WIDTH_MINIMUM) / (2 * t)  *  t;
+    sdiff_half_width = MAX (0, MIN (off - GUTTER_WIDTH_MINIMUM, w - off)),
+    sdiff_column2_offset = sdiff_half_width ? off : w;
+  }
+
+  /* Make the horizon at least as large as the context, so that
+     shift_boundaries has more freedom to shift the first and last hunks.  */
+  if (horizon_lines < context)
+    horizon_lines = context;
+
+  summarize_regexp_list (&function_regexp_list);
+  summarize_regexp_list (&ignore_regexp_list);
+
+  if (output_style == OUTPUT_IFDEF)
+    {
+      for (i = 0; i < sizeof line_format / sizeof line_format[0]; i++)
+	if (!line_format[i])
+	  line_format[i] = "%l\n";
+      if (!group_format[OLD])
+	group_format[OLD]
+	  = group_format[CHANGED] ? group_format[CHANGED] : "%<";
+      if (!group_format[NEW])
+	group_format[NEW]
+	  = group_format[CHANGED] ? group_format[CHANGED] : "%>";
+      if (!group_format[UNCHANGED])
+	group_format[UNCHANGED] = "%=";
+      if (!group_format[CHANGED])
+	group_format[CHANGED] = concat (group_format[OLD],
+					group_format[NEW], "");
+    }
+
+  no_diff_means_no_output =
+    (output_style == OUTPUT_IFDEF ?
+      (!*group_format[UNCHANGED]
+       || (STREQ (group_format[UNCHANGED], "%=")
+	   && !*line_format[UNCHANGED]))
+     : (output_style != OUTPUT_SDIFF) | suppress_common_lines);
+
+  files_can_be_treated_as_binary =
+    (brief & binary
+     & ~ (ignore_blank_lines | ignore_case | strip_trailing_cr
+	  | (ignore_regexp_list.regexps || ignore_white_space)));
+
+  switch_string = option_list (argv + 1, optind - 1);
+
+  if (from_file)
+    {
+      if (to_file)
+	fatal ("--from-file and --to-file both specified");
+      else
+	for (; optind < argc; optind++)
+	  {
+	    int status = compare_files (NULL, from_file, argv[optind]);
+	    if (exit_status < status)
+	      exit_status = status;
+	  }
+    }
+  else
+    {
+      if (to_file)
+	for (; optind < argc; optind++)
+	  {
+	    int status = compare_files (NULL, argv[optind], to_file);
+	    if (exit_status < status)
+	      exit_status = status;
+	  }
+      else
+	{
+	  if (argc - optind != 2)
+	    {
+	      if (argc - optind < 2)
+		try_help ("missing operand after '%s'", argv[argc - 1]);
+	      else
+		try_help ("extra operand '%s'", argv[optind + 2]);
+	    }
+
+	  exit_status = compare_files (NULL, argv[optind], argv[optind + 1]);
+	}
+    }
+
+  /* Print any messages that were saved up for last.  */
+  print_message_queue ();
+
+  check_stdout ();
+  exit (exit_status);
+  return exit_status;
+}
+
+/* Append to REGLIST the regexp PATTERN.  */
+
+static void
+add_regexp (struct regexp_list *reglist, char const *pattern)
+{
+  size_t patlen = strlen (pattern);
+  char const *m = re_compile_pattern (pattern, patlen, reglist->buf);
+
+  if (m != 0)
+    error (0, 0, "%s: %s", pattern, m);
+  else
+    {
+      char *regexps = reglist->regexps;
+      size_t len = reglist->len;
+      bool multiple_regexps = reglist->multiple_regexps = regexps != 0;
+      size_t newlen = reglist->len = len + 2 * multiple_regexps + patlen;
+      size_t size = reglist->size;
+
+      if (size <= newlen)
+	{
+	  if (!size)
+	    size = 1;
+
+	  do size *= 2;
+	  while (size <= newlen);
+
+	  reglist->size = size;
+	  reglist->regexps = regexps = xrealloc (regexps, size);
+	}
+      if (multiple_regexps)
+	{
+	  regexps[len++] = '\\';
+	  regexps[len++] = '|';
+	}
+      memcpy (regexps + len, pattern, patlen + 1);
+    }
+}
+
+/* Ensure that REGLIST represents the disjunction of its regexps.
+   This is done here, rather than earlier, to avoid O(N^2) behavior.  */
+
+static void
+summarize_regexp_list (struct regexp_list *reglist)
+{
+  if (reglist->regexps)
+    {
+      /* At least one regexp was specified.  Allocate a fastmap for it.  */
+      reglist->buf->fastmap = xmalloc (1 << CHAR_BIT);
+      if (reglist->multiple_regexps)
+	{
+	  /* Compile the disjunction of the regexps.
+	     (If just one regexp was specified, it is already compiled.)  */
+	  char const *m = re_compile_pattern (reglist->regexps, reglist->len,
+					      reglist->buf);
+	  if (m)
+	    error (EXIT_TROUBLE, 0, "%s: %s", reglist->regexps, m);
+	}
+    }
+}
+
+static void
+try_help (char const *reason_msgid, char const *operand)
+{
+  if (reason_msgid)
+    error (0, 0, _(reason_msgid), operand);
+  error (EXIT_TROUBLE, 0, _("Try '%s --help' for more information."),
+	 program_name);
+  abort ();
+}
+
+static void
+check_stdout (void)
+{
+  if (ferror (stdout))
+    fatal ("write failed");
+  else if (fclose (stdout) != 0)
+    pfatal_with_name (_("standard output"));
+}
+
+static char const * const option_help_msgid[] = {
+  N_("Compare files line by line."),
+  "",
+  N_("-i  --ignore-case  Ignore case differences in file contents."),
+  N_("--ignore-file-name-case  Ignore case when comparing file names."),
+  N_("--no-ignore-file-name-case  Consider case when comparing file names."),
+  N_("-E  --ignore-tab-expansion  Ignore changes due to tab expansion."),
+  N_("-b  --ignore-space-change  Ignore changes in the amount of white space."),
+  N_("-w  --ignore-all-space  Ignore all white space."),
+  N_("-B  --ignore-blank-lines  Ignore changes whose lines are all blank."),
+  N_("-I RE  --ignore-matching-lines=RE  Ignore changes whose lines all match RE."),
+  N_("--strip-trailing-cr  Strip trailing carriage return on input."),
+#if O_BINARY
+  N_("--binary  Read and write data in binary mode."),
+#endif
+  N_("-a  --text  Treat all files as text."),
+  "",
+  N_("-c  -C NUM  --context[=NUM]  Output NUM (default 3) lines of copied context.\n\
+-u  -U NUM  --unified[=NUM]  Output NUM (default 3) lines of unified context.\n\
+  --label LABEL  Use LABEL instead of file name.\n\
+  -p  --show-c-function  Show which C function each change is in.\n\
+  -F RE  --show-function-line=RE  Show the most recent line matching RE."),
+  N_("-q  --brief  Output only whether files differ."),
+  N_("-e  --ed  Output an ed script."),
+  N_("--normal  Output a normal diff."),
+  N_("-n  --rcs  Output an RCS format diff."),
+  N_("-y  --side-by-side  Output in two columns.\n\
+  -W NUM  --width=NUM  Output at most NUM (default 130) print columns.\n\
+  --left-column  Output only the left column of common lines.\n\
+  --suppress-common-lines  Do not output common lines."),
+  N_("-D NAME  --ifdef=NAME  Output merged file to show '#ifdef NAME' diffs."),
+  N_("--GTYPE-group-format=GFMT  Similar, but format GTYPE input groups with GFMT."),
+  N_("--line-format=LFMT  Similar, but format all input lines with LFMT."),
+  N_("--LTYPE-line-format=LFMT  Similar, but format LTYPE input lines with LFMT."),
+  N_("  LTYPE is 'old', 'new', or 'unchanged'.  GTYPE is LTYPE or 'changed'."),
+  N_("  GFMT may contain:\n\
+    %<  lines from FILE1\n\
+    %>  lines from FILE2\n\
+    %=  lines common to FILE1 and FILE2\n\
+    %[-][WIDTH][.[PREC]]{doxX}LETTER  printf-style spec for LETTER\n\
+      LETTERs are as follows for new group, lower case for old group:\n\
+        F  first line number\n\
+        L  last line number\n\
+        N  number of lines = L-F+1\n\
+        E  F-1\n\
+        M  L+1"),
+  N_("  LFMT may contain:\n\
+    %L  contents of line\n\
+    %l  contents of line, excluding any trailing newline\n\
+    %[-][WIDTH][.[PREC]]{doxX}n  printf-style spec for input line number"),
+  N_("  Either GFMT or LFMT may contain:\n\
+    %%  %\n\
+    %c'C'  the single character C\n\
+    %c'\\OOO'  the character with octal code OOO"),
+  "",
+  N_("-l  --paginate  Pass the output through 'pr' to paginate it."),
+  N_("-t  --expand-tabs  Expand tabs to spaces in output."),
+  N_("-T  --initial-tab  Make tabs line up by prepending a tab."),
+  N_("--tabsize=NUM  Tab stops are every NUM (default 8) print columns."),
+  N_("--suppress-blank-empty  Suppress space or tab before empty output lines."),
+  "",
+  N_("-r  --recursive  Recursively compare any subdirectories found."),
+  N_("-N  --new-file  Treat absent files as empty."),
+  N_("--unidirectional-new-file  Treat absent first files as empty."),
+  N_("-s  --report-identical-files  Report when two files are the same."),
+  N_("-x PAT  --exclude=PAT  Exclude files that match PAT."),
+  N_("-X FILE  --exclude-from=FILE  Exclude files that match any pattern in FILE."),
+  N_("-S FILE  --starting-file=FILE  Start with FILE when comparing directories."),
+  N_("--from-file=FILE1  Compare FILE1 to all operands.  FILE1 can be a directory."),
+  N_("--to-file=FILE2  Compare all operands to FILE2.  FILE2 can be a directory."),
+  "",
+  N_("--horizon-lines=NUM  Keep NUM lines of the common prefix and suffix."),
+  N_("-d  --minimal  Try hard to find a smaller set of changes."),
+  N_("--speed-large-files  Assume large files and many scattered small changes."),
+  "",
+  N_("-v  --version  Output version info."),
+  N_("--help  Output this help."),
+  "",
+  N_("FILES are 'FILE1 FILE2' or 'DIR1 DIR2' or 'DIR FILE...' or 'FILE... DIR'."),
+  N_("If --from-file or --to-file is given, there are no restrictions on FILES."),
+  N_("If a FILE is '-', read standard input."),
+  N_("Exit status is 0 if inputs are the same, 1 if different, 2 if trouble."),
+  0
+};
+
+static void
+usage (void)
+{
+  char const * const *p;
+
+  printf (_("Usage: %s [OPTION]... FILES\n"), program_name);
+
+  for (p = option_help_msgid;  *p;  p++)
+    {
+      if (!**p)
+	putchar ('\n');
+      else
+	{
+	  char const *msg = _(*p);
+	  char const *nl;
+	  while ((nl = strchr (msg, '\n')))
+	    {
+	      int msglen = nl + 1 - msg;
+	      printf ("  %.*s", msglen, msg);
+	      msg = nl + 1;
+	    }
+
+	  printf ("  %s\n" + 2 * (*msg != ' ' && *msg != '-'), msg);
+	}
+    }
+  emit_bug_reporting_address ();
+}
+
+/* Set VAR to VALUE, reporting an OPTION error if this is a
+   conflict.  */
+static void
+specify_value (char const **var, char const *value, char const *option)
+{
+  if (*var && strcmp (*var, value) != 0)
+    {
+      error (0, 0, _("conflicting %s option value '%s'"), option, value);
+      try_help (NULL, NULL);
+    }
+  *var = value;
+}
+
+/* Set the output style to STYLE, diagnosing conflicts.  */
+static void
+specify_style (enum output_style style)
+{
+  if (output_style != style)
+    {
+      if (output_style != OUTPUT_UNSPECIFIED)
+	try_help ("conflicting output style options", NULL);
+      output_style = style;
+    }
+}
+
+/* Set the last-modified time of *ST to be the current time.  */
+
+static void
+set_mtime_to_now (struct stat *st)
+{
+#ifdef STAT_TIMESPEC
+  gettime (&STAT_TIMESPEC (st, st_mtim));
+#else
+  struct timespec t;
+  gettime (&t);
+  st->st_mtime = t.tv_sec;
+# if defined STAT_TIMESPEC_NS
+  STAT_TIMESPEC_NS (st, st_mtim) = t.tv_nsec;
+# elif defined HAVE_STRUCT_STAT_ST_SPARE1
+  st->st_spare1 = t.tv_nsec / 1000;
+# endif
+#endif
+}
+
+/* Compare two files (or dirs) with parent comparison PARENT
+   and names NAME0 and NAME1.
+   (If PARENT is null, then the first name is just NAME0, etc.)
+   This is self-contained; it opens the files and closes them.
+
+   Value is EXIT_SUCCESS if files are the same, EXIT_FAILURE if
+   different, EXIT_TROUBLE if there is a problem opening them.  */
+
+static int
+compare_files (struct comparison const *parent,
+	       char const *name0,
+	       char const *name1)
+{
+  struct comparison cmp;
+#define DIR_P(f) (S_ISDIR (cmp.file[f].stat.st_mode) != 0)
+  register int f;
+  int status = EXIT_SUCCESS;
+  bool same_files;
+  char *free0;
+  char *free1;
+
+  /* If this is directory comparison, perhaps we have a file
+     that exists only in one of the directories.
+     If so, just print a message to that effect.  */
+
+  if (! ((name0 && name1)
+	 || (unidirectional_new_file && name1)
+	 || new_file))
+    {
+      char const *name = name0 ? name0 : name1;
+      char const *dir = parent->file[!name0].name;
+
+      /* See POSIX 1003.1-2001 for this format.  */
+      message ("Only in %s: %s\n", dir, name);
+
+      /* Return EXIT_FAILURE so that diff_dirs will return
+	 EXIT_FAILURE ("some files differ").  */
+      return EXIT_FAILURE;
+    }
+
+  memset (cmp.file, 0, sizeof cmp.file);
+  cmp.parent = parent;
+
+  /* cmp.file[f].desc markers */
+#define NONEXISTENT (-1) /* nonexistent file */
+#define UNOPENED (-2) /* unopened file (e.g. directory) */
+#define ERRNO_ENCODE(errno) (-3 - (errno)) /* encoded errno value */
+
+#define ERRNO_DECODE(desc) (-3 - (desc)) /* inverse of ERRNO_ENCODE */
+
+  cmp.file[0].desc = name0 ? UNOPENED : NONEXISTENT;
+  cmp.file[1].desc = name1 ? UNOPENED : NONEXISTENT;
+
+  /* Now record the full name of each file, including nonexistent ones.  */
+
+  if (!name0)
+    name0 = name1;
+  if (!name1)
+    name1 = name0;
+
+  if (!parent)
+    {
+      free0 = NULL;
+      free1 = NULL;
+      cmp.file[0].name = name0;
+      cmp.file[1].name = name1;
+    }
+  else
+    {
+      cmp.file[0].name = free0
+	= dir_file_pathname (parent->file[0].name, name0);
+      cmp.file[1].name = free1
+	= dir_file_pathname (parent->file[1].name, name1);
+    }
+
+  /* Stat the files.  */
+
+  for (f = 0; f < 2; f++)
+    {
+      if (cmp.file[f].desc != NONEXISTENT)
+	{
+	  if (f && file_name_cmp (cmp.file[f].name, cmp.file[0].name) == 0)
+	    {
+	      cmp.file[f].desc = cmp.file[0].desc;
+	      cmp.file[f].stat = cmp.file[0].stat;
+	    }
+	  else if (STREQ (cmp.file[f].name, "-"))
+	    {
+	      cmp.file[f].desc = STDIN_FILENO;
+	      if (O_BINARY && binary && ! isatty (STDIN_FILENO))
+		xfreopen (NULL, "rb", stdin);
+	      if (fstat (STDIN_FILENO, &cmp.file[f].stat) != 0)
+		cmp.file[f].desc = ERRNO_ENCODE (errno);
+	      else
+		{
+		  if (S_ISREG (cmp.file[f].stat.st_mode))
+		    {
+		      off_t pos = lseek (STDIN_FILENO, 0, SEEK_CUR);
+		      if (pos < 0)
+			cmp.file[f].desc = ERRNO_ENCODE (errno);
+		      else
+			cmp.file[f].stat.st_size =
+			  MAX (0, cmp.file[f].stat.st_size - pos);
+		    }
+
+		  /* POSIX 1003.1-2001 requires current time for
+		     stdin.  */
+		  set_mtime_to_now (&cmp.file[f].stat);
+		}
+	    }
+	  else if (stat (cmp.file[f].name, &cmp.file[f].stat) != 0)
+	    cmp.file[f].desc = ERRNO_ENCODE (errno);
+	}
+    }
+
+  /* Mark files as nonexistent as needed for -N and -P, if they are
+     inaccessible empty regular files (the kind of files that 'patch'
+     creates to indicate nonexistent backups), or if they are
+     top-level files that do not exist but their counterparts do
+     exist.  */
+  for (f = 0; f < 2; f++)
+    if ((new_file || (f == 0 && unidirectional_new_file))
+	&& (cmp.file[f].desc == UNOPENED
+	    ? (S_ISREG (cmp.file[f].stat.st_mode)
+	       && ! (cmp.file[f].stat.st_mode & (S_IRWXU | S_IRWXG | S_IRWXO))
+	       && cmp.file[f].stat.st_size == 0)
+	    : (cmp.file[f].desc == ERRNO_ENCODE (ENOENT)
+	       && ! parent
+	       && cmp.file[1 - f].desc == UNOPENED)))
+      cmp.file[f].desc = NONEXISTENT;
+
+  for (f = 0; f < 2; f++)
+    if (cmp.file[f].desc == NONEXISTENT)
+      {
+	memset (&cmp.file[f].stat, 0, sizeof cmp.file[f].stat);
+	cmp.file[f].stat.st_mode = cmp.file[1 - f].stat.st_mode;
+      }
+
+  for (f = 0; f < 2; f++)
+    {
+      int e = ERRNO_DECODE (cmp.file[f].desc);
+      if (0 <= e)
+	{
+	  errno = e;
+	  perror_with_name (cmp.file[f].name);
+	  status = EXIT_TROUBLE;
+	}
+    }
+
+  if (status == EXIT_SUCCESS && ! parent && DIR_P (0) != DIR_P (1))
+    {
+      /* If one is a directory, and it was specified in the command line,
+	 use the file in that dir with the other file's basename.  */
+
+      int fnm_arg = DIR_P (0);
+      int dir_arg = 1 - fnm_arg;
+      char const *fnm = cmp.file[fnm_arg].name;
+      char const *dir = cmp.file[dir_arg].name;
+      char const *filename = cmp.file[dir_arg].name = free0
+	= dir_file_pathname (dir, last_component (fnm));
+
+      if (STREQ (fnm, "-"))
+	fatal ("cannot compare '-' to a directory");
+
+      if (stat (filename, &cmp.file[dir_arg].stat) != 0)
+	{
+	  perror_with_name (filename);
+	  status = EXIT_TROUBLE;
+	}
+    }
+
+  if (status != EXIT_SUCCESS)
+    {
+      /* One of the files should exist but does not.  */
+    }
+  else if (cmp.file[0].desc == NONEXISTENT
+	   && cmp.file[1].desc == NONEXISTENT)
+    {
+      /* Neither file "exists", so there's nothing to compare.  */
+    }
+  else if ((same_files
+	    = (cmp.file[0].desc != NONEXISTENT
+	       && cmp.file[1].desc != NONEXISTENT
+	       && 0 < same_file (&cmp.file[0].stat, &cmp.file[1].stat)
+	       && same_file_attributes (&cmp.file[0].stat,
+					&cmp.file[1].stat)))
+	   && no_diff_means_no_output)
+    {
+      /* The two named files are actually the same physical file.
+	 We know they are identical without actually reading them.  */
+    }
+  else if (DIR_P (0) & DIR_P (1))
+    {
+      if (output_style == OUTPUT_IFDEF)
+	fatal ("-D option not supported with directories");
+
+      /* If both are directories, compare the files in them.  */
+
+      if (parent && !recursive)
+	{
+	  /* But don't compare dir contents one level down
+	     unless -r was specified.
+	     See POSIX 1003.1-2001 for this format.  */
+	  message ("Common subdirectories: %s and %s\n",
+		   cmp.file[0].name, cmp.file[1].name);
+	}
+      else
+	status = diff_dirs (&cmp, compare_files);
+    }
+  else if ((DIR_P (0) | DIR_P (1))
+	   || (parent
+	       && (! S_ISREG (cmp.file[0].stat.st_mode)
+		   || ! S_ISREG (cmp.file[1].stat.st_mode))))
+    {
+      if (cmp.file[0].desc == NONEXISTENT || cmp.file[1].desc == NONEXISTENT)
+	{
+	  /* We have a subdirectory that exists only in one directory.  */
+
+	  if ((DIR_P (0) | DIR_P (1))
+	      && recursive
+	      && (new_file
+		  || (unidirectional_new_file
+		      && cmp.file[0].desc == NONEXISTENT)))
+	    status = diff_dirs (&cmp, compare_files);
+	  else
+	    {
+	      char const *dir;
+
+	      /* PARENT must be non-NULL here.  */
+	      assert (parent);
+	      dir = parent->file[cmp.file[0].desc == NONEXISTENT].name;
+
+	      /* See POSIX 1003.1-2001 for this format.  */
+	      message ("Only in %s: %s\n", dir, name0);
+
+	      status = EXIT_FAILURE;
+	    }
+	}
+      else
+	{
+	  /* We have two files that are not to be compared.  */
+
+	  /* See POSIX 1003.1-2001 for this format.  */
+	  message5 ("File %s is a %s while file %s is a %s\n",
+		    file_label[0] ? file_label[0] : cmp.file[0].name,
+		    file_type (&cmp.file[0].stat),
+		    file_label[1] ? file_label[1] : cmp.file[1].name,
+		    file_type (&cmp.file[1].stat));
+
+	  /* This is a difference.  */
+	  status = EXIT_FAILURE;
+	}
+    }
+  else if (files_can_be_treated_as_binary
+	   && S_ISREG (cmp.file[0].stat.st_mode)
+	   && S_ISREG (cmp.file[1].stat.st_mode)
+	   && cmp.file[0].stat.st_size != cmp.file[1].stat.st_size)
+    {
+      message ("Files %s and %s differ\n",
+	       file_label[0] ? file_label[0] : cmp.file[0].name,
+	       file_label[1] ? file_label[1] : cmp.file[1].name);
+      status = EXIT_FAILURE;
+    }
+  else
+    {
+      /* Both exist and neither is a directory.  */
+
+      /* Open the files and record their descriptors.  */
+
+      int oflags = O_RDONLY | (binary ? O_BINARY : 0);
+
+      if (cmp.file[0].desc == UNOPENED)
+	if ((cmp.file[0].desc = open (cmp.file[0].name, oflags, 0)) < 0)
+	  {
+	    perror_with_name (cmp.file[0].name);
+	    status = EXIT_TROUBLE;
+	  }
+      if (cmp.file[1].desc == UNOPENED)
+	{
+	  if (same_files)
+	    cmp.file[1].desc = cmp.file[0].desc;
+	  else if ((cmp.file[1].desc = open (cmp.file[1].name, oflags, 0)) < 0)
+	    {
+	      perror_with_name (cmp.file[1].name);
+	      status = EXIT_TROUBLE;
+	    }
+	}
+
+      /* Compare the files, if no error was found.  */
+
+      if (status == EXIT_SUCCESS)
+	status = diff_2_files (&cmp);
+
+      /* Close the file descriptors.  */
+
+      if (0 <= cmp.file[0].desc && close (cmp.file[0].desc) != 0)
+	{
+	  perror_with_name (cmp.file[0].name);
+	  status = EXIT_TROUBLE;
+	}
+      if (0 <= cmp.file[1].desc && cmp.file[0].desc != cmp.file[1].desc
+	  && close (cmp.file[1].desc) != 0)
+	{
+	  perror_with_name (cmp.file[1].name);
+	  status = EXIT_TROUBLE;
+	}
+    }
+
+  /* Now the comparison has been done, if no error prevented it,
+     and STATUS is the value this function will return.  */
+
+  if (status == EXIT_SUCCESS)
+    {
+      if (report_identical_files && !DIR_P (0))
+	message ("Files %s and %s are identical\n",
+		 file_label[0] ? file_label[0] : cmp.file[0].name,
+		 file_label[1] ? file_label[1] : cmp.file[1].name);
+    }
+  else
+    {
+      /* Flush stdout so that the user sees differences immediately.
+	 This can hurt performance, unfortunately.  */
+      if (fflush (stdout) != 0)
+	pfatal_with_name (_("standard output"));
+    }
+
+  free (free0);
+  free (free1);
+
+  return status;
+}
diff --git a/diffutils-3.0-patch/diff.h b/diffutils-3.0-patch/diff.h
new file mode 100644
index 0000000..71b33f4
--- /dev/null
+++ b/diffutils-3.0-patch/diff.h
@@ -0,0 +1,373 @@
+/* Shared definitions for GNU DIFF
+
+   Copyright (C) 1988-1989, 1991-1995, 1998, 2001-2002, 2004, 2009-2010 Free
+   Software Foundation, Inc.
+
+   This file is part of GNU DIFF.
+
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+#include "system.h"
+#include <regex.h>
+#include <stdio.h>
+#include <unlocked-io.h>
+
+/* What kind of changes a hunk contains.  */
+enum changes
+{
+  /* No changes: lines common to both files.  */
+  UNCHANGED,
+
+  /* Deletes only: lines taken from just the first file.  */
+  OLD,
+
+  /* Inserts only: lines taken from just the second file.  */
+  NEW,
+
+  /* Both deletes and inserts: a hunk containing both old and new lines.  */
+  CHANGED
+};
+
+/* Variables for command line options */
+
+#ifndef GDIFF_MAIN
+# define XTERN extern
+#else
+# define XTERN
+#endif
+
+enum output_style
+{
+  /* No output style specified.  */
+  OUTPUT_UNSPECIFIED,
+
+  /* Default output style.  */
+  OUTPUT_NORMAL,
+
+  /* Output the differences with lines of context before and after (-c).  */
+  OUTPUT_CONTEXT,
+
+  /* Output the differences in a unified context diff format (-u).  */
+  OUTPUT_UNIFIED,
+
+  /* Output the differences as commands suitable for `ed' (-e).  */
+  OUTPUT_ED,
+
+  /* Output the diff as a forward ed script (-f).  */
+  OUTPUT_FORWARD_ED,
+
+  /* Like -f, but output a count of changed lines in each "command" (-n).  */
+  OUTPUT_RCS,
+
+  /* Output merged #ifdef'd file (-D).  */
+  OUTPUT_IFDEF,
+
+  /* Output sdiff style (-y).  */
+  OUTPUT_SDIFF
+};
+
+/* True for output styles that are robust,
+   i.e. can handle a file that ends in a non-newline.  */
+#define ROBUST_OUTPUT_STYLE(S) ((S) != OUTPUT_ED && (S) != OUTPUT_FORWARD_ED)
+
+XTERN enum output_style output_style;
+
+/* Nonzero if output cannot be generated for identical files.  */
+XTERN bool no_diff_means_no_output;
+
+/* Number of lines of context to show in each set of diffs.
+   This is zero when context is not to be shown.  */
+XTERN lin context;
+
+/* Consider all files as text files (-a).
+   Don't interpret codes over 0177 as implying a "binary file".  */
+XTERN bool text;
+
+/* Number of lines to keep in identical prefix and suffix.  */
+XTERN lin horizon_lines;
+
+/* The significance of white space during comparisons.  */
+XTERN enum
+{
+  /* All white space is significant (the default).  */
+  IGNORE_NO_WHITE_SPACE,
+
+  /* Ignore changes due to tab expansion (-E).  */
+  IGNORE_TAB_EXPANSION,
+
+  /* Ignore changes in horizontal white space (-b).  */
+  IGNORE_SPACE_CHANGE,
+
+  /* Ignore all horizontal white space (-w).  */
+  IGNORE_ALL_SPACE
+} ignore_white_space;
+
+/* Ignore changes that affect only blank lines (-B).  */
+XTERN bool ignore_blank_lines;
+
+/* Files can be compared byte-by-byte, as if they were binary.
+   This depends on various options.  */
+XTERN bool files_can_be_treated_as_binary;
+
+/* Ignore differences in case of letters (-i).  */
+XTERN bool ignore_case;
+
+/* Ignore differences in case of letters in file names.  */
+XTERN bool ignore_file_name_case;
+
+/* File labels for `-c' output headers (--label).  */
+XTERN char *file_label[2];
+
+/* Regexp to identify function-header lines (-F).  */
+XTERN struct re_pattern_buffer function_regexp;
+
+/* Ignore changes that affect only lines matching this regexp (-I).  */
+XTERN struct re_pattern_buffer ignore_regexp;
+
+/* Say only whether files differ, not how (-q).  */
+XTERN bool brief;
+
+/* Expand tabs in the output so the text lines up properly
+   despite the characters added to the front of each line (-t).  */
+XTERN bool expand_tabs;
+
+/* Number of columns between tab stops.  */
+XTERN size_t tabsize;
+
+/* Use a tab in the output, rather than a space, before the text of an
+   input line, so as to keep the proper alignment in the input line
+   without changing the characters in it (-T).  */
+XTERN bool initial_tab;
+
+/* Do not output an initial space or tab before the text of an empty line.  */
+XTERN bool suppress_blank_empty;
+
+/* Remove trailing carriage returns from input.  */
+XTERN bool strip_trailing_cr;
+
+/* In directory comparison, specify file to start with (-S).
+   This is used for resuming an aborted comparison.
+   All file names less than this name are ignored.  */
+XTERN char const *starting_file;
+
+/* Pipe each file's output through pr (-l).  */
+XTERN bool paginate;
+
+/* Line group formats for unchanged, old, new, and changed groups.  */
+XTERN char const *group_format[CHANGED + 1];
+
+/* Line formats for unchanged, old, and new lines.  */
+XTERN char const *line_format[NEW + 1];
+
+/* If using OUTPUT_SDIFF print extra information to help the sdiff filter.  */
+XTERN bool sdiff_merge_assist;
+
+/* Tell OUTPUT_SDIFF to show only the left version of common lines.  */
+XTERN bool left_column;
+
+/* Tell OUTPUT_SDIFF to not show common lines.  */
+XTERN bool suppress_common_lines;
+
+/* The half line width and column 2 offset for OUTPUT_SDIFF.  */
+XTERN size_t sdiff_half_width;
+XTERN size_t sdiff_column2_offset;
+
+/* String containing all the command options diff received,
+   with spaces between and at the beginning but none at the end.
+   If there were no options given, this string is empty.  */
+XTERN char *switch_string;
+
+/* Use heuristics for better speed with large files with a small
+   density of changes.  */
+XTERN bool speed_large_files;
+
+/* Patterns that match file names to be excluded.  */
+XTERN struct exclude *excluded;
+
+/* Don't discard lines.  This makes things slower (sometimes much
+   slower) but will find a guaranteed minimal set of changes.  */
+XTERN bool minimal;
+
+/* The strftime format to use for time strings.  */
+XTERN char const *time_format;
+
+/* The result of comparison is an "edit script": a chain of `struct change'.
+   Each `struct change' represents one place where some lines are deleted
+   and some are inserted.
+
+   LINE0 and LINE1 are the first affected lines in the two files (origin 0).
+   DELETED is the number of lines deleted here from file 0.
+   INSERTED is the number of lines inserted here in file 1.
+
+   If DELETED is 0 then LINE0 is the number of the line before
+   which the insertion was done; vice versa for INSERTED and LINE1.  */
+
+struct change
+{
+  struct change *link;		/* Previous or next edit command  */
+  lin inserted;			/* # lines of file 1 changed here.  */
+  lin deleted;			/* # lines of file 0 changed here.  */
+  lin line0;			/* Line number of 1st deleted line.  */
+  lin line1;			/* Line number of 1st inserted line.  */
+  bool ignore;			/* Flag used in context.c.  */
+};
+
+/* Structures that describe the input files.  */
+
+/* Data on one input file being compared.  */
+
+struct file_data {
+    int             desc;	/* File descriptor  */
+    char const      *name;	/* File name  */
+    struct stat     stat;	/* File status */
+
+    /* Buffer in which text of file is read.  */
+    word *buffer;
+
+    /* Allocated size of buffer, in bytes.  Always a multiple of
+       sizeof *buffer.  */
+    size_t bufsize;
+
+    /* Number of valid bytes now in the buffer.  */
+    size_t buffered;
+
+    /* Array of pointers to lines in the file.  */
+    char const **linbuf;
+
+    /* linbuf_base <= buffered_lines <= valid_lines <= alloc_lines.
+       linebuf[linbuf_base ... buffered_lines - 1] are possibly differing.
+       linebuf[linbuf_base ... valid_lines - 1] contain valid data.
+       linebuf[linbuf_base ... alloc_lines - 1] are allocated.  */
+    lin linbuf_base, buffered_lines, valid_lines, alloc_lines;
+
+    /* Pointer to end of prefix of this file to ignore when hashing.  */
+    char const *prefix_end;
+
+    /* Count of lines in the prefix.
+       There are this many lines in the file before linbuf[0].  */
+    lin prefix_lines;
+
+    /* Pointer to start of suffix of this file to ignore when hashing.  */
+    char const *suffix_begin;
+
+    /* Vector, indexed by line number, containing an equivalence code for
+       each line.  It is this vector that is actually compared with that
+       of another file to generate differences.  */
+    lin *equivs;
+
+    /* Vector, like the previous one except that
+       the elements for discarded lines have been squeezed out.  */
+    lin *undiscarded;
+
+    /* Vector mapping virtual line numbers (not counting discarded lines)
+       to real ones (counting those lines).  Both are origin-0.  */
+    lin *realindexes;
+
+    /* Total number of nondiscarded lines.  */
+    lin nondiscarded_lines;
+
+    /* Vector, indexed by real origin-0 line number,
+       containing 1 for a line that is an insertion or a deletion.
+       The results of comparison are stored here.  */
+    char *changed;
+
+    /* 1 if file ends in a line with no final newline.  */
+    bool missing_newline;
+
+    /* 1 if at end of file.  */
+    bool eof;
+
+    /* 1 more than the maximum equivalence value used for this or its
+       sibling file.  */
+    lin equiv_max;
+};
+
+/* The file buffer, considered as an array of bytes rather than
+   as an array of words.  */
+#define FILE_BUFFER(f) ((char *) (f)->buffer)
+
+/* Data on two input files being compared.  */
+
+struct comparison
+  {
+    struct file_data file[2];
+    struct comparison const *parent;  /* parent, if a recursive comparison */
+  };
+
+/* Describe the two files currently being compared.  */
+
+XTERN struct file_data files[2];
+
+/* Stdio stream to output diffs to.  */
+
+XTERN FILE *outfile;
+
+/* Declare various functions.  */
+
+/* analyze.c */
+int diff_2_files (struct comparison *);
+
+/* context.c */
+void print_context_header (struct file_data[], bool);
+void print_context_script (struct change *, bool);
+
+/* dir.c */
+int diff_dirs (struct comparison const *, int (*) (struct comparison const *, char const *, char const *));
+
+/* ed.c */
+void print_ed_script (struct change *);
+void pr_forward_ed_script (struct change *);
+
+/* ifdef.c */
+void print_ifdef_script (struct change *);
+
+/* io.c */
+void file_block_read (struct file_data *, size_t);
+bool read_files (struct file_data[], bool);
+
+/* normal.c */
+void print_normal_script (struct change *);
+
+/* rcs.c */
+void print_rcs_script (struct change *);
+
+/* side.c */
+void print_sdiff_script (struct change *);
+
+/* util.c */
+extern char const change_letter[4];
+extern char const pr_program[];
+char *concat (char const *, char const *, char const *);
+char *dir_file_pathname (char const *, char const *);
+bool lines_differ (char const *, char const *);
+lin translate_line_number (struct file_data const *, lin);
+struct change *find_change (struct change *);
+struct change *find_reverse_change (struct change *);
+void *zalloc (size_t);
+enum changes analyze_hunk (struct change *, lin *, lin *, lin *, lin *);
+void begin_output (void);
+void debug_script (struct change *);
+void fatal (char const *) __attribute__((noreturn));
+void finish_output (void);
+void message (char const *, char const *, char const *);
+void message5 (char const *, char const *, char const *, char const *, char const *);
+void output_1_line (char const *, char const *, char const *, char const *);
+void perror_with_name (char const *);
+void pfatal_with_name (char const *) __attribute__((noreturn));
+void print_1_line (char const *, char const * const *);
+void print_message_queue (void);
+void print_number_range (char, struct file_data *, lin, lin);
+void print_script (struct change *, struct change * (*) (struct change *), void (*) (struct change *));
+void setup_output (char const *, char const *, bool);
+void translate_range (struct file_data const *, lin, lin, long int *, long int *);
diff --git a/diffutils-3.0-patch/diff3 b/diffutils-3.0-patch/diff3
new file mode 100755
index 0000000000000000000000000000000000000000..d80667a96403cd2525c8a4b6582201e782458d18
GIT binary patch
literal 238717
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
G;`<*vbQXvJ

literal 0
HcmV?d00001

diff --git a/diffutils-3.0-patch/diff3.c b/diffutils-3.0-patch/diff3.c
new file mode 100644
index 0000000..fbfb28b
--- /dev/null
+++ b/diffutils-3.0-patch/diff3.c
@@ -0,0 +1,1747 @@
+/* diff3 - compare three files line by line
+
+   Copyright (C) 1988-1989, 1992-1996, 1998, 2001-2002, 2004, 2006, 2009-2010
+   Free Software Foundation, Inc.
+
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+#include "system.h"
+#include "paths.h"
+
+#include <stdio.h>
+#include <unlocked-io.h>
+
+#include <c-stack.h>
+#include <cmpbuf.h>
+#include <error.h>
+#include <exitfail.h>
+#include <file-type.h>
+#include <getopt.h>
+#include <inttostr.h>
+#include <progname.h>
+#include <sh-quote.h>
+#include <version-etc.h>
+#include <xalloc.h>
+#include <xfreopen.h>
+
+/* The official name of this program (e.g., no `g' prefix).  */
+#define PROGRAM_NAME "diff3"
+
+#define AUTHORS \
+  proper_name ("Randy Smith")
+
+/* Internal data structures and macros for the diff3 program; includes
+   data structures for both diff3 diffs and normal diffs.  */
+
+/* Different files within a three way diff.  */
+#define	FILE0	0
+#define	FILE1	1
+#define	FILE2	2
+
+/* A three way diff is built from two two-way diffs; the file which
+   the two two-way diffs share is:  */
+#define	FILEC	FILE2
+
+/* Different files within a two way diff.
+   FC is the common file, FO the other file.  */
+#define FO 0
+#define FC 1
+
+/* The ranges are indexed by */
+#define	RANGE_START	0
+#define	RANGE_END	1
+
+enum diff_type {
+  ERROR,			/* Should not be used */
+  ADD,				/* Two way diff add */
+  CHANGE,			/* Two way diff change */
+  DELETE,			/* Two way diff delete */
+  DIFF_ALL,			/* All three are different */
+  DIFF_1ST,			/* Only the first is different */
+  DIFF_2ND,			/* Only the second */
+  DIFF_3RD			/* Only the third */
+};
+
+/* Two way diff */
+struct diff_block {
+  lin ranges[2][2];		/* Ranges are inclusive */
+  char **lines[2];		/* The actual lines (may contain nulls) */
+  size_t *lengths[2];		/* Line lengths (including newlines, if any) */
+  struct diff_block *next;
+};
+
+/* Three way diff */
+
+struct diff3_block {
+  enum diff_type correspond;	/* Type of diff */
+  lin ranges[3][2];		/* Ranges are inclusive */
+  char **lines[3];		/* The actual lines (may contain nulls) */
+  size_t *lengths[3];		/* Line lengths (including newlines, if any) */
+  struct diff3_block *next;
+};
+
+/* Access the ranges on a diff block.  */
+#define	D_LOWLINE(diff, filenum)	\
+  ((diff)->ranges[filenum][RANGE_START])
+#define	D_HIGHLINE(diff, filenum)	\
+  ((diff)->ranges[filenum][RANGE_END])
+#define	D_NUMLINES(diff, filenum)	\
+  (D_HIGHLINE (diff, filenum) - D_LOWLINE (diff, filenum) + 1)
+
+/* Access the line numbers in a file in a diff by relative line
+   numbers (i.e. line number within the diff itself).  Note that these
+   are lvalues and can be used for assignment.  */
+#define	D_RELNUM(diff, filenum, linenum)	\
+  ((diff)->lines[filenum][linenum])
+#define	D_RELLEN(diff, filenum, linenum)	\
+  ((diff)->lengths[filenum][linenum])
+
+/* And get at them directly, when that should be necessary.  */
+#define	D_LINEARRAY(diff, filenum)	\
+  ((diff)->lines[filenum])
+#define	D_LENARRAY(diff, filenum)	\
+  ((diff)->lengths[filenum])
+
+/* Next block.  */
+#define	D_NEXT(diff)	((diff)->next)
+
+/* Access the type of a diff3 block.  */
+#define	D3_TYPE(diff)	((diff)->correspond)
+
+/* Line mappings based on diffs.  The first maps off the top of the
+   diff, the second off of the bottom.  */
+#define	D_HIGH_MAPLINE(diff, fromfile, tofile, linenum)	\
+  ((linenum)						\
+   - D_HIGHLINE ((diff), (fromfile))			\
+   + D_HIGHLINE ((diff), (tofile)))
+
+#define	D_LOW_MAPLINE(diff, fromfile, tofile, linenum)	\
+  ((linenum)						\
+   - D_LOWLINE ((diff), (fromfile))			\
+   + D_LOWLINE ((diff), (tofile)))
+
+/* Options variables for flags set on command line.  */
+
+/* If nonzero, treat all files as text files, never as binary.  */
+static bool text;
+
+/* Remove trailing carriage returns from input.  */
+static bool strip_trailing_cr;
+
+/* If nonzero, write out an ed script instead of the standard diff3 format.  */
+static bool edscript;
+
+/* If nonzero, in the case of overlapping diffs (type DIFF_ALL),
+   preserve the lines which would normally be deleted from
+   file 1 with a special flagging mechanism.  */
+static bool flagging;
+
+/* Use a tab to align output lines (-T).  */
+static bool initial_tab;
+
+/* If nonzero, do not output information for overlapping diffs.  */
+static bool simple_only;
+
+/* If nonzero, do not output information for non-overlapping diffs.  */
+static bool overlap_only;
+
+/* If nonzero, show information for DIFF_2ND diffs.  */
+static bool show_2nd;
+
+/* If nonzero, include `:wq' at the end of the script
+   to write out the file being edited.   */
+static bool finalwrite;
+
+/* If nonzero, output a merged file.  */
+static bool merge;
+
+static char *read_diff (char const *, char const *, char **);
+static char *scan_diff_line (char *, char **, size_t *, char *, char);
+static enum diff_type process_diff_control (char **, struct diff_block *);
+static bool compare_line_list (char * const[], size_t const[], char * const[], size_t const[], lin);
+static bool copy_stringlist (char * const[], size_t const[], char *[], size_t[], lin);
+static bool output_diff3_edscript (FILE *, struct diff3_block *, int const[3], int const[3], char const *, char const *, char const *);
+static bool output_diff3_merge (FILE *, FILE *, struct diff3_block *, int const[3], int const[3], char const *, char const *, char const *);
+static struct diff3_block *create_diff3_block (lin, lin, lin, lin, lin, lin);
+static struct diff3_block *make_3way_diff (struct diff_block *, struct diff_block *);
+static struct diff3_block *reverse_diff3_blocklist (struct diff3_block *);
+static struct diff3_block *using_to_diff3_block (struct diff_block *[2], struct diff_block *[2], int, int, struct diff3_block const *);
+static struct diff_block *process_diff (char const *, char const *, struct diff_block **);
+static void check_stdout (void);
+static void fatal (char const *) __attribute__((noreturn));
+static void output_diff3 (FILE *, struct diff3_block *, int const[3], int const[3]);
+static void perror_with_exit (char const *) __attribute__((noreturn));
+static void try_help (char const *, char const *) __attribute__((noreturn));
+static void usage (void);
+
+static char const *diff_program = DEFAULT_DIFF_PROGRAM;
+
+/* Values for long options that do not have single-letter equivalents.  */
+enum
+{
+  DIFF_PROGRAM_OPTION = CHAR_MAX + 1,
+  HELP_OPTION,
+  STRIP_TRAILING_CR_OPTION
+};
+
+static struct option const longopts[] =
+{
+  {"diff-program", 1, 0, DIFF_PROGRAM_OPTION},
+  {"easy-only", 0, 0, '3'},
+  {"ed", 0, 0, 'e'},
+  {"help", 0, 0, HELP_OPTION},
+  {"initial-tab", 0, 0, 'T'},
+  {"label", 1, 0, 'L'},
+  {"merge", 0, 0, 'm'},
+  {"overlap-only", 0, 0, 'x'},
+  {"show-all", 0, 0, 'A'},
+  {"show-overlap", 0, 0, 'E'},
+  {"strip-trailing-cr", 0, 0, STRIP_TRAILING_CR_OPTION},
+  {"text", 0, 0, 'a'},
+  {"version", 0, 0, 'v'},
+  {0, 0, 0, 0}
+};
+
+int
+main (int argc, char **argv)
+{
+  int c, i;
+  int common;
+  int mapping[3];
+  int rev_mapping[3];
+  int incompat = 0;
+  bool conflicts_found;
+  struct diff_block *thread0, *thread1, *last_block;
+  struct diff3_block *diff3;
+  int tag_count = 0;
+  char *tag_strings[3];
+  char *commonname;
+  char **file;
+  struct stat statb;
+
+  exit_failure = EXIT_TROUBLE;
+  initialize_main (&argc, &argv);
+  set_program_name (argv[0]);
+  setlocale (LC_ALL, "");
+  bindtextdomain (PACKAGE, LOCALEDIR);
+  textdomain (PACKAGE);
+  c_stack_action (0);
+
+  while ((c = getopt_long (argc, argv, "aeimvx3AEL:TX", longopts, 0)) != -1)
+    {
+      switch (c)
+	{
+	case 'a':
+	  text = true;
+	  break;
+	case 'A':
+	  show_2nd = true;
+	  flagging = true;
+	  incompat++;
+	  break;
+	case 'x':
+	  overlap_only = true;
+	  incompat++;
+	  break;
+	case '3':
+	  simple_only = true;
+	  incompat++;
+	  break;
+	case 'i':
+	  finalwrite = true;
+	  break;
+	case 'm':
+	  merge = true;
+	  break;
+	case 'X':
+	  overlap_only = true;
+	  /* Fall through.  */
+	case 'E':
+	  flagging = true;
+	  /* Fall through.  */
+	case 'e':
+	  incompat++;
+	  break;
+	case 'T':
+	  initial_tab = true;
+	  break;
+	case STRIP_TRAILING_CR_OPTION:
+	  strip_trailing_cr = true;
+	  break;
+	case 'v':
+	  version_etc (stdout, PROGRAM_NAME, PACKAGE_NAME, PACKAGE_VERSION,
+		       AUTHORS, (char *) NULL);
+	  check_stdout ();
+	  return EXIT_SUCCESS;
+	case DIFF_PROGRAM_OPTION:
+	  diff_program = optarg;
+	  break;
+	case HELP_OPTION:
+	  usage ();
+	  check_stdout ();
+	  return EXIT_SUCCESS;
+	case 'L':
+	  /* Handle up to three -L options.  */
+	  if (tag_count < 3)
+	    {
+	      tag_strings[tag_count++] = optarg;
+	      break;
+	    }
+	  try_help ("too many file label options", 0);
+	default:
+	  try_help (0, 0);
+	}
+    }
+
+  edscript = incompat & ~merge;  /* -AeExX3 without -m implies ed script.  */
+  show_2nd |= ~incompat & merge;  /* -m without -AeExX3 implies -A.  */
+  flagging |= ~incompat & merge;
+
+  if (incompat > 1  /* Ensure at most one of -AeExX3.  */
+      || finalwrite & merge /* -i -m would rewrite input file.  */
+      || (tag_count && ! flagging)) /* -L requires one of -AEX.  */
+    try_help ("incompatible options", 0);
+
+  if (argc - optind != 3)
+    {
+      if (argc - optind < 3)
+	try_help ("missing operand after '%s'", argv[argc - 1]);
+      else
+	try_help ("extra operand '%s'", argv[optind + 3]);
+    }
+
+  file = &argv[optind];
+
+  for (i = tag_count; i < 3; i++)
+    tag_strings[i] = file[i];
+
+  /* Always compare file1 to file2, even if file2 is "-".
+     This is needed for -mAeExX3.  Using the file0 as
+     the common file would produce wrong results, because if the
+     file0-file1 diffs didn't line up with the file0-file2 diffs
+     (which is entirely possible since we don't use diff's -n option),
+     diff3 might report phantom changes from file1 to file2.
+
+     Also, try to compare file0 to file1, because this is where
+     changes are expected to come from.  Diffing between these pairs
+     of files is more likely to avoid phantom changes from file0 to file1.
+
+     Historically, the default common file was file2, so some older
+     applications (e.g. Emacs ediff) used file2 as the ancestor.  So,
+     for compatibility, if this is a 3-way diff (not a merge or
+     edscript), prefer file2 as the common file.  */
+
+  common = 2 - (edscript | merge);
+
+  if (STREQ (file[common], "-"))
+    {
+      /* Sigh.  We've got standard input as the common file.  We can't
+	 call diff twice on stdin.  Use the other arg as the common
+	 file instead.  */
+      common = 3 - common;
+      if (STREQ (file[0], "-") || STREQ (file[common], "-"))
+	fatal ("'-' specified for more than one input file");
+    }
+
+  mapping[0] = 0;
+  mapping[1] = 3 - common;
+  mapping[2] = common;
+
+  for (i = 0; i < 3; i++)
+    rev_mapping[mapping[i]] = i;
+
+  for (i = 0; i < 3; i++)
+    if (strcmp (file[i], "-") != 0)
+      {
+	if (stat (file[i], &statb) < 0)
+	  perror_with_exit (file[i]);
+	else if (S_ISDIR (statb.st_mode))
+	  error (EXIT_TROUBLE, EISDIR, "%s", file[i]);
+      }
+
+#ifdef SIGCHLD
+  /* System V fork+wait does not work if SIGCHLD is ignored.  */
+  signal (SIGCHLD, SIG_DFL);
+#endif
+
+  /* Invoke diff twice on two pairs of input files, combine the two
+     diffs, and output them.  */
+
+  commonname = file[rev_mapping[FILEC]];
+  thread1 = process_diff (file[rev_mapping[FILE1]], commonname, &last_block);
+  thread0 = process_diff (file[rev_mapping[FILE0]], commonname, &last_block);
+  diff3 = make_3way_diff (thread0, thread1);
+  if (edscript)
+    conflicts_found
+      = output_diff3_edscript (stdout, diff3, mapping, rev_mapping,
+			       tag_strings[0], tag_strings[1], tag_strings[2]);
+  else if (merge)
+    {
+      xfreopen (file[rev_mapping[FILE0]], "r", stdin);
+      conflicts_found
+	= output_diff3_merge (stdin, stdout, diff3, mapping, rev_mapping,
+			      tag_strings[0], tag_strings[1], tag_strings[2]);
+      if (ferror (stdin))
+	fatal ("read failed");
+    }
+  else
+    {
+      output_diff3 (stdout, diff3, mapping, rev_mapping);
+      conflicts_found = false;
+    }
+
+  check_stdout ();
+  exit (conflicts_found);
+  return conflicts_found;
+}
+
+static void
+try_help (char const *reason_msgid, char const *operand)
+{
+  if (reason_msgid)
+    error (0, 0, _(reason_msgid), operand);
+  error (EXIT_TROUBLE, 0,
+	 _("Try '%s --help' for more information."), program_name);
+  abort ();
+}
+
+static void
+check_stdout (void)
+{
+  if (ferror (stdout))
+    fatal ("write failed");
+  else if (fclose (stdout) != 0)
+    perror_with_exit (_("standard output"));
+}
+
+static char const * const option_help_msgid[] = {
+  N_("-e  --ed  Output unmerged changes from OLDFILE to YOURFILE into MYFILE."),
+  N_("-E  --show-overlap  Output unmerged changes, bracketing conflicts."),
+  N_("-A  --show-all  Output all changes, bracketing conflicts."),
+  N_("-x  --overlap-only  Output overlapping changes."),
+  N_("-X  Output overlapping changes, bracketing them."),
+  N_("-3  --easy-only  Output unmerged nonoverlapping changes."),
+  "",
+  N_("-m  --merge  Output merged file instead of ed script (default -A)."),
+  N_("-L LABEL  --label=LABEL  Use LABEL instead of file name."),
+  N_("-i  Append 'w' and 'q' commands to ed scripts."),
+  N_("-a  --text  Treat all files as text."),
+  N_("--strip-trailing-cr  Strip trailing carriage return on input."),
+  N_("-T  --initial-tab  Make tabs line up by prepending a tab."),
+  N_("--diff-program=PROGRAM  Use PROGRAM to compare files."),
+  "",
+  N_("-v  --version  Output version info."),
+  N_("--help  Output this help."),
+  0
+};
+
+static void
+usage (void)
+{
+  char const * const *p;
+
+  printf (_("Usage: %s [OPTION]... MYFILE OLDFILE YOURFILE\n"),
+	  program_name);
+  printf ("%s\n\n", _("Compare three files line by line."));
+  for (p = option_help_msgid;  *p;  p++)
+    if (**p)
+      printf ("  %s\n", _(*p));
+    else
+      putchar ('\n');
+  printf ("\n%s\n%s\n",
+	  _("If a FILE is '-', read standard input."),
+	  _("Exit status is 0 if successful, 1 if conflicts, 2 if trouble."));
+  emit_bug_reporting_address ();
+}
+
+/* Combine the two diffs together into one.
+   Here is the algorithm:
+
+     File2 is shared in common between the two diffs.
+     Diff02 is the diff between 0 and 2.
+     Diff12 is the diff between 1 and 2.
+
+	1) Find the range for the first block in File2.
+	    a) Take the lowest of the two ranges (in File2) in the two
+	       current blocks (one from each diff) as being the low
+	       water mark.  Assign the upper end of this block as
+	       being the high water mark and move the current block up
+	       one.  Mark the block just moved over as to be used.
+	    b) Check the next block in the diff that the high water
+	       mark is *not* from.
+
+	       *If* the high water mark is above
+	       the low end of the range in that block,
+
+		   mark that block as to be used and move the current
+		   block up.  Set the high water mark to the max of
+		   the high end of this block and the current.  Repeat b.
+
+	 2) Find the corresponding ranges in File0 (from the blocks
+	    in diff02; line per line outside of diffs) and in File1.
+	    Create a diff3_block, reserving space as indicated by the ranges.
+
+	 3) Copy all of the pointers for file2 in.  At least for now,
+	    do memcmp's between corresponding strings in the two diffs.
+
+	 4) Copy all of the pointers for file0 and 1 in.  Get what is
+	    needed from file2 (when there isn't a diff block, it's
+	    identical to file2 within the range between diff blocks).
+
+	 5) If the diff blocks used came from only one of the two
+	    strings of diffs, then that file (i.e. the one other than
+	    the common file in that diff) is the odd person out.  If
+	    diff blocks are used from both sets, check to see if files
+	    0 and 1 match:
+
+		Same number of lines?  If so, do a set of memcmp's (if
+	    a memcmp matches; copy the pointer over; it'll be easier
+	    later during comparisons).  If they match, 0 & 1 are the
+	    same.  If not, all three different.
+
+     Then do it again, until the blocks are exhausted.  */
+
+
+/* Make a three way diff (chain of diff3_block's) from two two way
+   diffs (chains of diff_block's).  Assume that each of the two diffs
+   passed are onto the same file (i.e. that each of the diffs were
+   made "to" the same file).  Return a three way diff pointer with
+   numbering FILE0 = the other file in diff02, FILE1 = the other file
+   in diff12, and FILEC = the common file.  */
+
+static struct diff3_block *
+make_3way_diff (struct diff_block *thread0, struct diff_block *thread1)
+{
+  /* Work on the two diffs passed to it as threads.  Thread number 0
+     is diff02, thread number 1 is diff12.  USING is the base of the
+     list of blocks to be used to construct each block of the three
+     way diff; if no blocks from a particular thread are to be used,
+     that element of USING is 0.  LAST_USING contains the last
+     elements on each of the using lists.
+
+     HIGH_WATER_MARK is the highest line number in the common file
+     described in any of the diffs in either of the USING lists.
+     HIGH_WATER_THREAD names the thread.  Similarly BASE_WATER_MARK
+     and BASE_WATER_THREAD describe the lowest line number in the
+     common file described in any of the diffs in either of the USING
+     lists.  HIGH_WATER_DIFF is the diff from which the
+     HIGH_WATER_MARK was taken.
+
+     HIGH_WATER_DIFF should always be equal to
+     LAST_USING[HIGH_WATER_THREAD].  OTHER_DIFF is the next diff to
+     check for higher water, and should always be equal to
+     CURRENT[HIGH_WATER_THREAD ^ 1].  OTHER_THREAD is the thread in
+     which the OTHER_DIFF is, and hence should always be equal to
+     HIGH_WATER_THREAD ^ 1.
+
+     LAST_DIFF is the last diff block produced by this routine, for
+     line correspondence purposes between that diff and the one
+     currently being worked on.  It is ZERO_DIFF before any blocks
+     have been created.  */
+
+  struct diff_block *using[2];
+  struct diff_block *last_using[2];
+  struct diff_block *current[2];
+
+  lin high_water_mark;
+
+  int high_water_thread;
+  int base_water_thread;
+  int other_thread;
+
+  struct diff_block *high_water_diff;
+  struct diff_block *other_diff;
+
+  struct diff3_block *result;
+  struct diff3_block *tmpblock;
+  struct diff3_block **result_end;
+
+  struct diff3_block const *last_diff3;
+
+  static struct diff3_block const zero_diff3;
+
+  /* Initialization */
+  result = 0;
+  result_end = &result;
+  current[0] = thread0; current[1] = thread1;
+  last_diff3 = &zero_diff3;
+
+  /* Sniff up the threads until we reach the end */
+
+  while (current[0] || current[1])
+    {
+      using[0] = using[1] = last_using[0] = last_using[1] = 0;
+
+      /* Setup low and high water threads, diffs, and marks.  */
+      if (!current[0])
+	base_water_thread = 1;
+      else if (!current[1])
+	base_water_thread = 0;
+      else
+	base_water_thread =
+	  (D_LOWLINE (current[0], FC) > D_LOWLINE (current[1], FC));
+
+      high_water_thread = base_water_thread;
+
+      high_water_diff = current[high_water_thread];
+
+      high_water_mark = D_HIGHLINE (high_water_diff, FC);
+
+      /* Make the diff you just got info from into the using class */
+      using[high_water_thread]
+	= last_using[high_water_thread]
+	= high_water_diff;
+      current[high_water_thread] = high_water_diff->next;
+      last_using[high_water_thread]->next = 0;
+
+      /* And mark the other diff */
+      other_thread = high_water_thread ^ 0x1;
+      other_diff = current[other_thread];
+
+      /* Shuffle up the ladder, checking the other diff to see if it
+	 needs to be incorporated.  */
+      while (other_diff
+	     && D_LOWLINE (other_diff, FC) <= high_water_mark + 1)
+	{
+
+	  /* Incorporate this diff into the using list.  Note that
+	     this doesn't take it off the current list */
+	  if (using[other_thread])
+	    last_using[other_thread]->next = other_diff;
+	  else
+	    using[other_thread] = other_diff;
+	  last_using[other_thread] = other_diff;
+
+	  /* Take it off the current list.  Note that this following
+	     code assumes that other_diff enters it equal to
+	     current[high_water_thread ^ 0x1] */
+	  current[other_thread] = current[other_thread]->next;
+	  other_diff->next = 0;
+
+	  /* Set the high_water stuff
+	     If this comparison is equal, then this is the last pass
+	     through this loop; since diff blocks within a given
+	     thread cannot overlap, the high_water_mark will be
+	     *below* the range_start of either of the next diffs.  */
+
+	  if (high_water_mark < D_HIGHLINE (other_diff, FC))
+	    {
+	      high_water_thread ^= 1;
+	      high_water_mark = D_HIGHLINE (other_diff, FC);
+	    }
+
+	  /* Set the other diff */
+	  other_thread = high_water_thread ^ 0x1;
+	  other_diff = current[other_thread];
+	}
+
+      /* The using lists contain a list of all of the blocks to be
+	 included in this diff3_block.  Create it.  */
+
+      tmpblock = using_to_diff3_block (using, last_using,
+				       base_water_thread, high_water_thread,
+				       last_diff3);
+
+      if (!tmpblock)
+	fatal ("internal error: screwup in format of diff blocks");
+
+      /* Put it on the list.  */
+      *result_end = tmpblock;
+      result_end = &tmpblock->next;
+
+      /* Set up corresponding lines correctly.  */
+      last_diff3 = tmpblock;
+    }
+  return result;
+}
+
+/* Take two lists of blocks (from two separate diff threads) and put
+   them together into one diff3 block.  Return a pointer to this diff3
+   block or 0 for failure.
+
+   All arguments besides using are for the convenience of the routine;
+   they could be derived from the using array.  LAST_USING is a pair
+   of pointers to the last blocks in the using structure.  LOW_THREAD
+   and HIGH_THREAD tell which threads contain the lowest and highest
+   line numbers for File0.  LAST_DIFF3 contains the last diff produced
+   in the calling routine.  This is used for lines mappings that
+   would still be identical to the state that diff ended in.
+
+   A distinction should be made in this routine between the two diffs
+   that are part of a normal two diff block, and the three diffs that
+   are part of a diff3_block.  */
+
+static struct diff3_block *
+using_to_diff3_block (struct diff_block *using[2],
+		      struct diff_block *last_using[2],
+		      int low_thread, int high_thread,
+		      struct diff3_block const *last_diff3)
+{
+  lin low[2], high[2];
+  struct diff3_block *result;
+  struct diff_block *ptr;
+  int d;
+  lin i;
+
+  /* Find the range in the common file.  */
+  lin lowc = D_LOWLINE (using[low_thread], FC);
+  lin highc = D_HIGHLINE (last_using[high_thread], FC);
+
+  /* Find the ranges in the other files.
+     If using[d] is null, that means that the file to which that diff
+     refers is equivalent to the common file over this range.  */
+
+  for (d = 0; d < 2; d++)
+    if (using[d])
+      {
+	low[d] = D_LOW_MAPLINE (using[d], FC, FO, lowc);
+	high[d] = D_HIGH_MAPLINE (last_using[d], FC, FO, highc);
+      }
+    else
+      {
+	low[d] = D_HIGH_MAPLINE (last_diff3, FILEC, FILE0 + d, lowc);
+	high[d] = D_HIGH_MAPLINE (last_diff3, FILEC, FILE0 + d, highc);
+      }
+
+  /* Create a block with the appropriate sizes */
+  result = create_diff3_block (low[0], high[0], low[1], high[1], lowc, highc);
+
+  /* Copy information for the common file.
+     Return with a zero if any of the compares failed.  */
+
+  for (d = 0; d < 2; d++)
+    for (ptr = using[d]; ptr; ptr = D_NEXT (ptr))
+      {
+	lin result_offset = D_LOWLINE (ptr, FC) - lowc;
+
+	if (!copy_stringlist (D_LINEARRAY (ptr, FC),
+			      D_LENARRAY (ptr, FC),
+			      D_LINEARRAY (result, FILEC) + result_offset,
+			      D_LENARRAY (result, FILEC) + result_offset,
+			      D_NUMLINES (ptr, FC)))
+	  return 0;
+      }
+
+  /* Copy information for file d.  First deal with anything that might be
+     before the first diff.  */
+
+  for (d = 0; d < 2; d++)
+    {
+      struct diff_block *u = using[d];
+      lin lo = low[d], hi = high[d];
+
+      for (i = 0;
+	   i + lo < (u ? D_LOWLINE (u, FO) : hi + 1);
+	   i++)
+	{
+	  D_RELNUM (result, FILE0 + d, i) = D_RELNUM (result, FILEC, i);
+	  D_RELLEN (result, FILE0 + d, i) = D_RELLEN (result, FILEC, i);
+	}
+
+      for (ptr = u; ptr; ptr = D_NEXT (ptr))
+	{
+	  lin result_offset = D_LOWLINE (ptr, FO) - lo;
+	  lin linec;
+
+	  if (!copy_stringlist (D_LINEARRAY (ptr, FO),
+				D_LENARRAY (ptr, FO),
+				D_LINEARRAY (result, FILE0 + d) + result_offset,
+				D_LENARRAY (result, FILE0 + d) + result_offset,
+				D_NUMLINES (ptr, FO)))
+	    return 0;
+
+	  /* Catch the lines between here and the next diff */
+	  linec = D_HIGHLINE (ptr, FC) + 1 - lowc;
+	  for (i = D_HIGHLINE (ptr, FO) + 1 - lo;
+	       i < (D_NEXT (ptr) ? D_LOWLINE (D_NEXT (ptr), FO) : hi + 1) - lo;
+	       i++)
+	    {
+	      D_RELNUM (result, FILE0 + d, i) = D_RELNUM (result, FILEC, linec);
+	      D_RELLEN (result, FILE0 + d, i) = D_RELLEN (result, FILEC, linec);
+	      linec++;
+	    }
+	}
+    }
+
+  /* Set correspond */
+  if (!using[0])
+    D3_TYPE (result) = DIFF_2ND;
+  else if (!using[1])
+    D3_TYPE (result) = DIFF_1ST;
+  else
+    {
+      lin nl0 = D_NUMLINES (result, FILE0);
+      lin nl1 = D_NUMLINES (result, FILE1);
+
+      if (nl0 != nl1
+	  || !compare_line_list (D_LINEARRAY (result, FILE0),
+				 D_LENARRAY (result, FILE0),
+				 D_LINEARRAY (result, FILE1),
+				 D_LENARRAY (result, FILE1),
+				 nl0))
+	D3_TYPE (result) = DIFF_ALL;
+      else
+	D3_TYPE (result) = DIFF_3RD;
+    }
+
+  return result;
+}
+
+/* Copy pointers from a list of strings to a different list of
+   strings.  If a spot in the second list is already filled, make sure
+   that it is filled with the same string; if not, return false, the copy
+   incomplete.  Upon successful completion of the copy, return true.  */
+
+static bool
+copy_stringlist (char * const fromptrs[], size_t const fromlengths[],
+		 char *toptrs[], size_t tolengths[],
+		 lin copynum)
+{
+  register char * const *f = fromptrs;
+  register char **t = toptrs;
+  register size_t const *fl = fromlengths;
+  register size_t *tl = tolengths;
+
+  while (copynum--)
+    {
+      if (*t)
+	{
+	  if (*fl != *tl || memcmp (*f, *t, *fl) != 0)
+	    return false;
+	}
+      else
+	{
+	  *t = *f;
+	  *tl = *fl;
+	}
+
+      t++; f++; tl++; fl++;
+    }
+
+  return true;
+}
+
+/* Create a diff3_block, with ranges as specified in the arguments.
+   Allocate the arrays for the various pointers (and zero them) based
+   on the arguments passed.  Return the block as a result.  */
+
+static struct diff3_block *
+create_diff3_block (lin low0, lin high0,
+		    lin low1, lin high1,
+		    lin low2, lin high2)
+{
+  struct diff3_block *result = xmalloc (sizeof *result);
+  lin numlines;
+
+  D3_TYPE (result) = ERROR;
+  D_NEXT (result) = 0;
+
+  /* Assign ranges */
+  D_LOWLINE (result, FILE0) = low0;
+  D_HIGHLINE (result, FILE0) = high0;
+  D_LOWLINE (result, FILE1) = low1;
+  D_HIGHLINE (result, FILE1) = high1;
+  D_LOWLINE (result, FILE2) = low2;
+  D_HIGHLINE (result, FILE2) = high2;
+
+  /* Allocate and zero space */
+  numlines = D_NUMLINES (result, FILE0);
+  if (numlines)
+    {
+      D_LINEARRAY (result, FILE0) = xcalloc (numlines, sizeof (char *));
+      D_LENARRAY (result, FILE0) = xcalloc (numlines, sizeof (size_t));
+    }
+  else
+    {
+      D_LINEARRAY (result, FILE0) = 0;
+      D_LENARRAY (result, FILE0) = 0;
+    }
+
+  numlines = D_NUMLINES (result, FILE1);
+  if (numlines)
+    {
+      D_LINEARRAY (result, FILE1) = xcalloc (numlines, sizeof (char *));
+      D_LENARRAY (result, FILE1) = xcalloc (numlines, sizeof (size_t));
+    }
+  else
+    {
+      D_LINEARRAY (result, FILE1) = 0;
+      D_LENARRAY (result, FILE1) = 0;
+    }
+
+  numlines = D_NUMLINES (result, FILE2);
+  if (numlines)
+    {
+      D_LINEARRAY (result, FILE2) = xcalloc (numlines, sizeof (char *));
+      D_LENARRAY (result, FILE2) = xcalloc (numlines, sizeof (size_t));
+    }
+  else
+    {
+      D_LINEARRAY (result, FILE2) = 0;
+      D_LENARRAY (result, FILE2) = 0;
+    }
+
+  /* Return */
+  return result;
+}
+
+/* Compare two lists of lines of text.
+   Return 1 if they are equivalent, 0 if not.  */
+
+static bool
+compare_line_list (char * const list1[], size_t const lengths1[],
+		   char * const list2[], size_t const lengths2[],
+		   lin nl)
+{
+  char * const *l1 = list1;
+  char * const *l2 = list2;
+  size_t const *lgths1 = lengths1;
+  size_t const *lgths2 = lengths2;
+
+  while (nl--)
+    if (!*l1 || !*l2 || *lgths1 != *lgths2++
+	|| memcmp (*l1++, *l2++, *lgths1++) != 0)
+      return false;
+  return true;
+}
+
+/* Input and parse two way diffs.  */
+
+static struct diff_block *
+process_diff (char const *filea,
+	      char const *fileb,
+	      struct diff_block **last_block)
+{
+  char *diff_contents;
+  char *diff_limit;
+  char *scan_diff;
+  enum diff_type dt;
+  lin i;
+  struct diff_block *block_list;
+  struct diff_block **block_list_end = &block_list;
+  struct diff_block *bptr IF_LINT (= NULL);
+  size_t too_many_lines = (PTRDIFF_MAX
+			   / MIN (sizeof *bptr->lines[1],
+				  sizeof *bptr->lengths[1]));
+
+  diff_limit = read_diff (filea, fileb, &diff_contents);
+  scan_diff = diff_contents;
+
+  while (scan_diff < diff_limit)
+    {
+      bptr = xmalloc (sizeof *bptr);
+      bptr->lines[0] = bptr->lines[1] = 0;
+      bptr->lengths[0] = bptr->lengths[1] = 0;
+
+      dt = process_diff_control (&scan_diff, bptr);
+      if (dt == ERROR || *scan_diff != '\n')
+	{
+	  fprintf (stderr, _("%s: diff failed: "), program_name);
+	  do
+	    {
+	      putc (*scan_diff, stderr);
+	    }
+	  while (*scan_diff++ != '\n');
+	  exit (EXIT_TROUBLE);
+	}
+      scan_diff++;
+
+      /* Force appropriate ranges to be null, if necessary */
+      switch (dt)
+	{
+	case ADD:
+	  bptr->ranges[0][0]++;
+	  break;
+	case DELETE:
+	  bptr->ranges[1][0]++;
+	  break;
+	case CHANGE:
+	  break;
+	default:
+	  fatal ("internal error: invalid diff type in process_diff");
+	  break;
+	}
+
+      /* Allocate space for the pointers for the lines from filea, and
+	 parcel them out among these pointers */
+      if (dt != ADD)
+	{
+	  lin numlines = D_NUMLINES (bptr, 0);
+	  if (too_many_lines <= numlines)
+	    xalloc_die ();
+	  bptr->lines[0] = xmalloc (numlines * sizeof *bptr->lines[0]);
+	  bptr->lengths[0] = xmalloc (numlines * sizeof *bptr->lengths[0]);
+	  for (i = 0; i < numlines; i++)
+	    scan_diff = scan_diff_line (scan_diff,
+					&(bptr->lines[0][i]),
+					&(bptr->lengths[0][i]),
+					diff_limit,
+					'<');
+	}
+
+      /* Get past the separator for changes */
+      if (dt == CHANGE)
+	{
+	  if (strncmp (scan_diff, "---\n", 4))
+	    fatal ("invalid diff format; invalid change separator");
+	  scan_diff += 4;
+	}
+
+      /* Allocate space for the pointers for the lines from fileb, and
+	 parcel them out among these pointers */
+      if (dt != DELETE)
+	{
+	  lin numlines = D_NUMLINES (bptr, 1);
+	  if (too_many_lines <= numlines)
+	    xalloc_die ();
+	  bptr->lines[1] = xmalloc (numlines * sizeof *bptr->lines[1]);
+	  bptr->lengths[1] = xmalloc (numlines * sizeof *bptr->lengths[1]);
+	  for (i = 0; i < numlines; i++)
+	    scan_diff = scan_diff_line (scan_diff,
+					&(bptr->lines[1][i]),
+					&(bptr->lengths[1][i]),
+					diff_limit,
+					'>');
+	}
+
+      /* Place this block on the blocklist.  */
+      *block_list_end = bptr;
+      block_list_end = &bptr->next;
+    }
+
+  *block_list_end = NULL;
+  *last_block = bptr;
+  return block_list;
+}
+
+/* Skip tabs and spaces, and return the first character after them.  */
+
+static char *
+skipwhite (char *s)
+{
+  while (*s == ' ' || *s == '\t')
+    s++;
+  return s;
+}
+
+/* Read a nonnegative line number from S, returning the address of the
+   first character after the line number, and storing the number into
+   *PNUM.  Return 0 if S does not point to a valid line number.  */
+
+static char *
+readnum (char *s, lin *pnum)
+{
+  unsigned char c = *s;
+  lin num = 0;
+
+  if (! ISDIGIT (c))
+    return 0;
+
+  do
+    {
+      num = c - '0' + num * 10;
+      c = *++s;
+    }
+  while (ISDIGIT (c));
+
+  *pnum = num;
+  return s;
+}
+
+/* Parse a normal format diff control string.  Return the type of the
+   diff (ERROR if the format is bad).  All of the other important
+   information is filled into to the structure pointed to by db, and
+   the string pointer (whose location is passed to this routine) is
+   updated to point beyond the end of the string parsed.  Note that
+   only the ranges in the diff_block will be set by this routine.
+
+   If some specific pair of numbers has been reduced to a single
+   number, then both corresponding numbers in the diff block are set
+   to that number.  In general these numbers are interpreted as ranges
+   inclusive, unless being used by the ADD or DELETE commands.  It is
+   assumed that these will be special cased in a superior routine.   */
+
+static enum diff_type
+process_diff_control (char **string, struct diff_block *db)
+{
+  char *s = *string;
+  enum diff_type type;
+
+  /* Read first set of digits */
+  s = readnum (skipwhite (s), &db->ranges[0][RANGE_START]);
+  if (! s)
+    return ERROR;
+
+  /* Was that the only digit? */
+  s = skipwhite (s);
+  if (*s == ',')
+    {
+      s = readnum (s + 1, &db->ranges[0][RANGE_END]);
+      if (! s)
+	return ERROR;
+    }
+  else
+    db->ranges[0][RANGE_END] = db->ranges[0][RANGE_START];
+
+  /* Get the letter */
+  s = skipwhite (s);
+  switch (*s)
+    {
+    case 'a':
+      type = ADD;
+      break;
+    case 'c':
+      type = CHANGE;
+      break;
+    case 'd':
+      type = DELETE;
+      break;
+    default:
+      return ERROR;			/* Bad format */
+    }
+  s++;				/* Past letter */
+
+  /* Read second set of digits */
+  s = readnum (skipwhite (s), &db->ranges[1][RANGE_START]);
+  if (! s)
+    return ERROR;
+
+  /* Was that the only digit? */
+  s = skipwhite (s);
+  if (*s == ',')
+    {
+      s = readnum (s + 1, &db->ranges[1][RANGE_END]);
+      if (! s)
+	return ERROR;
+      s = skipwhite (s);		/* To move to end */
+    }
+  else
+    db->ranges[1][RANGE_END] = db->ranges[1][RANGE_START];
+
+  *string = s;
+  return type;
+}
+
+static char *
+read_diff (char const *filea,
+	   char const *fileb,
+	   char **output_placement)
+{
+  char *diff_result;
+  size_t current_chunk_size, total;
+  int fd, wstatus, status;
+  int werrno = 0;
+  struct stat pipestat;
+
+#if HAVE_WORKING_FORK || HAVE_WORKING_VFORK
+
+  char const *argv[9];
+  char const **ap;
+  int fds[2];
+  pid_t pid;
+
+  ap = argv;
+  *ap++ = diff_program;
+  if (text)
+    *ap++ = "-a";
+  if (strip_trailing_cr)
+    *ap++ = "--strip-trailing-cr";
+  *ap++ = "--horizon-lines=100";
+  *ap++ = "--";
+  *ap++ = filea;
+  *ap++ = fileb;
+  *ap = 0;
+
+  if (pipe (fds) != 0)
+    perror_with_exit ("pipe");
+
+  pid = vfork ();
+  if (pid == 0)
+    {
+      /* Child */
+      close (fds[0]);
+      if (fds[1] != STDOUT_FILENO)
+	{
+	  dup2 (fds[1], STDOUT_FILENO);
+	  close (fds[1]);
+	}
+
+      /* The cast to (char **) is needed for portability to older
+	 hosts with a nonstandard prototype for execvp.  */
+      execvp (diff_program, (char **) argv);
+
+      _exit (errno == ENOENT ? 127 : 126);
+    }
+
+  if (pid == -1)
+    perror_with_exit ("fork");
+
+  close (fds[1]);		/* Prevent erroneous lack of EOF */
+  fd = fds[0];
+
+#else
+
+  FILE *fpipe;
+  char const args[] = " --horizon-lines=100 -- ";
+  char *command = xmalloc (shell_quote_length (diff_program)
+			   + sizeof "-a"
+			   + sizeof "--strip-trailing-cr"
+			   + sizeof args - 1
+			   + shell_quote_length (filea) + 1
+			   + shell_quote_length (fileb) + 1);
+  char *p = command;
+  p = shell_quote_copy (p, diff_program);
+  if (text)
+    {
+      strcpy (p, " -a");
+      p += 3;
+    }
+  if (strip_trailing_cr)
+    {
+      strcpy (p, " --strip-trailing-cr");
+      p += 20;
+    }
+  strcpy (p, args);
+  p += sizeof args - 1;
+  p = shell_quote_copy (p, filea);
+  *p++ = ' ';
+  p = shell_quote_copy (p, fileb);
+  *p = 0;
+  errno = 0;
+  fpipe = popen (command, "r");
+  if (!fpipe)
+    perror_with_exit (command);
+  free (command);
+  fd = fileno (fpipe);
+
+#endif
+
+  if (fstat (fd, &pipestat) != 0)
+    perror_with_exit ("fstat");
+  current_chunk_size = MAX (1, STAT_BLOCKSIZE (pipestat));
+  diff_result = xmalloc (current_chunk_size);
+  total = 0;
+
+  for (;;)
+    {
+      size_t bytes_to_read = current_chunk_size - total;
+      size_t bytes = block_read (fd, diff_result + total, bytes_to_read);
+      total += bytes;
+      if (bytes != bytes_to_read)
+	{
+	  if (bytes == SIZE_MAX)
+	    perror_with_exit (_("read failed"));
+	  break;
+	}
+      if (PTRDIFF_MAX / 2 <= current_chunk_size)
+	xalloc_die ();
+      current_chunk_size *= 2;
+      diff_result = xrealloc (diff_result, current_chunk_size);
+    }
+
+  if (total != 0 && diff_result[total-1] != '\n')
+    fatal ("invalid diff format; incomplete last line");
+
+  *output_placement = diff_result;
+
+#if ! (HAVE_WORKING_FORK || HAVE_WORKING_VFORK)
+
+  wstatus = pclose (fpipe);
+  if (wstatus == -1)
+    werrno = errno;
+
+#else
+
+  if (close (fd) != 0)
+    perror_with_exit ("close");
+  if (waitpid (pid, &wstatus, 0) < 0)
+    perror_with_exit ("waitpid");
+
+#endif
+
+  status = ! werrno && WIFEXITED (wstatus) ? WEXITSTATUS (wstatus) : INT_MAX;
+
+  if (EXIT_TROUBLE <= status)
+    error (EXIT_TROUBLE, werrno,
+	   _(status == 126
+	     ? "subsidiary program '%s' could not be invoked"
+	     : status == 127
+	     ? "subsidiary program '%s' not found"
+	     : status == INT_MAX
+	     ? "subsidiary program '%s' failed"
+	     : "subsidiary program '%s' failed (exit status %d)"),
+	   diff_program, status);
+
+  return diff_result + total;
+}
+
+
+/* Scan a regular diff line (consisting of > or <, followed by a
+   space, followed by text (including nulls) up to a newline.
+
+   This next routine began life as a macro and many parameters in it
+   are used as call-by-reference values.  */
+static char *
+scan_diff_line (char *scan_ptr, char **set_start, size_t *set_length,
+		char *limit, char leadingchar)
+{
+  char *line_ptr;
+
+  if (!(scan_ptr[0] == leadingchar
+	&& scan_ptr[1] == ' '))
+    fatal ("invalid diff format; incorrect leading line chars");
+
+  *set_start = line_ptr = scan_ptr + 2;
+  while (*line_ptr++ != '\n')
+    continue;
+
+  /* Include newline if the original line ended in a newline,
+     or if an edit script is being generated.
+     Copy any missing newline message to stderr if an edit script is being
+     generated, because edit scripts cannot handle missing newlines.
+     Return the beginning of the next line.  */
+  *set_length = line_ptr - *set_start;
+  if (line_ptr < limit && *line_ptr == '\\')
+    {
+      if (edscript)
+	fprintf (stderr, "%s:", program_name);
+      else
+	--*set_length;
+      line_ptr++;
+      do
+	{
+	  if (edscript)
+	    putc (*line_ptr, stderr);
+	}
+      while (*line_ptr++ != '\n');
+    }
+
+  return line_ptr;
+}
+
+/* Output a three way diff passed as a list of diff3_block's.  The
+   argument MAPPING is indexed by external file number (in the
+   argument list) and contains the internal file number (from the diff
+   passed).  This is important because the user expects outputs in
+   terms of the argument list number, and the diff passed may have
+   been done slightly differently (if the last argument was "-", for
+   example).  REV_MAPPING is the inverse of MAPPING.  */
+
+static void
+output_diff3 (FILE *outputfile, struct diff3_block *diff,
+	      int const mapping[3], int const rev_mapping[3])
+{
+  int i;
+  int oddoneout;
+  char *cp;
+  struct diff3_block *ptr;
+  lin line;
+  size_t length;
+  int dontprint;
+  static int skew_increment[3] = { 2, 3, 1 }; /* 0==>2==>1==>3 */
+  char const *line_prefix = initial_tab ? "\t" : "  ";
+
+  for (ptr = diff; ptr; ptr = D_NEXT (ptr))
+    {
+      char x[2];
+
+      switch (ptr->correspond)
+	{
+	case DIFF_ALL:
+	  x[0] = 0;
+	  dontprint = 3;	/* Print them all */
+	  oddoneout = 3;	/* Nobody's odder than anyone else */
+	  break;
+	case DIFF_1ST:
+	case DIFF_2ND:
+	case DIFF_3RD:
+	  oddoneout = rev_mapping[ptr->correspond - DIFF_1ST];
+
+	  x[0] = oddoneout + '1';
+	  x[1] = 0;
+	  dontprint = oddoneout == 0;
+	  break;
+	default:
+	  fatal ("internal error: invalid diff type passed to output");
+	}
+      fprintf (outputfile, "====%s\n", x);
+
+      /* Go 0, 2, 1 if the first and third outputs are equivalent.  */
+      for (i = 0; i < 3;
+	   i = (oddoneout == 1 ? skew_increment[i] : i + 1))
+	{
+	  int realfile = mapping[i];
+	  lin lowt = D_LOWLINE (ptr, realfile);
+	  lin hight = D_HIGHLINE (ptr, realfile);
+	  long int llowt = lowt;
+	  long int lhight = hight;
+
+	  fprintf (outputfile, "%d:", i + 1);
+	  switch (lowt - hight)
+	    {
+	    case 1:
+	      fprintf (outputfile, "%lda\n", llowt - 1);
+	      break;
+	    case 0:
+	      fprintf (outputfile, "%ldc\n", llowt);
+	      break;
+	    default:
+	      fprintf (outputfile, "%ld,%ldc\n", llowt, lhight);
+	      break;
+	    }
+
+	  if (i == dontprint) continue;
+
+	  if (lowt <= hight)
+	    {
+	      line = 0;
+	      do
+		{
+		  fputs (line_prefix, outputfile);
+		  cp = D_RELNUM (ptr, realfile, line);
+		  length = D_RELLEN (ptr, realfile, line);
+		  fwrite (cp, sizeof (char), length, outputfile);
+		}
+	      while (++line < hight - lowt + 1);
+	      if (cp[length - 1] != '\n')
+		fprintf (outputfile, "\n\\ %s\n",
+			 _("No newline at end of file"));
+	    }
+	}
+    }
+}
+
+
+/* Output to OUTPUTFILE the lines of B taken from FILENUM.  Double any
+   initial '.'s; yield nonzero if any initial '.'s were doubled.  */
+
+static bool
+dotlines (FILE *outputfile, struct diff3_block *b, int filenum)
+{
+  lin i;
+  bool leading_dot = false;
+
+  for (i = 0;
+       i < D_NUMLINES (b, filenum);
+       i++)
+    {
+      char *line = D_RELNUM (b, filenum, i);
+      if (line[0] == '.')
+	{
+	  leading_dot = true;
+	  fputc ('.', outputfile);
+	}
+      fwrite (line, sizeof (char),
+	      D_RELLEN (b, filenum, i), outputfile);
+    }
+
+  return leading_dot;
+}
+
+/* Output to OUTPUTFILE a '.' line.  If LEADING_DOT is true, also
+   output a command that removes initial '.'s starting with line START
+   and continuing for NUM lines.  (START is long int, not lin, for
+   convenience with printf %ld formats.)  */
+
+static void
+undotlines (FILE *outputfile, bool leading_dot, long int start, lin num)
+{
+  fputs (".\n", outputfile);
+  if (leading_dot)
+    {
+      if (num == 1)
+	fprintf (outputfile, "%lds/^\\.//\n", start);
+      else
+	fprintf (outputfile, "%ld,%lds/^\\.//\n", start, start + num - 1);
+    }
+}
+
+/* Output a diff3 set of blocks as an ed script.  This script applies
+   the changes between file's 2 & 3 to file 1.  Take the precise
+   format of the ed script to be output from global variables set
+   during options processing.  Reverse the order of
+   the set of diff3 blocks in DIFF; this gets
+   around the problems involved with changing line numbers in an ed
+   script.
+
+   As in `output_diff3', the variable MAPPING maps from file number
+   according to the argument list to file number according to the diff
+   passed.  All files listed below are in terms of the argument list.
+   REV_MAPPING is the inverse of MAPPING.
+
+   FILE0, FILE1 and FILE2 are the strings to print as the names of the
+   three files.  These may be the actual names, or may be the
+   arguments specified with -L.
+
+   Return 1 if conflicts were found.  */
+
+static bool
+output_diff3_edscript (FILE *outputfile, struct diff3_block *diff,
+		       int const mapping[3], int const rev_mapping[3],
+		       char const *file0, char const *file1, char const *file2)
+{
+  bool leading_dot;
+  bool conflicts_found = false;
+  bool conflict;
+  struct diff3_block *b;
+
+  for (b = reverse_diff3_blocklist (diff); b; b = b->next)
+    {
+      /* Must do mapping correctly.  */
+      enum diff_type type
+	= (b->correspond == DIFF_ALL
+	   ? DIFF_ALL
+	   : DIFF_1ST + rev_mapping[b->correspond - DIFF_1ST]);
+
+      long int low0, high0;
+
+      /* If we aren't supposed to do this output block, skip it.  */
+      switch (type)
+	{
+	default: continue;
+	case DIFF_2ND: if (!show_2nd) continue; conflict = true; break;
+	case DIFF_3RD: if (overlap_only) continue; conflict = false; break;
+	case DIFF_ALL: if (simple_only) continue; conflict = flagging; break;
+	}
+
+      low0 = D_LOWLINE (b, mapping[FILE0]);
+      high0 = D_HIGHLINE (b, mapping[FILE0]);
+
+      if (conflict)
+	{
+	  conflicts_found = true;
+
+
+	  /* Mark end of conflict.  */
+
+	  fprintf (outputfile, "%lda\n", high0);
+	  leading_dot = false;
+	  if (type == DIFF_ALL)
+	    {
+	      if (show_2nd)
+		{
+		  /* Append lines from FILE1.  */
+		  fprintf (outputfile, "||||||| %s\n", file1);
+		  leading_dot = dotlines (outputfile, b, mapping[FILE1]);
+		}
+	      /* Append lines from FILE2.  */
+	      fputs ("=======\n", outputfile);
+	      leading_dot |= dotlines (outputfile, b, mapping[FILE2]);
+	    }
+	  fprintf (outputfile, ">>>>>>> %s\n", file2);
+	  undotlines (outputfile, leading_dot, high0 + 2,
+		      (D_NUMLINES (b, mapping[FILE1])
+		       + D_NUMLINES (b, mapping[FILE2]) + 1));
+
+
+	  /* Mark start of conflict.  */
+
+	  fprintf (outputfile, "%lda\n<<<<<<< %s\n", low0 - 1,
+		   type == DIFF_ALL ? file0 : file1);
+	  leading_dot = false;
+	  if (type == DIFF_2ND)
+	    {
+	      /* Prepend lines from FILE1.  */
+	      leading_dot = dotlines (outputfile, b, mapping[FILE1]);
+	      fputs ("=======\n", outputfile);
+	    }
+	  undotlines (outputfile, leading_dot, low0 + 1,
+		      D_NUMLINES (b, mapping[FILE1]));
+	}
+      else if (D_NUMLINES (b, mapping[FILE2]) == 0)
+	/* Write out a delete */
+	{
+	  if (low0 == high0)
+	    fprintf (outputfile, "%ldd\n", low0);
+	  else
+	    fprintf (outputfile, "%ld,%ldd\n", low0, high0);
+	}
+      else
+	/* Write out an add or change */
+	{
+	  switch (high0 - low0)
+	    {
+	    case -1:
+	      fprintf (outputfile, "%lda\n", high0);
+	      break;
+	    case 0:
+	      fprintf (outputfile, "%ldc\n", high0);
+	      break;
+	    default:
+	      fprintf (outputfile, "%ld,%ldc\n", low0, high0);
+	      break;
+	    }
+
+	  undotlines (outputfile, dotlines (outputfile, b, mapping[FILE2]),
+		      low0, D_NUMLINES (b, mapping[FILE2]));
+	}
+    }
+  if (finalwrite)
+    fputs ("w\nq\n", outputfile);
+  return conflicts_found;
+}
+
+/* Read from INFILE and output to OUTPUTFILE a set of diff3_blocks
+   DIFF as a merged file.  This acts like 'ed file0
+   <[output_diff3_edscript]', except that it works even for binary
+   data or incomplete lines.
+
+   As before, MAPPING maps from arg list file number to diff file
+   number, REV_MAPPING is its inverse, and FILE0, FILE1, and FILE2 are
+   the names of the files.
+
+   Return 1 if conflicts were found.  */
+
+static bool
+output_diff3_merge (FILE *infile, FILE *outputfile, struct diff3_block *diff,
+		    int const mapping[3], int const rev_mapping[3],
+		    char const *file0, char const *file1, char const *file2)
+{
+  int c;
+  lin i;
+  bool conflicts_found = false;
+  bool conflict;
+  struct diff3_block *b;
+  lin linesread = 0;
+
+  for (b = diff; b; b = b->next)
+    {
+      /* Must do mapping correctly.  */
+      enum diff_type type
+	= ((b->correspond == DIFF_ALL)
+	   ? DIFF_ALL
+	   : DIFF_1ST + rev_mapping[b->correspond - DIFF_1ST]);
+      char const *format_2nd = "<<<<<<< %s\n";
+
+      /* If we aren't supposed to do this output block, skip it.  */
+      switch (type)
+	{
+	default: continue;
+	case DIFF_2ND: if (!show_2nd) continue; conflict = true; break;
+	case DIFF_3RD: if (overlap_only) continue; conflict = false; break;
+	case DIFF_ALL: if (simple_only) continue; conflict = flagging;
+	  format_2nd = "||||||| %s\n";
+	  break;
+	}
+
+      /* Copy I lines from file 0.  */
+      i = D_LOWLINE (b, FILE0) - linesread - 1;
+      linesread += i;
+      while (0 <= --i)
+	do
+	  {
+	    c = getc (infile);
+	    if (c == EOF)
+	      {
+		if (ferror (infile))
+		  perror_with_exit (_("read failed"));
+		else if (feof (infile))
+		  fatal ("input file shrank");
+	      }
+	    putc (c, outputfile);
+	  }
+	while (c != '\n');
+
+      if (conflict)
+	{
+	  conflicts_found = true;
+
+	  if (type == DIFF_ALL)
+	    {
+	      /* Put in lines from FILE0 with bracket.  */
+	      fprintf (outputfile, "<<<<<<< %s\n", file0);
+	      for (i = 0;
+		   i < D_NUMLINES (b, mapping[FILE0]);
+		   i++)
+		fwrite (D_RELNUM (b, mapping[FILE0], i), sizeof (char),
+			D_RELLEN (b, mapping[FILE0], i), outputfile);
+	    }
+
+	  if (show_2nd)
+	    {
+	      /* Put in lines from FILE1 with bracket.  */
+	      fprintf (outputfile, format_2nd, file1);
+	      for (i = 0;
+		   i < D_NUMLINES (b, mapping[FILE1]);
+		   i++)
+		fwrite (D_RELNUM (b, mapping[FILE1], i), sizeof (char),
+			D_RELLEN (b, mapping[FILE1], i), outputfile);
+	    }
+
+	  fputs ("=======\n", outputfile);
+	}
+
+      /* Put in lines from FILE2.  */
+      for (i = 0;
+	   i < D_NUMLINES (b, mapping[FILE2]);
+	   i++)
+	fwrite (D_RELNUM (b, mapping[FILE2], i), sizeof (char),
+		D_RELLEN (b, mapping[FILE2], i), outputfile);
+
+      if (conflict)
+	fprintf (outputfile, ">>>>>>> %s\n", file2);
+
+      /* Skip I lines in file 0.  */
+      i = D_NUMLINES (b, FILE0);
+      linesread += i;
+      while (0 <= --i)
+	while ((c = getc (infile)) != '\n')
+	  if (c == EOF)
+	    {
+	      if (ferror (infile))
+		perror_with_exit (_("read failed"));
+	      else if (feof (infile))
+		{
+		  if (i || b->next)
+		    fatal ("input file shrank");
+		  return conflicts_found;
+		}
+	    }
+    }
+  /* Copy rest of common file.  */
+  while ((c = getc (infile)) != EOF || !(ferror (infile) | feof (infile)))
+    putc (c, outputfile);
+  return conflicts_found;
+}
+
+/* Reverse the order of the list of diff3 blocks.  */
+
+static struct diff3_block *
+reverse_diff3_blocklist (struct diff3_block *diff)
+{
+  register struct diff3_block *tmp, *next, *prev;
+
+  for (tmp = diff, prev = 0;  tmp;  tmp = next)
+    {
+      next = tmp->next;
+      tmp->next = prev;
+      prev = tmp;
+    }
+
+  return prev;
+}
+
+static void
+fatal (char const *msgid)
+{
+  error (EXIT_TROUBLE, 0, "%s", _(msgid));
+  abort ();
+}
+
+static void
+perror_with_exit (char const *string)
+{
+  error (EXIT_TROUBLE, errno, "%s", string);
+  abort ();
+}
diff --git a/diffutils-3.0-patch/dir.c b/diffutils-3.0-patch/dir.c
new file mode 100644
index 0000000..5e08318
--- /dev/null
+++ b/diffutils-3.0-patch/dir.c
@@ -0,0 +1,283 @@
+/* Read, sort and compare two directories.  Used for GNU DIFF.
+
+   Copyright (C) 1988-1989, 1992-1995, 1998, 2001-2002, 2004, 2006-2007,
+   2009-2010 Free Software Foundation, Inc.
+
+   This file is part of GNU DIFF.
+
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+#include "diff.h"
+#include <error.h>
+#include <exclude.h>
+#include <setjmp.h>
+#include <xalloc.h>
+
+/* Read the directory named by DIR and store into DIRDATA a sorted vector
+   of filenames for its contents.  DIR->desc == -1 means this directory is
+   known to be nonexistent, so set DIRDATA to an empty vector.
+   Return -1 (setting errno) if error, 0 otherwise.  */
+
+struct dirdata
+{
+  size_t nnames;	/* Number of names.  */
+  char const **names;	/* Sorted names of files in dir, followed by 0.  */
+  char *data;	/* Allocated storage for file names.  */
+};
+
+/* Whether file names in directories should be compared with
+   locale-specific sorting.  */
+static bool locale_specific_sorting;
+
+/* Where to go if locale-specific sorting fails.  */
+static jmp_buf failed_locale_specific_sorting;
+
+static bool dir_loop (struct comparison const *, int);
+static int compare_names_for_qsort (void const *, void const *);
+
+
+/* Read a directory and get its vector of names.  */
+
+static bool
+dir_read (struct file_data const *dir, struct dirdata *dirdata)
+{
+  register struct dirent *next;
+  register size_t i;
+
+  /* Address of block containing the files that are described.  */
+  char const **names;
+
+  /* Number of files in directory.  */
+  size_t nnames;
+
+  /* Allocated and used storage for file name data.  */
+  char *data;
+  size_t data_alloc, data_used;
+
+  dirdata->names = 0;
+  dirdata->data = 0;
+  nnames = 0;
+  data = 0;
+
+  if (dir->desc != -1)
+    {
+      /* Open the directory and check for errors.  */
+      register DIR *reading = opendir (dir->name);
+      if (!reading)
+	return false;
+
+      /* Initialize the table of filenames.  */
+
+      data_alloc = 512;
+      data_used = 0;
+      dirdata->data = data = xmalloc (data_alloc);
+
+      /* Read the directory entries, and insert the subfiles
+	 into the `data' table.  */
+
+      while ((errno = 0, (next = readdir (reading)) != 0))
+	{
+	  char *d_name = next->d_name;
+	  size_t d_size = _D_EXACT_NAMLEN (next) + 1;
+
+	  /* Ignore "." and "..".  */
+	  if (d_name[0] == '.'
+	      && (d_name[1] == 0 || (d_name[1] == '.' && d_name[2] == 0)))
+	    continue;
+
+	  if (excluded_file_name (excluded, d_name))
+	    continue;
+
+	  while (data_alloc < data_used + d_size)
+	    {
+	      if (PTRDIFF_MAX / 2 <= data_alloc)
+		xalloc_die ();
+	      dirdata->data = data = xrealloc (data, data_alloc *= 2);
+	    }
+
+	  memcpy (data + data_used, d_name, d_size);
+	  data_used += d_size;
+	  nnames++;
+	}
+      if (errno)
+	{
+	  int e = errno;
+	  closedir (reading);
+	  errno = e;
+	  return false;
+	}
+#if CLOSEDIR_VOID
+      closedir (reading);
+#else
+      if (closedir (reading) != 0)
+	return false;
+#endif
+    }
+
+  /* Create the `names' table from the `data' table.  */
+  if (PTRDIFF_MAX / sizeof *names - 1 <= nnames)
+    xalloc_die ();
+  dirdata->names = names = xmalloc ((nnames + 1) * sizeof *names);
+  dirdata->nnames = nnames;
+  for (i = 0;  i < nnames;  i++)
+    {
+      names[i] = data;
+      data += strlen (data) + 1;
+    }
+  names[nnames] = 0;
+  return true;
+}
+
+/* Compare file names, returning a value compatible with strcmp.  */
+
+static int
+compare_names (char const *name1, char const *name2)
+{
+  if (locale_specific_sorting)
+    {
+      int r;
+      errno = 0;
+      if (ignore_file_name_case)
+	r = strcasecoll (name1, name2);
+      else
+	r = strcoll (name1, name2);
+      if (errno)
+	{
+	  error (0, errno, _("cannot compare file names '%s' and '%s'"),
+		 name1, name2);
+	  longjmp (failed_locale_specific_sorting, 1);
+	}
+      return r;
+    }
+
+  return (ignore_file_name_case
+	  ? strcasecmp (name1, name2)
+	  : file_name_cmp (name1, name2));
+}
+
+/* A wrapper for compare_names suitable as an argument for qsort.  */
+
+static int
+compare_names_for_qsort (void const *file1, void const *file2)
+{
+  char const *const *f1 = file1;
+  char const *const *f2 = file2;
+  return compare_names (*f1, *f2);
+}
+
+/* Compare the contents of two directories named in CMP.
+   This is a top-level routine; it does everything necessary for diff
+   on two directories.
+
+   CMP->file[0].desc == -1 says directory CMP->file[0] doesn't exist,
+   but pretend it is empty.  Likewise for CMP->file[1].
+
+   HANDLE_FILE is a caller-provided subroutine called to handle each file.
+   It gets three operands: CMP, name of file in dir 0, name of file in dir 1.
+   These names are relative to the original working directory.
+
+   For a file that appears in only one of the dirs, one of the name-args
+   to HANDLE_FILE is zero.
+
+   Returns the maximum of all the values returned by HANDLE_FILE,
+   or EXIT_TROUBLE if trouble is encountered in opening files.  */
+
+int
+diff_dirs (struct comparison const *cmp,
+	   int (*handle_file) (struct comparison const *,
+			       char const *, char const *))
+{
+  struct dirdata dirdata[2];
+  int volatile val = EXIT_SUCCESS;
+  int i;
+
+  if ((cmp->file[0].desc == -1 || dir_loop (cmp, 0))
+      && (cmp->file[1].desc == -1 || dir_loop (cmp, 1)))
+    {
+      error (0, 0, _("%s: recursive directory loop"),
+	     cmp->file[cmp->file[0].desc == -1].name);
+      return EXIT_TROUBLE;
+    }
+
+  /* Get contents of both dirs.  */
+  for (i = 0; i < 2; i++)
+    if (! dir_read (&cmp->file[i], &dirdata[i]))
+      {
+	perror_with_name (cmp->file[i].name);
+	val = EXIT_TROUBLE;
+      }
+
+  if (val == EXIT_SUCCESS)
+    {
+      char const **volatile names[2];
+      names[0] = dirdata[0].names;
+      names[1] = dirdata[1].names;
+
+      /* Use locale-specific sorting if possible, else native byte order.  */
+      locale_specific_sorting = true;
+      if (setjmp (failed_locale_specific_sorting))
+	locale_specific_sorting = false;
+
+      /* Sort the directories.  */
+      for (i = 0; i < 2; i++)
+	qsort (names[i], dirdata[i].nnames, sizeof *dirdata[i].names,
+	       compare_names_for_qsort);
+
+      /* If `-S name' was given, and this is the topmost level of comparison,
+	 ignore all file names less than the specified starting name.  */
+
+      if (starting_file && ! cmp->parent)
+	{
+	  while (*names[0] && compare_names (*names[0], starting_file) < 0)
+	    names[0]++;
+	  while (*names[1] && compare_names (*names[1], starting_file) < 0)
+	    names[1]++;
+	}
+
+      /* Loop while files remain in one or both dirs.  */
+      while (*names[0] || *names[1])
+	{
+	  /* Compare next name in dir 0 with next name in dir 1.
+	     At the end of a dir,
+	     pretend the "next name" in that dir is very large.  */
+	  int nameorder = (!*names[0] ? 1 : !*names[1] ? -1
+			   : compare_names (*names[0], *names[1]));
+	  int v1 = (*handle_file) (cmp,
+				   0 < nameorder ? 0 : *names[0]++,
+				   nameorder < 0 ? 0 : *names[1]++);
+	  if (val < v1)
+	    val = v1;
+	}
+    }
+
+  for (i = 0; i < 2; i++)
+    {
+      free (dirdata[i].names);
+      free (dirdata[i].data);
+    }
+
+  return val;
+}
+
+/* Return nonzero if CMP is looping recursively in argument I.  */
+
+static bool
+dir_loop (struct comparison const *cmp, int i)
+{
+  struct comparison const *p = cmp;
+  while ((p = p->parent))
+    if (0 < same_file (&p->file[i].stat, &cmp->file[i].stat))
+      return true;
+  return false;
+}
diff --git a/diffutils-3.0-patch/ed.c b/diffutils-3.0-patch/ed.c
new file mode 100644
index 0000000..08acf50
--- /dev/null
+++ b/diffutils-3.0-patch/ed.c
@@ -0,0 +1,175 @@
+/* Output routines for ed-script format.
+
+   Copyright (C) 1988-1989, 1991-1993, 1995, 1998, 2001, 2004, 2006, 2009-2010
+   Free Software Foundation, Inc.
+
+   This file is part of GNU DIFF.
+
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+#include "diff.h"
+
+static void print_ed_hunk (struct change *);
+static void print_rcs_hunk (struct change *);
+static void pr_forward_ed_hunk (struct change *);
+
+/* Print our script as ed commands.  */
+
+void
+print_ed_script (struct change *script)
+{
+  print_script (script, find_reverse_change, print_ed_hunk);
+}
+
+/* Print a hunk of an ed diff */
+
+static void
+print_ed_hunk (struct change *hunk)
+{
+  lin f0, l0, f1, l1;
+  enum changes changes;
+
+#ifdef DEBUG
+  debug_script (hunk);
+#endif
+
+  /* Determine range of line numbers involved in each file.  */
+  changes = analyze_hunk (hunk, &f0, &l0, &f1, &l1);
+  if (!changes)
+    return;
+
+  begin_output ();
+
+  /* Print out the line number header for this hunk */
+  print_number_range (',', &files[0], f0, l0);
+  fputc (change_letter[changes], outfile);
+  fputc ('\n', outfile);
+
+  /* Print new/changed lines from second file, if needed */
+  if (changes != OLD)
+    {
+      lin i;
+      bool insert_mode = true;
+
+      for (i = f1; i <= l1; i++)
+	{
+	  if (!insert_mode)
+	    {
+	      fputs ("a\n", outfile);
+	      insert_mode = true;
+	    }
+	  if (files[1].linbuf[i][0] == '.' && files[1].linbuf[i][1] == '\n')
+	    {
+	      /* The file's line is just a dot, and it would exit
+		 insert mode.  Precede the dot with another dot, exit
+		 insert mode and remove the extra dot.  */
+	      fputs ("..\n.\ns/.//\n", outfile);
+	      insert_mode = false;
+	    }
+	  else
+	    print_1_line ("", &files[1].linbuf[i]);
+	}
+
+      if (insert_mode)
+	fputs (".\n", outfile);
+    }
+}
+
+/* Print change script in the style of ed commands,
+   but print the changes in the order they appear in the input files,
+   which means that the commands are not truly useful with ed.
+   Because of the issue with lines containing just a dot, the output
+   is not even parseable.  */
+
+void
+pr_forward_ed_script (struct change *script)
+{
+  print_script (script, find_change, pr_forward_ed_hunk);
+}
+
+static void
+pr_forward_ed_hunk (struct change *hunk)
+{
+  lin i, f0, l0, f1, l1;
+
+  /* Determine range of line numbers involved in each file.  */
+  enum changes changes = analyze_hunk (hunk, &f0, &l0, &f1, &l1);
+  if (!changes)
+    return;
+
+  begin_output ();
+
+  fputc (change_letter[changes], outfile);
+  print_number_range (' ', files, f0, l0);
+  fputc ('\n', outfile);
+
+  /* If deletion only, print just the number range.  */
+
+  if (changes == OLD)
+    return;
+
+  /* For insertion (with or without deletion), print the number range
+     and the lines from file 2.  */
+
+  for (i = f1; i <= l1; i++)
+    print_1_line ("", &files[1].linbuf[i]);
+
+  fputs (".\n", outfile);
+}
+
+/* Print in a format somewhat like ed commands
+   except that each insert command states the number of lines it inserts.
+   This format is used for RCS.  */
+
+void
+print_rcs_script (struct change *script)
+{
+  print_script (script, find_change, print_rcs_hunk);
+}
+
+/* Print a hunk of an RCS diff */
+
+static void
+print_rcs_hunk (struct change *hunk)
+{
+  lin i, f0, l0, f1, l1;
+  long int tf0, tl0, tf1, tl1;
+
+  /* Determine range of line numbers involved in each file.  */
+  enum changes changes = analyze_hunk (hunk, &f0, &l0, &f1, &l1);
+  if (!changes)
+    return;
+
+  begin_output ();
+
+  translate_range (&files[0], f0, l0, &tf0, &tl0);
+
+  if (changes & OLD)
+    {
+      /* For deletion, print just the starting line number from file 0
+	 and the number of lines deleted.  */
+      fprintf (outfile, "d%ld %ld\n", tf0, tf0 <= tl0 ? tl0 - tf0 + 1 : 1);
+    }
+
+  if (changes & NEW)
+    {
+      /* Take last-line-number from file 0 and # lines from file 1.  */
+      translate_range (&files[1], f1, l1, &tf1, &tl1);
+      fprintf (outfile, "a%ld %ld\n", tl0, tf1 <= tl1 ? tl1 - tf1 + 1 : 1);
+
+      /* Print the inserted lines.  */
+      for (i = f1; i <= l1; i++)
+	print_1_line ("", &files[1].linbuf[i]);
+    }
+}
diff --git a/diffutils-3.0-patch/ifdef.c b/diffutils-3.0-patch/ifdef.c
new file mode 100644
index 0000000..a48f830
--- /dev/null
+++ b/diffutils-3.0-patch/ifdef.c
@@ -0,0 +1,430 @@
+/* #ifdef-format output routines for GNU DIFF.
+
+   Copyright (C) 1989, 1991-1994, 2001-2002, 2004, 2006, 2009-2010 Free
+   Software Foundation, Inc.
+
+   This file is part of GNU DIFF.
+
+   GNU DIFF is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY.  No author or distributor
+   accepts responsibility to anyone for the consequences of using it
+   or for whether it serves any particular purpose or works at all,
+   unless he says so in writing.  Refer to the GNU General Public
+   License for full details.
+
+   Everyone is granted permission to copy, modify and redistribute
+   GNU DIFF, but only under the conditions described in the
+   GNU General Public License.   A copy of this license is
+   supposed to have been given to you along with GNU DIFF so you
+   can know your rights and responsibilities.  It should be in a
+   file named COPYING.  Among other things, the copyright notice
+   and this notice must be preserved on all copies.  */
+
+#include "diff.h"
+
+#include <xalloc.h>
+
+struct group
+{
+  struct file_data const *file;
+  lin from, upto; /* start and limit lines for this group of lines */
+};
+
+static char const *format_group (FILE *, char const *, char,
+				 struct group const *);
+static char const *do_printf_spec (FILE *, char const *,
+				   struct file_data const *, lin,
+				   struct group const *);
+static char const *scan_char_literal (char const *, char *);
+static lin groups_letter_value (struct group const *, char);
+static void format_ifdef (char const *, lin, lin, lin, lin);
+static void print_ifdef_hunk (struct change *);
+static void print_ifdef_lines (FILE *, char const *, struct group const *);
+
+static lin next_line0;
+static lin next_line1;
+
+/* Print the edit-script SCRIPT as a merged #ifdef file.  */
+
+void
+print_ifdef_script (struct change *script)
+{
+  next_line0 = next_line1 = - files[0].prefix_lines;
+  print_script (script, find_change, print_ifdef_hunk);
+  if (next_line0 < files[0].valid_lines
+      || next_line1 < files[1].valid_lines)
+    {
+      begin_output ();
+      format_ifdef (group_format[UNCHANGED],
+		    next_line0, files[0].valid_lines,
+		    next_line1, files[1].valid_lines);
+    }
+}
+
+/* Print a hunk of an ifdef diff.
+   This is a contiguous portion of a complete edit script,
+   describing changes in consecutive lines.  */
+
+static void
+print_ifdef_hunk (struct change *hunk)
+{
+  lin first0, last0, first1, last1;
+
+  /* Determine range of line numbers involved in each file.  */
+  enum changes changes = analyze_hunk (hunk, &first0, &last0, &first1, &last1);
+  if (!changes)
+    return;
+
+  begin_output ();
+
+  /* Print lines up to this change.  */
+  if (next_line0 < first0 || next_line1 < first1)
+    format_ifdef (group_format[UNCHANGED],
+		  next_line0, first0,
+		  next_line1, first1);
+
+  /* Print this change.  */
+  next_line0 = last0 + 1;
+  next_line1 = last1 + 1;
+  format_ifdef (group_format[changes],
+		first0, next_line0,
+		first1, next_line1);
+}
+
+/* Print a set of lines according to FORMAT.
+   Lines BEG0 up to END0 are from the first file;
+   lines BEG1 up to END1 are from the second file.  */
+
+static void
+format_ifdef (char const *format, lin beg0, lin end0, lin beg1, lin end1)
+{
+  struct group groups[2];
+
+  groups[0].file = &files[0];
+  groups[0].from = beg0;
+  groups[0].upto = end0;
+  groups[1].file = &files[1];
+  groups[1].from = beg1;
+  groups[1].upto = end1;
+  format_group (outfile, format, 0, groups);
+}
+
+/* Print to file OUT a set of lines according to FORMAT.
+   The format ends at the first free instance of ENDCHAR.
+   Yield the address of the terminating character.
+   GROUPS specifies which lines to print.
+   If OUT is zero, do not actually print anything; just scan the format.  */
+
+static char const *
+format_group (register FILE *out, char const *format, char endchar,
+	      struct group const *groups)
+{
+  register char c;
+  register char const *f = format;
+
+  while ((c = *f) != endchar && c != 0)
+    {
+      char const *f1 = ++f;
+      if (c == '%')
+	switch ((c = *f++))
+	  {
+	  case '%':
+	    break;
+
+	  case '(':
+	    /* Print if-then-else format e.g. `%(n=1?thenpart:elsepart)'.  */
+	    {
+	      int i;
+	      uintmax_t value[2];
+	      FILE *thenout, *elseout;
+
+	      for (i = 0; i < 2; i++)
+		{
+		  if (ISDIGIT (*f))
+		    {
+		      char *fend;
+		      errno = 0;
+		      value[i] = strtoumax (f, &fend, 10);
+		      if (errno)
+			goto bad_format;
+		      f = fend;
+		    }
+		  else
+		    {
+		      value[i] = groups_letter_value (groups, *f);
+		      if (value[i] == -1)
+			goto bad_format;
+		      f++;
+		    }
+		  if (*f++ != "=?"[i])
+		    goto bad_format;
+		}
+	      if (value[0] == value[1])
+		thenout = out, elseout = 0;
+	      else
+		thenout = 0, elseout = out;
+	      f = format_group (thenout, f, ':', groups);
+	      if (*f)
+		{
+		  f = format_group (elseout, f + 1, ')', groups);
+		  if (*f)
+		    f++;
+		}
+	    }
+	    continue;
+
+	  case '<':
+	    /* Print lines deleted from first file.  */
+	    print_ifdef_lines (out, line_format[OLD], &groups[0]);
+	    continue;
+
+	  case '=':
+	    /* Print common lines.  */
+	    print_ifdef_lines (out, line_format[UNCHANGED], &groups[0]);
+	    continue;
+
+	  case '>':
+	    /* Print lines inserted from second file.  */
+	    print_ifdef_lines (out, line_format[NEW], &groups[1]);
+	    continue;
+
+	  default:
+	    f = do_printf_spec (out, f - 2, 0, 0, groups);
+	    if (f)
+	      continue;
+	    /* Fall through. */
+	  bad_format:
+	    c = '%';
+	    f = f1;
+	    break;
+	  }
+
+      if (out)
+	putc (c, out);
+    }
+
+  return f;
+}
+
+/* For the line group pair G, return the number corresponding to LETTER.
+   Return -1 if LETTER is not a group format letter.  */
+static lin
+groups_letter_value (struct group const *g, char letter)
+{
+  switch (letter)
+    {
+    case 'E': letter = 'e'; g++; break;
+    case 'F': letter = 'f'; g++; break;
+    case 'L': letter = 'l'; g++; break;
+    case 'M': letter = 'm'; g++; break;
+    case 'N': letter = 'n'; g++; break;
+    }
+
+  switch (letter)
+    {
+      case 'e': return translate_line_number (g->file, g->from) - 1;
+      case 'f': return translate_line_number (g->file, g->from);
+      case 'l': return translate_line_number (g->file, g->upto) - 1;
+      case 'm': return translate_line_number (g->file, g->upto);
+      case 'n': return g->upto - g->from;
+      default: return -1;
+    }
+}
+
+/* Print to file OUT, using FORMAT to print the line group GROUP.
+   But do nothing if OUT is zero.  */
+static void
+print_ifdef_lines (register FILE *out, char const *format,
+		   struct group const *group)
+{
+  struct file_data const *file = group->file;
+  char const * const *linbuf = file->linbuf;
+  lin from = group->from, upto = group->upto;
+
+  if (!out)
+    return;
+
+  /* If possible, use a single fwrite; it's faster.  */
+  if (!expand_tabs && format[0] == '%')
+    {
+      if (format[1] == 'l' && format[2] == '\n' && !format[3] && from < upto)
+	{
+	  fwrite (linbuf[from], sizeof (char),
+		  linbuf[upto] + (linbuf[upto][-1] != '\n') -  linbuf[from],
+		  out);
+	  return;
+	}
+      if (format[1] == 'L' && !format[2])
+	{
+	  fwrite (linbuf[from], sizeof (char),
+		  linbuf[upto] -  linbuf[from], out);
+	  return;
+	}
+    }
+
+  for (;  from < upto;  from++)
+    {
+      register char c;
+      register char const *f = format;
+
+      while ((c = *f++) != 0)
+	{
+	  char const *f1 = f;
+	  if (c == '%')
+	    switch ((c = *f++))
+	      {
+	      case '%':
+		break;
+
+	      case 'l':
+		output_1_line (linbuf[from],
+			       (linbuf[from + 1]
+				- (linbuf[from + 1][-1] == '\n')),
+			       0, 0);
+		continue;
+
+	      case 'L':
+		output_1_line (linbuf[from], linbuf[from + 1], 0, 0);
+		continue;
+
+	      default:
+		f = do_printf_spec (out, f - 2, file, from, 0);
+		if (f)
+		  continue;
+		c = '%';
+		f = f1;
+		break;
+	      }
+
+	  putc (c, out);
+	}
+    }
+}
+
+static char const *
+do_printf_spec (FILE *out, char const *spec,
+		struct file_data const *file, lin n,
+		struct group const *groups)
+{
+  char const *f = spec;
+  char c;
+  char c1;
+
+  /* Scan printf-style SPEC of the form %[-'0]*[0-9]*(.[0-9]*)?[cdoxX].  */
+  /* assert (*f == '%'); */
+  f++;
+  while ((c = *f++) == '-' || c == '\'' || c == '0')
+    continue;
+  while (ISDIGIT (c))
+    c = *f++;
+  if (c == '.')
+    while (ISDIGIT (c = *f++))
+      continue;
+  c1 = *f++;
+
+  switch (c)
+    {
+    case 'c':
+      if (c1 != '\'')
+	return 0;
+      else
+	{
+	  char value IF_LINT (= 0);
+	  f = scan_char_literal (f, &value);
+	  if (!f)
+	    return 0;
+	  if (out)
+	    putc (value, out);
+	}
+      break;
+
+    case 'd': case 'o': case 'x': case 'X':
+      {
+	lin value;
+
+	if (file)
+	  {
+	    if (c1 != 'n')
+	      return 0;
+	    value = translate_line_number (file, n);
+	  }
+	else
+	  {
+	    value = groups_letter_value (groups, c1);
+	    if (value < 0)
+	      return 0;
+	  }
+
+	if (out)
+	  {
+	    /* For example, if the spec is "%3xn", use the printf
+	       format spec "%3lx".  Here the spec prefix is "%3".  */
+	    long int long_value = value;
+	    size_t spec_prefix_len = f - spec - 2;
+#if HAVE_C_VARARRAYS
+	    char format[spec_prefix_len + 3];
+#else
+	    char *format = xmalloc (spec_prefix_len + 3);
+#endif
+	    char *p = format + spec_prefix_len;
+	    memcpy (format, spec, spec_prefix_len);
+	    *p++ = 'l';
+	    *p++ = c;
+	    *p = '\0';
+	    fprintf (out, format, long_value);
+#if ! HAVE_C_VARARRAYS
+	    free (format);
+#endif
+	  }
+      }
+      break;
+
+    default:
+      return 0;
+    }
+
+  return f;
+}
+
+/* Scan the character literal represented in the string LIT; LIT points just
+   after the initial apostrophe.  Put the literal's value into *VALPTR.
+   Yield the address of the first character after the closing apostrophe,
+   or a null pointer if the literal is ill-formed.  */
+static char const *
+scan_char_literal (char const *lit, char *valptr)
+{
+  register char const *p = lit;
+  char value;
+  ptrdiff_t digits;
+  char c = *p++;
+
+  switch (c)
+    {
+      case 0:
+      case '\'':
+	return NULL;
+
+      case '\\':
+	value = 0;
+	while ((c = *p++) != '\'')
+	  {
+	    unsigned int digit = c - '0';
+	    if (8 <= digit)
+	      return NULL;
+	    value = 8 * value + digit;
+	  }
+	digits = p - lit - 2;
+	if (! (1 <= digits && digits <= 3))
+	  return NULL;
+	break;
+
+      default:
+	value = c;
+	if (*p++ != '\'')
+	  return NULL;
+	break;
+    }
+
+  *valptr = value;
+  return p;
+}
diff --git a/diffutils-3.0-patch/io.c b/diffutils-3.0-patch/io.c
new file mode 100644
index 0000000..031be3d
--- /dev/null
+++ b/diffutils-3.0-patch/io.c
@@ -0,0 +1,845 @@
+/* File I/O for GNU DIFF.
+
+   Copyright (C) 1988-1989, 1992-1995, 1998, 2001-2002, 2004, 2006, 2009-2010
+   Free Software Foundation, Inc.
+
+   This file is part of GNU DIFF.
+
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+#include "diff.h"
+#include <cmpbuf.h>
+#include <file-type.h>
+#include <xalloc.h>
+
+/* Rotate an unsigned value to the left.  */
+#define ROL(v, n) ((v) << (n) | (v) >> (sizeof (v) * CHAR_BIT - (n)))
+
+/* Given a hash value and a new character, return a new hash value.  */
+#define HASH(h, c) ((c) + ROL (h, 7))
+
+/* The type of a hash value.  */
+typedef size_t hash_value;
+verify (! TYPE_SIGNED (hash_value));
+
+/* Lines are put into equivalence classes of lines that match in lines_differ.
+   Each equivalence class is represented by one of these structures,
+   but only while the classes are being computed.
+   Afterward, each class is represented by a number.  */
+struct equivclass
+{
+  lin next;		/* Next item in this bucket.  */
+  hash_value hash;	/* Hash of lines in this class.  */
+  char const *line;	/* A line that fits this class.  */
+  size_t length;	/* That line's length, not counting its newline.  */
+};
+
+/* Hash-table: array of buckets, each being a chain of equivalence classes.
+   buckets[-1] is reserved for incomplete lines.  */
+static lin *buckets;
+
+/* Number of buckets in the hash table array, not counting buckets[-1].  */
+static size_t nbuckets;
+
+/* Array in which the equivalence classes are allocated.
+   The bucket-chains go through the elements in this array.
+   The number of an equivalence class is its index in this array.  */
+static struct equivclass *equivs;
+
+/* Index of first free element in the array `equivs'.  */
+static lin equivs_index;
+
+/* Number of elements allocated in the array `equivs'.  */
+static lin equivs_alloc;
+
+/* Read a block of data into a file buffer, checking for EOF and error.  */
+
+void
+file_block_read (struct file_data *current, size_t size)
+{
+  if (size && ! current->eof)
+    {
+      size_t s = block_read (current->desc,
+			     FILE_BUFFER (current) + current->buffered, size);
+      if (s == SIZE_MAX)
+	pfatal_with_name (current->name);
+      current->buffered += s;
+      current->eof = s < size;
+    }
+}
+
+/* Check for binary files and compare them for exact identity.  */
+
+/* Return 1 if BUF contains a non text character.
+   SIZE is the number of characters in BUF.  */
+
+#define binary_file_p(buf, size) (memchr (buf, 0, size) != 0)
+
+/* Get ready to read the current file.
+   Return nonzero if SKIP_TEST is zero,
+   and if it appears to be a binary file.  */
+
+static bool
+sip (struct file_data *current, bool skip_test)
+{
+  /* If we have a nonexistent file at this stage, treat it as empty.  */
+  if (current->desc < 0)
+    {
+      /* Leave room for a sentinel.  */
+      current->bufsize = sizeof (word);
+      current->buffer = xmalloc (current->bufsize);
+    }
+  else
+    {
+      current->bufsize = buffer_lcm (sizeof (word),
+				     STAT_BLOCKSIZE (current->stat),
+				     PTRDIFF_MAX - 2 * sizeof (word));
+      current->buffer = xmalloc (current->bufsize);
+
+      if (! skip_test)
+	{
+	  /* Check first part of file to see if it's a binary file.  */
+
+	  /* FIXME: if O_BINARY, this should revert to text mode
+	     if the file is not binary.  */
+
+	  file_block_read (current, current->bufsize);
+	  return binary_file_p (current->buffer, current->buffered);
+	}
+    }
+
+  current->buffered = 0;
+  current->eof = false;
+  return false;
+}
+
+/* Slurp the rest of the current file completely into memory.  */
+
+static void
+slurp (struct file_data *current)
+{
+  size_t cc;
+
+  if (current->desc < 0)
+    {
+      /* The file is nonexistent.  */
+      return;
+    }
+
+  if (S_ISREG (current->stat.st_mode))
+    {
+      /* It's a regular file; slurp in the rest all at once.  */
+
+      /* Get the size out of the stat block.
+	 Allocate just enough room for appended newline plus word sentinel,
+	 plus word-alignment since we want the buffer word-aligned.  */
+      size_t file_size = current->stat.st_size;
+      cc = file_size + 2 * sizeof (word) - file_size % sizeof (word);
+      if (file_size != current->stat.st_size || cc < file_size
+	  || PTRDIFF_MAX <= cc)
+	xalloc_die ();
+
+      if (current->bufsize < cc)
+	{
+	  current->bufsize = cc;
+	  current->buffer = xrealloc (current->buffer, cc);
+	}
+
+      /* Try to read at least 1 more byte than the size indicates, to
+	 detect whether the file is growing.  This is a nicety for
+	 users who run 'diff' on files while they are changing.  */
+
+      if (current->buffered <= file_size)
+	{
+	  file_block_read (current, file_size + 1 - current->buffered);
+	  if (current->buffered <= file_size)
+	    return;
+	}
+    }
+
+  /* It's not a regular file, or it's a growing regular file; read it,
+     growing the buffer as needed.  */
+
+  file_block_read (current, current->bufsize - current->buffered);
+
+  if (current->buffered)
+    {
+      while (current->buffered == current->bufsize)
+	{
+	  if (PTRDIFF_MAX / 2 - sizeof (word) < current->bufsize)
+	    xalloc_die ();
+	  current->bufsize *= 2;
+	  current->buffer = xrealloc (current->buffer, current->bufsize);
+	  file_block_read (current, current->bufsize - current->buffered);
+	}
+
+      /* Allocate just enough room for appended newline plus word
+	 sentinel, plus word-alignment.  */
+      cc = current->buffered + 2 * sizeof (word);
+      current->bufsize = cc - cc % sizeof (word);
+      current->buffer = xrealloc (current->buffer, current->bufsize);
+    }
+}
+
+/* Split the file into lines, simultaneously computing the equivalence
+   class for each line.  */
+
+static void
+find_and_hash_each_line (struct file_data *current)
+{
+  hash_value h;
+  char const *p = current->prefix_end;
+  unsigned char c;
+  lin i, *bucket;
+  size_t length;
+
+  /* Cache often-used quantities in local variables to help the compiler.  */
+  char const **linbuf = current->linbuf;
+  lin alloc_lines = current->alloc_lines;
+  lin line = 0;
+  lin linbuf_base = current->linbuf_base;
+  lin *cureqs = xmalloc (alloc_lines * sizeof *cureqs);
+  struct equivclass *eqs = equivs;
+  lin eqs_index = equivs_index;
+  lin eqs_alloc = equivs_alloc;
+  char const *suffix_begin = current->suffix_begin;
+  char const *bufend = FILE_BUFFER (current) + current->buffered;
+  bool diff_length_compare_anyway =
+    ignore_white_space != IGNORE_NO_WHITE_SPACE;
+  bool same_length_diff_contents_compare_anyway =
+    diff_length_compare_anyway | ignore_case;
+
+  while (p < suffix_begin)
+    {
+      char const *ip = p;
+
+      h = 0;
+
+      /* Hash this line until we find a newline.  */
+      if (ignore_case)
+	switch (ignore_white_space)
+	  {
+	  case IGNORE_ALL_SPACE:
+	    while ((c = *p++) != '\n')
+	      if (! isspace (c))
+		h = HASH (h, tolower (c));
+	    break;
+
+	  case IGNORE_SPACE_CHANGE:
+	    while ((c = *p++) != '\n')
+	      {
+		if (isspace (c))
+		  {
+		    do
+		      if ((c = *p++) == '\n')
+			goto hashing_done;
+		    while (isspace (c));
+
+		    h = HASH (h, ' ');
+		  }
+
+		/* C is now the first non-space.  */
+		h = HASH (h, tolower (c));
+	      }
+	    break;
+
+	  case IGNORE_TAB_EXPANSION:
+	    {
+	      size_t column = 0;
+	      while ((c = *p++) != '\n')
+		{
+		  size_t repetitions = 1;
+
+		  switch (c)
+		    {
+		    case '\b':
+		      column -= 0 < column;
+		      break;
+
+		    case '\t':
+		      c = ' ';
+		      repetitions = tabsize - column % tabsize;
+		      column = (column + repetitions < column
+				? 0
+				: column + repetitions);
+		      break;
+
+		    case '\r':
+		      column = 0;
+		      break;
+
+		    default:
+		      c = tolower (c);
+		      column++;
+		      break;
+		    }
+
+		  do
+		    h = HASH (h, c);
+		  while (--repetitions != 0);
+		}
+	    }
+	    break;
+
+	  default:
+	    while ((c = *p++) != '\n')
+	      h = HASH (h, tolower (c));
+	    break;
+	  }
+      else
+	switch (ignore_white_space)
+	  {
+	  case IGNORE_ALL_SPACE:
+	    while ((c = *p++) != '\n')
+	      if (! isspace (c))
+		h = HASH (h, c);
+	    break;
+
+	  case IGNORE_SPACE_CHANGE:
+	    while ((c = *p++) != '\n')
+	      {
+		if (isspace (c))
+		  {
+		    do
+		      if ((c = *p++) == '\n')
+			goto hashing_done;
+		    while (isspace (c));
+
+		    h = HASH (h, ' ');
+		  }
+
+		/* C is now the first non-space.  */
+		h = HASH (h, c);
+	      }
+	    break;
+
+	  case IGNORE_TAB_EXPANSION:
+	    {
+	      size_t column = 0;
+	      while ((c = *p++) != '\n')
+		{
+		  size_t repetitions = 1;
+
+		  switch (c)
+		    {
+		    case '\b':
+		      column -= 0 < column;
+		      break;
+
+		    case '\t':
+		      c = ' ';
+		      repetitions = tabsize - column % tabsize;
+		      column = (column + repetitions < column
+				? 0
+				: column + repetitions);
+		      break;
+
+		    case '\r':
+		      column = 0;
+		      break;
+
+		    default:
+		      column++;
+		      break;
+		    }
+
+		  do
+		    h = HASH (h, c);
+		  while (--repetitions != 0);
+		}
+	    }
+	    break;
+
+	  default:
+	    while ((c = *p++) != '\n')
+	      h = HASH (h, c);
+	    break;
+	  }
+
+   hashing_done:;
+
+      bucket = &buckets[h % nbuckets];
+      length = p - ip - 1;
+
+      if (p == bufend
+	  && current->missing_newline
+	  && ROBUST_OUTPUT_STYLE (output_style))
+	{
+	  /* The last line is incomplete and we do not silently
+	     complete lines.  If the line cannot compare equal to any
+	     complete line, put it into buckets[-1] so that it can
+	     compare equal only to the other file's incomplete line
+	     (if one exists).  */
+	  if (ignore_white_space < IGNORE_SPACE_CHANGE)
+	    bucket = &buckets[-1];
+	}
+
+      for (i = *bucket;  ;  i = eqs[i].next)
+	if (!i)
+	  {
+	    /* Create a new equivalence class in this bucket.  */
+	    i = eqs_index++;
+	    if (i == eqs_alloc)
+	      {
+		if (PTRDIFF_MAX / (2 * sizeof *eqs) <= eqs_alloc)
+		  xalloc_die ();
+		eqs_alloc *= 2;
+		eqs = xrealloc (eqs, eqs_alloc * sizeof *eqs);
+	      }
+	    eqs[i].next = *bucket;
+	    eqs[i].hash = h;
+	    eqs[i].line = ip;
+	    eqs[i].length = length;
+	    *bucket = i;
+	    break;
+	  }
+	else if (eqs[i].hash == h)
+	  {
+	    char const *eqline = eqs[i].line;
+
+	    /* Reuse existing class if lines_differ reports the lines
+               equal.  */
+	    if (eqs[i].length == length)
+	      {
+		/* Reuse existing equivalence class if the lines are identical.
+		   This detects the common case of exact identity
+		   faster than lines_differ would.  */
+		if (memcmp (eqline, ip, length) == 0)
+		  break;
+		if (!same_length_diff_contents_compare_anyway)
+		  continue;
+	      }
+	    else if (!diff_length_compare_anyway)
+	      continue;
+
+	    if (! lines_differ (eqline, ip))
+	      break;
+	  }
+
+      /* Maybe increase the size of the line table.  */
+      if (line == alloc_lines)
+	{
+	  /* Double (alloc_lines - linbuf_base) by adding to alloc_lines.  */
+	  if (PTRDIFF_MAX / 3 <= alloc_lines
+	      || PTRDIFF_MAX / sizeof *cureqs <= 2 * alloc_lines - linbuf_base
+	      || PTRDIFF_MAX / sizeof *linbuf <= alloc_lines - linbuf_base)
+	    xalloc_die ();
+	  alloc_lines = 2 * alloc_lines - linbuf_base;
+	  cureqs = xrealloc (cureqs, alloc_lines * sizeof *cureqs);
+	  linbuf += linbuf_base;
+	  linbuf = xrealloc (linbuf,
+			     (alloc_lines - linbuf_base) * sizeof *linbuf);
+	  linbuf -= linbuf_base;
+	}
+      linbuf[line] = ip;
+      cureqs[line] = i;
+      ++line;
+    }
+
+  current->buffered_lines = line;
+
+  for (i = 0;  ;  i++)
+    {
+      /* Record the line start for lines in the suffix that we care about.
+	 Record one more line start than lines,
+	 so that we can compute the length of any buffered line.  */
+      if (line == alloc_lines)
+	{
+	  /* Double (alloc_lines - linbuf_base) by adding to alloc_lines.  */
+	  if (PTRDIFF_MAX / 3 <= alloc_lines
+	      || PTRDIFF_MAX / sizeof *cureqs <= 2 * alloc_lines - linbuf_base
+	      || PTRDIFF_MAX / sizeof *linbuf <= alloc_lines - linbuf_base)
+	    xalloc_die ();
+	  alloc_lines = 2 * alloc_lines - linbuf_base;
+	  linbuf += linbuf_base;
+	  linbuf = xrealloc (linbuf,
+			     (alloc_lines - linbuf_base) * sizeof *linbuf);
+	  linbuf -= linbuf_base;
+	}
+      linbuf[line] = p;
+
+      if (p == bufend)
+	{
+	  /* If the last line is incomplete and we do not silently
+	     complete lines, don't count its appended newline.  */
+	  if (current->missing_newline && ROBUST_OUTPUT_STYLE (output_style))
+	    linbuf[line]--;
+	  break;
+	}
+
+      if (context <= i && no_diff_means_no_output)
+	break;
+
+      line++;
+
+      while (*p++ != '\n')
+	continue;
+    }
+
+  /* Done with cache in local variables.  */
+  current->linbuf = linbuf;
+  current->valid_lines = line;
+  current->alloc_lines = alloc_lines;
+  current->equivs = cureqs;
+  equivs = eqs;
+  equivs_alloc = eqs_alloc;
+  equivs_index = eqs_index;
+}
+
+/* Prepare the text.  Make sure the text end is initialized.
+   Make sure text ends in a newline,
+   but remember that we had to add one.
+   Strip trailing CRs, if that was requested.  */
+
+static void
+prepare_text (struct file_data *current)
+{
+  size_t buffered = current->buffered;
+  char *p = FILE_BUFFER (current);
+  char *dst;
+
+  if (buffered == 0 || p[buffered - 1] == '\n')
+    current->missing_newline = false;
+  else
+    {
+      p[buffered++] = '\n';
+      current->missing_newline = true;
+    }
+
+  if (!p)
+    return;
+
+  /* Don't use uninitialized storage when planting or using sentinels.  */
+  memset (p + buffered, 0, sizeof (word));
+
+  if (strip_trailing_cr && (dst = memchr (p, '\r', buffered)))
+    {
+      char const *src = dst;
+      char const *srclim = p + buffered;
+
+      do
+	dst += ! ((*dst = *src++) == '\r' && *src == '\n');
+      while (src < srclim);
+
+      buffered -= src - dst;
+    }
+
+  current->buffered = buffered;
+}
+
+/* We have found N lines in a buffer of size S; guess the
+   proportionate number of lines that will be found in a buffer of
+   size T.  However, do not guess a number of lines so large that the
+   resulting line table might cause overflow in size calculations.  */
+static lin
+guess_lines (lin n, size_t s, size_t t)
+{
+  size_t guessed_bytes_per_line = n < 10 ? 32 : s / (n - 1);
+  lin guessed_lines = MAX (1, t / guessed_bytes_per_line);
+  return MIN (guessed_lines, PTRDIFF_MAX / (2 * sizeof (char *) + 1) - 5) + 5;
+}
+
+/* Given a vector of two file_data objects, find the identical
+   prefixes and suffixes of each object.  */
+
+static void
+find_identical_ends (struct file_data filevec[])
+{
+  word *w0, *w1;
+  char *p0, *p1, *buffer0, *buffer1;
+  char const *end0, *beg0;
+  char const **linbuf0, **linbuf1;
+  lin i, lines;
+  size_t n0, n1;
+  lin alloc_lines0, alloc_lines1;
+  lin buffered_prefix, prefix_count, prefix_mask;
+  lin middle_guess, suffix_guess;
+
+  slurp (&filevec[0]);
+  prepare_text (&filevec[0]);
+  if (filevec[0].desc != filevec[1].desc)
+    {
+      slurp (&filevec[1]);
+      prepare_text (&filevec[1]);
+    }
+  else
+    {
+      filevec[1].buffer = filevec[0].buffer;
+      filevec[1].bufsize = filevec[0].bufsize;
+      filevec[1].buffered = filevec[0].buffered;
+      filevec[1].missing_newline = filevec[0].missing_newline;
+    }
+
+  /* Find identical prefix.  */
+
+  w0 = filevec[0].buffer;
+  w1 = filevec[1].buffer;
+  p0 = buffer0 = (char *) w0;
+  p1 = buffer1 = (char *) w1;
+  n0 = filevec[0].buffered;
+  n1 = filevec[1].buffered;
+
+  if (p0 == p1)
+    /* The buffers are the same; sentinels won't work.  */
+    p0 = p1 += n1;
+  else
+    {
+      /* Insert end sentinels, in this case characters that are guaranteed
+	 to make the equality test false, and thus terminate the loop.  */
+
+      if (n0 < n1)
+	p0[n0] = ~p1[n0];
+      else
+	p1[n1] = ~p0[n1];
+
+      /* Loop until first mismatch, or to the sentinel characters.  */
+
+      /* Compare a word at a time for speed.  */
+      while (*w0 == *w1)
+	w0++, w1++;
+
+      /* Do the last few bytes of comparison a byte at a time.  */
+      p0 = (char *) w0;
+      p1 = (char *) w1;
+      while (*p0 == *p1)
+	p0++, p1++;
+
+      /* Don't mistakenly count missing newline as part of prefix.  */
+      if (ROBUST_OUTPUT_STYLE (output_style)
+	  && ((buffer0 + n0 - filevec[0].missing_newline < p0)
+	      !=
+	      (buffer1 + n1 - filevec[1].missing_newline < p1)))
+	p0--, p1--;
+    }
+
+  /* Now P0 and P1 point at the first nonmatching characters.  */
+
+  /* Skip back to last line-beginning in the prefix,
+     and then discard up to HORIZON_LINES lines from the prefix.  */
+  i = horizon_lines;
+  while (p0 != buffer0 && (p0[-1] != '\n' || i--))
+    p0--, p1--;
+
+  /* Record the prefix.  */
+  filevec[0].prefix_end = p0;
+  filevec[1].prefix_end = p1;
+
+  /* Find identical suffix.  */
+
+  /* P0 and P1 point beyond the last chars not yet compared.  */
+  p0 = buffer0 + n0;
+  p1 = buffer1 + n1;
+
+  if (! ROBUST_OUTPUT_STYLE (output_style)
+      || filevec[0].missing_newline == filevec[1].missing_newline)
+    {
+      end0 = p0;	/* Addr of last char in file 0.  */
+
+      /* Get value of P0 at which we should stop scanning backward:
+	 this is when either P0 or P1 points just past the last char
+	 of the identical prefix.  */
+      beg0 = filevec[0].prefix_end + (n0 < n1 ? 0 : n0 - n1);
+
+      /* Scan back until chars don't match or we reach that point.  */
+      while (p0 != beg0)
+	if (*--p0 != *--p1)
+	  {
+	    /* Point at the first char of the matching suffix.  */
+	    ++p0, ++p1;
+	    beg0 = p0;
+	    break;
+	  }
+
+      /* Are we at a line-beginning in both files?  If not, add the rest of
+	 this line to the main body.  Discard up to HORIZON_LINES lines from
+	 the identical suffix.  Also, discard one extra line,
+	 because shift_boundaries may need it.  */
+      i = horizon_lines + !((buffer0 == p0 || p0[-1] == '\n')
+			    &&
+			    (buffer1 == p1 || p1[-1] == '\n'));
+      while (i-- && p0 != end0)
+	while (*p0++ != '\n')
+	  continue;
+
+      p1 += p0 - beg0;
+    }
+
+  /* Record the suffix.  */
+  filevec[0].suffix_begin = p0;
+  filevec[1].suffix_begin = p1;
+
+  /* Calculate number of lines of prefix to save.
+
+     prefix_count == 0 means save the whole prefix;
+     we need this for options like -D that output the whole file,
+     or for enormous contexts (to avoid worrying about arithmetic overflow).
+     We also need it for options like -F that output some preceding line;
+     at least we will need to find the last few lines,
+     but since we don't know how many, it's easiest to find them all.
+
+     Otherwise, prefix_count != 0.  Save just prefix_count lines at start
+     of the line buffer; they'll be moved to the proper location later.
+     Handle 1 more line than the context says (because we count 1 too many),
+     rounded up to the next power of 2 to speed index computation.  */
+
+  if (no_diff_means_no_output && ! function_regexp.fastmap
+      && context < LIN_MAX / 4 && context < n0)
+    {
+      middle_guess = guess_lines (0, 0, p0 - filevec[0].prefix_end);
+      suffix_guess = guess_lines (0, 0, buffer0 + n0 - p0);
+      for (prefix_count = 1;  prefix_count <= context;  prefix_count *= 2)
+	continue;
+      alloc_lines0 = (prefix_count + middle_guess
+		      + MIN (context, suffix_guess));
+    }
+  else
+    {
+      prefix_count = 0;
+      alloc_lines0 = guess_lines (0, 0, n0);
+    }
+
+  prefix_mask = prefix_count - 1;
+  lines = 0;
+  linbuf0 = xmalloc (alloc_lines0 * sizeof *linbuf0);
+  p0 = buffer0;
+
+  /* If the prefix is needed, find the prefix lines.  */
+  if (! (no_diff_means_no_output
+	 && filevec[0].prefix_end == p0
+	 && filevec[1].prefix_end == p1))
+    {
+      end0 = filevec[0].prefix_end;
+      while (p0 != end0)
+	{
+	  lin l = lines++ & prefix_mask;
+	  if (l == alloc_lines0)
+	    {
+	      if (PTRDIFF_MAX / (2 * sizeof *linbuf0) <= alloc_lines0)
+		xalloc_die ();
+	      alloc_lines0 *= 2;
+	      linbuf0 = xrealloc (linbuf0, alloc_lines0 * sizeof *linbuf0);
+	    }
+	  linbuf0[l] = p0;
+	  while (*p0++ != '\n')
+	    continue;
+	}
+    }
+  buffered_prefix = prefix_count && context < lines ? context : lines;
+
+  /* Allocate line buffer 1.  */
+
+  middle_guess = guess_lines (lines, p0 - buffer0, p1 - filevec[1].prefix_end);
+  suffix_guess = guess_lines (lines, p0 - buffer0, buffer1 + n1 - p1);
+  alloc_lines1 = buffered_prefix + middle_guess + MIN (context, suffix_guess);
+  if (alloc_lines1 < buffered_prefix
+      || PTRDIFF_MAX / sizeof *linbuf1 <= alloc_lines1)
+    xalloc_die ();
+  linbuf1 = xmalloc (alloc_lines1 * sizeof *linbuf1);
+
+  if (buffered_prefix != lines)
+    {
+      /* Rotate prefix lines to proper location.  */
+      for (i = 0;  i < buffered_prefix;  i++)
+	linbuf1[i] = linbuf0[(lines - context + i) & prefix_mask];
+      for (i = 0;  i < buffered_prefix;  i++)
+	linbuf0[i] = linbuf1[i];
+    }
+
+  /* Initialize line buffer 1 from line buffer 0.  */
+  for (i = 0; i < buffered_prefix; i++)
+    linbuf1[i] = linbuf0[i] - buffer0 + buffer1;
+
+  /* Record the line buffer, adjusted so that
+     linbuf[0] points at the first differing line.  */
+  filevec[0].linbuf = linbuf0 + buffered_prefix;
+  filevec[1].linbuf = linbuf1 + buffered_prefix;
+  filevec[0].linbuf_base = filevec[1].linbuf_base = - buffered_prefix;
+  filevec[0].alloc_lines = alloc_lines0 - buffered_prefix;
+  filevec[1].alloc_lines = alloc_lines1 - buffered_prefix;
+  filevec[0].prefix_lines = filevec[1].prefix_lines = lines;
+}
+
+/* If 1 < k, then (2**k - prime_offset[k]) is the largest prime less
+   than 2**k.  This table is derived from Chris K. Caldwell's list
+   <http://www.utm.edu/research/primes/lists/2small/>.  */
+
+static unsigned char const prime_offset[] =
+{
+  0, 0, 1, 1, 3, 1, 3, 1, 5, 3, 3, 9, 3, 1, 3, 19, 15, 1, 5, 1, 3, 9, 3,
+  15, 3, 39, 5, 39, 57, 3, 35, 1, 5, 9, 41, 31, 5, 25, 45, 7, 87, 21,
+  11, 57, 17, 55, 21, 115, 59, 81, 27, 129, 47, 111, 33, 55, 5, 13, 27,
+  55, 93, 1, 57, 25
+};
+
+/* Verify that this host's size_t is not too wide for the above table.  */
+
+verify (sizeof (size_t) * CHAR_BIT <= sizeof prime_offset);
+
+/* Given a vector of two file_data objects, read the file associated
+   with each one, and build the table of equivalence classes.
+   Return nonzero if either file appears to be a binary file.
+   If PRETEND_BINARY is nonzero, pretend they are binary regardless.  */
+
+bool
+read_files (struct file_data filevec[], bool pretend_binary)
+{
+  int i;
+  bool skip_test = text | pretend_binary;
+  bool appears_binary = pretend_binary | sip (&filevec[0], skip_test);
+
+  if (filevec[0].desc != filevec[1].desc)
+    appears_binary |= sip (&filevec[1], skip_test | appears_binary);
+  else
+    {
+      filevec[1].buffer = filevec[0].buffer;
+      filevec[1].bufsize = filevec[0].bufsize;
+      filevec[1].buffered = filevec[0].buffered;
+    }
+  if (appears_binary)
+    {
+      /* FIXME: If O_BINARY, this should set both files to binary mode.  */
+      return true;
+    }
+
+  find_identical_ends (filevec);
+
+  equivs_alloc = filevec[0].alloc_lines + filevec[1].alloc_lines + 1;
+  if (PTRDIFF_MAX / sizeof *equivs <= equivs_alloc)
+    xalloc_die ();
+  equivs = xmalloc (equivs_alloc * sizeof *equivs);
+  /* Equivalence class 0 is permanently safe for lines that were not
+     hashed.  Real equivalence classes start at 1.  */
+  equivs_index = 1;
+
+  /* Allocate (one plus) a prime number of hash buckets.  Use a prime
+     number between 1/3 and 2/3 of the value of equiv_allocs,
+     approximately.  */
+  for (i = 9; (size_t) 1 << i < equivs_alloc / 3; i++)
+    continue;
+  nbuckets = ((size_t) 1 << i) - prime_offset[i];
+  if (PTRDIFF_MAX / sizeof *buckets <= nbuckets)
+    xalloc_die ();
+  buckets = zalloc ((nbuckets + 1) * sizeof *buckets);
+  buckets++;
+
+  for (i = 0; i < 2; i++)
+    find_and_hash_each_line (&filevec[i]);
+
+  filevec[0].equiv_max = filevec[1].equiv_max = equivs_index;
+
+  free (equivs);
+  free (buckets - 1);
+
+  return false;
+}
diff --git a/diffutils-3.0-patch/normal.c b/diffutils-3.0-patch/normal.c
new file mode 100644
index 0000000..154efaa
--- /dev/null
+++ b/diffutils-3.0-patch/normal.c
@@ -0,0 +1,69 @@
+/* Normal-format output routines for GNU DIFF.
+
+   Copyright (C) 1988-1989, 1993, 1995, 1998, 2001, 2006, 2009-2010 Free
+   Software Foundation, Inc.
+
+   This file is part of GNU DIFF.
+
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+#include "diff.h"
+
+static void print_normal_hunk (struct change *);
+
+/* Print the edit-script SCRIPT as a normal diff.
+   INF points to an array of descriptions of the two files.  */
+
+void
+print_normal_script (struct change *script)
+{
+  print_script (script, find_change, print_normal_hunk);
+}
+
+/* Print a hunk of a normal diff.
+   This is a contiguous portion of a complete edit script,
+   describing changes in consecutive lines.  */
+
+static void
+print_normal_hunk (struct change *hunk)
+{
+  lin first0, last0, first1, last1;
+  register lin i;
+
+  /* Determine range of line numbers involved in each file.  */
+  enum changes changes = analyze_hunk (hunk, &first0, &last0, &first1, &last1);
+  if (!changes)
+    return;
+
+  begin_output ();
+
+  /* Print out the line number header for this hunk */
+  print_number_range (',', &files[0], first0, last0);
+  fputc (change_letter[changes], outfile);
+  print_number_range (',', &files[1], first1, last1);
+  fputc ('\n', outfile);
+
+  /* Print the lines that the first file has.  */
+  if (changes & OLD)
+    for (i = first0; i <= last0; i++)
+      print_1_line ("<", &files[0].linbuf[i]);
+
+  if (changes == CHANGED)
+    fputs ("---\n", outfile);
+
+  /* Print the lines that the second file has.  */
+  if (changes & NEW)
+    for (i = first1; i <= last1; i++)
+      print_1_line (">", &files[1].linbuf[i]);
+}
diff --git a/diffutils-3.0-patch/paths.h b/diffutils-3.0-patch/paths.h
new file mode 100644
index 0000000..86dc41c
--- /dev/null
+++ b/diffutils-3.0-patch/paths.h
@@ -0,0 +1,2 @@
+#define DEFAULT_DIFF_PROGRAM "diff"
+#define LOCALEDIR "/usr/local/share/locale"
diff --git a/diffutils-3.0-patch/sdiff b/diffutils-3.0-patch/sdiff
new file mode 100755
index 0000000000000000000000000000000000000000..e0e4bc0efb57189ae36663d2f344681b08d8d6eb
GIT binary patch
literal 182580
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

literal 0
HcmV?d00001

diff --git a/diffutils-3.0-patch/sdiff.c b/diffutils-3.0-patch/sdiff.c
new file mode 100644
index 0000000..6ea6f0a
--- /dev/null
+++ b/diffutils-3.0-patch/sdiff.c
@@ -0,0 +1,1236 @@
+/* sdiff - side-by-side merge of file differences
+
+   Copyright (C) 1992-1996, 1998, 2001-2002, 2004, 2006-2007, 2009-2010 Free
+   Software Foundation, Inc.
+
+   This file is part of GNU DIFF.
+
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+#include "system.h"
+#include "paths.h"
+
+#include <stdio.h>
+#include <unlocked-io.h>
+
+#include <c-stack.h>
+#include <dirname.h>
+#include <error.h>
+#include <exitfail.h>
+#include <file-type.h>
+#include <getopt.h>
+#include <progname.h>
+#include <sh-quote.h>
+#include <version-etc.h>
+#include <xalloc.h>
+
+/* The official name of this program (e.g., no `g' prefix).  */
+#define PROGRAM_NAME "sdiff"
+
+#define AUTHORS \
+  proper_name ("Thomas Lord")
+
+/* Size of chunks read from files which must be parsed into lines.  */
+#define SDIFF_BUFSIZE ((size_t) 65536)
+
+static char const *editor_program = DEFAULT_EDITOR_PROGRAM;
+static char const **diffargv;
+
+static char * volatile tmpname;
+static FILE *tmp;
+
+#if HAVE_WORKING_FORK || HAVE_WORKING_VFORK
+static pid_t volatile diffpid;
+#endif
+
+struct line_filter;
+
+static void catchsig (int);
+static bool edit (struct line_filter *, char const *, lin, lin, struct line_filter *, char const *, lin, lin, FILE *);
+static bool interact (struct line_filter *, struct line_filter *, char const *, struct line_filter *, char const *, FILE *);
+static void checksigs (void);
+static void diffarg (char const *);
+static void fatal (char const *) __attribute__((noreturn));
+static void perror_fatal (char const *) __attribute__((noreturn));
+static void trapsigs (void);
+static void untrapsig (int);
+
+#define NUM_SIGS (sizeof sigs / sizeof *sigs)
+static int const sigs[] = {
+#ifdef SIGHUP
+       SIGHUP,
+#endif
+#ifdef SIGQUIT
+       SIGQUIT,
+#endif
+#ifdef SIGTERM
+       SIGTERM,
+#endif
+#ifdef SIGXCPU
+       SIGXCPU,
+#endif
+#ifdef SIGXFSZ
+       SIGXFSZ,
+#endif
+#ifdef SIGPIPE
+       SIGPIPE,
+# define handler_index_of_SIGPIPE (NUM_SIGS - 2)
+#endif
+       SIGINT
+#define handler_index_of_SIGINT (NUM_SIGS - 1)
+};
+
+#if HAVE_SIGACTION
+  /* Prefer `sigaction' if available, since `signal' can lose signals.  */
+  static struct sigaction initial_action[NUM_SIGS];
+# define initial_handler(i) (initial_action[i].sa_handler)
+  static void signal_handler (int, void (*) (int));
+#else
+  static void (*initial_action[NUM_SIGS]) ();
+# define initial_handler(i) (initial_action[i])
+# define signal_handler(sig, handler) signal (sig, handler)
+#endif
+
+#if ! HAVE_SIGPROCMASK
+# define sigset_t int
+# define sigemptyset(s) (*(s) = 0)
+# ifndef sigmask
+#  define sigmask(sig) (1 << ((sig) - 1))
+# endif
+# define sigaddset(s, sig) (*(s) |= sigmask (sig))
+# ifndef SIG_BLOCK
+#  define SIG_BLOCK 0
+# endif
+# ifndef SIG_SETMASK
+#  define SIG_SETMASK (! SIG_BLOCK)
+# endif
+# if ! HAVE_SIGBLOCK
+#  define sigblock(mask) (mask)
+#  define sigsetmask(mask) (mask)
+# endif
+# define sigprocmask(how, n, o) \
+    ((how) == SIG_BLOCK \
+     ? ((o) ? (*(sigset_t *) (o) = sigblock (*(n))) : sigblock (*(n))) \
+     : sigsetmask (*(n)))
+#endif
+
+static bool diraccess (char const *);
+static int temporary_file (void);
+
+/* Options: */
+
+/* Name of output file if -o specified.  */
+static char const *output;
+
+/* Do not print common lines.  */
+static bool suppress_common_lines;
+
+/* Value for the long option that does not have single-letter equivalents.  */
+enum
+{
+  DIFF_PROGRAM_OPTION = CHAR_MAX + 1,
+  HELP_OPTION,
+  STRIP_TRAILING_CR_OPTION,
+  TABSIZE_OPTION
+};
+
+static struct option const longopts[] =
+{
+  {"diff-program", 1, 0, DIFF_PROGRAM_OPTION},
+  {"expand-tabs", 0, 0, 't'},
+  {"help", 0, 0, HELP_OPTION},
+  {"ignore-all-space", 0, 0, 'W'}, /* swap W and w for historical reasons */
+  {"ignore-blank-lines", 0, 0, 'B'},
+  {"ignore-case", 0, 0, 'i'},
+  {"ignore-matching-lines", 1, 0, 'I'},
+  {"ignore-space-change", 0, 0, 'b'},
+  {"ignore-tab-expansion", 0, 0, 'E'},
+  {"left-column", 0, 0, 'l'},
+  {"minimal", 0, 0, 'd'},
+  {"output", 1, 0, 'o'},
+  {"speed-large-files", 0, 0, 'H'},
+  {"strip-trailing-cr", 0, 0, STRIP_TRAILING_CR_OPTION},
+  {"suppress-common-lines", 0, 0, 's'},
+  {"tabsize", 1, 0, TABSIZE_OPTION},
+  {"text", 0, 0, 'a'},
+  {"version", 0, 0, 'v'},
+  {"width", 1, 0, 'w'},
+  {0, 0, 0, 0}
+};
+
+static void try_help (char const *, char const *) __attribute__((noreturn));
+static void
+try_help (char const *reason_msgid, char const *operand)
+{
+  if (reason_msgid)
+    error (0, 0, _(reason_msgid), operand);
+  error (EXIT_TROUBLE, 0, _("Try '%s --help' for more information."),
+	 program_name);
+  abort ();
+}
+
+static void
+check_stdout (void)
+{
+  if (ferror (stdout))
+    fatal ("write failed");
+  else if (fclose (stdout) != 0)
+    perror_fatal (_("standard output"));
+}
+
+static char const * const option_help_msgid[] = {
+  N_("-o FILE  --output=FILE  Operate interactively, sending output to FILE."),
+  "",
+  N_("-i  --ignore-case  Consider upper- and lower-case to be the same."),
+  N_("-E  --ignore-tab-expansion  Ignore changes due to tab expansion."),
+  N_("-b  --ignore-space-change  Ignore changes in the amount of white space."),
+  N_("-W  --ignore-all-space  Ignore all white space."),
+  N_("-B  --ignore-blank-lines  Ignore changes whose lines are all blank."),
+  N_("-I RE  --ignore-matching-lines=RE  Ignore changes whose lines all match RE."),
+  N_("--strip-trailing-cr  Strip trailing carriage return on input."),
+  N_("-a  --text  Treat all files as text."),
+  "",
+  N_("-w NUM  --width=NUM  Output at most NUM (default 130) print columns."),
+  N_("-l  --left-column  Output only the left column of common lines."),
+  N_("-s  --suppress-common-lines  Do not output common lines."),
+  "",
+  N_("-t  --expand-tabs  Expand tabs to spaces in output."),
+  N_("--tabsize=NUM  Tab stops are every NUM (default 8) print columns."),
+  "",
+  N_("-d  --minimal  Try hard to find a smaller set of changes."),
+  N_("-H  --speed-large-files  Assume large files and many scattered small changes."),
+  N_("--diff-program=PROGRAM  Use PROGRAM to compare files."),
+  "",
+  N_("-v  --version  Output version info."),
+  N_("--help  Output this help."),
+  0
+};
+
+static void
+usage (void)
+{
+  char const * const *p;
+
+  printf (_("Usage: %s [OPTION]... FILE1 FILE2\n"), program_name);
+  printf ("%s\n\n", _("Side-by-side merge of file differences."));
+  for (p = option_help_msgid;  *p;  p++)
+    if (**p)
+      printf ("  %s\n", _(*p));
+    else
+      putchar ('\n');
+  printf ("\n%s\n%s\n",
+	  _("If a FILE is '-', read standard input."),
+	  _("Exit status is 0 if inputs are the same, 1 if different, 2 if trouble."));
+  emit_bug_reporting_address ();
+}
+
+/* Clean up after a signal or other failure.  This function is
+   async-signal-safe.  */
+static void
+cleanup (int signo __attribute__((unused)))
+{
+#if HAVE_WORKING_FORK || HAVE_WORKING_VFORK
+  if (0 < diffpid)
+    kill (diffpid, SIGPIPE);
+#endif
+  if (tmpname)
+    unlink (tmpname);
+}
+
+static void exiterr (void) __attribute__((noreturn));
+static void
+exiterr (void)
+{
+  cleanup (0);
+  untrapsig (0);
+  checksigs ();
+  exit (EXIT_TROUBLE);
+}
+
+static void
+fatal (char const *msgid)
+{
+  error (0, 0, "%s", _(msgid));
+  exiterr ();
+}
+
+static void
+perror_fatal (char const *msg)
+{
+  int e = errno;
+  checksigs ();
+  error (0, e, "%s", msg);
+  exiterr ();
+}
+
+static void
+check_child_status (int werrno, int wstatus, int max_ok_status,
+		    char const *subsidiary_program)
+{
+  int status = (! werrno && WIFEXITED (wstatus)
+		? WEXITSTATUS (wstatus)
+		: INT_MAX);
+
+  if (max_ok_status < status)
+    {
+      error (0, werrno,
+	     _(status == 126
+	       ? "subsidiary program '%s' could not be invoked"
+	       : status == 127
+	       ? "subsidiary program '%s' not found"
+	       : status == INT_MAX
+	       ? "subsidiary program '%s' failed"
+	       : "subsidiary program '%s' failed (exit status %d)"),
+	     subsidiary_program, status);
+      exiterr ();
+    }
+}
+
+static FILE *
+ck_fopen (char const *fname, char const *type)
+{
+  FILE *r = fopen (fname, type);
+  if (! r)
+    perror_fatal (fname);
+  return r;
+}
+
+static void
+ck_fclose (FILE *f)
+{
+  if (fclose (f))
+    perror_fatal ("fclose");
+}
+
+static size_t
+ck_fread (char *buf, size_t size, FILE *f)
+{
+  size_t r = fread (buf, sizeof (char), size, f);
+  if (r == 0 && ferror (f))
+    perror_fatal (_("read failed"));
+  return r;
+}
+
+static void
+ck_fwrite (char const *buf, size_t size, FILE *f)
+{
+  if (fwrite (buf, sizeof (char), size, f) != size)
+    perror_fatal (_("write failed"));
+}
+
+static void
+ck_fflush (FILE *f)
+{
+  if (fflush (f) != 0)
+    perror_fatal (_("write failed"));
+}
+
+static char const *
+expand_name (char *name, bool is_dir, char const *other_name)
+{
+  if (STREQ (name, "-"))
+    fatal ("cannot interactively merge standard input");
+  if (! is_dir)
+    return name;
+  else
+    {
+      /* Yield NAME/BASE, where BASE is OTHER_NAME's basename.  */
+      char const *base = last_component (other_name);
+      size_t namelen = strlen (name), baselen = base_len (base);
+      bool insert_slash = *last_component (name) && name[namelen - 1] != '/';
+      char *r = xmalloc (namelen + insert_slash + baselen + 1);
+      memcpy (r, name, namelen);
+      r[namelen] = '/';
+      memcpy (r + namelen + insert_slash, base, baselen);
+      r[namelen + insert_slash + baselen] = '\0';
+      return r;
+    }
+}
+
+struct line_filter {
+  FILE *infile;
+  char *bufpos;
+  char *buffer;
+  char *buflim;
+};
+
+static void
+lf_init (struct line_filter *lf, FILE *infile)
+{
+  lf->infile = infile;
+  lf->bufpos = lf->buffer = lf->buflim = xmalloc (SDIFF_BUFSIZE + 1);
+  lf->buflim[0] = '\n';
+}
+
+/* Fill an exhausted line_filter buffer from its INFILE */
+static size_t
+lf_refill (struct line_filter *lf)
+{
+  size_t s = ck_fread (lf->buffer, SDIFF_BUFSIZE, lf->infile);
+  lf->bufpos = lf->buffer;
+  lf->buflim = lf->buffer + s;
+  lf->buflim[0] = '\n';
+  checksigs ();
+  return s;
+}
+
+/* Advance LINES on LF's infile, copying lines to OUTFILE */
+static void
+lf_copy (struct line_filter *lf, lin lines, FILE *outfile)
+{
+  char *start = lf->bufpos;
+
+  while (lines)
+    {
+      lf->bufpos = (char *) memchr (lf->bufpos, '\n', lf->buflim - lf->bufpos);
+      if (! lf->bufpos)
+	{
+	  ck_fwrite (start, lf->buflim - start, outfile);
+	  if (! lf_refill (lf))
+	    return;
+	  start = lf->bufpos;
+	}
+      else
+	{
+	  --lines;
+	  ++lf->bufpos;
+	}
+    }
+
+  ck_fwrite (start, lf->bufpos - start, outfile);
+}
+
+/* Advance LINES on LF's infile without doing output */
+static void
+lf_skip (struct line_filter *lf, lin lines)
+{
+  while (lines)
+    {
+      lf->bufpos = (char *) memchr (lf->bufpos, '\n', lf->buflim - lf->bufpos);
+      if (! lf->bufpos)
+	{
+	  if (! lf_refill (lf))
+	    break;
+	}
+      else
+	{
+	  --lines;
+	  ++lf->bufpos;
+	}
+    }
+}
+
+/* Snarf a line into a buffer.  Return EOF if EOF, 0 if error, 1 if OK.  */
+static int
+lf_snarf (struct line_filter *lf, char *buffer, size_t bufsize)
+{
+  for (;;)
+    {
+      char *start = lf->bufpos;
+      char *next = (char *) memchr (start, '\n', lf->buflim + 1 - start);
+      size_t s = next - start;
+      if (bufsize <= s)
+	return 0;
+      memcpy (buffer, start, s);
+      if (next < lf->buflim)
+	{
+	  buffer[s] = 0;
+	  lf->bufpos = next + 1;
+	  return 1;
+	}
+      if (! lf_refill (lf))
+	return s ? 0 : EOF;
+      buffer += s;
+      bufsize -= s;
+    }
+}
+
+int
+main (int argc, char *argv[])
+{
+  int opt;
+  char const *prog;
+
+  exit_failure = EXIT_TROUBLE;
+  initialize_main (&argc, &argv);
+  set_program_name (argv[0]);
+  setlocale (LC_ALL, "");
+  bindtextdomain (PACKAGE, LOCALEDIR);
+  textdomain (PACKAGE);
+  c_stack_action (cleanup);
+
+  prog = getenv ("EDITOR");
+  if (prog)
+    editor_program = prog;
+
+  diffarg (DEFAULT_DIFF_PROGRAM);
+
+  /* parse command line args */
+  while ((opt = getopt_long (argc, argv, "abBdEHiI:lo:stvw:W", longopts, 0))
+	 != -1)
+    {
+      switch (opt)
+	{
+	case 'a':
+	  diffarg ("-a");
+	  break;
+
+	case 'b':
+	  diffarg ("-b");
+	  break;
+
+	case 'B':
+	  diffarg ("-B");
+	  break;
+
+	case 'd':
+	  diffarg ("-d");
+	  break;
+
+	case 'E':
+	  diffarg ("-E");
+	  break;
+
+	case 'H':
+	  diffarg ("-H");
+	  break;
+
+	case 'i':
+	  diffarg ("-i");
+	  break;
+
+	case 'I':
+	  diffarg ("-I");
+	  diffarg (optarg);
+	  break;
+
+	case 'l':
+	  diffarg ("--left-column");
+	  break;
+
+	case 'o':
+	  output = optarg;
+	  break;
+
+	case 's':
+	  suppress_common_lines = true;
+	  break;
+
+	case 't':
+	  diffarg ("-t");
+	  break;
+
+	case 'v':
+	  version_etc (stdout, PROGRAM_NAME, PACKAGE_NAME, PACKAGE_VERSION,
+		       AUTHORS, (char *) NULL);
+	  check_stdout ();
+	  return EXIT_SUCCESS;
+
+	case 'w':
+	  diffarg ("-W");
+	  diffarg (optarg);
+	  break;
+
+	case 'W':
+	  diffarg ("-w");
+	  break;
+
+	case DIFF_PROGRAM_OPTION:
+	  diffargv[0] = optarg;
+	  break;
+
+	case HELP_OPTION:
+	  usage ();
+	  check_stdout ();
+	  return EXIT_SUCCESS;
+
+	case STRIP_TRAILING_CR_OPTION:
+	  diffarg ("--strip-trailing-cr");
+	  break;
+
+	case TABSIZE_OPTION:
+	  diffarg ("--tabsize");
+	  diffarg (optarg);
+	  break;
+
+	default:
+	  try_help (0, 0);
+	}
+    }
+
+  if (argc - optind != 2)
+    {
+      if (argc - optind < 2)
+	try_help ("missing operand after '%s'", argv[argc - 1]);
+      else
+	try_help ("extra operand '%s'", argv[optind + 2]);
+    }
+
+  if (! output)
+    {
+      /* easy case: diff does everything for us */
+      if (suppress_common_lines)
+	diffarg ("--suppress-common-lines");
+      diffarg ("-y");
+      diffarg ("--");
+      diffarg (argv[optind]);
+      diffarg (argv[optind + 1]);
+      diffarg (0);
+      execvp (diffargv[0], (char **) diffargv);
+      perror_fatal (diffargv[0]);
+    }
+  else
+    {
+      char const *lname, *rname;
+      FILE *left, *right, *out, *diffout;
+      bool interact_ok;
+      struct line_filter lfilt;
+      struct line_filter rfilt;
+      struct line_filter diff_filt;
+      bool leftdir = diraccess (argv[optind]);
+      bool rightdir = diraccess (argv[optind + 1]);
+
+      if (leftdir & rightdir)
+	fatal ("both files to be compared are directories");
+
+      lname = expand_name (argv[optind], leftdir, argv[optind + 1]);
+      left = ck_fopen (lname, "r");
+      rname = expand_name (argv[optind + 1], rightdir, argv[optind]);
+      right = ck_fopen (rname, "r");
+      out = ck_fopen (output, "w");
+
+      diffarg ("--sdiff-merge-assist");
+      diffarg ("--");
+      diffarg (argv[optind]);
+      diffarg (argv[optind + 1]);
+      diffarg (0);
+
+      trapsigs ();
+
+#if ! (HAVE_WORKING_FORK || HAVE_WORKING_VFORK)
+      {
+	size_t cmdsize = 1;
+	char *p, *command;
+	int i;
+
+	for (i = 0;  diffargv[i];  i++)
+	  cmdsize += shell_quote_length (diffargv[i]) + 1;
+	command = p = xmalloc (cmdsize);
+	for (i = 0;  diffargv[i];  i++)
+	  {
+	    p = shell_quote_copy (p, diffargv[i]);
+	    *p++ = ' ';
+	  }
+	p[-1] = 0;
+	errno = 0;
+	diffout = popen (command, "r");
+	if (! diffout)
+	  perror_fatal (command);
+	free (command);
+      }
+#else
+      {
+	int diff_fds[2];
+# if HAVE_WORKING_VFORK
+	sigset_t procmask;
+	sigset_t blocked;
+# endif
+
+	if (pipe (diff_fds) != 0)
+	  perror_fatal ("pipe");
+
+# if HAVE_WORKING_VFORK
+	/* Block SIGINT and SIGPIPE.  */
+	sigemptyset (&blocked);
+	sigaddset (&blocked, SIGINT);
+	sigaddset (&blocked, SIGPIPE);
+	sigprocmask (SIG_BLOCK, &blocked, &procmask);
+# endif
+	diffpid = vfork ();
+	if (diffpid < 0)
+	  perror_fatal ("fork");
+	if (! diffpid)
+	  {
+	    /* Alter the child's SIGINT and SIGPIPE handlers;
+	       this may munge the parent.
+	       The child ignores SIGINT in case the user interrupts the editor.
+	       The child does not ignore SIGPIPE, even if the parent does.  */
+	    if (initial_handler (handler_index_of_SIGINT) != SIG_IGN)
+	      signal_handler (SIGINT, SIG_IGN);
+	    signal_handler (SIGPIPE, SIG_DFL);
+# if HAVE_WORKING_VFORK
+	    /* Stop blocking SIGINT and SIGPIPE in the child.  */
+	    sigprocmask (SIG_SETMASK, &procmask, 0);
+# endif
+	    close (diff_fds[0]);
+	    if (diff_fds[1] != STDOUT_FILENO)
+	      {
+		dup2 (diff_fds[1], STDOUT_FILENO);
+		close (diff_fds[1]);
+	      }
+
+	    execvp (diffargv[0], (char **) diffargv);
+	    _exit (errno == ENOENT ? 127 : 126);
+	  }
+
+# if HAVE_WORKING_VFORK
+	/* Restore the parent's SIGINT and SIGPIPE behavior.  */
+	if (initial_handler (handler_index_of_SIGINT) != SIG_IGN)
+	  signal_handler (SIGINT, catchsig);
+	if (initial_handler (handler_index_of_SIGPIPE) != SIG_IGN)
+	  signal_handler (SIGPIPE, catchsig);
+	else
+	  signal_handler (SIGPIPE, SIG_IGN);
+
+	/* Stop blocking SIGINT and SIGPIPE in the parent.  */
+	sigprocmask (SIG_SETMASK, &procmask, 0);
+# endif
+
+	close (diff_fds[1]);
+	diffout = fdopen (diff_fds[0], "r");
+	if (! diffout)
+	  perror_fatal ("fdopen");
+      }
+#endif
+
+      lf_init (&diff_filt, diffout);
+      lf_init (&lfilt, left);
+      lf_init (&rfilt, right);
+
+      interact_ok = interact (&diff_filt, &lfilt, lname, &rfilt, rname, out);
+
+      ck_fclose (left);
+      ck_fclose (right);
+      ck_fclose (out);
+
+      {
+	int wstatus;
+	int werrno = 0;
+
+#if ! (HAVE_WORKING_FORK || HAVE_WORKING_VFORK)
+	wstatus = pclose (diffout);
+	if (wstatus == -1)
+	  werrno = errno;
+#else
+	ck_fclose (diffout);
+	while (waitpid (diffpid, &wstatus, 0) < 0)
+	  if (errno == EINTR)
+	    checksigs ();
+	  else
+	    perror_fatal ("waitpid");
+	diffpid = 0;
+#endif
+
+	if (tmpname)
+	  {
+	    unlink (tmpname);
+	    tmpname = 0;
+	  }
+
+	if (! interact_ok)
+	  exiterr ();
+
+	check_child_status (werrno, wstatus, EXIT_FAILURE, diffargv[0]);
+	untrapsig (0);
+	checksigs ();
+	exit (WEXITSTATUS (wstatus));
+      }
+    }
+  return EXIT_SUCCESS;			/* Fool '-Wall'.  */
+}
+
+static void
+diffarg (char const *a)
+{
+  static size_t diffargs, diffarglim;
+
+  if (diffargs == diffarglim)
+    {
+      if (! diffarglim)
+	diffarglim = 16;
+      else if (PTRDIFF_MAX / (2 * sizeof *diffargv) <= diffarglim)
+	xalloc_die ();
+      else
+	diffarglim *= 2;
+      diffargv = xrealloc (diffargv, diffarglim * sizeof *diffargv);
+    }
+  diffargv[diffargs++] = a;
+}
+
+/* Signal handling */
+
+static bool volatile ignore_SIGINT;
+static int volatile signal_received;
+static bool sigs_trapped;
+
+static void
+catchsig (int s)
+{
+#if ! HAVE_SIGACTION
+  signal (s, SIG_IGN);
+#endif
+  if (! (s == SIGINT && ignore_SIGINT))
+    signal_received = s;
+}
+
+#if HAVE_SIGACTION
+static struct sigaction catchaction;
+
+static void
+signal_handler (int sig, void (*handler) (int))
+{
+  catchaction.sa_handler = handler;
+  sigaction (sig, &catchaction, 0);
+}
+#endif
+
+static void
+trapsigs (void)
+{
+  int i;
+
+#if HAVE_SIGACTION
+  catchaction.sa_flags = SA_RESTART;
+  sigemptyset (&catchaction.sa_mask);
+  for (i = 0;  i < NUM_SIGS;  i++)
+    sigaddset (&catchaction.sa_mask, sigs[i]);
+#endif
+
+  for (i = 0;  i < NUM_SIGS;  i++)
+    {
+#if HAVE_SIGACTION
+      sigaction (sigs[i], 0, &initial_action[i]);
+#else
+      initial_action[i] = signal (sigs[i], SIG_IGN);
+#endif
+      if (initial_handler (i) != SIG_IGN)
+	signal_handler (sigs[i], catchsig);
+    }
+
+#ifdef SIGCHLD
+  /* System V fork+wait does not work if SIGCHLD is ignored.  */
+  signal (SIGCHLD, SIG_DFL);
+#endif
+
+  sigs_trapped = true;
+}
+
+/* Untrap signal S, or all trapped signals if S is zero.  */
+static void
+untrapsig (int s)
+{
+  int i;
+
+  if (sigs_trapped)
+    for (i = 0;  i < NUM_SIGS;  i++)
+      if ((! s || sigs[i] == s)  &&  initial_handler (i) != SIG_IGN)
+	{
+#if HAVE_SIGACTION
+	  sigaction (sigs[i], &initial_action[i], 0);
+#else
+	  signal (sigs[i], initial_action[i]);
+#endif
+	}
+}
+
+/* Exit if a signal has been received.  */
+static void
+checksigs (void)
+{
+  int s = signal_received;
+  if (s)
+    {
+      cleanup (0);
+
+      /* Yield an exit status indicating that a signal was received.  */
+      untrapsig (s);
+      kill (getpid (), s);
+
+      /* That didn't work, so exit with error status.  */
+      exit (EXIT_TROUBLE);
+    }
+}
+
+static void
+give_help (void)
+{
+  fprintf (stderr, "%s", _("\
+ed:\tEdit then use both versions, each decorated with a header.\n\
+eb:\tEdit then use both versions.\n\
+el or e1:\tEdit then use the left version.\n\
+er or e2:\tEdit then use the right version.\n\
+e:\tDiscard both versions then edit a new one.\n\
+l or 1:\tUse the left version.\n\
+r or 2:\tUse the right version.\n\
+s:\tSilently include common lines.\n\
+v:\tVerbosely include common lines.\n\
+q:\tQuit.\n\
+"));
+}
+
+static int
+skip_white (void)
+{
+  int c;
+  for (;;)
+    {
+      c = getchar ();
+      if (! isspace (c) || c == '\n')
+	break;
+      checksigs ();
+    }
+  if (ferror (stdin))
+    perror_fatal (_("read failed"));
+  return c;
+}
+
+static void
+flush_line (void)
+{
+  int c;
+  while ((c = getchar ()) != '\n' && c != EOF)
+    continue;
+  if (ferror (stdin))
+    perror_fatal (_("read failed"));
+}
+
+
+/* interpret an edit command */
+static bool
+edit (struct line_filter *left, char const *lname, lin lline, lin llen,
+      struct line_filter *right, char const *rname, lin rline, lin rlen,
+      FILE *outfile)
+{
+  for (;;)
+    {
+      int cmd0 IF_LINT (= 0);
+      int cmd1 IF_LINT (= 0);
+      bool gotcmd = false;
+
+      while (! gotcmd)
+	{
+	  if (putchar ('%') != '%')
+	    perror_fatal (_("write failed"));
+	  ck_fflush (stdout);
+
+	  cmd0 = skip_white ();
+	  switch (cmd0)
+	    {
+	    case '1': case '2': case 'l': case 'r':
+	    case 's': case 'v': case 'q':
+	      if (skip_white () != '\n')
+		{
+		  give_help ();
+		  flush_line ();
+		  continue;
+		}
+	      gotcmd = true;
+	      break;
+
+	    case 'e':
+	      cmd1 = skip_white ();
+	      switch (cmd1)
+		{
+		case '1': case '2': case 'b': case 'd': case 'l': case 'r':
+		  if (skip_white () != '\n')
+		    {
+		      give_help ();
+		      flush_line ();
+		      continue;
+		    }
+		  gotcmd = true;
+		  break;
+		case '\n':
+		  gotcmd = true;
+		  break;
+		default:
+		  give_help ();
+		  flush_line ();
+		  continue;
+		}
+	      break;
+
+	    case EOF:
+	      if (feof (stdin))
+		{
+		  gotcmd = true;
+		  cmd0 = 'q';
+		  break;
+		}
+	      /* Fall through.  */
+	    default:
+	      flush_line ();
+	      /* Fall through.  */
+	    case '\n':
+	      give_help ();
+	      continue;
+	    }
+	}
+
+      switch (cmd0)
+	{
+	case '1': case 'l':
+	  lf_copy (left, llen, outfile);
+	  lf_skip (right, rlen);
+	  return true;
+	case '2': case 'r':
+	  lf_copy (right, rlen, outfile);
+	  lf_skip (left, llen);
+	  return true;
+	case 's':
+	  suppress_common_lines = true;
+	  break;
+	case 'v':
+	  suppress_common_lines = false;
+	  break;
+	case 'q':
+	  return false;
+	case 'e':
+	  {
+	    int fd;
+
+	    if (tmpname)
+	      tmp = fopen (tmpname, "w");
+	    else
+	      {
+		if ((fd = temporary_file ()) < 0)
+		  perror_fatal ("mkstemp");
+		tmp = fdopen (fd, "w");
+	      }
+
+	    if (! tmp)
+	      perror_fatal (tmpname);
+
+	    switch (cmd1)
+	      {
+	      case 'd':
+		if (llen)
+		  {
+		    if (llen == 1)
+		      fprintf (tmp, "--- %s %ld\n", lname, (long int) lline);
+		    else
+		      fprintf (tmp, "--- %s %ld,%ld\n", lname,
+			       (long int) lline,
+			       (long int) (lline + llen - 1));
+		  }
+		/* Fall through.  */
+	      case '1': case 'b': case 'l':
+		lf_copy (left, llen, tmp);
+		break;
+
+	      default:
+		lf_skip (left, llen);
+		break;
+	      }
+
+	    switch (cmd1)
+	      {
+	      case 'd':
+		if (rlen)
+		  {
+		    if (rlen == 1)
+		      fprintf (tmp, "+++ %s %ld\n", rname, (long int) rline);
+		    else
+		      fprintf (tmp, "+++ %s %ld,%ld\n", rname,
+			       (long int) rline,
+			       (long int) (rline + rlen - 1));
+		  }
+		/* Fall through.  */
+	      case '2': case 'b': case 'r':
+		lf_copy (right, rlen, tmp);
+		break;
+
+	      default:
+		lf_skip (right, rlen);
+		break;
+	      }
+
+	    ck_fclose (tmp);
+
+	    {
+	      int wstatus;
+	      int werrno = 0;
+	      ignore_SIGINT = true;
+	      checksigs ();
+
+	      {
+#if ! (HAVE_WORKING_FORK || HAVE_WORKING_VFORK)
+		char *command =
+		  xmalloc (shell_quote_length (editor_program)
+			   + 1 + strlen (tmpname) + 1);
+		sprintf (shell_quote_copy (command, editor_program),
+			 " %s", tmpname);
+		wstatus = system (command);
+		if (wstatus == -1)
+		  werrno = errno;
+		free (command);
+#else
+		pid_t pid;
+
+		pid = vfork ();
+		if (pid == 0)
+		  {
+		    char const *argv[3];
+		    int i = 0;
+
+		    argv[i++] = editor_program;
+		    argv[i++] = tmpname;
+		    argv[i] = 0;
+
+		    execvp (editor_program, (char **) argv);
+		    _exit (errno == ENOENT ? 127 : 126);
+		  }
+
+		if (pid < 0)
+		  perror_fatal ("fork");
+
+		while (waitpid (pid, &wstatus, 0) < 0)
+		  if (errno == EINTR)
+		    checksigs ();
+		  else
+		    perror_fatal ("waitpid");
+#endif
+	      }
+
+	      ignore_SIGINT = false;
+	      check_child_status (werrno, wstatus, EXIT_SUCCESS,
+				  editor_program);
+	    }
+
+	    {
+	      char buf[SDIFF_BUFSIZE];
+	      size_t size;
+	      tmp = ck_fopen (tmpname, "r");
+	      while ((size = ck_fread (buf, SDIFF_BUFSIZE, tmp)) != 0)
+		{
+		  checksigs ();
+		  ck_fwrite (buf, size, outfile);
+		}
+	      ck_fclose (tmp);
+	    }
+	    return true;
+	  }
+	default:
+	  give_help ();
+	  break;
+	}
+    }
+}
+
+/* Alternately reveal bursts of diff output and handle user commands.  */
+static bool
+interact (struct line_filter *diff,
+	  struct line_filter *left, char const *lname,
+	  struct line_filter *right, char const *rname,
+	  FILE *outfile)
+{
+  lin lline = 1, rline = 1;
+
+  for (;;)
+    {
+      char diff_help[256];
+      int snarfed = lf_snarf (diff, diff_help, sizeof diff_help);
+
+      if (snarfed <= 0)
+	return snarfed != 0;
+
+      checksigs ();
+
+      if (diff_help[0] == ' ')
+	puts (diff_help + 1);
+      else
+	{
+	  char *numend;
+	  uintmax_t val;
+	  lin llen, rlen, lenmax;
+	  errno = 0;
+	  llen = val = strtoumax (diff_help + 1, &numend, 10);
+	  if (llen < 0 || llen != val || errno || *numend != ',')
+	    fatal (diff_help);
+	  rlen = val = strtoumax (numend + 1, &numend, 10);
+	  if (rlen < 0 || rlen != val || errno || *numend)
+	    fatal (diff_help);
+
+	  lenmax = MAX (llen, rlen);
+
+	  switch (diff_help[0])
+	    {
+	    case 'i':
+	      if (suppress_common_lines)
+		lf_skip (diff, lenmax);
+	      else
+		lf_copy (diff, lenmax, stdout);
+
+	      lf_copy (left, llen, outfile);
+	      lf_skip (right, rlen);
+	      break;
+
+	    case 'c':
+	      lf_copy (diff, lenmax, stdout);
+	      if (! edit (left, lname, lline, llen,
+			  right, rname, rline, rlen,
+			  outfile))
+		return false;
+	      break;
+
+	    default:
+	      fatal (diff_help);
+	    }
+
+	  lline += llen;
+	  rline += rlen;
+	}
+    }
+}
+
+/* Return true if DIR is an existing directory.  */
+static bool
+diraccess (char const *dir)
+{
+  struct stat buf;
+  return stat (dir, &buf) == 0 && S_ISDIR (buf.st_mode);
+}
+
+#ifndef P_tmpdir
+# define P_tmpdir "/tmp"
+#endif
+#ifndef TMPDIR_ENV
+# define TMPDIR_ENV "TMPDIR"
+#endif
+
+/* Open a temporary file and return its file descriptor.  Put into
+   tmpname the address of a newly allocated buffer that holds the
+   file's name.  Use the prefix "sdiff".  */
+static int
+temporary_file (void)
+{
+  char const *tmpdir = getenv (TMPDIR_ENV);
+  char const *dir = tmpdir ? tmpdir : P_tmpdir;
+  char *buf = xmalloc (strlen (dir) + 1 + 5 + 6 + 1);
+  int fd;
+  int e;
+  sigset_t procmask;
+  sigset_t blocked;
+  sprintf (buf, "%s/sdiffXXXXXX", dir);
+  sigemptyset (&blocked);
+  sigaddset (&blocked, SIGINT);
+  sigprocmask (SIG_BLOCK, &blocked, &procmask);
+  fd = mkstemp (buf);
+  e = errno;
+  if (0 <= fd)
+    tmpname = buf;
+  sigprocmask (SIG_SETMASK, &procmask, 0);
+  errno = e;
+  return fd;
+}
diff --git a/diffutils-3.0-patch/side.c b/diffutils-3.0-patch/side.c
new file mode 100644
index 0000000..6aa96a9
--- /dev/null
+++ b/diffutils-3.0-patch/side.c
@@ -0,0 +1,320 @@
+/* sdiff-format output routines for GNU DIFF.
+
+   Copyright (C) 1991-1993, 1998, 2001-2002, 2004, 2009-2010 Free Software
+   Foundation, Inc.
+
+   This file is part of GNU DIFF.
+
+   GNU DIFF is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY.  No author or distributor
+   accepts responsibility to anyone for the consequences of using it
+   or for whether it serves any particular purpose or works at all,
+   unless he says so in writing.  Refer to the GNU General Public
+   License for full details.
+
+   Everyone is granted permission to copy, modify and redistribute
+   GNU DIFF, but only under the conditions described in the
+   GNU General Public License.   A copy of this license is
+   supposed to have been given to you along with GNU DIFF so you
+   can know your rights and responsibilities.  It should be in a
+   file named COPYING.  Among other things, the copyright notice
+   and this notice must be preserved on all copies.  */
+
+#include "diff.h"
+
+#include <wchar.h>
+
+static void print_sdiff_common_lines (lin, lin);
+static void print_sdiff_hunk (struct change *);
+
+/* Next line number to be printed in the two input files.  */
+static lin next0, next1;
+
+/* Print the edit-script SCRIPT as a sdiff style output.  */
+
+void
+print_sdiff_script (struct change *script)
+{
+  begin_output ();
+
+  next0 = next1 = - files[0].prefix_lines;
+  print_script (script, find_change, print_sdiff_hunk);
+
+  print_sdiff_common_lines (files[0].valid_lines, files[1].valid_lines);
+}
+
+/* Tab from column FROM to column TO, where FROM <= TO.  Yield TO.  */
+
+static size_t
+tab_from_to (size_t from, size_t to)
+{
+  FILE *out = outfile;
+  size_t tab;
+  size_t tab_size = tabsize;
+
+  if (!expand_tabs)
+    for (tab = from + tab_size - from % tab_size;  tab <= to;  tab += tab_size)
+      {
+	putc ('\t', out);
+	from = tab;
+      }
+  while (from++ < to)
+    putc (' ', out);
+  return to;
+}
+
+/* Print the text for half an sdiff line.  This means truncate to
+   width observing tabs, and trim a trailing newline.  Return the
+   last column written (not the number of chars).  */
+
+static size_t
+print_half_line (char const *const *line, size_t indent, size_t out_bound)
+{
+  FILE *out = outfile;
+  register size_t in_position = 0;
+  register size_t out_position = 0;
+  register char const *text_pointer = line[0];
+  register char const *text_limit = line[1];
+  mbstate_t mbstate = { 0 };
+
+  while (text_pointer < text_limit)
+    {
+      char const *tp0 = text_pointer;
+      register char c = *text_pointer++;
+
+      switch (c)
+	{
+	case '\t':
+	  {
+	    size_t spaces = tabsize - in_position % tabsize;
+	    if (in_position == out_position)
+	      {
+		size_t tabstop = out_position + spaces;
+		if (expand_tabs)
+		  {
+		    if (out_bound < tabstop)
+		      tabstop = out_bound;
+		    for (;  out_position < tabstop;  out_position++)
+		      putc (' ', out);
+		  }
+		else
+		  if (tabstop < out_bound)
+		    {
+		      out_position = tabstop;
+		      putc (c, out);
+		    }
+	      }
+	    in_position += spaces;
+	  }
+	  break;
+
+	case '\r':
+	  {
+	    putc (c, out);
+	    tab_from_to (0, indent);
+	    in_position = out_position = 0;
+	  }
+	  break;
+
+	case '\b':
+	  if (in_position != 0 && --in_position < out_bound)
+	    {
+	      if (out_position <= in_position)
+		/* Add spaces to make up for suppressed tab past out_bound.  */
+		for (;  out_position < in_position;  out_position++)
+		  putc (' ', out);
+	      else
+		{
+		  out_position = in_position;
+		  putc (c, out);
+		}
+	    }
+	  break;
+
+	default:
+	  {
+	    wchar_t wc;
+	    size_t bytes = mbrtowc (&wc, tp0, text_limit - tp0, &mbstate);
+
+	    if (0 < bytes && bytes < (size_t) -2)
+	      {
+		int width = wcwidth (wc);
+		if (0 < width)
+		  in_position += width;
+		if (in_position <= out_bound)
+		  {
+		    out_position = in_position;
+		    fwrite (tp0, 1, bytes, stdout);
+		  }
+		text_pointer = tp0 + bytes;
+		break;
+	      }
+	  }
+	  /* Fall through.  */
+	case '\f':
+	case '\v':
+	  if (in_position < out_bound)
+	    putc (c, out);
+	  break;
+
+	case ' ': case '!': case '"': case '#': case '%':
+	case '&': case '\'': case '(': case ')': case '*':
+	case '+': case ',': case '-': case '.': case '/':
+	case '0': case '1': case '2': case '3': case '4':
+	case '5': case '6': case '7': case '8': case '9':
+	case ':': case ';': case '<': case '=': case '>':
+	case '?':
+	case 'A': case 'B': case 'C': case 'D': case 'E':
+	case 'F': case 'G': case 'H': case 'I': case 'J':
+	case 'K': case 'L': case 'M': case 'N': case 'O':
+	case 'P': case 'Q': case 'R': case 'S': case 'T':
+	case 'U': case 'V': case 'W': case 'X': case 'Y':
+	case 'Z':
+	case '[': case '\\': case ']': case '^': case '_':
+	case 'a': case 'b': case 'c': case 'd': case 'e':
+	case 'f': case 'g': case 'h': case 'i': case 'j':
+	case 'k': case 'l': case 'm': case 'n': case 'o':
+	case 'p': case 'q': case 'r': case 's': case 't':
+	case 'u': case 'v': case 'w': case 'x': case 'y':
+	case 'z': case '{': case '|': case '}': case '~':
+	  /* These characters are printable ASCII characters.  */
+	  if (in_position++ < out_bound)
+	    {
+	      out_position = in_position;
+	      putc (c, out);
+	    }
+	  break;
+
+	case '\n':
+	  return out_position;
+	}
+    }
+
+  return out_position;
+}
+
+/* Print side by side lines with a separator in the middle.
+   0 parameters are taken to indicate white space text.
+   Blank lines that can easily be caught are reduced to a single newline.  */
+
+static void
+print_1sdiff_line (char const *const *left, char sep,
+		   char const *const *right)
+{
+  FILE *out = outfile;
+  size_t hw = sdiff_half_width;
+  size_t c2o = sdiff_column2_offset;
+  size_t col = 0;
+  bool put_newline = false;
+
+  if (left)
+    {
+      put_newline |= left[1][-1] == '\n';
+      col = print_half_line (left, 0, hw);
+    }
+
+  if (sep != ' ')
+    {
+      col = tab_from_to (col, (hw + c2o - 1) / 2) + 1;
+      if (sep == '|' && put_newline != (right[1][-1] == '\n'))
+	sep = put_newline ? '/' : '\\';
+      putc (sep, out);
+    }
+
+  if (right)
+    {
+      put_newline |= right[1][-1] == '\n';
+      if (**right != '\n')
+	{
+	  col = tab_from_to (col, c2o);
+	  print_half_line (right, col, hw);
+	}
+    }
+
+  if (put_newline)
+    putc ('\n', out);
+}
+
+/* Print lines common to both files in side-by-side format.  */
+static void
+print_sdiff_common_lines (lin limit0, lin limit1)
+{
+  lin i0 = next0, i1 = next1;
+
+  if (!suppress_common_lines && (i0 != limit0 || i1 != limit1))
+    {
+      if (sdiff_merge_assist)
+	{
+	  long int len0 = limit0 - i0;
+	  long int len1 = limit1 - i1;
+	  fprintf (outfile, "i%ld,%ld\n", len0, len1);
+	}
+
+      if (!left_column)
+	{
+	  while (i0 != limit0 && i1 != limit1)
+	    print_1sdiff_line (&files[0].linbuf[i0++], ' ',
+			       &files[1].linbuf[i1++]);
+	  while (i1 != limit1)
+	    print_1sdiff_line (0, ')', &files[1].linbuf[i1++]);
+	}
+      while (i0 != limit0)
+	print_1sdiff_line (&files[0].linbuf[i0++], '(', 0);
+    }
+
+  next0 = limit0;
+  next1 = limit1;
+}
+
+/* Print a hunk of an sdiff diff.
+   This is a contiguous portion of a complete edit script,
+   describing changes in consecutive lines.  */
+
+static void
+print_sdiff_hunk (struct change *hunk)
+{
+  lin first0, last0, first1, last1;
+  register lin i, j;
+
+  /* Determine range of line numbers involved in each file.  */
+  enum changes changes =
+    analyze_hunk (hunk, &first0, &last0, &first1, &last1);
+  if (!changes)
+    return;
+
+  /* Print out lines up to this change.  */
+  print_sdiff_common_lines (first0, first1);
+
+  if (sdiff_merge_assist)
+    {
+      long int len0 = last0 - first0 + 1;
+      long int len1 = last1 - first1 + 1;
+      fprintf (outfile, "c%ld,%ld\n", len0, len1);
+    }
+
+  /* Print ``xxx  |  xxx '' lines */
+  if (changes == CHANGED)
+    {
+      for (i = first0, j = first1;  i <= last0 && j <= last1;  i++, j++)
+	print_1sdiff_line (&files[0].linbuf[i], '|', &files[1].linbuf[j]);
+      changes = (i <= last0 ? OLD : 0) + (j <= last1 ? NEW : 0);
+      next0 = first0 = i;
+      next1 = first1 = j;
+    }
+
+  /* Print ``     >  xxx '' lines */
+  if (changes & NEW)
+    {
+      for (j = first1; j <= last1; ++j)
+	print_1sdiff_line (0, '>', &files[1].linbuf[j]);
+      next1 = j;
+    }
+
+  /* Print ``xxx  <     '' lines */
+  if (changes & OLD)
+    {
+      for (i = first0; i <= last0; ++i)
+	print_1sdiff_line (&files[0].linbuf[i], '<', 0);
+      next0 = i;
+    }
+}
diff --git a/diffutils-3.0-patch/system.h b/diffutils-3.0-patch/system.h
new file mode 100644
index 0000000..8942296
--- /dev/null
+++ b/diffutils-3.0-patch/system.h
@@ -0,0 +1,228 @@
+/* System dependent declarations.
+
+   Copyright (C) 1988-1989, 1992-1995, 1998, 2001-2002, 2004, 2006, 2009-2010
+   Free Software Foundation, Inc.
+
+   This file is part of GNU DIFF.
+
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+#include <config.h>
+
+/* Use this to suppress gcc's `...may be used before initialized' warnings. */
+#ifdef lint
+# define IF_LINT(Code) Code
+#else
+# define IF_LINT(Code) /* empty */
+#endif
+
+/* Define `__attribute__' and `volatile' first
+   so that they're used consistently in all system includes.  */
+#if __GNUC__ < 2 || (__GNUC__ == 2 && __GNUC_MINOR__ < 6) || __STRICT_ANSI__
+# define __attribute__(x)
+#endif
+
+#include <verify.h>
+
+#include <sys/types.h>
+
+#include <sys/stat.h>
+#include "stat-macros.h"
+
+#ifndef STAT_BLOCKSIZE
+# if HAVE_STRUCT_STAT_ST_BLKSIZE
+#  define STAT_BLOCKSIZE(s) ((s).st_blksize)
+# else
+#  define STAT_BLOCKSIZE(s) (8 * 1024)
+# endif
+#endif
+
+#include <unistd.h>
+
+#include <fcntl.h>
+#include <time.h>
+
+#include <sys/wait.h>
+#ifndef WEXITSTATUS
+# define WEXITSTATUS(stat_val) ((unsigned int) (stat_val) >> 8)
+#endif
+#ifndef WIFEXITED
+# define WIFEXITED(stat_val) (((stat_val) & 255) == 0)
+#endif
+
+#include <dirent.h>
+#ifndef _D_EXACT_NAMLEN
+# define _D_EXACT_NAMLEN(dp) strlen ((dp)->d_name)
+#endif
+
+#include <stdlib.h>
+#define EXIT_TROUBLE 2
+
+#include <limits.h>
+#include <locale.h>
+#include <stddef.h>
+#include <inttypes.h>
+
+#include <string.h>
+#if ! HAVE_STRCASECOLL
+# if HAVE_STRICOLL || defined stricoll
+#  define strcasecoll(a, b) stricoll (a, b)
+# else
+#  define strcasecoll(a, b) strcasecmp (a, b) /* best we can do */
+# endif
+#endif
+#if ! (HAVE_STRCASECMP || defined strcasecmp)
+int strcasecmp (char const *, char const *);
+#endif
+
+#include <gettext.h>
+#if ! ENABLE_NLS
+# undef textdomain
+# define textdomain(Domainname) /* empty */
+# undef bindtextdomain
+# define bindtextdomain(Domainname, Dirname) /* empty */
+#endif
+
+#define _(msgid) gettext (msgid)
+#define N_(msgid) msgid
+
+#include <ctype.h>
+
+/* ISDIGIT differs from isdigit, as follows:
+   - Its arg may be any int or unsigned int; it need not be an unsigned char.
+   - It's guaranteed to evaluate its argument exactly once.
+   - It's typically faster.
+   POSIX 1003.1-2001 says that only '0' through '9' are digits.
+   Prefer ISDIGIT to isdigit unless it's important to use the locale's
+   definition of `digit' even when the host does not conform to POSIX.  */
+#define ISDIGIT(c) ((unsigned int) (c) - '0' <= 9)
+
+#include <errno.h>
+
+#include <signal.h>
+#ifndef SA_RESTART
+# ifdef SA_INTERRUPT /* e.g. SunOS 4.1.x */
+#  define SA_RESTART SA_INTERRUPT
+# else
+#  define SA_RESTART 0
+# endif
+#endif
+#if !defined SIGCHLD && defined SIGCLD
+# define SIGCHLD SIGCLD
+#endif
+
+#undef MIN
+#undef MAX
+#define MIN(a, b) ((a) <= (b) ? (a) : (b))
+#define MAX(a, b) ((a) >= (b) ? (a) : (b))
+
+#include <stdbool.h>
+
+#if HAVE_VFORK_H
+# include <vfork.h>
+#endif
+
+#if ! HAVE_WORKING_VFORK
+# define vfork fork
+#endif
+
+#include <intprops.h>
+#include "propername.h"
+
+/* Type used for fast comparison of several bytes at a time.  */
+
+#ifndef word
+# define word uintmax_t
+#endif
+
+/* The integer type of a line number.  Since files are read into main
+   memory, ptrdiff_t should be wide enough.  */
+
+typedef ptrdiff_t lin;
+#define LIN_MAX PTRDIFF_MAX
+verify (TYPE_SIGNED (lin));
+verify (sizeof (ptrdiff_t) <= sizeof (lin));
+verify (sizeof (lin) <= sizeof (long int));
+
+/* This section contains POSIX-compliant defaults for macros
+   that are meant to be overridden by hand in config.h as needed.  */
+
+#ifndef file_name_cmp
+# define file_name_cmp strcmp
+#endif
+
+#ifndef initialize_main
+# define initialize_main(argcp, argvp)
+#endif
+
+#ifndef NULL_DEVICE
+# define NULL_DEVICE "/dev/null"
+#endif
+
+/* Do struct stat *S, *T describe the same special file?  */
+#ifndef same_special_file
+# if HAVE_ST_RDEV && defined S_ISBLK && defined S_ISCHR
+#  define same_special_file(s, t) \
+     (((S_ISBLK ((s)->st_mode) && S_ISBLK ((t)->st_mode)) \
+       || (S_ISCHR ((s)->st_mode) && S_ISCHR ((t)->st_mode))) \
+      && (s)->st_rdev == (t)->st_rdev)
+# else
+#  define same_special_file(s, t) 0
+# endif
+#endif
+
+/* Do struct stat *S, *T describe the same file?  Answer -1 if unknown.  */
+#ifndef same_file
+# define same_file(s, t) \
+    ((((s)->st_ino == (t)->st_ino) && ((s)->st_dev == (t)->st_dev)) \
+     || same_special_file (s, t))
+#endif
+
+/* Do struct stat *S, *T have the same file attributes?
+
+   POSIX says that two files are identical if st_ino and st_dev are
+   the same, but many file systems incorrectly assign the same (device,
+   inode) pair to two distinct files, including:
+
+   - GNU/Linux NFS servers that export all local file systems as a
+     single NFS file system, if a local device number (st_dev) exceeds
+     255, or if a local inode number (st_ino) exceeds 16777215.
+
+   - Network Appliance NFS servers in snapshot directories; see
+     Network Appliance bug #195.
+
+   - ClearCase MVFS; see bug id ATRia04618.
+
+   Check whether two files that purport to be the same have the same
+   attributes, to work around instances of this common bug.  Do not
+   inspect all attributes, only attributes useful in checking for this
+   bug.
+
+   It's possible for two distinct files on a buggy file system to have
+   the same attributes, but it's not worth slowing down all
+   implementations (or complicating the configuration) to cater to
+   these rare cases in buggy implementations.  */
+
+#ifndef same_file_attributes
+# define same_file_attributes(s, t) \
+   ((s)->st_mode == (t)->st_mode \
+    && (s)->st_nlink == (t)->st_nlink \
+    && (s)->st_uid == (t)->st_uid \
+    && (s)->st_gid == (t)->st_gid \
+    && (s)->st_size == (t)->st_size \
+    && (s)->st_mtime == (t)->st_mtime \
+    && (s)->st_ctime == (t)->st_ctime)
+#endif
+
+#define STREQ(a, b) (strcmp (a, b) == 0)
diff --git a/diffutils-3.0-patch/util.c b/diffutils-3.0-patch/util.c
new file mode 100644
index 0000000..d18bf38
--- /dev/null
+++ b/diffutils-3.0-patch/util.c
@@ -0,0 +1,788 @@
+/* Support routines for GNU DIFF.
+
+   Copyright (C) 1988-1989, 1992-1995, 1998, 2001-2002, 2004, 2006, 2009-2010
+   Free Software Foundation, Inc.
+
+   This file is part of GNU DIFF.
+
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+#include "diff.h"
+#include <dirname.h>
+#include <error.h>
+#include <sh-quote.h>
+#include <xalloc.h>
+
+char const pr_program[] = PR_PROGRAM;
+
+/* Queue up one-line messages to be printed at the end,
+   when -l is specified.  Each message is recorded with a `struct msg'.  */
+
+struct msg
+{
+  struct msg *next;
+  char args[1]; /* Format + 4 args, each '\0' terminated, concatenated.  */
+};
+
+/* Head of the chain of queues messages.  */
+
+static struct msg *msg_chain;
+
+/* Tail of the chain of queues messages.  */
+
+static struct msg **msg_chain_end = &msg_chain;
+
+/* Use when a system call returns non-zero status.
+   NAME should normally be the file name.  */
+
+void
+perror_with_name (char const *name)
+{
+  error (0, errno, "%s", name);
+}
+
+/* Use when a system call returns non-zero status and that is fatal.  */
+
+void
+pfatal_with_name (char const *name)
+{
+  int e = errno;
+  print_message_queue ();
+  error (EXIT_TROUBLE, e, "%s", name);
+  abort ();
+}
+
+/* Print an error message containing MSGID, then exit.  */
+
+void
+fatal (char const *msgid)
+{
+  print_message_queue ();
+  error (EXIT_TROUBLE, 0, "%s", _(msgid));
+  abort ();
+}
+
+/* Like printf, except if -l in effect then save the message and print later.
+   This is used for things like "Only in ...".  */
+
+void
+message (char const *format_msgid, char const *arg1, char const *arg2)
+{
+  message5 (format_msgid, arg1, arg2, 0, 0);
+}
+
+void
+message5 (char const *format_msgid, char const *arg1, char const *arg2,
+	  char const *arg3, char const *arg4)
+{
+  if (paginate)
+    {
+      char *p;
+      char const *arg[5];
+      int i;
+      size_t size[5];
+      size_t total_size = offsetof (struct msg, args);
+      struct msg *new;
+
+      arg[0] = format_msgid;
+      arg[1] = arg1;
+      arg[2] = arg2;
+      arg[3] = arg3 ? arg3 : "";
+      arg[4] = arg4 ? arg4 : "";
+
+      for (i = 0;  i < 5;  i++)
+	total_size += size[i] = strlen (arg[i]) + 1;
+
+      new = xmalloc (total_size);
+
+      for (i = 0, p = new->args;  i < 5;  p += size[i++])
+	memcpy (p, arg[i], size[i]);
+
+      *msg_chain_end = new;
+      new->next = 0;
+      msg_chain_end = &new->next;
+    }
+  else
+    {
+      if (sdiff_merge_assist)
+	putchar (' ');
+      printf (_(format_msgid), arg1, arg2, arg3, arg4);
+    }
+}
+
+/* Output all the messages that were saved up by calls to `message'.  */
+
+void
+print_message_queue (void)
+{
+  char const *arg[5];
+  int i;
+  struct msg *m = msg_chain;
+
+  while (m)
+    {
+      struct msg *next = m->next;
+      arg[0] = m->args;
+      for (i = 0;  i < 4;  i++)
+	arg[i + 1] = arg[i] + strlen (arg[i]) + 1;
+      printf (_(arg[0]), arg[1], arg[2], arg[3], arg[4]);
+      free (m);
+      m = next;
+    }
+}
+
+/* Call before outputting the results of comparing files NAME0 and NAME1
+   to set up OUTFILE, the stdio stream for the output to go to.
+
+   Usually, OUTFILE is just stdout.  But when -l was specified
+   we fork off a `pr' and make OUTFILE a pipe to it.
+   `pr' then outputs to our stdout.  */
+
+static char const *current_name0;
+static char const *current_name1;
+static bool currently_recursive;
+
+void
+setup_output (char const *name0, char const *name1, bool recursive)
+{
+  current_name0 = name0;
+  current_name1 = name1;
+  currently_recursive = recursive;
+  outfile = 0;
+}
+
+#if HAVE_WORKING_FORK || HAVE_WORKING_VFORK
+static pid_t pr_pid;
+#endif
+
+void
+begin_output (void)
+{
+  char *name;
+
+  if (outfile != 0)
+    return;
+
+  /* Construct the header of this piece of diff.  */
+  name = xmalloc (strlen (current_name0) + strlen (current_name1)
+		  + strlen (switch_string) + 7);
+
+  /* POSIX 1003.1-2001 specifies this format.  But there are some bugs in
+     the standard: it says that we must print only the last component
+     of the pathnames, and it requires two spaces after "diff" if
+     there are no options.  These requirements are silly and do not
+     match historical practice.  */
+  sprintf (name, "diff%s %s %s", switch_string, current_name0, current_name1);
+
+  if (paginate)
+    {
+      if (fflush (stdout) != 0)
+	pfatal_with_name (_("write failed"));
+
+      /* Make OUTFILE a pipe to a subsidiary `pr'.  */
+      {
+#if HAVE_WORKING_FORK || HAVE_WORKING_VFORK
+	int pipes[2];
+
+	if (pipe (pipes) != 0)
+	  pfatal_with_name ("pipe");
+
+	pr_pid = vfork ();
+	if (pr_pid < 0)
+	  pfatal_with_name ("fork");
+
+	if (pr_pid == 0)
+	  {
+	    close (pipes[1]);
+	    if (pipes[0] != STDIN_FILENO)
+	      {
+		if (dup2 (pipes[0], STDIN_FILENO) < 0)
+		  pfatal_with_name ("dup2");
+		close (pipes[0]);
+	      }
+
+	    execl (pr_program, pr_program, "-h", name, (char *) 0);
+	    _exit (errno == ENOENT ? 127 : 126);
+	  }
+	else
+	  {
+	    close (pipes[0]);
+	    outfile = fdopen (pipes[1], "w");
+	    if (!outfile)
+	      pfatal_with_name ("fdopen");
+	  }
+#else
+	char *command = xmalloc (sizeof pr_program - 1 + 7
+				 + shell_quote_length (name) + 1);
+	char *p;
+	sprintf (command, "%s -f -h ", pr_program);
+	p = command + sizeof pr_program - 1 + 7;
+	p = shell_quote_copy (p, name);
+	*p = 0;
+	errno = 0;
+	outfile = popen (command, "w");
+	if (!outfile)
+	  pfatal_with_name (command);
+	free (command);
+#endif
+      }
+    }
+  else
+    {
+
+      /* If -l was not specified, output the diff straight to `stdout'.  */
+
+      outfile = stdout;
+
+      /* If handling multiple files (because scanning a directory),
+	 print which files the following output is about.  */
+      if (currently_recursive)
+	printf ("%s\n", name);
+    }
+
+  free (name);
+
+  /* A special header is needed at the beginning of context output.  */
+  switch (output_style)
+    {
+    case OUTPUT_CONTEXT:
+      print_context_header (files, false);
+      break;
+
+    case OUTPUT_UNIFIED:
+      print_context_header (files, true);
+      break;
+
+    default:
+      break;
+    }
+}
+
+/* Call after the end of output of diffs for one file.
+   Close OUTFILE and get rid of the `pr' subfork.  */
+
+void
+finish_output (void)
+{
+  if (outfile != 0 && outfile != stdout)
+    {
+      int status;
+      int wstatus;
+      int werrno = 0;
+      if (ferror (outfile))
+	fatal ("write failed");
+#if ! (HAVE_WORKING_FORK || HAVE_WORKING_VFORK)
+      wstatus = pclose (outfile);
+      if (wstatus == -1)
+	werrno = errno;
+#else
+      if (fclose (outfile) != 0)
+	pfatal_with_name (_("write failed"));
+      if (waitpid (pr_pid, &wstatus, 0) < 0)
+	pfatal_with_name ("waitpid");
+#endif
+      status = (! werrno && WIFEXITED (wstatus)
+		? WEXITSTATUS (wstatus)
+		: INT_MAX);
+      if (status)
+	error (EXIT_TROUBLE, werrno,
+	       _(status == 126
+		 ? "subsidiary program '%s' could not be invoked"
+		 : status == 127
+		 ? "subsidiary program '%s' not found"
+		 : status == INT_MAX
+		 ? "subsidiary program '%s' failed"
+		 : "subsidiary program '%s' failed (exit status %d)"),
+	       pr_program, status);
+    }
+
+  outfile = 0;
+}
+
+/* Compare two lines (typically one from each input file)
+   according to the command line options.
+   For efficiency, this is invoked only when the lines do not match exactly
+   but an option like -i might cause us to ignore the difference.
+   Return nonzero if the lines differ.  */
+
+bool
+lines_differ (char const *s1, char const *s2)
+{
+  register char const *t1 = s1;
+  register char const *t2 = s2;
+  size_t column = 0;
+
+  while (1)
+    {
+      register unsigned char c1 = *t1++;
+      register unsigned char c2 = *t2++;
+
+      /* Test for exact char equality first, since it's a common case.  */
+      if (c1 != c2)
+	{
+	  switch (ignore_white_space)
+	    {
+	    case IGNORE_ALL_SPACE:
+	      /* For -w, just skip past any white space.  */
+	      while (isspace (c1) && c1 != '\n') c1 = *t1++;
+	      while (isspace (c2) && c2 != '\n') c2 = *t2++;
+	      break;
+
+	    case IGNORE_SPACE_CHANGE:
+	      /* For -b, advance past any sequence of white space in
+		 line 1 and consider it just one space, or nothing at
+		 all if it is at the end of the line.  */
+	      if (isspace (c1))
+		{
+		  while (c1 != '\n')
+		    {
+		      c1 = *t1++;
+		      if (! isspace (c1))
+			{
+			  --t1;
+			  c1 = ' ';
+			  break;
+			}
+		    }
+		}
+
+	      /* Likewise for line 2.  */
+	      if (isspace (c2))
+		{
+		  while (c2 != '\n')
+		    {
+		      c2 = *t2++;
+		      if (! isspace (c2))
+			{
+			  --t2;
+			  c2 = ' ';
+			  break;
+			}
+		    }
+		}
+
+	      if (c1 != c2)
+		{
+		  /* If we went too far when doing the simple test
+		     for equality, go back to the first non-white-space
+		     character in both sides and try again.  */
+		  if (c2 == ' ' && c1 != '\n'
+		      && s1 + 1 < t1
+		      && isspace ((unsigned char) t1[-2]))
+		    {
+		      --t1;
+		      continue;
+		    }
+		  if (c1 == ' ' && c2 != '\n'
+		      && s2 + 1 < t2
+		      && isspace ((unsigned char) t2[-2]))
+		    {
+		      --t2;
+		      continue;
+		    }
+		}
+
+	      break;
+
+	    case IGNORE_TAB_EXPANSION:
+	      if ((c1 == ' ' && c2 == '\t')
+		  || (c1 == '\t' && c2 == ' '))
+		{
+		  size_t column2 = column;
+		  for (;; c1 = *t1++)
+		    {
+		      if (c1 == ' ')
+			column++;
+		      else if (c1 == '\t')
+			column += tabsize - column % tabsize;
+		      else
+			break;
+		    }
+		  for (;; c2 = *t2++)
+		    {
+		      if (c2 == ' ')
+			column2++;
+		      else if (c2 == '\t')
+			column2 += tabsize - column2 % tabsize;
+		      else
+			break;
+		    }
+		  if (column != column2)
+		    return true;
+		}
+	      break;
+
+	    case IGNORE_NO_WHITE_SPACE:
+	      break;
+	    }
+
+	  /* Lowercase all letters if -i is specified.  */
+
+	  if (ignore_case)
+	    {
+	      c1 = tolower (c1);
+	      c2 = tolower (c2);
+	    }
+
+	  if (c1 != c2)
+	    break;
+	}
+      if (c1 == '\n')
+	return false;
+
+      column += c1 == '\t' ? tabsize - column % tabsize : 1;
+    }
+
+  return true;
+}
+
+/* Find the consecutive changes at the start of the script START.
+   Return the last link before the first gap.  */
+
+struct change *
+find_change (struct change *start)
+{
+  return start;
+}
+
+struct change *
+find_reverse_change (struct change *start)
+{
+  return start;
+}
+
+/* Divide SCRIPT into pieces by calling HUNKFUN and
+   print each piece with PRINTFUN.
+   Both functions take one arg, an edit script.
+
+   HUNKFUN is called with the tail of the script
+   and returns the last link that belongs together with the start
+   of the tail.
+
+   PRINTFUN takes a subscript which belongs together (with a null
+   link at the end) and prints it.  */
+
+void
+print_script (struct change *script,
+	      struct change * (*hunkfun) (struct change *),
+	      void (*printfun) (struct change *))
+{
+  struct change *next = script;
+
+  while (next)
+    {
+      struct change *this, *end;
+
+      /* Find a set of changes that belong together.  */
+      this = next;
+      end = (*hunkfun) (next);
+
+      /* Disconnect them from the rest of the changes,
+	 making them a hunk, and remember the rest for next iteration.  */
+      next = end->link;
+      end->link = 0;
+#ifdef DEBUG
+      debug_script (this);
+#endif
+
+      /* Print this hunk.  */
+      (*printfun) (this);
+
+      /* Reconnect the script so it will all be freed properly.  */
+      end->link = next;
+    }
+}
+
+/* Print the text of a single line LINE,
+   flagging it with the characters in LINE_FLAG (which say whether
+   the line is inserted, deleted, changed, etc.).  LINE_FLAG must not
+   end in a blank, unless it is a single blank.  */
+
+void
+print_1_line (char const *line_flag, char const *const *line)
+{
+  char const *base = line[0], *limit = line[1]; /* Help the compiler.  */
+  FILE *out = outfile; /* Help the compiler some more.  */
+  char const *flag_format = 0;
+
+  /* If -T was specified, use a Tab between the line-flag and the text.
+     Otherwise use a Space (as Unix diff does).
+     Print neither space nor tab if line-flags are empty.
+     But omit trailing blanks if requested.  */
+
+  if (line_flag && *line_flag)
+    {
+      char const *flag_format_1 = flag_format = initial_tab ? "%s\t" : "%s ";
+      char const *line_flag_1 = line_flag;
+
+      if (suppress_blank_empty && **line == '\n')
+	{
+	  flag_format_1 = "%s";
+
+	  /* This hack to omit trailing blanks takes advantage of the
+	     fact that the only way that LINE_FLAG can end in a blank
+	     is when LINE_FLAG consists of a single blank.  */
+	  line_flag_1 += *line_flag_1 == ' ';
+	}
+
+      fprintf (out, flag_format_1, line_flag_1);
+    }
+
+  output_1_line (base, limit, flag_format, line_flag);
+
+  if ((!line_flag || line_flag[0]) && limit[-1] != '\n')
+    fprintf (out, "\n\\ %s\n", _("No newline at end of file"));
+}
+
+/* Output a line from BASE up to LIMIT.
+   With -t, expand white space characters to spaces, and if FLAG_FORMAT
+   is nonzero, output it with argument LINE_FLAG after every
+   internal carriage return, so that tab stops continue to line up.  */
+
+void
+output_1_line (char const *base, char const *limit, char const *flag_format,
+	       char const *line_flag)
+{
+  if (!expand_tabs)
+    fwrite (base, sizeof (char), limit - base, outfile);
+  else
+    {
+      register FILE *out = outfile;
+      register unsigned char c;
+      register char const *t = base;
+      register size_t column = 0;
+      size_t tab_size = tabsize;
+
+      while (t < limit)
+	switch ((c = *t++))
+	  {
+	  case '\t':
+	    {
+	      size_t spaces = tab_size - column % tab_size;
+	      column += spaces;
+	      do
+		putc (' ', out);
+	      while (--spaces);
+	    }
+	    break;
+
+	  case '\r':
+	    putc (c, out);
+	    if (flag_format && t < limit && *t != '\n')
+	      fprintf (out, flag_format, line_flag);
+	    column = 0;
+	    break;
+
+	  case '\b':
+	    if (column == 0)
+	      continue;
+	    column--;
+	    putc (c, out);
+	    break;
+
+	  default:
+	    column += isprint (c) != 0;
+	    putc (c, out);
+	    break;
+	  }
+    }
+}
+
+char const change_letter[] = { 0, 'd', 'a', 'c' };
+
+/* Translate an internal line number (an index into diff's table of lines)
+   into an actual line number in the input file.
+   The internal line number is I.  FILE points to the data on the file.
+
+   Internal line numbers count from 0 starting after the prefix.
+   Actual line numbers count from 1 within the entire file.  */
+
+lin
+translate_line_number (struct file_data const *file, lin i)
+{
+  return i + file->prefix_lines + 1;
+}
+
+/* Translate a line number range.  This is always done for printing,
+   so for convenience translate to long int rather than lin, so that the
+   caller can use printf with "%ld" without casting.  */
+
+void
+translate_range (struct file_data const *file,
+		 lin a, lin b,
+		 long int *aptr, long int *bptr)
+{
+  *aptr = translate_line_number (file, a - 1) + 1;
+  *bptr = translate_line_number (file, b + 1) - 1;
+}
+
+/* Print a pair of line numbers with SEPCHAR, translated for file FILE.
+   If the two numbers are identical, print just one number.
+
+   Args A and B are internal line numbers.
+   We print the translated (real) line numbers.  */
+
+void
+print_number_range (char sepchar, struct file_data *file, lin a, lin b)
+{
+  long int trans_a, trans_b;
+  translate_range (file, a, b, &trans_a, &trans_b);
+
+  /* Note: we can have B < A in the case of a range of no lines.
+     In this case, we should print the line number before the range,
+     which is B.  */
+  if (trans_b > trans_a)
+    fprintf (outfile, "%ld%c%ld", trans_a, sepchar, trans_b);
+  else
+    fprintf (outfile, "%ld", trans_b);
+}
+
+/* Look at a hunk of edit script and report the range of lines in each file
+   that it applies to.  HUNK is the start of the hunk, which is a chain
+   of `struct change'.  The first and last line numbers of file 0 are stored in
+   *FIRST0 and *LAST0, and likewise for file 1 in *FIRST1 and *LAST1.
+   Note that these are internal line numbers that count from 0.
+
+   If no lines from file 0 are deleted, then FIRST0 is LAST0+1.
+
+   Return UNCHANGED if only ignorable lines are inserted or deleted,
+   OLD if lines of file 0 are deleted,
+   NEW if lines of file 1 are inserted,
+   and CHANGED if both kinds of changes are found. */
+
+enum changes
+analyze_hunk (struct change *hunk,
+	      lin *first0, lin *last0,
+	      lin *first1, lin *last1)
+{
+  struct change *next;
+  lin l0, l1;
+  lin show_from, show_to;
+  lin i;
+  bool trivial = ignore_blank_lines || ignore_regexp.fastmap;
+  size_t trivial_length = ignore_blank_lines - 1;
+    /* If 0, ignore zero-length lines;
+       if SIZE_MAX, do not ignore lines just because of their length.  */
+  bool skip_leading_white_space =
+    (ignore_blank_lines && IGNORE_SPACE_CHANGE <= ignore_white_space);
+
+  char const * const *linbuf0 = files[0].linbuf;  /* Help the compiler.  */
+  char const * const *linbuf1 = files[1].linbuf;
+
+  show_from = show_to = 0;
+
+  *first0 = hunk->line0;
+  *first1 = hunk->line1;
+
+  next = hunk;
+  do
+    {
+      l0 = next->line0 + next->deleted - 1;
+      l1 = next->line1 + next->inserted - 1;
+      show_from += next->deleted;
+      show_to += next->inserted;
+
+      for (i = next->line0; i <= l0 && trivial; i++)
+	{
+	  char const *line = linbuf0[i];
+	  char const *newline = linbuf0[i + 1] - 1;
+	  size_t len = newline - line;
+	  char const *p = line;
+	  if (skip_leading_white_space)
+	    while (isspace ((unsigned char) *p) && *p != '\n')
+	      p++;
+	  if (newline - p != trivial_length
+	      && (! ignore_regexp.fastmap
+		  || re_search (&ignore_regexp, line, len, 0, len, 0) < 0))
+	    trivial = 0;
+	}
+
+      for (i = next->line1; i <= l1 && trivial; i++)
+	{
+	  char const *line = linbuf1[i];
+	  char const *newline = linbuf1[i + 1] - 1;
+	  size_t len = newline - line;
+	  char const *p = line;
+	  if (skip_leading_white_space)
+	    while (isspace ((unsigned char) *p) && *p != '\n')
+	      p++;
+	  if (newline - p != trivial_length
+	      && (! ignore_regexp.fastmap
+		  || re_search (&ignore_regexp, line, len, 0, len, 0) < 0))
+	    trivial = 0;
+	}
+    }
+  while ((next = next->link) != 0);
+
+  *last0 = l0;
+  *last1 = l1;
+
+  /* If all inserted or deleted lines are ignorable,
+     tell the caller to ignore this hunk.  */
+
+  if (trivial)
+    return UNCHANGED;
+
+  return (show_from ? OLD : UNCHANGED) | (show_to ? NEW : UNCHANGED);
+}
+
+/* Concatenate three strings, returning a newly malloc'd string.  */
+
+char *
+concat (char const *s1, char const *s2, char const *s3)
+{
+  char *new = xmalloc (strlen (s1) + strlen (s2) + strlen (s3) + 1);
+  sprintf (new, "%s%s%s", s1, s2, s3);
+  return new;
+}
+
+/* Yield a new block of SIZE bytes, initialized to zero.  */
+
+void *
+zalloc (size_t size)
+{
+  void *p = xmalloc (size);
+  memset (p, 0, size);
+  return p;
+}
+
+/* Yield the newly malloc'd pathname
+   of the file in DIR whose filename is FILE.  */
+
+char *
+dir_file_pathname (char const *dir, char const *file)
+{
+  char const *base = last_component (dir);
+  size_t baselen = base_len (base);
+  bool omit_slash = baselen == 0 || base[baselen - 1] == '/';
+  return concat (dir, "/" + omit_slash, file);
+}
+
+void
+debug_script (struct change *sp)
+{
+  fflush (stdout);
+
+  for (; sp; sp = sp->link)
+    {
+      long int line0 = sp->line0;
+      long int line1 = sp->line1;
+      long int deleted = sp->deleted;
+      long int inserted = sp->inserted;
+      fprintf (stderr, "%3ld %3ld delete %ld insert %ld\n",
+	       line0, line1, deleted, inserted);
+    }
+
+  fflush (stderr);
+}
diff --git a/diffutils-3.0/Makefile.am b/diffutils-3.0/Makefile.am
new file mode 100644
index 0000000..48fbf7d
--- /dev/null
+++ b/diffutils-3.0/Makefile.am
@@ -0,0 +1,55 @@
+# Automakefile for GNU diffutils programs.
+
+# Copyright (C) 2001-2002, 2006, 2009-2010 Free Software Foundation, Inc.
+
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+
+# You should have received a copy of the GNU General Public License
+# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+bin_PROGRAMS = cmp diff diff3 sdiff
+
+noinst_HEADERS = system.h
+
+localedir = $(datadir)/locale
+
+AM_CPPFLAGS = -I../lib -I$(top_srcdir)/lib
+AM_CFLAGS = $(WARN_CFLAGS) $(WERROR_CFLAGS)
+
+LDADD = \
+  ../lib/libdiffutils.a \
+  $(LIBCSTACK) \
+  $(LIBINTL) \
+  $(LIBICONV) \
+  $(LIBSIGSEGV) \
+  $(LIB_CLOCK_GETTIME)
+
+diff_LDADD = $(LDADD)
+cmp_LDADD = $(LDADD)
+sdiff_LDADD = $(LDADD)
+diff3_LDADD = $(LDADD)
+
+cmp_SOURCES = cmp.c
+diff3_SOURCES = diff3.c
+sdiff_SOURCES = sdiff.c
+diff_SOURCES = \
+  analyze.c context.c diff.c diff.h dir.c ed.c ifdef.c io.c \
+  normal.c side.c util.c
+
+MOSTLYCLEANFILES = paths.h paths.ht
+
+cmp.$(OBJEXT) diff3.$(OBJEXT) diff.$(OBJEXT) sdiff.$(OBJEXT): paths.h
+
+gdiff = `echo diff|sed '$(transform)'`
+BUILT_SOURCES = paths.h
+paths.h: Makefile.am
+	$(AM_V_GEN)(echo '#define DEFAULT_DIFF_PROGRAM "'$(gdiff)'"' && \
+	  echo '#define LOCALEDIR "$(localedir)"') >$@t && mv $@t $@
diff --git a/diffutils-3.0/analyze.c b/diffutils-3.0/analyze.c
new file mode 100644
index 0000000..e797248
--- /dev/null
+++ b/diffutils-3.0/analyze.c
@@ -0,0 +1,723 @@
+/* Analyze file differences for GNU DIFF.
+
+   Copyright (C) 1988-1989, 1992-1995, 1998, 2001-2002, 2004, 2006-2007,
+   2009-2010 Free Software Foundation, Inc.
+
+   This file is part of GNU DIFF.
+
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+#include "diff.h"
+#include <cmpbuf.h>
+#include <error.h>
+#include <file-type.h>
+#include <xalloc.h>
+
+/* The core of the Diff algorithm.  */
+#define ELEMENT lin
+#define EQUAL(x,y) ((x) == (y))
+#define OFFSET lin
+#define EXTRA_CONTEXT_FIELDS /* none */
+#define NOTE_DELETE(c, xoff) (files[0].changed[files[0].realindexes[xoff]] = 1)
+#define NOTE_INSERT(c, yoff) (files[1].changed[files[1].realindexes[yoff]] = 1)
+#define USE_HEURISTIC 1
+#include <diffseq.h>
+
+/* Discard lines from one file that have no matches in the other file.
+
+   A line which is discarded will not be considered by the actual
+   comparison algorithm; it will be as if that line were not in the file.
+   The file's `realindexes' table maps virtual line numbers
+   (which don't count the discarded lines) into real line numbers;
+   this is how the actual comparison algorithm produces results
+   that are comprehensible when the discarded lines are counted.
+
+   When we discard a line, we also mark it as a deletion or insertion
+   so that it will be printed in the output.  */
+
+static void
+discard_confusing_lines (struct file_data filevec[])
+{
+  int f;
+  lin i;
+  char *discarded[2];
+  lin *equiv_count[2];
+  lin *p;
+
+  /* Allocate our results.  */
+  p = xmalloc ((filevec[0].buffered_lines + filevec[1].buffered_lines)
+	       * (2 * sizeof *p));
+  for (f = 0; f < 2; f++)
+    {
+      filevec[f].undiscarded = p;  p += filevec[f].buffered_lines;
+      filevec[f].realindexes = p;  p += filevec[f].buffered_lines;
+    }
+
+  /* Set up equiv_count[F][I] as the number of lines in file F
+     that fall in equivalence class I.  */
+
+  p = zalloc (filevec[0].equiv_max * (2 * sizeof *p));
+  equiv_count[0] = p;
+  equiv_count[1] = p + filevec[0].equiv_max;
+
+  for (i = 0; i < filevec[0].buffered_lines; ++i)
+    ++equiv_count[0][filevec[0].equivs[i]];
+  for (i = 0; i < filevec[1].buffered_lines; ++i)
+    ++equiv_count[1][filevec[1].equivs[i]];
+
+  /* Set up tables of which lines are going to be discarded.  */
+
+  discarded[0] = zalloc (filevec[0].buffered_lines
+			 + filevec[1].buffered_lines);
+  discarded[1] = discarded[0] + filevec[0].buffered_lines;
+
+  /* Mark to be discarded each line that matches no line of the other file.
+     If a line matches many lines, mark it as provisionally discardable.  */
+
+  for (f = 0; f < 2; f++)
+    {
+      size_t end = filevec[f].buffered_lines;
+      char *discards = discarded[f];
+      lin *counts = equiv_count[1 - f];
+      lin *equivs = filevec[f].equivs;
+      size_t many = 5;
+      size_t tem = end / 64;
+
+      /* Multiply MANY by approximate square root of number of lines.
+	 That is the threshold for provisionally discardable lines.  */
+      while ((tem = tem >> 2) > 0)
+	many *= 2;
+
+      for (i = 0; i < end; i++)
+	{
+	  lin nmatch;
+	  if (equivs[i] == 0)
+	    continue;
+	  nmatch = counts[equivs[i]];
+	  if (nmatch == 0)
+	    discards[i] = 1;
+	  else if (nmatch > many)
+	    discards[i] = 2;
+	}
+    }
+
+  /* Don't really discard the provisional lines except when they occur
+     in a run of discardables, with nonprovisionals at the beginning
+     and end.  */
+
+  for (f = 0; f < 2; f++)
+    {
+      lin end = filevec[f].buffered_lines;
+      register char *discards = discarded[f];
+
+      for (i = 0; i < end; i++)
+	{
+	  /* Cancel provisional discards not in middle of run of discards.  */
+	  if (discards[i] == 2)
+	    discards[i] = 0;
+	  else if (discards[i] != 0)
+	    {
+	      /* We have found a nonprovisional discard.  */
+	      register lin j;
+	      lin length;
+	      lin provisional = 0;
+
+	      /* Find end of this run of discardable lines.
+		 Count how many are provisionally discardable.  */
+	      for (j = i; j < end; j++)
+		{
+		  if (discards[j] == 0)
+		    break;
+		  if (discards[j] == 2)
+		    ++provisional;
+		}
+
+	      /* Cancel provisional discards at end, and shrink the run.  */
+	      while (j > i && discards[j - 1] == 2)
+		discards[--j] = 0, --provisional;
+
+	      /* Now we have the length of a run of discardable lines
+		 whose first and last are not provisional.  */
+	      length = j - i;
+
+	      /* If 1/4 of the lines in the run are provisional,
+		 cancel discarding of all provisional lines in the run.  */
+	      if (provisional * 4 > length)
+		{
+		  while (j > i)
+		    if (discards[--j] == 2)
+		      discards[j] = 0;
+		}
+	      else
+		{
+		  register lin consec;
+		  lin minimum = 1;
+		  lin tem = length >> 2;
+
+		  /* MINIMUM is approximate square root of LENGTH/4.
+		     A subrun of two or more provisionals can stand
+		     when LENGTH is at least 16.
+		     A subrun of 4 or more can stand when LENGTH >= 64.  */
+		  while (0 < (tem >>= 2))
+		    minimum <<= 1;
+		  minimum++;
+
+		  /* Cancel any subrun of MINIMUM or more provisionals
+		     within the larger run.  */
+		  for (j = 0, consec = 0; j < length; j++)
+		    if (discards[i + j] != 2)
+		      consec = 0;
+		    else if (minimum == ++consec)
+		      /* Back up to start of subrun, to cancel it all.  */
+		      j -= consec;
+		    else if (minimum < consec)
+		      discards[i + j] = 0;
+
+		  /* Scan from beginning of run
+		     until we find 3 or more nonprovisionals in a row
+		     or until the first nonprovisional at least 8 lines in.
+		     Until that point, cancel any provisionals.  */
+		  for (j = 0, consec = 0; j < length; j++)
+		    {
+		      if (j >= 8 && discards[i + j] == 1)
+			break;
+		      if (discards[i + j] == 2)
+			consec = 0, discards[i + j] = 0;
+		      else if (discards[i + j] == 0)
+			consec = 0;
+		      else
+			consec++;
+		      if (consec == 3)
+			break;
+		    }
+
+		  /* I advances to the last line of the run.  */
+		  i += length - 1;
+
+		  /* Same thing, from end.  */
+		  for (j = 0, consec = 0; j < length; j++)
+		    {
+		      if (j >= 8 && discards[i - j] == 1)
+			break;
+		      if (discards[i - j] == 2)
+			consec = 0, discards[i - j] = 0;
+		      else if (discards[i - j] == 0)
+			consec = 0;
+		      else
+			consec++;
+		      if (consec == 3)
+			break;
+		    }
+		}
+	    }
+	}
+    }
+
+  /* Actually discard the lines. */
+  for (f = 0; f < 2; f++)
+    {
+      char *discards = discarded[f];
+      lin end = filevec[f].buffered_lines;
+      lin j = 0;
+      for (i = 0; i < end; ++i)
+	if (minimal || discards[i] == 0)
+	  {
+	    filevec[f].undiscarded[j] = filevec[f].equivs[i];
+	    filevec[f].realindexes[j++] = i;
+	  }
+	else
+	  filevec[f].changed[i] = 1;
+      filevec[f].nondiscarded_lines = j;
+    }
+
+  free (discarded[0]);
+  free (equiv_count[0]);
+}
+
+/* Adjust inserts/deletes of identical lines to join changes
+   as much as possible.
+
+   We do something when a run of changed lines include a
+   line at one end and have an excluded, identical line at the other.
+   We are free to choose which identical line is included.
+   `compareseq' usually chooses the one at the beginning,
+   but usually it is cleaner to consider the following identical line
+   to be the "change".  */
+
+static void
+shift_boundaries (struct file_data filevec[])
+{
+  int f;
+
+  for (f = 0; f < 2; f++)
+    {
+      char *changed = filevec[f].changed;
+      char *other_changed = filevec[1 - f].changed;
+      lin const *equivs = filevec[f].equivs;
+      lin i = 0;
+      lin j = 0;
+      lin i_end = filevec[f].buffered_lines;
+
+      while (1)
+	{
+	  lin runlength, start, corresponding;
+
+	  /* Scan forwards to find beginning of another run of changes.
+	     Also keep track of the corresponding point in the other file.  */
+
+	  while (i < i_end && !changed[i])
+	    {
+	      while (other_changed[j++])
+		continue;
+	      i++;
+	    }
+
+	  if (i == i_end)
+	    break;
+
+	  start = i;
+
+	  /* Find the end of this run of changes.  */
+
+	  while (changed[++i])
+	    continue;
+	  while (other_changed[j])
+	    j++;
+
+	  do
+	    {
+	      /* Record the length of this run of changes, so that
+		 we can later determine whether the run has grown.  */
+	      runlength = i - start;
+
+	      /* Move the changed region back, so long as the
+		 previous unchanged line matches the last changed one.
+		 This merges with previous changed regions.  */
+
+	      while (start && equivs[start - 1] == equivs[i - 1])
+		{
+		  changed[--start] = 1;
+		  changed[--i] = 0;
+		  while (changed[start - 1])
+		    start--;
+		  while (other_changed[--j])
+		    continue;
+		}
+
+	      /* Set CORRESPONDING to the end of the changed run, at the last
+		 point where it corresponds to a changed run in the other file.
+		 CORRESPONDING == I_END means no such point has been found.  */
+	      corresponding = other_changed[j - 1] ? i : i_end;
+
+	      /* Move the changed region forward, so long as the
+		 first changed line matches the following unchanged one.
+		 This merges with following changed regions.
+		 Do this second, so that if there are no merges,
+		 the changed region is moved forward as far as possible.  */
+
+	      while (i != i_end && equivs[start] == equivs[i])
+		{
+		  changed[start++] = 0;
+		  changed[i++] = 1;
+		  while (changed[i])
+		    i++;
+		  while (other_changed[++j])
+		    corresponding = i;
+		}
+	    }
+	  while (runlength != i - start);
+
+	  /* If possible, move the fully-merged run of changes
+	     back to a corresponding run in the other file.  */
+
+	  while (corresponding < i)
+	    {
+	      changed[--start] = 1;
+	      changed[--i] = 0;
+	      while (other_changed[--j])
+		continue;
+	    }
+	}
+    }
+}
+
+/* Cons an additional entry onto the front of an edit script OLD.
+   LINE0 and LINE1 are the first affected lines in the two files (origin 0).
+   DELETED is the number of lines deleted here from file 0.
+   INSERTED is the number of lines inserted here in file 1.
+
+   If DELETED is 0 then LINE0 is the number of the line before
+   which the insertion was done; vice versa for INSERTED and LINE1.  */
+
+static struct change *
+add_change (lin line0, lin line1, lin deleted, lin inserted,
+	    struct change *old)
+{
+  struct change *new = xmalloc (sizeof *new);
+
+  new->line0 = line0;
+  new->line1 = line1;
+  new->inserted = inserted;
+  new->deleted = deleted;
+  new->link = old;
+  return new;
+}
+
+/* Scan the tables of which lines are inserted and deleted,
+   producing an edit script in reverse order.  */
+
+static struct change *
+build_reverse_script (struct file_data const filevec[])
+{
+  struct change *script = 0;
+  char *changed0 = filevec[0].changed;
+  char *changed1 = filevec[1].changed;
+  lin len0 = filevec[0].buffered_lines;
+  lin len1 = filevec[1].buffered_lines;
+
+  /* Note that changedN[lenN] does exist, and is 0.  */
+
+  lin i0 = 0, i1 = 0;
+
+  while (i0 < len0 || i1 < len1)
+    {
+      if (changed0[i0] | changed1[i1])
+	{
+	  lin line0 = i0, line1 = i1;
+
+	  /* Find # lines changed here in each file.  */
+	  while (changed0[i0]) ++i0;
+	  while (changed1[i1]) ++i1;
+
+	  /* Record this change.  */
+	  script = add_change (line0, line1, i0 - line0, i1 - line1, script);
+	}
+
+      /* We have reached lines in the two files that match each other.  */
+      i0++, i1++;
+    }
+
+  return script;
+}
+
+/* Scan the tables of which lines are inserted and deleted,
+   producing an edit script in forward order.  */
+
+static struct change *
+build_script (struct file_data const filevec[])
+{
+  struct change *script = 0;
+  char *changed0 = filevec[0].changed;
+  char *changed1 = filevec[1].changed;
+  lin i0 = filevec[0].buffered_lines, i1 = filevec[1].buffered_lines;
+
+  /* Note that changedN[-1] does exist, and is 0.  */
+
+  while (i0 >= 0 || i1 >= 0)
+    {
+      if (changed0[i0 - 1] | changed1[i1 - 1])
+	{
+	  lin line0 = i0, line1 = i1;
+
+	  /* Find # lines changed here in each file.  */
+	  while (changed0[i0 - 1]) --i0;
+	  while (changed1[i1 - 1]) --i1;
+
+	  /* Record this change.  */
+	  script = add_change (i0, i1, line0 - i0, line1 - i1, script);
+	}
+
+      /* We have reached lines in the two files that match each other.  */
+      i0--, i1--;
+    }
+
+  return script;
+}
+
+/* If CHANGES, briefly report that two files differed.
+   Return 2 if trouble, CHANGES otherwise.  */
+static int
+briefly_report (int changes, struct file_data const filevec[])
+{
+  if (changes)
+    {
+      char const *label0 = file_label[0] ? file_label[0] : filevec[0].name;
+      char const *label1 = file_label[1] ? file_label[1] : filevec[1].name;
+
+      if (brief)
+	message ("Files %s and %s differ\n", label0, label1);
+      else
+	{
+	  message ("Binary files %s and %s differ\n", label0, label1);
+	  changes = 2;
+	}
+    }
+
+  return changes;
+}
+
+/* Report the differences of two files.  */
+int
+diff_2_files (struct comparison *cmp)
+{
+  int f;
+  struct change *e, *p;
+  struct change *script;
+  int changes;
+
+
+  /* If we have detected that either file is binary,
+     compare the two files as binary.  This can happen
+     only when the first chunk is read.
+     Also, --brief without any --ignore-* options means
+     we can speed things up by treating the files as binary.  */
+
+  if (read_files (cmp->file, files_can_be_treated_as_binary))
+    {
+      /* Files with different lengths must be different.  */
+      if (cmp->file[0].stat.st_size != cmp->file[1].stat.st_size
+	  && (cmp->file[0].desc < 0 || S_ISREG (cmp->file[0].stat.st_mode))
+	  && (cmp->file[1].desc < 0 || S_ISREG (cmp->file[1].stat.st_mode)))
+	changes = 1;
+
+      /* Standard input equals itself.  */
+      else if (cmp->file[0].desc == cmp->file[1].desc)
+	changes = 0;
+
+      else
+	/* Scan both files, a buffer at a time, looking for a difference.  */
+	{
+	  /* Allocate same-sized buffers for both files.  */
+	  size_t lcm_max = PTRDIFF_MAX - 1;
+	  size_t buffer_size =
+	    buffer_lcm (sizeof (word),
+			buffer_lcm (STAT_BLOCKSIZE (cmp->file[0].stat),
+				    STAT_BLOCKSIZE (cmp->file[1].stat),
+				    lcm_max),
+			lcm_max);
+	  for (f = 0; f < 2; f++)
+	    cmp->file[f].buffer = xrealloc (cmp->file[f].buffer, buffer_size);
+
+	  for (;; cmp->file[0].buffered = cmp->file[1].buffered = 0)
+	    {
+	      /* Read a buffer's worth from both files.  */
+	      for (f = 0; f < 2; f++)
+		if (0 <= cmp->file[f].desc)
+		  file_block_read (&cmp->file[f],
+				   buffer_size - cmp->file[f].buffered);
+
+	      /* If the buffers differ, the files differ.  */
+	      if (cmp->file[0].buffered != cmp->file[1].buffered
+		  || memcmp (cmp->file[0].buffer,
+			     cmp->file[1].buffer,
+			     cmp->file[0].buffered))
+		{
+		  changes = 1;
+		  break;
+		}
+
+	      /* If we reach end of file, the files are the same.  */
+	      if (cmp->file[0].buffered != buffer_size)
+		{
+		  changes = 0;
+		  break;
+		}
+	    }
+	}
+
+      changes = briefly_report (changes, cmp->file);
+    }
+  else
+    {
+      struct context ctxt;
+      lin diags;
+      lin too_expensive;
+
+      /* Allocate vectors for the results of comparison:
+	 a flag for each line of each file, saying whether that line
+	 is an insertion or deletion.
+	 Allocate an extra element, always 0, at each end of each vector.  */
+
+      size_t s = cmp->file[0].buffered_lines + cmp->file[1].buffered_lines + 4;
+      char *flag_space = zalloc (s);
+      cmp->file[0].changed = flag_space + 1;
+      cmp->file[1].changed = flag_space + cmp->file[0].buffered_lines + 3;
+
+      /* Some lines are obviously insertions or deletions
+	 because they don't match anything.  Detect them now, and
+	 avoid even thinking about them in the main comparison algorithm.  */
+
+      discard_confusing_lines (cmp->file);
+
+      /* Now do the main comparison algorithm, considering just the
+	 undiscarded lines.  */
+
+      ctxt.xvec = cmp->file[0].undiscarded;
+      ctxt.yvec = cmp->file[1].undiscarded;
+      diags = (cmp->file[0].nondiscarded_lines
+	       + cmp->file[1].nondiscarded_lines + 3);
+      ctxt.fdiag = xmalloc (diags * (2 * sizeof *ctxt.fdiag));
+      ctxt.bdiag = ctxt.fdiag + diags;
+      ctxt.fdiag += cmp->file[1].nondiscarded_lines + 1;
+      ctxt.bdiag += cmp->file[1].nondiscarded_lines + 1;
+
+      ctxt.heuristic = speed_large_files;
+
+      /* Set TOO_EXPENSIVE to be approximate square root of input size,
+	 bounded below by 256.  */
+      too_expensive = 1;
+      for (;  diags != 0;  diags >>= 2)
+	too_expensive <<= 1;
+      ctxt.too_expensive = MAX (256, too_expensive);
+
+      files[0] = cmp->file[0];
+      files[1] = cmp->file[1];
+
+      compareseq (0, cmp->file[0].nondiscarded_lines,
+		  0, cmp->file[1].nondiscarded_lines, minimal, &ctxt);
+
+      free (ctxt.fdiag - (cmp->file[1].nondiscarded_lines + 1));
+
+      /* Modify the results slightly to make them prettier
+	 in cases where that can validly be done.  */
+
+      shift_boundaries (cmp->file);
+
+      /* Get the results of comparison in the form of a chain
+	 of `struct change's -- an edit script.  */
+
+      if (output_style == OUTPUT_ED)
+	script = build_reverse_script (cmp->file);
+      else
+	script = build_script (cmp->file);
+
+      /* Set CHANGES if we had any diffs.
+	 If some changes are ignored, we must scan the script to decide.  */
+      if (ignore_blank_lines || ignore_regexp.fastmap)
+	{
+	  struct change *next = script;
+	  changes = 0;
+
+	  while (next && changes == 0)
+	    {
+	      struct change *this, *end;
+	      lin first0, last0, first1, last1;
+
+	      /* Find a set of changes that belong together.  */
+	      this = next;
+	      end = find_change (next);
+
+	      /* Disconnect them from the rest of the changes, making them
+		 a hunk, and remember the rest for next iteration.  */
+	      next = end->link;
+	      end->link = 0;
+
+	      /* Determine whether this hunk is really a difference.  */
+	      if (analyze_hunk (this, &first0, &last0, &first1, &last1))
+		changes = 1;
+
+	      /* Reconnect the script so it will all be freed properly.  */
+	      end->link = next;
+	    }
+	}
+      else
+	changes = (script != 0);
+
+      if (brief)
+	changes = briefly_report (changes, cmp->file);
+      else
+	{
+	  if (changes || !no_diff_means_no_output)
+	    {
+	      /* Record info for starting up output,
+		 to be used if and when we have some output to print.  */
+	      setup_output (file_label[0] ? file_label[0] : cmp->file[0].name,
+			    file_label[1] ? file_label[1] : cmp->file[1].name,
+			    cmp->parent != 0);
+
+	      switch (output_style)
+		{
+		case OUTPUT_CONTEXT:
+		  print_context_script (script, false);
+		  break;
+
+		case OUTPUT_UNIFIED:
+		  print_context_script (script, true);
+		  break;
+
+		case OUTPUT_ED:
+		  print_ed_script (script);
+		  break;
+
+		case OUTPUT_FORWARD_ED:
+		  pr_forward_ed_script (script);
+		  break;
+
+		case OUTPUT_RCS:
+		  print_rcs_script (script);
+		  break;
+
+		case OUTPUT_NORMAL:
+		  print_normal_script (script);
+		  break;
+
+		case OUTPUT_IFDEF:
+		  print_ifdef_script (script);
+		  break;
+
+		case OUTPUT_SDIFF:
+		  print_sdiff_script (script);
+		  break;
+
+		default:
+		  abort ();
+		}
+
+	      finish_output ();
+	    }
+	}
+
+      free (cmp->file[0].undiscarded);
+
+      free (flag_space);
+
+      for (f = 0; f < 2; f++)
+	{
+	  free (cmp->file[f].equivs);
+	  free (cmp->file[f].linbuf + cmp->file[f].linbuf_base);
+	}
+
+      for (e = script; e; e = p)
+	{
+	  p = e->link;
+	  free (e);
+	}
+
+      if (! ROBUST_OUTPUT_STYLE (output_style))
+	for (f = 0; f < 2; ++f)
+	  if (cmp->file[f].missing_newline)
+	    {
+	      error (0, 0, "%s: %s\n",
+		     file_label[f] ? file_label[f] : cmp->file[f].name,
+		     _("No newline at end of file"));
+	      changes = 2;
+	    }
+    }
+
+  if (cmp->file[0].buffer != cmp->file[1].buffer)
+    free (cmp->file[0].buffer);
+  free (cmp->file[1].buffer);
+
+  return changes;
+}
diff --git a/diffutils-3.0/cmp b/diffutils-3.0/cmp
new file mode 100755
index 0000000000000000000000000000000000000000..4e05caa794e9a4a3a3739057ff1613cd1aeac29f
GIT binary patch
literal 172081
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
b?A>HdDHBC~4^XOuS29cOc6h>izW)CJXRL$`

literal 0
HcmV?d00001

diff --git a/diffutils-3.0/cmp.c b/diffutils-3.0/cmp.c
new file mode 100644
index 0000000..ee3cde6
--- /dev/null
+++ b/diffutils-3.0/cmp.c
@@ -0,0 +1,685 @@
+/* cmp - compare two files byte by byte
+
+   Copyright (C) 1990-1996, 1998, 2001-2002, 2004, 2006-2007, 2009-2010 Free
+   Software Foundation, Inc.
+
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+#include "system.h"
+#include "paths.h"
+
+#include <stdio.h>
+
+#include <c-stack.h>
+#include <cmpbuf.h>
+#include <error.h>
+#include <exitfail.h>
+#include <file-type.h>
+#include <getopt.h>
+#include <hard-locale.h>
+#include <inttostr.h>
+#include <progname.h>
+#include <unlocked-io.h>
+#include <version-etc.h>
+#include <xalloc.h>
+#include <xfreopen.h>
+#include <xstrtol.h>
+
+/* The official name of this program (e.g., no `g' prefix).  */
+#define PROGRAM_NAME "cmp"
+
+#define AUTHORS \
+  proper_name_utf8 ("Torbjorn Granlund", "Torbj\303\266rn Granlund"), \
+  proper_name ("David MacKenzie")
+
+#if defined LC_MESSAGES && ENABLE_NLS
+# define hard_locale_LC_MESSAGES hard_locale (LC_MESSAGES)
+#else
+# define hard_locale_LC_MESSAGES 0
+#endif
+
+static int cmp (void);
+static off_t file_position (int);
+static size_t block_compare (word const *, word const *);
+static size_t block_compare_and_count (word const *, word const *, off_t *);
+static void sprintc (char *, unsigned char);
+
+/* Filenames of the compared files.  */
+static char const *file[2];
+
+/* File descriptors of the files.  */
+static int file_desc[2];
+
+/* Status of the files.  */
+static struct stat stat_buf[2];
+
+/* Read buffers for the files.  */
+static word *buffer[2];
+
+/* Optimal block size for the files.  */
+static size_t buf_size;
+
+/* Initial prefix to ignore for each file.  */
+static off_t ignore_initial[2];
+
+/* Number of bytes to compare.  */
+static uintmax_t bytes = UINTMAX_MAX;
+
+/* Output format.  */
+static enum comparison_type
+  {
+    type_first_diff,	/* Print the first difference.  */
+    type_all_diffs,	/* Print all differences.  */
+    type_no_stdout,	/* Do not output to stdout; only stderr.  */
+    type_status		/* Exit status only.  */
+  } comparison_type;
+
+/* If nonzero, print values of bytes quoted like cat -t does. */
+static bool opt_print_bytes;
+
+/* Values for long options that do not have single-letter equivalents.  */
+enum
+{
+  HELP_OPTION = CHAR_MAX + 1
+};
+
+static struct option const long_options[] =
+{
+  {"print-bytes", 0, 0, 'b'},
+  {"print-chars", 0, 0, 'c'}, /* obsolescent as of diffutils 2.7.3 */
+  {"ignore-initial", 1, 0, 'i'},
+  {"verbose", 0, 0, 'l'},
+  {"bytes", 1, 0, 'n'},
+  {"silent", 0, 0, 's'},
+  {"quiet", 0, 0, 's'},
+  {"version", 0, 0, 'v'},
+  {"help", 0, 0, HELP_OPTION},
+  {0, 0, 0, 0}
+};
+
+static void try_help (char const *, char const *) __attribute__((noreturn));
+static void
+try_help (char const *reason_msgid, char const *operand)
+{
+  if (reason_msgid)
+    error (0, 0, _(reason_msgid), operand);
+  error (EXIT_TROUBLE, 0,
+	 _("Try '%s --help' for more information."), program_name);
+  abort ();
+}
+
+static char const valid_suffixes[] = "kKMGTPEZY0";
+
+/* Update ignore_initial[F] according to the result of parsing an
+   *operand ARGPTR of --ignore-initial, updating *ARGPTR to point
+   *after the operand.  If DELIMITER is nonzero, the operand may be
+   *followed by DELIMITER; otherwise it must be null-terminated.  */
+static void
+specify_ignore_initial (int f, char **argptr, char delimiter)
+{
+  uintmax_t val;
+  char const *arg = *argptr;
+  strtol_error e = xstrtoumax (arg, argptr, 0, &val, valid_suffixes);
+  if (! (e == LONGINT_OK
+	 || (e == LONGINT_INVALID_SUFFIX_CHAR && **argptr == delimiter))
+      || TYPE_MAXIMUM (off_t) < val)
+    try_help ("invalid --ignore-initial value '%s'", arg);
+  if (ignore_initial[f] < val)
+    ignore_initial[f] = val;
+}
+
+/* Specify the output format.  */
+static void
+specify_comparison_type (enum comparison_type t)
+{
+  if (comparison_type && comparison_type != t)
+    try_help ("options -l and -s are incompatible", 0);
+  comparison_type = t;
+}
+
+static void
+check_stdout (void)
+{
+  if (ferror (stdout))
+    error (EXIT_TROUBLE, 0, "%s", _("write failed"));
+  else if (fclose (stdout) != 0)
+    error (EXIT_TROUBLE, errno, "%s", _("standard output"));
+}
+
+static char const * const option_help_msgid[] = {
+  N_("-b  --print-bytes  Print differing bytes."),
+  N_("-i SKIP  --ignore-initial=SKIP  Skip the first SKIP bytes of input."),
+  N_("-i SKIP1:SKIP2  --ignore-initial=SKIP1:SKIP2"),
+  N_("  Skip the first SKIP1 bytes of FILE1 and the first SKIP2 bytes of FILE2."),
+  N_("-l  --verbose  Output byte numbers and values of all differing bytes."),
+  N_("-n LIMIT  --bytes=LIMIT  Compare at most LIMIT bytes."),
+  N_("-s  --quiet  --silent  Output nothing; yield exit status only."),
+  N_("-v  --version  Output version info."),
+  N_("--help  Output this help."),
+  0
+};
+
+static void
+usage (void)
+{
+  char const * const *p;
+
+  printf (_("Usage: %s [OPTION]... FILE1 [FILE2 [SKIP1 [SKIP2]]]\n"),
+	  program_name);
+  printf ("%s\n\n", _("Compare two files byte by byte."));
+  for (p = option_help_msgid;  *p;  p++)
+    printf ("  %s\n", _(*p));
+  printf ("\n%s\n%s\n\n%s\n%s\n",
+	  _("SKIP1 and SKIP2 are the number of bytes to skip in each file."),
+	  _("SKIP values may be followed by the following multiplicative suffixes:\n\
+kB 1000, K 1024, MB 1,000,000, M 1,048,576,\n\
+GB 1,000,000,000, G 1,073,741,824, and so on for T, P, E, Z, Y."),
+	  _("If a FILE is '-' or missing, read standard input."),
+	  _("Exit status is 0 if inputs are the same, 1 if different, 2 if trouble."));
+  emit_bug_reporting_address ();
+}
+
+int
+main (int argc, char **argv)
+{
+  int c, f, exit_status;
+  size_t words_per_buffer;
+
+  exit_failure = EXIT_TROUBLE;
+  initialize_main (&argc, &argv);
+  set_program_name (argv[0]);
+  setlocale (LC_ALL, "");
+  bindtextdomain (PACKAGE, LOCALEDIR);
+  textdomain (PACKAGE);
+  c_stack_action (0);
+
+  /* Parse command line options.  */
+
+  while ((c = getopt_long (argc, argv, "bci:ln:sv", long_options, 0))
+	 != -1)
+    switch (c)
+      {
+      case 'b':
+      case 'c': /* 'c' is obsolescent as of diffutils 2.7.3 */
+	opt_print_bytes = true;
+	break;
+
+      case 'i':
+	specify_ignore_initial (0, &optarg, ':');
+	if (*optarg++ == ':')
+	  specify_ignore_initial (1, &optarg, 0);
+	else if (ignore_initial[1] < ignore_initial[0])
+	  ignore_initial[1] = ignore_initial[0];
+	break;
+
+      case 'l':
+	specify_comparison_type (type_all_diffs);
+	break;
+
+      case 'n':
+	{
+	  uintmax_t n;
+	  if (xstrtoumax (optarg, 0, 0, &n, valid_suffixes) != LONGINT_OK)
+	    try_help ("invalid --bytes value '%s'", optarg);
+	  if (n < bytes)
+	    bytes = n;
+	}
+	break;
+
+      case 's':
+	specify_comparison_type (type_status);
+	break;
+
+      case 'v':
+	version_etc (stdout, PROGRAM_NAME, PACKAGE_NAME, PACKAGE_VERSION,
+		     AUTHORS, (char *) NULL);
+	check_stdout ();
+	return EXIT_SUCCESS;
+
+      case HELP_OPTION:
+	usage ();
+	check_stdout ();
+	return EXIT_SUCCESS;
+
+      default:
+	try_help (0, 0);
+      }
+
+  if (optind == argc)
+    try_help ("missing operand after '%s'", argv[argc - 1]);
+
+  file[0] = argv[optind++];
+  file[1] = optind < argc ? argv[optind++] : "-";
+
+  for (f = 0; f < 2 && optind < argc; f++)
+    {
+      char *arg = argv[optind++];
+      specify_ignore_initial (f, &arg, 0);
+    }
+
+  if (optind < argc)
+    try_help ("extra operand '%s'", argv[optind]);
+
+  for (f = 0; f < 2; f++)
+    {
+      /* If file[1] is "-", treat it first; this avoids a misdiagnostic if
+	 stdin is closed and opening file[0] yields file descriptor 0.  */
+      int f1 = f ^ (STREQ (file[1], "-"));
+
+      /* Two files with the same name and offset are identical.
+	 But wait until we open the file once, for proper diagnostics.  */
+      if (f && ignore_initial[0] == ignore_initial[1]
+	  && file_name_cmp (file[0], file[1]) == 0)
+	return EXIT_SUCCESS;
+
+      if (STREQ (file[f1], "-"))
+	{
+	  file_desc[f1] = STDIN_FILENO;
+	  if (O_BINARY && ! isatty (STDIN_FILENO))
+	    xfreopen (NULL, "rb", stdin);
+	}
+      else
+	file_desc[f1] = open (file[f1], O_RDONLY | O_BINARY, 0);
+
+      if (file_desc[f1] < 0 || fstat (file_desc[f1], stat_buf + f1) != 0)
+	{
+	  if (file_desc[f1] < 0 && comparison_type == type_status)
+	    exit (EXIT_TROUBLE);
+	  else
+	    error (EXIT_TROUBLE, errno, "%s", file[f1]);
+	}
+    }
+
+  /* If the files are links to the same inode and have the same file position,
+     they are identical.  */
+
+  if (0 < same_file (&stat_buf[0], &stat_buf[1])
+      && same_file_attributes (&stat_buf[0], &stat_buf[1])
+      && file_position (0) == file_position (1))
+    return EXIT_SUCCESS;
+
+  /* If output is redirected to the null device, we can avoid some of
+     the work.  */
+
+  if (comparison_type != type_status)
+    {
+      struct stat outstat, nullstat;
+
+      if (fstat (STDOUT_FILENO, &outstat) == 0
+	  && stat (NULL_DEVICE, &nullstat) == 0
+	  && 0 < same_file (&outstat, &nullstat))
+	comparison_type = type_no_stdout;
+    }
+
+  /* If only a return code is needed,
+     and if both input descriptors are associated with plain files,
+     conclude that the files differ if they have different sizes
+     and if more bytes will be compared than are in the smaller file.  */
+
+  if (comparison_type == type_status
+      && S_ISREG (stat_buf[0].st_mode)
+      && S_ISREG (stat_buf[1].st_mode))
+    {
+      off_t s0 = stat_buf[0].st_size - file_position (0);
+      off_t s1 = stat_buf[1].st_size - file_position (1);
+      if (s0 < 0)
+	s0 = 0;
+      if (s1 < 0)
+	s1 = 0;
+      if (s0 != s1 && MIN (s0, s1) < bytes)
+	exit (EXIT_FAILURE);
+    }
+
+  /* Get the optimal block size of the files.  */
+
+  buf_size = buffer_lcm (STAT_BLOCKSIZE (stat_buf[0]),
+			 STAT_BLOCKSIZE (stat_buf[1]),
+			 PTRDIFF_MAX - sizeof (word));
+
+  /* Allocate word-aligned buffers, with space for sentinels at the end.  */
+
+  words_per_buffer = (buf_size + 2 * sizeof (word) - 1) / sizeof (word);
+  buffer[0] = xmalloc (2 * sizeof (word) * words_per_buffer);
+  buffer[1] = buffer[0] + words_per_buffer;
+
+  exit_status = cmp ();
+
+  for (f = 0; f < 2; f++)
+    if (close (file_desc[f]) != 0)
+      error (EXIT_TROUBLE, errno, "%s", file[f]);
+  if (exit_status != EXIT_SUCCESS && comparison_type < type_no_stdout)
+    check_stdout ();
+  exit (exit_status);
+  return exit_status;
+}
+
+/* Compare the two files already open on `file_desc[0]' and `file_desc[1]',
+   using `buffer[0]' and `buffer[1]'.
+   Return EXIT_SUCCESS if identical, EXIT_FAILURE if different,
+   >1 if error.  */
+
+static int
+cmp (void)
+{
+  off_t line_number = 1;	/* Line number (1...) of difference. */
+  off_t byte_number = 1;	/* Byte number (1...) of difference. */
+  uintmax_t remaining = bytes;	/* Remaining number of bytes to compare.  */
+  size_t read0, read1;		/* Number of bytes read from each file. */
+  size_t first_diff;		/* Offset (0...) in buffers of 1st diff. */
+  size_t smaller;		/* The lesser of 'read0' and 'read1'. */
+  word *buffer0 = buffer[0];
+  word *buffer1 = buffer[1];
+  char *buf0 = (char *) buffer0;
+  char *buf1 = (char *) buffer1;
+  int differing = 0;
+  int f;
+  int offset_width IF_LINT (= 0);
+
+  if (comparison_type == type_all_diffs)
+    {
+      off_t byte_number_max = MIN (bytes, TYPE_MAXIMUM (off_t));
+
+      for (f = 0; f < 2; f++)
+	if (S_ISREG (stat_buf[f].st_mode))
+	  {
+	    off_t file_bytes = stat_buf[f].st_size - file_position (f);
+	    if (file_bytes < byte_number_max)
+	      byte_number_max = file_bytes;
+	  }
+
+      for (offset_width = 1; (byte_number_max /= 10) != 0; offset_width++)
+	continue;
+    }
+
+  for (f = 0; f < 2; f++)
+    {
+      off_t ig = ignore_initial[f];
+      if (ig && file_position (f) == -1)
+	{
+	  /* lseek failed; read and discard the ignored initial prefix.  */
+	  do
+	    {
+	      size_t bytes_to_read = MIN (ig, buf_size);
+	      size_t r = block_read (file_desc[f], buf0, bytes_to_read);
+	      if (r != bytes_to_read)
+		{
+		  if (r == SIZE_MAX)
+		    error (EXIT_TROUBLE, errno, "%s", file[f]);
+		  break;
+		}
+	      ig -= r;
+	    }
+	  while (ig);
+	}
+    }
+
+  do
+    {
+      size_t bytes_to_read = buf_size;
+
+      if (remaining != UINTMAX_MAX)
+	{
+	  if (remaining < bytes_to_read)
+	    bytes_to_read = remaining;
+	  remaining -= bytes_to_read;
+	}
+
+      read0 = block_read (file_desc[0], buf0, bytes_to_read);
+      if (read0 == SIZE_MAX)
+	error (EXIT_TROUBLE, errno, "%s", file[0]);
+      read1 = block_read (file_desc[1], buf1, bytes_to_read);
+      if (read1 == SIZE_MAX)
+	error (EXIT_TROUBLE, errno, "%s", file[1]);
+
+      /* Insert sentinels for the block compare.  */
+
+      buf0[read0] = ~buf1[read0];
+      buf1[read1] = ~buf0[read1];
+
+      /* If the line number should be written for differing files,
+	 compare the blocks and count the number of newlines
+	 simultaneously.  */
+      first_diff = (comparison_type == type_first_diff
+		    ? block_compare_and_count (buffer0, buffer1, &line_number)
+		    : block_compare (buffer0, buffer1));
+
+      byte_number += first_diff;
+      smaller = MIN (read0, read1);
+
+      if (first_diff < smaller)
+	{
+	  switch (comparison_type)
+	    {
+	    case type_first_diff:
+	      {
+		char byte_buf[INT_BUFSIZE_BOUND (off_t)];
+		char line_buf[INT_BUFSIZE_BOUND (off_t)];
+		char const *byte_num = offtostr (byte_number, byte_buf);
+		char const *line_num = offtostr (line_number, line_buf);
+		if (!opt_print_bytes)
+		  {
+		    /* See POSIX 1003.1-2001 for this format.  This
+		       message is used only in the POSIX locale, so it
+		       need not be translated.  */
+		    static char const char_message[] =
+		      "%s %s differ: char %s, line %s\n";
+
+		    /* The POSIX rationale recommends using the word
+		       "byte" outside the POSIX locale.  Some gettext
+		       implementations translate even in the POSIX
+		       locale if certain other environment variables
+		       are set, so use "byte" if a translation is
+		       available, or if outside the POSIX locale.  */
+		    static char const byte_msgid[] =
+		      N_("%s %s differ: byte %s, line %s\n");
+		    char const *byte_message = _(byte_msgid);
+		    bool use_byte_message = (byte_message != byte_msgid
+					     || hard_locale_LC_MESSAGES);
+
+		    printf (use_byte_message ? byte_message : char_message,
+			    file[0], file[1], byte_num, line_num);
+		  }
+		else
+		  {
+		    unsigned char c0 = buf0[first_diff];
+		    unsigned char c1 = buf1[first_diff];
+		    char s0[5];
+		    char s1[5];
+		    sprintc (s0, c0);
+		    sprintc (s1, c1);
+		    printf (_("%s %s differ: byte %s, line %s is %3o %s %3o %s\n"),
+			    file[0], file[1], byte_num, line_num,
+			    c0, s0, c1, s1);
+		}
+	      }
+	      /* Fall through.  */
+	    case type_status:
+	      return EXIT_FAILURE;
+
+	    case type_all_diffs:
+	      do
+		{
+		  unsigned char c0 = buf0[first_diff];
+		  unsigned char c1 = buf1[first_diff];
+		  if (c0 != c1)
+		    {
+		      char byte_buf[INT_BUFSIZE_BOUND (off_t)];
+		      char const *byte_num = offtostr (byte_number, byte_buf);
+		      if (!opt_print_bytes)
+			{
+			  /* See POSIX 1003.1-2001 for this format.  */
+			  printf ("%*s %3o %3o\n",
+				  offset_width, byte_num, c0, c1);
+			}
+		      else
+			{
+			  char s0[5];
+			  char s1[5];
+			  sprintc (s0, c0);
+			  sprintc (s1, c1);
+			  printf ("%*s %3o %-4s %3o %s\n",
+				  offset_width, byte_num, c0, s0, c1, s1);
+			}
+		    }
+		  byte_number++;
+		  first_diff++;
+		}
+	      while (first_diff < smaller);
+	      differing = -1;
+	      break;
+
+	    case type_no_stdout:
+	      differing = 1;
+	      break;
+	    }
+	}
+
+      if (read0 != read1)
+	{
+	  if (differing <= 0 && comparison_type != type_status)
+	    {
+	      /* See POSIX 1003.1-2001 for this format.  */
+	      fprintf (stderr, _("cmp: EOF on %s\n"), file[read1 < read0]);
+	    }
+
+	  return EXIT_FAILURE;
+	}
+    }
+  while (differing <= 0 && read0 == buf_size);
+
+  return differing == 0 ? EXIT_SUCCESS : EXIT_FAILURE;
+}
+
+/* Compare two blocks of memory P0 and P1 until they differ,
+   and count the number of '\n' occurrences in the common
+   part of P0 and P1.
+   If the blocks are not guaranteed to be different, put sentinels at the ends
+   of the blocks before calling this function.
+
+   Return the offset of the first byte that differs.
+   Increment *COUNT by the count of '\n' occurrences.  */
+
+static size_t
+block_compare_and_count (word const *p0, word const *p1, off_t *count)
+{
+  word l;		/* One word from first buffer. */
+  word const *l0, *l1;	/* Pointers into each buffer. */
+  char const *c0, *c1;	/* Pointers for finding exact address. */
+  size_t cnt = 0;	/* Number of '\n' occurrences. */
+  word nnnn;		/* Newline, sizeof (word) times.  */
+  int i;
+
+  nnnn = 0;
+  for (i = 0; i < sizeof nnnn; i++)
+    nnnn = (nnnn << CHAR_BIT) | '\n';
+
+  /* Find the rough position of the first difference by reading words,
+     not bytes.  */
+
+  for (l0 = p0, l1 = p1;  (l = *l0) == *l1;  l0++, l1++)
+    {
+      l ^= nnnn;
+      for (i = 0; i < sizeof l; i++)
+	{
+	  unsigned char uc = l;
+	  cnt += ! uc;
+	  l >>= CHAR_BIT;
+	}
+    }
+
+  /* Find the exact differing position (endianness independent).  */
+
+  for (c0 = (char const *) l0, c1 = (char const *) l1;
+       *c0 == *c1;
+       c0++, c1++)
+    cnt += *c0 == '\n';
+
+  *count += cnt;
+  return c0 - (char const *) p0;
+}
+
+/* Compare two blocks of memory P0 and P1 until they differ.
+   If the blocks are not guaranteed to be different, put sentinels at the ends
+   of the blocks before calling this function.
+
+   Return the offset of the first byte that differs.  */
+
+static size_t
+block_compare (word const *p0, word const *p1)
+{
+  word const *l0, *l1;
+  char const *c0, *c1;
+
+  /* Find the rough position of the first difference by reading words,
+     not bytes.  */
+
+  for (l0 = p0, l1 = p1;  *l0 == *l1;  l0++, l1++)
+    continue;
+
+  /* Find the exact differing position (endianness independent).  */
+
+  for (c0 = (char const *) l0, c1 = (char const *) l1;
+       *c0 == *c1;
+       c0++, c1++)
+    continue;
+
+  return c0 - (char const *) p0;
+}
+
+/* Put into BUF the unsigned char C, making unprintable bytes
+   visible by quoting like cat -t does.  */
+
+static void
+sprintc (char *buf, unsigned char c)
+{
+  if (! isprint (c))
+    {
+      if (c >= 128)
+	{
+	  *buf++ = 'M';
+	  *buf++ = '-';
+	  c -= 128;
+	}
+      if (c < 32)
+	{
+	  *buf++ = '^';
+	  c += 64;
+	}
+      else if (c == 127)
+	{
+	  *buf++ = '^';
+	  c = '?';
+	}
+    }
+
+  *buf++ = c;
+  *buf = 0;
+}
+
+/* Position file F to ignore_initial[F] bytes from its initial position,
+   and yield its new position.  Don't try more than once.  */
+
+static off_t
+file_position (int f)
+{
+  static bool positioned[2];
+  static off_t position[2];
+
+  if (! positioned[f])
+    {
+      positioned[f] = true;
+      position[f] = lseek (file_desc[f], ignore_initial[f], SEEK_CUR);
+    }
+  return position[f];
+}
diff --git a/diffutils-3.0/context.c b/diffutils-3.0/context.c
new file mode 100644
index 0000000..0be8cc5
--- /dev/null
+++ b/diffutils-3.0/context.c
@@ -0,0 +1,493 @@
+/* Context-format output routines for GNU DIFF.
+
+   Copyright (C) 1988-1989, 1991-1995, 1998, 2001-2002, 2004, 2006, 2009-2010
+   Free Software Foundation, Inc.
+
+   This file is part of GNU DIFF.
+
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+#include "diff.h"
+#include "c-ctype.h"
+#include <inttostr.h>
+#include <stat-time.h>
+#include <strftime.h>
+
+static char const *find_function (char const * const *, lin);
+static struct change *find_hunk (struct change *);
+static void mark_ignorable (struct change *);
+static void pr_context_hunk (struct change *);
+static void pr_unidiff_hunk (struct change *);
+
+/* Last place find_function started searching from.  */
+static lin find_function_last_search;
+
+/* The value find_function returned when it started searching there.  */
+static lin find_function_last_match;
+
+/* Print a label for a context diff, with a file name and date or a label.  */
+
+static void
+print_context_label (char const *mark,
+		     struct file_data *inf,
+		     char const *label)
+{
+  if (label)
+    fprintf (outfile, "%s %s\n", mark, label);
+  else
+    {
+      char buf[MAX (INT_STRLEN_BOUND (int) + 32,
+		    INT_STRLEN_BOUND (time_t) + 11)];
+      struct tm const *tm = localtime (&inf->stat.st_mtime);
+      int nsec = get_stat_mtime_ns (&inf->stat);
+      if (! (tm && nstrftime (buf, sizeof buf, time_format, tm, 0, nsec)))
+	{
+	  verify (TYPE_IS_INTEGER (time_t));
+	  if (LONG_MIN <= TYPE_MINIMUM (time_t)
+	      && TYPE_MAXIMUM (time_t) <= LONG_MAX)
+	    {
+	      long int sec = inf->stat.st_mtime;
+	      sprintf (buf, "%ld.%.9d", sec, nsec);
+	    }
+	  else if (TYPE_MAXIMUM (time_t) <= INTMAX_MAX)
+	    {
+	      intmax_t sec = inf->stat.st_mtime;
+	      sprintf (buf, "%"PRIdMAX".%.9d", sec, nsec);
+	    }
+	  else
+	    {
+	      uintmax_t sec = inf->stat.st_mtime;
+	      sprintf (buf, "%"PRIuMAX".%.9d", sec, nsec);
+	    }
+	}
+      fprintf (outfile, "%s %s\t%s\n", mark, inf->name, buf);
+    }
+}
+
+/* Print a header for a context diff, with the file names and dates.  */
+
+void
+print_context_header (struct file_data inf[], bool unidiff)
+{
+  if (unidiff)
+    {
+      print_context_label ("---", &inf[0], file_label[0]);
+      print_context_label ("+++", &inf[1], file_label[1]);
+    }
+  else
+    {
+      print_context_label ("***", &inf[0], file_label[0]);
+      print_context_label ("---", &inf[1], file_label[1]);
+    }
+}
+
+/* Print an edit script in context format.  */
+
+void
+print_context_script (struct change *script, bool unidiff)
+{
+  if (ignore_blank_lines || ignore_regexp.fastmap)
+    mark_ignorable (script);
+  else
+    {
+      struct change *e;
+      for (e = script; e; e = e->link)
+	e->ignore = false;
+    }
+
+  find_function_last_search = - files[0].prefix_lines;
+  find_function_last_match = LIN_MAX;
+
+  if (unidiff)
+    print_script (script, find_hunk, pr_unidiff_hunk);
+  else
+    print_script (script, find_hunk, pr_context_hunk);
+}
+
+/* Print a pair of line numbers with a comma, translated for file FILE.
+   If the second number is not greater, use the first in place of it.
+
+   Args A and B are internal line numbers.
+   We print the translated (real) line numbers.  */
+
+static void
+print_context_number_range (struct file_data const *file, lin a, lin b)
+{
+  long int trans_a, trans_b;
+  translate_range (file, a, b, &trans_a, &trans_b);
+
+  /* We can have B <= A in the case of a range of no lines.
+     In this case, we should print the line number before the range,
+     which is B.
+
+     POSIX 1003.1-2001 requires two line numbers separated by a comma
+     even if the line numbers are the same.  However, this does not
+     match existing practice and is surely an error in the
+     specification.  */
+
+  if (trans_b <= trans_a)
+    fprintf (outfile, "%ld", trans_b);
+  else
+    fprintf (outfile, "%ld,%ld", trans_a, trans_b);
+}
+
+/* Print FUNCTION in a context header.  */
+static void
+print_context_function (FILE *out, char const *function)
+{
+  int i, j;
+  putc (' ', out);
+  for (i = 0; c_isspace ((unsigned char) function[i]) && function[i] != '\n'; i++)
+    continue;
+  for (j = i; j < i + 40 && function[j] != '\n'; j++)
+    continue;
+  while (i < j && c_isspace ((unsigned char) function[j - 1]))
+    j--;
+  fwrite (function + i, sizeof (char), j - i, out);
+}
+
+/* Print a portion of an edit script in context format.
+   HUNK is the beginning of the portion to be printed.
+   The end is marked by a `link' that has been nulled out.
+
+   Prints out lines from both files, and precedes each
+   line with the appropriate flag-character.  */
+
+static void
+pr_context_hunk (struct change *hunk)
+{
+  lin first0, last0, first1, last1, i;
+  char const *prefix;
+  char const *function;
+  FILE *out;
+
+  /* Determine range of line numbers involved in each file.  */
+
+  enum changes changes = analyze_hunk (hunk, &first0, &last0, &first1, &last1);
+  if (! changes)
+    return;
+
+  /* Include a context's width before and after.  */
+
+  i = - files[0].prefix_lines;
+  first0 = MAX (first0 - context, i);
+  first1 = MAX (first1 - context, i);
+  if (last0 < files[0].valid_lines - context)
+    last0 += context;
+  else
+    last0 = files[0].valid_lines - 1;
+  if (last1 < files[1].valid_lines - context)
+    last1 += context;
+  else
+    last1 = files[1].valid_lines - 1;
+
+  /* If desired, find the preceding function definition line in file 0.  */
+  function = NULL;
+  if (function_regexp.fastmap)
+    function = find_function (files[0].linbuf, first0);
+
+  begin_output ();
+  out = outfile;
+
+  fputs ("***************", out);
+
+  if (function)
+    print_context_function (out, function);
+
+  fputs ("\n*** ", out);
+  print_context_number_range (&files[0], first0, last0);
+  fputs (" ****\n", out);
+
+  if (changes & OLD)
+    {
+      struct change *next = hunk;
+
+      for (i = first0; i <= last0; i++)
+	{
+	  /* Skip past changes that apply (in file 0)
+	     only to lines before line I.  */
+
+	  while (next && next->line0 + next->deleted <= i)
+	    next = next->link;
+
+	  /* Compute the marking for line I.  */
+
+	  prefix = " ";
+	  if (next && next->line0 <= i)
+	    /* The change NEXT covers this line.
+	       If lines were inserted here in file 1, this is "changed".
+	       Otherwise it is "deleted".  */
+	    prefix = (next->inserted > 0 ? "!" : "-");
+
+	  print_1_line (prefix, &files[0].linbuf[i]);
+	}
+    }
+
+  fputs ("--- ", out);
+  print_context_number_range (&files[1], first1, last1);
+  fputs (" ----\n", out);
+
+  if (changes & NEW)
+    {
+      struct change *next = hunk;
+
+      for (i = first1; i <= last1; i++)
+	{
+	  /* Skip past changes that apply (in file 1)
+	     only to lines before line I.  */
+
+	  while (next && next->line1 + next->inserted <= i)
+	    next = next->link;
+
+	  /* Compute the marking for line I.  */
+
+	  prefix = " ";
+	  if (next && next->line1 <= i)
+	    /* The change NEXT covers this line.
+	       If lines were deleted here in file 0, this is "changed".
+	       Otherwise it is "inserted".  */
+	    prefix = (next->deleted > 0 ? "!" : "+");
+
+	  print_1_line (prefix, &files[1].linbuf[i]);
+	}
+    }
+}
+
+/* Print a pair of line numbers with a comma, translated for file FILE.
+   If the second number is smaller, use the first in place of it.
+   If the numbers are equal, print just one number.
+
+   Args A and B are internal line numbers.
+   We print the translated (real) line numbers.  */
+
+static void
+print_unidiff_number_range (struct file_data const *file, lin a, lin b)
+{
+  long int trans_a, trans_b;
+  translate_range (file, a, b, &trans_a, &trans_b);
+
+  /* We can have B < A in the case of a range of no lines.
+     In this case, we print the line number before the range,
+     which is B.  It would be more logical to print A, but
+     'patch' expects B in order to detect diffs against empty files.  */
+  if (trans_b <= trans_a)
+    fprintf (outfile, trans_b < trans_a ? "%ld,0" : "%ld", trans_b);
+  else
+    fprintf (outfile, "%ld,%ld", trans_a, trans_b - trans_a + 1);
+}
+
+/* Print a portion of an edit script in unidiff format.
+   HUNK is the beginning of the portion to be printed.
+   The end is marked by a `link' that has been nulled out.
+
+   Prints out lines from both files, and precedes each
+   line with the appropriate flag-character.  */
+
+static void
+pr_unidiff_hunk (struct change *hunk)
+{
+  lin first0, last0, first1, last1;
+  lin i, j, k;
+  struct change *next;
+  char const *function;
+  FILE *out;
+
+  /* Determine range of line numbers involved in each file.  */
+
+  if (! analyze_hunk (hunk, &first0, &last0, &first1, &last1))
+    return;
+
+  /* Include a context's width before and after.  */
+
+  i = - files[0].prefix_lines;
+  first0 = MAX (first0 - context, i);
+  first1 = MAX (first1 - context, i);
+  if (last0 < files[0].valid_lines - context)
+    last0 += context;
+  else
+    last0 = files[0].valid_lines - 1;
+  if (last1 < files[1].valid_lines - context)
+    last1 += context;
+  else
+    last1 = files[1].valid_lines - 1;
+
+  /* If desired, find the preceding function definition line in file 0.  */
+  function = NULL;
+  if (function_regexp.fastmap)
+    function = find_function (files[0].linbuf, first0);
+
+  begin_output ();
+  out = outfile;
+
+  fputs ("@@ -", out);
+  print_unidiff_number_range (&files[0], first0, last0);
+  fputs (" +", out);
+  print_unidiff_number_range (&files[1], first1, last1);
+  fputs (" @@", out);
+
+  if (function)
+    print_context_function (out, function);
+
+  putc ('\n', out);
+
+  next = hunk;
+  i = first0;
+  j = first1;
+
+  while (i <= last0 || j <= last1)
+    {
+
+      /* If the line isn't a difference, output the context from file 0. */
+
+      if (!next || i < next->line0)
+	{
+	  char const *const *line = &files[0].linbuf[i++];
+	  if (! (suppress_blank_empty && **line == '\n'))
+	    putc (initial_tab ? '\t' : ' ', out);
+	  print_1_line (NULL, line);
+	  j++;
+	}
+      else
+	{
+	  /* For each difference, first output the deleted part. */
+
+	  k = next->deleted;
+	  while (k--)
+	    {
+	      char const * const *line = &files[0].linbuf[i++];
+	      putc ('-', out);
+	      if (initial_tab && ! (suppress_blank_empty && **line == '\n'))
+		putc ('\t', out);
+	      print_1_line (NULL, line);
+	    }
+
+	  /* Then output the inserted part. */
+
+	  k = next->inserted;
+	  while (k--)
+	    {
+	      char const * const *line = &files[1].linbuf[j++];
+	      putc ('+', out);
+	      if (initial_tab && ! (suppress_blank_empty && **line == '\n'))
+		putc ('\t', out);
+	      print_1_line (NULL, line);
+	    }
+
+	  /* We're done with this hunk, so on to the next! */
+
+	  next = next->link;
+	}
+    }
+}
+
+/* Scan a (forward-ordered) edit script for the first place that more than
+   2*CONTEXT unchanged lines appear, and return a pointer
+   to the `struct change' for the last change before those lines.  */
+
+static struct change *
+find_hunk (struct change *start)
+{
+  struct change *prev;
+  lin top0, top1;
+  lin thresh;
+
+  /* Threshold distance is 2 * CONTEXT + 1 between two non-ignorable
+     changes, but only CONTEXT if one is ignorable.  Watch out for
+     integer overflow, though.  */
+  lin non_ignorable_threshold =
+    (LIN_MAX - 1) / 2 < context ? LIN_MAX : 2 * context + 1;
+  lin ignorable_threshold = context;
+
+  do
+    {
+      /* Compute number of first line in each file beyond this changed.  */
+      top0 = start->line0 + start->deleted;
+      top1 = start->line1 + start->inserted;
+      prev = start;
+      start = start->link;
+      thresh = (prev->ignore || (start && start->ignore)
+		? ignorable_threshold
+		: non_ignorable_threshold);
+      /* It is not supposed to matter which file we check in the end-test.
+	 If it would matter, crash.  */
+      if (start && start->line0 - top0 != start->line1 - top1)
+	abort ();
+    } while (start
+	     /* Keep going if less than THRESH lines
+		elapse before the affected line.  */
+	     && start->line0 - top0 < thresh);
+
+  return prev;
+}
+
+/* Set the `ignore' flag properly in each change in SCRIPT.
+   It should be 1 if all the lines inserted or deleted in that change
+   are ignorable lines.  */
+
+static void
+mark_ignorable (struct change *script)
+{
+  while (script)
+    {
+      struct change *next = script->link;
+      lin first0, last0, first1, last1;
+
+      /* Turn this change into a hunk: detach it from the others.  */
+      script->link = NULL;
+
+      /* Determine whether this change is ignorable.  */
+      script->ignore = ! analyze_hunk (script,
+				       &first0, &last0, &first1, &last1);
+
+      /* Reconnect the chain as before.  */
+      script->link = next;
+
+      /* Advance to the following change.  */
+      script = next;
+    }
+}
+
+/* Find the last function-header line in LINBUF prior to line number LINENUM.
+   This is a line containing a match for the regexp in `function_regexp'.
+   Return the address of the text, or NULL if no function-header is found.  */
+
+static char const *
+find_function (char const * const *linbuf, lin linenum)
+{
+  lin i = linenum;
+  lin last = find_function_last_search;
+  find_function_last_search = i;
+
+  while (last <= --i)
+    {
+      /* See if this line is what we want.  */
+      char const *line = linbuf[i];
+      size_t linelen = linbuf[i + 1] - line - 1;
+
+      /* FIXME: re_search's size args should be size_t, not int.  */
+      int len = MIN (linelen, INT_MAX);
+
+      if (0 <= re_search (&function_regexp, line, len, 0, len, NULL))
+	{
+	  find_function_last_match = i;
+	  return line;
+	}
+    }
+  /* If we search back to where we started searching the previous time,
+     find the line we found last time.  */
+  if (find_function_last_match != LIN_MAX)
+    return linbuf[find_function_last_match];
+
+  return NULL;
+}
diff --git a/diffutils-3.0/diff b/diffutils-3.0/diff
new file mode 100755
index 0000000000000000000000000000000000000000..7f5e3838a841b48fbdb3510d3f4eceb45289159c
GIT binary patch
literal 774860
zcmbS!3w#q*7WbqyP!OD|pjA<84ce+`>w-4YY6GoIaDu4dqJlh15wt*U6F}t=Od^b9
zpuTa}U0L_#>h9|LK&VPz&;qVnQ4~cG(UlnrQbbDyrQiR5C({l}e&6@|M$?&d?(5uh
z&pr3ta~~`&QLjsJxg`5Zk*<*lZ5&i2P}W~b>X><wfcd9L%9qmc*CU-T^#tq|IEFB+
z=(u-XB5V7dCPF2t2i~dtPDvnAimZ>sd!PkL_S>eAZ<g2n6eT{b_vde08QO12$`s*D
zM_Q%2M1gfv1zt+LixZg^U1_21bd1e(*@<-7iTL(=Re~`4ZP$-=<8NT1xPd7}fCv}y
zm7uEoEqDR^nEwT*@jDo_5(b0A86B|o_VgB@WWVinHzJ*=pB4On{cF>CdHKw#R}Q(n
zeA?jhnX^Ol2hY#Ha`2TyE~}bz*%gBRbmYV;jvPHs<VmVn&Zz>Dq$zmM#xD=Q3-Dts
zn}sF#wjU2Zu1^4Ecr#x<L-D&-d`Z$dc$ech3qOAXHyH2J65sagR(#xn-*o&&;&%gn
zqw$-JUtj#}=X`wJjNhF$BJs|^n{~Pgzw!8G;m79^>m?QAeRtw}X5xK2-lh26m4FKq
z?<?>gfFI?V&t=w28iaQ*{K%g(@Vf}VA^2U4UnYJN@Vg4X8Tj$J5Wf-lO(cNlT<azN
zW+%RH!P}AoNxB-}WAM8UziIf5!tek0>6av-oWLhU?u4;yIXYn=kY^_eI2m|bqx8qO
zEyvF2zexaRI+2d=%M;&}NBb$l2W8ZL`rsoc0i1&Od3HeJt>8^r9`*}-E?{2*cO%}^
zLk0N#Hi5e|@wQ*5<0GL$pg|>R5`JUx3*g5`#m_6gB<U=?Z^JJizo`javey?7RJ*S^
z<9v=vo(TUJ2;zzGW|H`?Cdq#;3Oi9guO!JQBS}6NC&3pc$%p+n(^=8PH|6L=_`SfN
zh|aH*lv|O6KZBCQzbOemD+&GON%DU-N&I%;&zCZ!@P?_Prgncak<Tf>SN{S}J$It|
zewc*Lc#`;MC!uF)lK77%sn^gX`FN7hbAFP14kd~IMw0kXC5eA&lK5+r)a%nE@!5CD
z=c4nA@VEP^PEzg@h{E<-nP@LtpZSyUXF`&4E0g5EIZ6CKCW${jS-GI|MDoKi<V5&$
zkw5FT>KAf2IZ3(wlh7$AiT_NJa$ie=Z%b0I`;(NrCQ1AQN%B9MgwE;6hkU5}1s@hA
z$!Ba5dj6Xve!nDi?nFK;_m}$Nt0ehMOH%GfN%C(<f{!G@uSkNwF$sQf5`04vKA)Y0
z{+UVQHzeVMo+O`HN$B}!lK3N&<X@B|{<b7^YDw_@lhBig_#790ss9%wiT_a&Izxz0
z`Pujjx$T{Vo|+{1RY~xFPl8{WgicO1Po!tclhD5-34VK${5L1TKb-{cPeKoE%M;P*
zN|MiClEl9#iJWvKiT}?e`R@arY{!;gwBuJv;!Bv<RR%ea%abNex^vc?*^{b*Q!0a#
zCP|Y<&7E{p*_|`1f@PH>%BNISl~qZl<#S5!o^)qfFgSBo8Pk?B>6KDdu(Gt`Ua4$;
zS!ua6efF#=!O|I0W!aQz(`HsmRTY&pX9uTCRb@dWpHf~X%|e-T=9NnLQ$A;2S*0|6
zPDR;l<}$l<R)sXDA~<vQG=i0-GY~kvJXAGfQfM{{FPkP+%&aH_u?U_Ps*t9YlAN;n
zL1|toa-B7mL{^ot;IhifIVgVSowKKuOBJDDl{B+zURA}E(lUMssz_ux@|C9A1cfRp
zK+u$_b1H+NVA{;t(xkHaGlSBsvRNdiqH@lil~ZO-nmKze>Jpp@hRvP=UVxhEf+>?G
zkyYT}^eHpTS<aO5*`Zndu&O#~QfctsiZU{B(yXbIN<)>CW=)wdfiENj*_4A5q1gy7
zWg-!obts!v5xf^HBq4kuW@%LgsGEdp&Ym-gtR*>u?Sfix5)8URnuO?g0YGi$ghayG
zETg=ttn6;)Jf%E{HZQ$fBtk1r7YvkUbx~A0rK*hWGHYtp%-LYYq)DOasEjnbd{X(8
z*>}#IJ$(+^tZX)U4!X-`&qWlgmQzU=8+1zLooJwWGp7Y-kPy%;O|L4QGJ85xARO^#
z--%??=Yy7@G<{y>%wQSA$kaL0r%kz6nprw$_S{JpaU{D`RCnH#nZb&g(<IivT(kf=
zL$OJS-Q4MODp9w)MVQFrM2%QA0}XC9<@9Mn8t<v12v~&*gk7iL93dm3X5Bc^x&k+^
zw5oJYc{wU$)ddYUYtGy<X)1)8f;w%^tSJyHtBT!XO|rq{Nt4*E61`AFWPp_)a;X%Y
z7t#+p${~m7o|NzD6!7lcrdO7+lTciRe0G0MnjQjiBUS(K5tFXC?25~Vc72P9bPDFh
zzx)qM=vTO3#&N<uP8j>dSZBKbx9|Vgd{Tcw1#96F|5<*eOu(VDX2NZeD*Xuk%g2Q@
z^x4>cr_*N6gxjNs<c6V6oE1N%EB?m%sZ1t(UACWsux*ENuJ0ov@z~=u@$?1Qk3AnC
z-uB}#%(kbAr|-;uZ2OXU`Wx)W9>0mF|I2>t@ql=aq4r}W=%)_~Lr2%s=D=g<=z2OF
z_yo(Wum+0{%*US7Fd)r=XW90X?!Y_!G8qm$^Rk~z2i~6hGA!GHclw`l9eDb7>?hxW
zclxu69C-Si>_>6nZ9f;o#yIe{tPnrmfu|qIekMEcPJ3a71Ml=-Rygqe?M(2V@4(Yv
zXg^^Go_<UFS?0hy{bSV*JpD}ev(kZg`s7wQ@bq!n&+`uaIW`jSmmPSgk8+Iz@AR?N
zIq;c|d^S4p=R5E%4t$mazs-Taz=7Z8z<V5c!+{^<z_&T@^tswkhXa3+jpVzrTmEf7
zBGG9M{KZ5ho^%J^_9rta!-2olj*NGv13%b-&vxK#pE84U9eCUSNqoKoPv52e6glu$
z*hst;2j2FxGI)#wKg1D#yaP|4z5Psf;IFiic+YU)>F2he3J0G4Py3ngz}tROhJ_t?
z`n>IDnFH_i-BvsB)c5wY(t)Rc)_ztw@b)?c!=88Gi|ojFzwE#dci`7J@FN`fItRYk
zf#2xBmpJe(4m^GP_Os1_A88};-sQm4mu)|W1Mjzyc(*z5qa64S2mX2oURvKR|EdF@
z=D-IW_;d%JzDoPaaNuvSk$7i1@M9eKYzLnHcl*h8;BT^#c;`FtH#_h}4*XaLUUA^Z
zIq+i~c-z;{;PDRpct`xn4m^GO_A|qQzuiXSUE#n_aNy@V@Dm;QumgXG1Ha6H=URjP
zR6FpKZ6w|+9r!5@{3-|DYH2I*c?Z7K5&vZeewqWn#(^($;OiXt=??rx2mVe6zQuu`
z;lOWm;AcAUyBzqt9C*WlzuSRtbKqw=@JeJ~n(-AZ7Gp2W6Ju-76iJD!PiyQP`pR=z
zQs<!8@K-*s2w#K+W#+C<JcC{!OcTp&5%6<_QwY}y_;-Y9QkgFc_))?%rOZ_Veuywl
zD6?9?4-f_+k{K58eS|@iWL5~ck}yprbFzT%B1{v>93$YVglQU?MFPH!Filu9SHL$B
z?n^jRz@rG$WHQqQJe)91B~udc)r4sxnQg~_7<2_;nnva>0bfj*CXv}9;4H#4h0Hnu
zpGBA^komHJPbEy#$6O`gK7_f1YE}z4g)mKMGc4dEe*#RC$gB|XcZ6vQnUe*)moQBr
zbBus@6Q=27776$>!ZdlzTmf$(OjF0q6!2!kG;z#y0XGn)X=6$Pt|3g5#%%kU^?!wM
zCgEKIet|Ge7_&vd&k@cdTqoe)5vIvvzAWHJ3DZ<DR|)tb!ZcCLY5_k$_(H;A0pCaX
zBEl5{t|XjIc(Q=+BAi2bjDV*Srb%KJ3HUa`G)2r@0pCQJCWx6S;8BEWdYI_~9!{7h
zhbam8YQi)%%(kCI`xB;#VeS&}#e_M9F<S(jMVO|BStsDL2-CzcUl#DGglSrss|4JK
zFii@xTEHoUX-b%30Uucfm?nf-A>i)_({wN=3wSSKnhfR`0q-VEQ^70}@MnZ+BAB@X
z-a?pDD>GBTn+elYFw+IxK$s?iDG9iSFiiuq?Wkyf!bOC43HSxVKEf>meva^P!gT`v
z9buXT=F0+plrT*JbCrM}B1{v&tQPPCgs&qU7Vv$9M-r|Oa3x`d@MHnsMc7YxjDV*S
z9!0oFz_$_RkZ$G*_$I;}%FRpxk0Q(=+)NknaKaqAO-aC46XuX@wjB}ePnbisxl6zo
z6Xp<Ywg@<jFo$NdPQYgo=8$Z@EZ|cKb0{`f3Ahho4#8%%fKv$HLO3koBhLcnP;6ER
z_&dTJg3ZYS-b?sa!ea!yn=prBvq-?75#|tV<_dTVVGg}!rhqpS=8$Wq3%G$Whgwq-
za1CJ&v1Z$kqWuX^CcI0)FA(OCYPJ9#lh<B5e(-R~I1OEN%-U6Bhf6gtAaGp)zG|<-
zALD6cJ7#SiL;l2&SGz(Mi;&FVuhW!?kfIZWT#u0I>gv4xe(i%h6m7Q>`MPb)SbuZf
zm_frOrMZ5xcs1AES|k}SA@29p)g0>--M#7eS&|Z~3#N3oh@lR-R9COL0S@MI%3uXA
zCDL)SqWy2~*=s<ih<eJzS_X9Pnl7IgB~qH$IGxXBHoT7E<CG=eiVW(H^*{!S)~3`O
z*D9_i<%46v0bRMBWalQI$9&}T&?~})KJZftO&W)UH@}%t2Qrqlrt@V{eF=h<`lCIR
zNUKZnZmaTG>6A#FOVQl@5Zc*)gNU!YJO7Bd-ffk;jX`L+CigdhU99Wv6AvZItIZTy
zUn_;&V!Z4k?jQ;1Y?)|YjHH4!;*amQzFYj-d%khLv3~9QaW^YV_8DM<>fPhl^NN=h
zd+t;<)sr94eQ9$1w=e?~@8$&_Gk`BqKPA!(3L0E~?@#jbtAO=;KbDtY#t%KUMe(K{
z3x3|}>E@?D@~z7s*@yUu)=R`k!ecJ%rqYYsI!1Ymzv&2mrh31VqdtTxda)<pul*d*
z_V{zQ267H7&BdPah%KqwKRwmr{g!7X-ikgxUD1m&RBeGLP1VXh=?cEaDB4(0g`(9f
zTCpcv(K^(ewozI^tD;Tt<Puk;YP&{jo*$K*7F7#+W)P>SnxW=&M0UAUZ@H()r`7x8
z#h(3&7WITtl0SZ(_+Eu?B|h>r;+Ki<;o|#we9LhYCXhd}-=*kdL5g>*M`2xZM>Q84
z9cY10dHHt4P$I>ibP*?)!Re@8LmGnx<o9lnS3CsUiJ9b<<ZV&)37#1x+Q&+KY(qzD
z5#&tub|~6yX+`oMnw4S2o;3N7^+nP5gZ)dQn}V{UFF>We1DoaL&xpc|6eY4ZUG*CB
z!)Jquirz=jZ%bF=_d@hORph`Iinc?^*`RuNEc~15{c7Q#{Ca_*cnfxho>JoXyOekU
zLOIrxK`v#g-cSA75k-4<;aL!ug##2l^_XApztIwjdSuxW+^%XLkoXMNCsWD!RMkFI
zB0mmT%O)(A0|(7v<OS=oM~=B+pg=H`c<NRJON$0guU7Pa=l>T{uMfSLFG!lA_l3mO
zr9noTQcre;cI4G5OV(3pZ=dL!;G5{X!#9bY!RpVD%SAhp;m^zv<tX}qKW%1y{a)aU
z(yR9eSD4?PrqolAU+cdSuSEM!^)B!f$?=;~$tXyVKXSmO)Ua{zEFPte?dV|D(nRCR
z%g<swG-sM<&TQpPD`MwjCQgIEH9$$>%kOQLSNs5Km^fS2rg`R<XdkJ1&@)B_row95
zLixNfNrnipebKDG{7qG-vyIaii-ye=4I4iKQ(TGI4cj3<{HVx!6gtCMXxL80`;N0=
zw=VjZ>OHjRdB48E=uo^1c6NlGLDP1kX*-=w`+;9Oil$vOQ1u>ObOs1N*5TL3ZtPIV
zgor5`_fs`zyQ6V6H12k1<9=yg10GoVtVG+b>ZodXf#*(1j@6)VmqfS7(Lb=0FInIj
zzY%21%a_}IK0H5DlB0_gV7llD<q(?UWh#Yf0ef$Qsy}S$05ETS-hQ%gOoDHal282F
zhk=}T6m6rL)1tWQ)SPV!B!4-Vib-kx(QEyA+x<D)1Fl0i#0TE)um37V^=^}wQ<hZk
zmva0IvU1qNqIb*7KOm&NqvU+3412~SdinCV8I_%q3I#o4yBz1}sK#&Y92Fn91D{Cp
zjHixoM9XBf`F?%EHfXwmJLT9y5s-)g{euWm&o&^{_=IyIFNm#nrGHK2Qv#af1GkOR
zi_dO@x;(c{j?IS*_#>@p{v}6efa9UB6y3^2WT1dM$oF9n#{yFGvUqPu=<mHLe(zR!
z`8())N^F0zyc!IaW0zB`y2SM`QV7ng`r|^|lG!Sx7X*%{vdy&no1!&C2h^+Dmuk)@
z3S<aeR&qX2;(c#W^1e`VzEE9XDDi^DO8uS`#rxx;#fsNlbRWCWn1xjeltWIVGVF0r
z7zHjYRfbLQR4kf6cCRAhCN)0f<3Rk<Z5##W1A{?kA-c#lp?pPqJi+A!p82h3b@hMr
z@HAyfCr1c5Iub1pDK11G9D7Y#@GI&AbRG7{<s-njuKKGws}$RfRAfRvrF^_HY)rNs
zzW{l#n~%2!2l?SMV1)Q18$_?S6urD+5O7KaW01@I4L(IV<<Jb~5tyKY?|x_=^KAiz
zQ3{ITV8#9)(02OPpb*LTHvf{(sGX^3JB=GKazyKb*&^8NiPWlgSad5@!`Oh~%bBuu
zy+~Vv!Av{o!)T^xdsXclMf<|&DKZMZVK$J^uA)ow>O?Mz{!bw!76pp_j1V339<T_5
zkolEJl;C%lJiW^%pop2zQ<T6qs326z-&~J$K%j1k+*ORwUSq+v?6A23ucslP?Fz`F
zQyWyRNy%waz3q#7jgF`0s#?410{GsdlT`EzstCV!kWGf<3lV^!UU{3j<5|r7sHVLI
z8x`%CUk(hxyG_a2h=FKfFC{+Y6h(s`XoC`1c#@*M=4nBGinamj4Eg=Iu<81E>JSL(
z8LIZ4l4B@2?<wB4g}1OTv1E(2B`{2LU`;ft+Ph-HE_#>wI;K|Le6*q-$4aE@;$x2B
zPgIl-mM6HJ14Z9x_CuJ{{)CkXb=U8&^;weEp~N-?@4yK5EFdMeB{)1>IBY`}tjjYM
z?Y-Lh7s41{Fh`QOM+`E$KBE!iCjyEQfC0O&F$sZSQC};}>i_za`4F?#*SqxQ=(N^n
zy6rXEhcpgh8KN^U*(cQA>Y;zC%aV*1%&MYwa&$GjgdVBj%R8b-KP`B6Y>T{XB4B+)
z_8_TE!ct|J9dHy;kzD-sHptN<BvXHNKGW&<D@qOOE?QEJzsWepv%g137go`lYSWO!
zSVpw|<|-!Fn*7=Z<H|-CF)hqVi!eadzBMv|)nSrFh>vZVe=3m5C9hiQ?+fD~CW#g?
zu{t|!7h<Yfr?C}bsxG3c!(Js;j=jY4^cR_#s{h$4<U2+CR@L?x;|_Lq#_HsljyM7D
z520L?+l(#;5Dz|CC?7CJ3!##&u|yt;94S}ceL<O-&G?qWBnncr1IDccm#in}i#5Yx
z<a80Aq3h#O)RHgB>Lou4UdMh%Dbse=k_O{-xIPjE`XKRE=B;t?tOMank2fjd(3Ppi
z?-$?$QQ}3=7m*Bx>JbqdAM5U+^oWQA+G7fYOsU_M3WaYxRWH~tVrdbHY2y8b#f1X0
z3A$R4Sz6*tf6U4wk}LAqlM4Hc;rRfKvsu3Wm`D{7WPzMwsE)V?7CJ15Mdv|gIzVpT
z77X$q3zIOCy3wT!dyE7u*b90^{;|46S&FV_BUeUE{Xoo9BB|@4s;wB_h6Q_2BPLVh
z<(~Ph%kS?;`C5b0L*&MyC;PQe!AQSWm$!)~(hOC9QY6t=lZ;we){vPkO8wq6cFMl^
zNKsrEOtyr+&)X8fE2DLoJwE!HQep4Ij8(l`f`bD3z>fp5?ZIzv&<B3bk6nK6(Yd=A
z2{x&S6oN@rk0GpyJp$HMdhj$AdR#B=J6Xxutm;|jEQk}#1<zzP{-V_cO{(?<8Z(_U
zptOKqCIw<&%gdif26>y*c>j}q^6FE=M^fbIMxbbgg_*auIj^(zOc(&Er<Y)q$?%0c
zQhf5`btUrZI@Q%Ixaa+7@lM4H<M5bY`((i&a|;q$dL**f6^N&v-jsT}6v%;Pxmnek
z<>*3$hZmgQnGyv5S~%$Yb2j?DFjIX9K@_FFGgXOUHuNvR+^h$o>ID0?02%t8Wd_i%
zmKP$VB(EI=_Qi{4yXtLTn4`uEynfeVU-;UT&>nxJNlYuFLlJoq*w*awHT8le*Sz2p
z)c9(q-_q(4(IUrs1czE2ZU|ngM2_@AjDk}a^(+c^x`JopFSxS{)D%TKL+^?r*%}R@
zk4D8+7e>K$41^H!laX)h#Tehaa?SUXW^cp7%l*hzUVUF@BGdCQ^>SGmf0D>}GxAA9
zUjXT>2l@Y%SKNk<>tC{g?d^{=rl~N3(&XsBk;bq8#vF`LG8r6R^j~HfE;v0Ubg;FR
z>3vNpFo%%G>4?=@1G>Py#ec;hBgpP5;xN=f>+k9Rhp3%O&YEXaigFGMCpHAjvd>^b
zx5&%KQIpuzy@jOaL_|i;wBjXsMJWsWqh;rV0OocfBA{;iS_&k(O{{a#9bo?1;evE2
zcy2&nLdDY67ZmT2;I-kx_iM6nFzoYy{s{Y(8c%%}FA05Q3sBT50d3%Bd<s1Rdal<v
zbHj|#dn8n^M4Hn4nwCzkEvdIU%dzwzCb-2zCYzO@hvV~P<0RAisxVymf=(<#CDa~&
zW<ux%7UPeshnojF2QXC>bTZfhO$VdXc=0V4)c<2lH7eeJYZ@qo&5(}o-OzIAXtcD$
z#3tMV@@jW@ZI-kwDyAyItTiY>^4I?aA+JMp2zen3t>GU<RvTK~Ys4p#uSCo>b%&-(
zYcCWTHbV`ef4cvU{0=F9RpPI*o@!k6ROD^J2=bo`iPc|aT`=*^>om?0LrH|xD$UJw
zJV0mnP;#1;9&dTV$kaHx2VBsMQTl6_uuVqm4_`v=D~Gp@)}Of~(R}(_J*e;Vw)njt
zE;<Vmhy6vAi0}frQwsfHsfG_1e<Mdnuomd)a9@QBdP<@8aDgnL6&M*`p?1Hv-k<YP
zw|x$csRr}~^&J84f)6@EMHFdRcrM5|em#Zukb<Y#`cp_e6pAR-6nO^U<b+h@zOVHq
zK@xOzKrU|ddmDpg0llC;;4Og8Y6y*ouMqMA;+l$)$8Z)xGJ_X%=Wi2klN>yS{RBDM
zh|nR-5`+B$`Vizhg!u;lfj|D7EdlRGa*Q3x@2!KL?KwI=r02p*1KLOaob|q@;{KiJ
zpu;<%#S`SB^FwQTzYBe?Y7JJ;!+RyVlimN9{5%<amt)ikk-`h#$dXd!Xe*l+V<287
zd0(sgn`}6YnQS6e7h^ym)_!mAKy1If>~CyL%+Tn8@T3pN^zMqz5%TKd%R9Aq(i(#^
zX}}%8WDhbxw)?^hdV#s$t6D1zE6m2Co8)K}3xp|+@bH2Z^4<?CUHicgi!4{<4-b#=
z2%I{?9iVENXk}HK0cTuArlQS2+2hmc45Rl?*5-jjq)nSGdL?PYJTg68c;)IWR5rQ{
z^+3-EX#bO=>8ulspwwBYMjW$5RnJ%9jhn1M>c=bbAiZ@5lx9$YUZph|_gBEkstah>
z1hk*!CmI46Tb`)PZ<$vkuWkqz_N9uEqqLA|uKgZwVVS?lE@vG08vO%>?cp1y5wbM4
zi|@zk@C|jahOc-*i?QB{LgT_%V?}8btpFY+qWlSHR0G;0h?&sk#v_atgX{1>s7-g@
z{(6=aF;ZcO$Pe;R&GF`-dEf^q(Ea8g(C(_PCz=}8jMdbyT1_o1mq2XOVl*`d$u|*M
zj7%s4OjY4LPqcaJm1y{a9Ide^?Wi2BMkO$=1+)Wll;=Y@7ablh@S<H+?PoP-f3!~3
z4#`pBB8)Vmhny=q?&pD=??rnHm#_+Tn5)2Nkxior%?!VR5r4yyflM*=<a{ib6Qpbf
zvsg&Oj107jB^2p?ZKtYDhG@)yozh^9pBvB{4$3P=Q9$6TS>dw<#IJoMWW@Xg!%w)d
zWK9-(g-=v?f4DFPW&+LwjA1$QCOZw9Yv|n9u*&^JgA!{G^@3i^7cEpc9$1<eshD-7
z84s08Ql#*mSF@xvd1(ykbayR)PS1vwm^Uer!i|WI%<n?UdDPgDC-W5m=zHdVwh!(9
zLdXGjds~a5#FS!5uyr55{QTO@ugm$hZ5^n9Oz$yvVb!{IQ(im2KjQb>{MtJXU#}V;
z?xHLv%=dOoFJQNuH=|gzbhH=vVoe*(zW8LaKVwP9yq7@y&zUG8Z@({G;E_TeC9(mI
zq4gXol*rHNA;WxxHQ8=vVa^H>lgYHs8d|aICU6RwBg8o#{%)$!da+HRG(Q||2IAG+
za?x;!W*BF!<gqdEe;E6p>0VF3H1S78JA`Q~WPW6}GHhh7oR~h0!Gz+s*-a8eWt+S@
z-3N`THT!b5#VZdNg^#7m4^l3}M>6H;QhfMJ>wNKwi_qtLxQewpsBCZBVvHjVuJC=G
zeL@F(-a4&8jz5T~%1R|(+{5y#$g6XU<D+2_{+K%V0%V&RJf}FPK`Dh)tWOu5zunB(
zO(#qgDbe!QXj2T+Zaqb(E7GAa6Mh?v2S@tIG0G$?m>ugfk&42eX5@ZFHGwa&rc#_!
zr<As|K6U*15$EsJSCI2BjX8HyDv<y_XAjKiMdvGeVV_sBq;<Q%_`Et}Cvy}Ncbh&$
zF#iK_)i$sD+KN+S$4S`Tj{IejKV8y#D)Mhw%=}+K@-+t1iVR?3w4tDooryyKeBpzl
zhz2F6K0yh`I%A9-$*~@$>I3o^c`ew%=UV@p)<@@JG(8;R^D?fFk3AKZ>}Ey3Aybt{
zf7W^x{a+a8Zw}v=4IA#$fLwyWN~|IrRB|9K?<@K!2*o=pe1G0ALYJxD_ZMD7Bcew|
zy3#{Q3(wC6+n^;5`?Zb1*O^sXK>MKeP2_ufqw$X&!pUs4XSc5+vM--8FJld{OraP4
z>18nbTZ@SyhyWO!Z_TC~yZs$Xe9;VrBiq-;6vm0wsX7icU?Mpn2la*}T|!@6{kltp
z80<0begzsYRu?*5(Z|gw*35N3pagVCFuCXp%0~dLQ8)-?!^x#+pRGG)Q9$`}P++$=
z{Vi&IZl|>%_w%@$eQ$xki{VT@Y%LfL?h~On4DEqe>#%B7A68q0o~mj`RPC5@c#G2G
zX3Q4hq3c}imq&h7lD8>u6Q^Eq4;$C66tv!ZHOFDq`@^DoEStXa0P?G`8<C4PL;QO2
z1}F=zD|W4@B>Y3FHgpLSAW+ph9N~F&t?!~ej`tTu_GMG}GdNgdnTe9AePe8!!O<7`
zOpe|HB?9->&VM6I%B()%D{zWFyThM>6xzdZ@hBRD=ui~SJb{Jl5Sa-lqx&hQ!CW%u
zeZ~8Uyds^MVjN~LnD2g`0*m+%I6KbrL5$<t4E3IavXL6Wa`Zw$PT}Rq&!~jHgCoRv
zXd(yaL8XXRBcsuU5~=M2MF=Oi@m~lZ2K68uioy}}6F3jNrB12nYtKSV<FAY+NY;mV
zYH89NyM_Dq%bK2Dd1f-^{fOyn-{1-^RP_RnIt(-T#g#B5e?~Nrxx@C;p-i}?$DvN>
zCnZ=QX<m4qc^OKy=3$N?ED_2p`cwVuvmmPbLtoXNE2wW*dJHXoDNBt17=P1@_c4G8
zr|QC0tV3!SWfzgMFF&{H0DolAlV02QJt}d|uPSjVqpn6&U*vx&!Fv^W(%}^^_hc-X
z1sBeK*24F88X_g=jBO8{)_PC(d_X^2fgfbDqL0WFZWu_jckd!BLK=&&S0eYPOSN7k
z_RBZGj`#)@coh}E5C_w8eVTDHDj*75_;*NXwnIGG)@b82bKlQGuL~BmzE!PykH{<b
zv8f{q)1=xfk@p%>r^q*Sn4bzf1SwM3<DWuGAj@*>Gh|^@-7dsJ1^xtL@%nbmlD|hh
zyFXwJ8!lAnB=(1F_J>UN2lNc^(r5zR9M{hk^4IVE7b&npwg-IpFMR*1KZr1~qDt?!
z-60?h#Odw_nW#(HS9~nSeyc;E_1sU1?uOOJ?l{YHx!@x@L<UM19U@zf<`JtGo{Rj9
zDQIhUh<mXaMbXc>3DF!P@*6Tu`_y>zv*V;hi284_kpyAFU0`*ee8e`Y6H&8;58V=|
zOA}F1Zlb3RW7IN6O>{FZU_5b{rHp`mF#`5QZ&DejeQ`7Fi#}WtNvHQcb9%KpY?>zn
z%Ll_?gvu+{Ay>{kqFebftSm!*_#J%t^;ytPC6;v#ogqih1II?k3;u^dsr6QlU-1fL
zUxn-khYLr)01gE&#>YSS0UhHC=l2Po*-g>w<ak$--g&70doZ)pjPj`nz)VPvzJjb(
z7)z{0kA82l$x)fgC)W)|0P3h{eLcpzf<=8jtq<A#zH87D>)Z*k&M+^8sB)efF06T;
z&8NHXLXLiTHC?0Qo?XG-*pA^Lk=fzG6`&eE(3`W*Y>#|%Mx?2?GVEq>@q9t^C{*+M
z?4o5?pnK(EVXMhyteL{8)jqM`kz$z^h)+v(foW;SGwpXE98CKGFR68GqJMWW;gWFS
z>4IGs;)67H@eMl%td^{rc|xA$qkQr#2%3JyuRkV6VvApY_>^)1em!dQ%c3{f(-naB
zGxv+$Ukuse4pW=UciO4+>f`V?B=BYdxSOaCgfAaxb4Rys*z<RC99=J4j=c|~+W0ND
zccF*mqLwG<Ay0oo8rk=S9u+-gXghGf?jf@iQJp=cPa^6sddLVwHBFShu8&nS<B@H^
zv;pH>Pb!MG-;7aq97tBU!hb9@xb}4RutsKUIg}7yi16BLfxq2+0Ri3ikw6+x9v3;C
zkw=Kg3mMs29_<*P_QSZF{n}4Ze~`W#{|0V_PKHjML%zw;e}G<0tAbut`>I;eFZrd#
z(9D`zZS{@u%w%dxMY}|P95Tb%bZh7xNc%s*Yxt~6qQJQK+zVh$mr0|!-vc7#fmK!$
z9#JH%o9ru+j4jwR*F8uycG)+3YO1fZ<NW)VaX4>;nH!AT_F7XBZBt<Zes2a*WcO6a
z+Fxa@o}u<Ij}K#JWW4YZ+&gIgOkvnSY&RHp#)Mr4D^tUkn!1{i<YmJ2vSwT6YiM5K
zhk{WMz?h0D83qne<CC9gf`|USl4U_pMu}@vpmbBfW%}{I_h5k2l*&Pv{;oma#+X*z
zrnuS>P}Skb#68_OhU4xS1N>U5rzF}QJjEX`alt8e`2;Lzr!=MZTA;cPDDiPn2|I0i
z%u!pN@&F2M4qkwI35y5v1gE2c7^n$`Z;N>2@W+(+bLRgJ{lN`F))iff=}xCn>xfvJ
zf&duJ?;x)6@dqeF%x}8K&#hd7JVY^CvTr3KqgL|c@bBy|k{@r1ZVB~<Xv<NaD=)fw
zX!|@&{3D;hf>EFXGxO@!a)&4^3sw7zC(P8^fkVoRax@5fkO%e?h~3j`(5pLP2f`?e
zZh;4O46^gfB|DI}Dwni!_8<Kexnlba&Ci|2GgAn><)Lc<%Zu<p2}NK;fw$~W<T9Rt
z@rCJdHTfco+d6|IN;n9u;jo2fMDKn}#4*-EHt3i7BSYeEc_t$vEri^)r-FPqccINP
zZL*d$b58Gz{Opor6Olk(T_~a2ppib}@8@PoSiOPE_*<;|i}r`l2Yaj#lTN4TC*VS)
zBSnsViVw<T<OpiM0Q`u&CF%|6IzVfnGU4mkpVI;jmp(tk`1HfhPQ=Ij9=pqYucv6~
z#@rhc@h-7g#+dRl&gYF6yJA~)wEPB0GaPAPTAU3!jq4x?toH+Or(;WlF&*vC?9+@1
z_`<3u)<4<iwh&^6m#yC&&3k;?9@nJiWr^{TjF0sK4@$s{=rLBk7;}rqJ@diK#8Pz;
zc=>qUlHFo8^@t?EhWr*ex(XG-Vwkl|74N$Npp?^~mhM$t^;pAH;9F0H&nq?i`grkv
z48CJaP@85t%F>nk-3SWyhsg!aZ<H)V<u&+F4;#0^abvknK?%HK6rlduzHt8F&`G{9
z$daSWdtrMdv&4o7v7U?lh$YtQD;8zbjd?8=`+kdh!M%_f`4M%iWJ4!fG6)fidS+0X
zyx7iy{Q>}mZ~@Gfquk?W^*1yu!^jQHb)7t5H*+v3_5ku1UG7#eF;e)@sw}A&ItO|V
zm3hB#VMj2F>is_Cy{;ut#4cy-KLZl0Z4j-{3BiI~g$qYo5qqGC*cgsNq6ZKM!_mKy
zIox^A;#HeIcsM%p7AUjFMW=xtz&Co45ypN5^KIrDtqWyZ_2D+!B@M#)wd7mA*a@OX
zF)HePB0nCJqn7{|`SGaycztp7M>)C|A(3^Acnm0W7(OgLBsSxig$Nd~U!T_zzGiS}
zWO$KF3i<Ndea$1=C=Zy3TTAW_h(-ww^XVfq5>*P59}j_V{`lhY#zDBb%qvBPMcv6>
ze9v<6or3^lHu6}@{&z{5PrISbOas!YSGe%BDzY~=kXCtYd+lh98GgBVM`Sm)X<GXy
zx#}KI9S)}h1rq~CD*96ZJr$Lb%zrSiYS9uQe433Yhx<h)a8u$x1#96<=1wcFaY^Pd
z6g0hBAC>LXHu<cr20nYQ!D|Rx@?|HP6?>ipMeZv?AFAi#!Aii*DX2rI8OLX$-zIb}
z(Q@<+<lk&*4(ea5J(&6tMlC|qbOukh#aNC7P(--!kCmu;&=W3{`60*t0MZdLbZWTp
zr+WlO2S&6LyLrq75zMPY48bMz?ZlRwcz@A_6;}iJH0C%y4Z(O}PVA-^JvHI+d<bU|
z%n>4_7`$W+#7_ByyxF=l_6nIg(56F)zg`5|F%VIc!xX^iLt%$9XJ0d)Ow?D2htd;~
z>{=%xTM?m4l;A7qHs-@fF}<2SF!l+!CWfXd$ZE+EDGUSaq{Nn+(Lf1(@Es!AS<2C`
z0g=B-{B6=@F~pc11#No2YyW`mhVe?#8nNXFz3X8i4u0*whALtV9e@~qZ5zA<80BjX
z4Cme5P{ZL3GYix?bcweim<D}fz6ieIt>~|LDp0KA4SI^O#2kAJc;FTQ2b7ADz(RyA
z#27ht4-iaNok%uWj@=<pQ4i%=@mia(<>=ihlBBh?K4P^8Rr`2`bDXWM1EI#PY`_T8
zvi`JCgg!T}_%AzBoxJR?Xdr*i$Xu@Vz&Elu7yZgVGS{z-%r!@#Q3Yc|11vs6n4<2-
zeh+ISb~}m@Dy0tT5}ZC3oI|y@`ZIU}v<(>1GGm?ddmG<uWG4>=G478+Dy&g0Gr=%8
zdotzd7x*&Pix_fr3xF>3KvvjNsGnpuU@h0U0VF%s!(UM;h(-xr36CKb1kAP;(9c6*
zapF!4+s68l2)0X~{{nW>Wd{FZj25K^f8YABh?Tbm?5Qi}_+`BME=k5`W--SpSvw1Y
zZ<zqrN<bxYv}<ieiE(Yh<RV}9{K2k^m9;U^%GK)ovUZEe(`hIeXCqs)5z@+G$!dJ8
z{>jlt1!}<Kuqo;0^<j7ji|_W}Wn#x$LZt5o&&<aUgHav6;Zn`JsThs!fUc}9!yjWu
zGc$&0v|<urNlNSM_G(BuW1RgCVqjm;A>>nAP5C(!@?ATFUoyT(7Prw*09S(N!CqR6
zxgM<(E<6BwAQu@wc6MqlK1=JqfDq^WNQqnvO=j(`69+=(WY$W^&KU8GOA6ng0aa0w
z8A=_0`@}}f*fSNq3f_ic#?X7ki~*B{;Ma<Nl9(}I47&C9i3vN}jDT+XW5?p$#}BZa
zk1G1LFxG>8v6N=qvRTL<EZ9qEQZ-suc`im)SmikggyM(w-s$Jw(Jx_@4@GY5Dn{S$
ze@Q>j-V}~2&yw1EWrj{R?zXa)=^<{cT|gEZXu{)o+Pul)>9Yv<<$Q_fQJR||2f_so
zX$Egf55V#-(Xbr|K7IX~X7|N+XG!b^9Gx=o79W}XFpgsGz3%Os(7<%88s#8o-HUAR
zJF-DaKjdtEHE!UtmoX60YkQuQiX7Yps04lK_&kULBzkEJpq-72=1Wpjv8N{*!#!+e
z7QcHX>?J6(wc%n2R#=4&)OMn?--}KZ=|F$S{-?8hqsK1kd=jL{OWgp9wGON-78MT1
zFn0JU;fEQJhQfSn#I#)>x*f>cimgS`nVTYCwk@eo$9*owgV+>D`}o6tFw3-`S~akI
z%UzIs%nh>hHq|h#aS%140*k(nShOg!!&gK6>IF35G2~0<ejR#?9LpwBb1woC`I%RO
z-A(Q#Pl6tT7YXnl8_W=37Ah`6djr(nzei}KBQ1C;=^Babn%z;LXe%_iOYEfdlIZR^
zA};0}Ji*KOXNdS?84K}Q<ZFo7<o+Kp0{p8;ca=!j%PQk5tdKUlGlA-bG`_cX9Yjm%
zL*JR11><Q?%|0}*A2Mh3!I0};@>2(bLtmKhiF^l<(<~++z(p*W;57ij%B9HTI9C2`
zJ@GaNXQN~oq4z$4SnxfpMJ4zwR%E3fxd;dBaI90fe~TFAUX%~Iek1aPTCKSxXE^I*
z+(U!lzasRUS-L$H{u}7d>-4=<Hyq;mZ-^&^2>J$n?w$sSt_IO<9p==Zh2{*<(Y3bv
z9XM|JKDoBqhb-`8je)b{s0K!buaSbAMgNAhj~4lFXdQ&X5d%3MB|aXr`@OY|B%_XH
z=U~3L!}z|w%ae4#SZYaDXp6jh9K`0^@R7k-1kdZlVr`N9L^I1g9~5KHV<~p3Hg85=
z#;eG{CL}fw>@r-lA*BDs5M>UhzSM`Nvm)^Yo{XB`Aq819nxQmIb@#BxDPM`U-va?}
zc6)$g+n2=uUV#je!+Uqa3@Kf&+}#34dcg)E5=$Dw*Q5L%%<2x2Roi1iROM(rK#Jc=
zk=<6HDXtWRp$G{VPDcT7j1HZLY}v4SVE~vjw?uZgEol%PvEMw5CbYtv-T#J6!IT%t
z+fi6;I;%Z!BA0yd#cjzlflCCi-bf*E6##mCet=`Cwpaj-hCwfrUU&*hy^Blk*4p2v
z<JOKrgqqv%XWb0^fk<3dj+l}4nMRCe0bId(b&e^q?(QjS+QaHFuRz^2yAM2SkqLj>
zJcOp8Uh<0TKrgghDG;oJc_rW`_hLj9-Qpq!>xC85***>pvjS}@G|c13y1Rco2#5!C
zqFf=Mdp&kOF_`9ov)e&wlY1aa5?TLO*fT>1AnTfbs8sF7gHuJ*-;7bx{I`glk3bRm
zSpi;bgVjtMDO?FMB{}*qL;=vF0*dWpH_+X0msu^Rx$g(wyu&K(@4(h(HdzJTwGRcA
zh@AI4k|^j(E8b$po1BO@obk><K%}q<{hCC|v3`J?-LC?s;xdncXx&|nY`R3X0E9HV
z?*)pY3NBuZOwqF<n>xSyw{jRKVQ?nv?#^D=o;t<2<8ch*dcR(XBHVE6xm>$tT@iFa
zUfqp1V!8XqyQCX$G}`N6zf8t>gf`FR6b&QyJJwl_nlGRsi~%q!6mAy9P7psLD@%@s
z5nVXyLmzYNOd1<wH0T9MPfbI4Fgl|z!WufRh5uE{2)5!oh#~Y>8ZU2)-tUjq7_lOq
z<KTdcG^BVp2TzV|!gd_gSR3#F!jxg|lfVJ_!BQ5WxsL&d@;Pq0%uS%R$vp}v(a1Fb
zeUW{+zQ|9#<)wX?V9kH6r?21JB(F$=6Dn|bdmn#kGx7+;gFRciox9lRrpij28AL9S
ze`MO#60d-I$p4BirNNET=-p43+DhY0Dh<KbB@GhBZ{xjow0Vxm>P@7JbhsgB0I4)e
zMRu!z20fzJOCsW<A|kfsl_nxyEh5eX8g&s7KY{t#<Zc5-)OaI6-F=%#hi%4F6Iv-n
zq`MaA6w221Kt~F%Pjno4>7z*1?9K-)f+Hf&kL)~y0M{LZD0Ip11K8e5qs3*87v=3;
z&I<LEqi+Iag&svcn%(aMje-T8mm?%xIKK_DEl2-?U>yGDO&Cq?w-Af88xtTPW-r8R
za%%~k*#WLKxqE}HqI#wPpR<+8X96spnh1Rdps*wxKwqTrW@LiGxQ{$icpU&Rgm;}o
zJH3v&4aL~$j~rvO)gUl<rtZ$d8{mt0;UJLMKi2_{Koz_M6ehk%`W(Kf+M$frJb<?<
z7aQTiXX6Ne*@gM6JH|}Jxn7)Uh!^x$o>mUS@32>qUxFu3`B}l9A?#q0Z}?y>lA{yA
z-=uuNmp0&OWCLd~mZXPH=chLKDZFsPNE><!K12f;9@xo3<rrt-OLvze1d=I7?_f<k
z(lCDZai0RDyn28SuVwBAkR;{^eFj`E@ckyE3-uYmilTDEr+|2QH8$&yPLZVEEo!_p
z?QqNa8<)8UAU5o=$yri(P#V5n<jL~K5DWalCQ6_1N2&2(WBT-JabONR!i*7E#l=aL
z(eVZOu8_$yFCVOMQE6NAW^B_Eqj!A1wX!}<ME@qVr-`h_n9X{>f$j!#lg$NGCce}0
zUHklCbfrVXV0$cp%?$S?kZi<e_tb|i>6N2*F(OEmjEh6!6j7`XZLwx|Eou-ztD8Iw
zToRwx!aiTxZaxM!(qS%{_hXb1i(JM_Z$lXSKp4Ap%PhpAvRy+{07dis0T1`$=zm5C
z8(a%VAba392z+6o1+BE8^DO8-3(Bz|ItO6<r2-PIBd_j*qtzGW)`fo@6dD-5&s7*Y
zJ$zq^6oNn8eTR-l$fx%hZekq&G0#OM^Z}iBK>g)??cKU)Fn6M1zL|j)VZHx{#yQx1
z?enfLmepOldmEx*72CU28}KeZ7k_B1!#yCz)8EkrzQ;Hph9@fOUk5eDXR*2X5S(S+
z_64WN%YUW;vjEc)Irbesu}$Y8&;oz4`4vF$bsj*$z9#@TySF_AK_NFE0|?((;ckc-
z_Da^7f1-tIHD~N1R=(7IEvV7<<}^fjX5=tZVb|QEk*G&wdhH^#mC=q}fT%v>fkG(!
zACSGd3xq4pVK&7CwrCZYVfjX<$AzewF9~Zn*xFHB%4}X@HqGwGLF!~Cn2Q9+b`{{7
z=b_s;7Rkl5v|~V-ek*thga3M5Fx$Z#D1wLHhHs2{*E1I9g@%75Dy6wc0inA;(h~hL
z1F_9g@(T9fM0Ddu<Y=4&ifU!jb^)4#8^=Y%VJ;qQ>@X%F)TgaC$09A-7n~Y^l(2-B
z4;N(*K|Cz1!0;Z*m{vPS+y^Fr_pKk)hO?3HJNcBa!c-(QR^Z!s=q*9RAw;TeVT`B6
ze$1h}i8w;UG9YSqlf30f0397>hpV)ry~${^7;Op=)#1W>&?r*yD!Lecpc{Y}L!Dkj
zML!R9mzvR><Oi(&FM>IowckF`{CG8H`NDsS^;*UX_A(oYt2WO@QtpSaBJOxyxC5N?
zlPlq9XkBK{FSve(1yh=|*cl2Umh4-D^7JzltpMK7peGGecv!WNsUw}iL0JC{Pfh_n
z7@(qmAz}Kh8H#s&M(7)SVI$G_^w8&A;E$}$g=}K7v@w_~{Fq(of)$GXv_ir4uH-8O
z2g%b#7R*=ZBZ&JEG;?1M`sungDr_yRd>`iuwiYvax=o+pN;A$t&r5hjI7j-_xDZTO
z12QG^0umdKdcpww>(J_auI0)fJQb<fd<)$JK;gDe{F&g%*L@w_K02OPEi{kdD22gp
z1ZEd7o{BwV(euW_G8;&Ob+7R-xK6Q0P^KK+jnZm4{`=nMU*p_|*pINnbU)V9)*vRB
znJsce{0u@xgxFqi+F`>1w6xXW#$$HIjdFAk^1^t6gJpY+lYkH3e;T$;!pj#*msgMI
zkHcVf1((Uu{~#Jf)w`66<r^b!1{HS*2Tl-^U4!o89#}qL(p=TsI(H}r7<p+a)DHFv
zw)SH?3CxYa1YB6D2j$-y_i8v%<HeO6CF%2ap*F&)$c}^azu(}nm9dSa;>dLoN<jAF
z-Y;<yv;-TGw;N|7Jyt-F9;}`SeyqnRrr?x#aNzXnfVL2Y^ME$?>q1!l-u;32f?lrB
zH~!|-&jqWHb3Uez4_oKrm!PpITC7#R;@xQNG6ztOt7S&feYp&&jP<Xvm%b&=^cZg>
zfK?26Apty3;12+p7VDQ3d&gvrenaL|Th}xd2G%>bK_`%Lklv_g6#@v%H~PM68EX#<
zk`^%dHBT79Yr`{(q?$B*8RN+xpjQGQ^X5Ck3Pjk@e?_4LW9`97icX<i!#*a3ZZvrc
zPxN#0dp_%o0<KW>e4`PgEY8K=C;}jW@lo*eol41_AG`*g0s9abJ*~3^Da*Yr@(N89
z&m1E8Qt*~UX1RRNXW3(k4?W4Vn2Z!xkRc{BIK0&QA7iYb6Ea$?Wios`X*dtpa8W&w
zSfONj9|&_}M$ejasAS_~(CUKrbn{O1y~O$wm{%@b&*A$AV7%w>DDDqqdh~+{o+8m1
ziuKGAtm(%VAf?d)`JiD;KoQH{%un$)%1fVR-Qop1$Zzu@j9N|ZGjGkp_Y9%v6O|6-
zw9d5Gr9~YRy&pWa+2Y6Wk{RKML=5V9J7$#N^ZTurC)$Da(}(`VO|}Rw5W%wc=R`TE
zyQNV?V_BSd$BZG=I0X)dYG~LKZ@Milqzh4N4E2NR#?HvZeL=>HS5RoM9UTfPt@cvX
zZ(ZG?sgm(k0r7?9pq1P8t6#o(IAD86znkJ1S0J%BWG_ocykb!&JNP}pE_=g&pU6>H
z5H3rc@!^dQ=xdkmKm=(~&(=JiPT=6vW9Z%(Yuq!Oe_5y}mc9D~3u-xBV^-@ju7okE
zc#(7=_KNr02Hw<ACak@LS>rI+6~BT8&gyP|MEeh;ozxX=8x+0B>`X)znaK|y6kP4M
z^!N<7BBpWZKgjS7WN3|pmce-qdZT%ng^aQau*knNvWe|LR?xFa`TrHFa3cO+0vQMY
zQbEEA`21HC;pB7T>_BZM@K!qwBWv`+^-IV-oBxYMvi}?Z7xR7{!TZ@z4_(}5lNjr1
z?g)<W04t{>_g`{+%gbP+B}%9_`H;yr7%$pDviNl}Fs)0R>m7nW$}hKgVKiyH+QA>C
zTRu<9W&OC>8(z)s&9l}X>T{8(z0rkD{)myuK9wzQ7UJ25Ubxapuud=hdl)<azve(+
zXWS2xB44EhpJozh0`8*1ZrogEop0?y-N?ElG?y9XpCCi{N5JwMk!xPvx^F2hgD6v7
z0xqw}2N!HHxB9i<b5Hb=<M})R7M#uJ$a+!l<Mz+hNOOv$b#2cVN#^;uM6kLhTmg6&
z;Zp>>>K+?*5sqJn(~$ep3gAk48bW|+2$mZ<K%%XeBF(7u$aLkBk(d-=iRL)`JaGA1
zV-0CS828YhAe=$w<A@{dE|K3nsDNt?%zToiW4K7i`Z8VQ+cKQa={-*_l2^BPdVWv>
zB(Vsl5WH7Hut-{wG)|3=hL-uCy$?*NH$P6N;Jo&&o#CT{gWrXZ<_7nNk6sis<aLb^
zBRA5~d*0c${b@yA=j+rGL30rmw#<4kr#OE9^MUw1E^MDW(--c{l$U-3tY6zKCVIu#
zYx?0XWvwecEM`i$9!-gD#6E60`ge9OETcqkfEx6LkIt53{{%|K#a!Aa#=TcDlV&<X
zqbmjaprV!G5~44a_&w=r+<#2b0&A4WH*KnhQ}Tg2B?reXaWBgr<J*5xi~?&^9atDY
zJk)U@udb=M@3Hb_6Z&=z$5)DEyzvsFm2GS-s6IjcOpoY-mVRnqpB6j~BwiHi2afq&
z;U6ywfjO9twkz>6Ea11@ZXfZO2!>1HA14Ga#sv2ZU-;gXi@=>8p^s3L;1<7LlI<T>
zl3TTqs||i_T=ufG*0+4}x*JpcabJ({k&A*=k-fQjn{euV?kTO$CgchzAm&xmK8*L>
zEUz1bRfCH#702yOIp5(lFD|~rta52NXvW^B*2j?JA#9p5e#5C@tPYHnwf{i3nxhb7
zdbPazAdiE-4n~Qq!}2z@zUI^~wwwq(laGT%kmwZnI%#L%6W3zFGC=PQuVEVkiBlik
z7ZomCazDm%%P}FwLQ6k*KaerZ(LA04F${V#{aPnZW9+i!i{~3M<<%1rVVo<vJ$QNe
z=%C;zQHQO5=wrV)0LS$|vW=1aI0UyWgGr*>Lm%+mh1jFcyDhNsoF*yOQ(Ucov&J2H
zbqP|<N-0pS?Pmq$!C=9l;N&h6v$>suXHPKa$EG~v9auVI!mxq2>!i!EN#tyT5>?x}
zZV*b4AK<Dy`xm<(oj=q535E_4$S@*6miLR8=2ZfRJ&srA)%o>B9S8_7>g<E56J6D~
zt;hHjBbfQ482*Y7ZxJpEyOLpuX}rxaE&_J(D`FqI68qP~*9?+lafYwH1?TL_gV%+R
zsB-LnV8V-1;LNxOU!tz6p1P4A&|bV^ZhbzclWI;ww?!?C0Z5MNeL*C~nY|$*n;yvK
zVmq7eRy{+Y`nNFSygD8#g!cnmfm)yYr93IxMlpYl)MaoVGrI2&K5Z-1tRk;ISJC=n
z9$V~5^X2adUI7WX3=)9No~~d4eAB`He*HQK!F9P+<E(yj3mP9i@jRTgMT*dSsEVQ-
zcdd&UFR;>vb}vhb58qyJCeEco1T9^@QYcCsCflQZ*!l<b2lST1$jo>S)n>+K6<Q3!
zWA%U57ji%Jqxqb)9X39PctG}2RPBGFM_H!d(7z^v-*yCFf_$nI;qgTH9~|K)F<iwV
zmfW{zj2@27rt5}y;@7o6{bH$`T?X=)VZ8VcG@!MJWX(LqVl`%(WLmmW@OL<?I1=+J
zG3<U!@##HigV%}HL06Sm2hg`ByYkcI*o#Dpvpx+t<M#7iC^fW<4jCRZ#?5%>?|nV!
zpfxZHQ2aN3x%e0k8y>?XQHVl5dOVh?ZW4K;*>E<YCPzf=G)@B&1DJ@wbHws$ER3Qo
z(*vN}zX56S2*GEUJ8Vqkf(obS$hMzIm0=!&=5p{Khqy$?oQmZE(Iw%FgsOul?Q=xL
zPEL=@Ji}_TVrU6&aiCiSTd84V?4Jj-j>)O2GST0#;i@^+LknH(ec&N1l^V_9(O`Cq
zU)*2H@iOxS=GItrOsx@zudoq+edg^@{g%8KzrPSf=tEVN_9W(t-lhe2!vY)vm}k0i
zdE};rXM?gspe&$mgdR5(P%pwn0$5ZKxPl#AS5dW1O8gcqslww4&-vl&kxBeIC{pZv
zb$<!S=!>)#1(v=`<kN3G0$W$YKDBO1eHZdqlYW1~)WJr7IPm_2D0n@`Y}|uMwfjk;
zyzZrly%;8kdyxhI{oX8T(NLofs!!G3PXj`YrZP+)a696nz7qsgcn<kZ`zFZ7q&)(l
z(XmHG+=QjS^fIJI(U-2`3!~$i;RV^9eS)VprDpeOTAB&r7qZiuR&7CuR2Qto`L}F%
z;NW=hARUIB_vd2B3BobAcO5oFpfb(IzUPEM1+T&CL~9?MUvky^z3b<~F<0l3S66ge
z+lXK~^($JI7y1&)ABTEy1^_qoFyg#VaE4cLy{l+1l0>n&=Qw*3<06lJ;K~l}+gU2=
z(L>Y&1{&5sv?fF2#%#!FFhg;Pd#e<9G@r7L2Z0-6Clb!h@4f(ghO6~n=&j2RqAV+C
zWQ(z8kmJs;&sa14DT`yT(kr6me2o3UZ}Pkm2HdOh62{cuM8t@Q@iv_Le6GdjiqPG>
zws9#pGU5_9<dwMjOXOt?n+NZYb>|oEXAp_?$3$V+NsWTmB?=0?&U0fwqgioNhDD4O
z8+&4&?e5<=U=G2tN{H<4P-xOU#$1gpbGr)?Y&b-FNzvyNDdN-ss9nt2ROFiu+(iRd
zWs|)0cdU~4Tls-U_%ZAaW;Ac6O#rT4e840@*x!!1itwN{1)sACewqZU4uTnfEnss2
z%ChZt#L0HV;pUz<7>DyPMH3||dhIF{Y@~PBz?_d@;|mo{D4wqSj=NhC4LkoH2#P)r
zH?ti;bUcf#3)p&LqcwOgm<^d-8FFD;HQad-784q;=vFhsm4^|qccMPQX^DF0wHrNG
z2`T4*Ye`hMzHDB~Y}4?w${L2u?e^`yMy*MRqv)O70?~cnD|wbdRcN(gtNx4nSrpX@
z*$bu|YBXChqB+jD(|*JV!ts9G&DsyR$zaL8jUc9|&)}Jr&<z^gYp|JqFg^s6efk@8
z74~lQd9Ml<;PgklR=_)HRT;Eedp9;kJ#QdAZNqW$Y72ljka>37E?6gkUoE=bj;!cQ
zRw06-Eoq_D>r2QJK-(<H67MCu0EJ#u>G7ip$Nfco-wMxNf-=x0M}LzJlQRCSaB6}(
zqY#Z;x`LZE^fy>eKwrUf{Q4Wr*{|0!=YaP;>_tUd#d}PSd@N(8gR8;v{PDh5;tEdh
z;g)4M0(hq1d#;$pw1v(?*TIw#-YHx>>&*zZ$*a%G&j?{7AUwmkwn2cwgZepBDzY&3
zy7?zx<OuFQX*`(~oPb+VwL>_!5~1=8<TM7fZ2?!C>a8PgObTm%)F(gHh&uwX?>OMv
zh|9PD*OlZq;v69ldt*&X^|nF3e=sKtYUN!}9?%+FPqW4qN0i`s;rX~hVn6O%^T%)R
z#N{lB<bG{CatM7X$RTx*yIo)iG(b8ikRQAnv<5VIs&Rb*C<bYdk+kCc$4IptJqzJD
z_kjALN@x{Dd#VlTRqfeKL<{oF+nXQ`F&_mxmHKbpVy5YDZf56#XmV^v0_&vKng^DO
zrx#R-B9ClS<I~-v5@%9*153KfjUdKZ_$QXbg%K9YONw9%&8IDumKaH^cOgGHdJP5`
zajW*%pb^)6;({2YKO{zCv7KbAssSr*X~8Uq*R;gvy43T(RlVQ%wZn3>7<;BhX#=6#
za3Re7;9tAq-GTMR5bg*|l&T#Rhi-ANOcwz#>v;Yf1B)Ie55=4h*OFkw-8-Az=^fk+
z<;DE?kRp%9{lUC_8kgMl#-(F@!3OS?(OO{k96n6j2Zxyqe2V?rw7TRH>;&oNQUkcu
zBJMG2aO1LHH9qhx&O*Q`I}uGKSXMCom>MgIHQlLkih5)Ngw>5(Ke6!N<d0w4qf4{H
z3yd)kdjeYJXY0}$mOU;ywH$i{Y=vKVKO4=cu7Il2`+9ioO@jU2Pvz(&#))lTbUWqd
zk^$e%V!b~mb;@B}O<mAN=zLtAJp^AvK4D)`y`P0l)L0+V;@5^?Xy7GhpM?(au9(f>
zp}$9e#KjNCa~1EQ#U?GR`B=o-K|=gFpX2C<-__D}cP6egd(eQ0;^q}qdr(Y$598}^
z+YnpPmS>=45Ti}Rc(6_&F(kpr5_cgZC=D@Ss;2VZXV_d<4o4ST`Z$}YewUke%j0uc
z_kQOf0O1$%RddTY>%o$4Zy=C6!Zs@PKVGXG-pf1Yu!SD^$`9TK*;<P&W0pe~&K(7p
zO~Lo#ZK?cDDcz*-Vk17Xy!w$ajDC)mUYdYSKGM-wh)Tf*4jRUG81zC5;bPh_5Qz0W
zVu^mC#9tP5cV}P$ibpRjCjbr=FrxlU;$4-E1IZ8*ESF*<rT!bPNg?twkz0_njH*nu
zn>go8TU{}poXtTBD^##KvqWjv=d1eA^Y{sLCeS^^_xrTtD~OwnGCGtVBMbsFbayEf
zgV<l6i^F@D-;H`b0V(2b%xS&r74Of>aNV*TDTF_JRJ`xcAO&jW80P@cb0Gfk&H(9s
z*jfZS{Asj~z$ymC`*u+}Ud)sbV2vj#uFDp?GrH{`o(PPtcVjuWqlX+lCzT)AxXbf}
zik|9`SK~sD3S49Oa~}wHPw@NtXE@lV=WVz2EDww;rKv9{^^LqzadxNTYGmxtH&!^i
zF(mH?<?ztnMc~dQmx9Cndh!z|yj2|jn4!dRRVSDN&&)q4n4lSIB%e2VMdw3^csoD1
zo(mm?JEYJ!t!H%8AJ8xL2+tcYq6=vI{PkbE1FoL}IRBp(+U*~PizsmYHvA&dz2FUY
zOr%LcZ2d<&V@RwWC{{GzWN%V<HU%oOgE|dm9l)ZZ9K8{_cCFLEP!!Stb;1jwaTj5+
zXG}WOOA`Z%RIQ+igC8p;nmk>8@HgNr+V_T;*n2Rv0-8Y8hIm++XdRmdYflh$(FWVV
zanT0L#0T17w_paQpWE34@@lC7ZSYUT7xNVGTkzi12)19>S<ol6&s-q_!>A~@$ST6V
z|HAmk@5C}!^mOznFd!T5k)w!cb1v2dpvxY^7?EJW&uoZHPO~S|lYxCdB3ld=9P2VT
zOU0Lru8Z-4YC&~DwqXr`J=%D5rx}Q&fIU}rvsaG2hQgR}y0Y#cFNo)2=wCR{(U}<!
z#^hU`FiY~n?}BELm!89*OA`GNcbhEjE8<Sz{n@y&pQmy!yqnr+0lVsJmaO+k{3{WV
zt0Kj<(@15E9^EUg`KE9Y*(><aK=5mjlBNIdh2k*p;5Bm~U^0eGrT&|qMgz7m(Yu0!
zK^x5PMK!D|9>eozV8AVb5vsdG*wbs@@+Lf*5i<=d{JGeKHj=(9XoC#%EMcz>K8Uy~
znn|o`+w*a@Dg4vZJAL7w(A@OT;H!7=D*Wviya#{Ng4Y{OE6GJT4x3$KaKvqIeOFm>
z3b{~R@6b959cukgH3T|u%i2sb^f2@VCmw#>?W#3YZAH1QExh5Zb1fLky+9%_e@=7j
z+Aeumi@{71ct-yd>CM}Yc@XIo{oPUx13;&d`J|w#y?BNzGqlq<-zE|of>f2JK7X8s
zc;Ea2CMhff0~>xt#+z`}y_N5xPTZWz`XdIudIvAU-+sX<_?s5InzvO6n&2-G^~Ek1
zQQ!J%3^;jP#B!N(7-w4AICS8!F6#@|@dxmo#x{wGhFx9EpId9X^+|14eG&aRyShcc
ztnVPuW#m5LtS>3CdSq)CV?x`_qgc@Wl_nhkwPGB6oFUMpm_2N0FCGr2U5cCA<<&Xe
zSy{Str};W^5$!AD$<YVVDhXDJzHgY1CCY)3iaTd2aIqu#_fNz#mWhJ0^R`2<_6%<?
zE<;II2H?$FY&96r*V;vnDotGl70%S57V{cpYU%Oz;u2S8Fw0ryKJz@5iE4vtn2DLD
z4;n^fq^(ExM7922;S82fFaDb@xT|()0E0}x^);-BQSl-F1A&q;{Z5x;F8=|$Znm47
z;bKGT0H)SLPb79=;A9XxH%D%I)f5$dGZz*R$2&1RD%y2WHt+%9pC}O~ATA`>Dmq-(
zW*^+-g{z8la0MAAU~nJ8LGv!l7u!r=ld9eiRn7Ek`vY8_*~)umW(04r`c-^LcEJ0S
zs$G*<4)XRpa~ix(Jok(@bSnR~3L4Aol)ms{@DENGT=9#W6}Z9*&cT=VVQ95e@g0&^
zTq{OeOXtx_$G=tZv%EA%V6hcn7_TneOn*#X+CPEB0%k!jOmXA#=~QYME=if?_=WNX
zr6e<UE11r46-v=kRIH}BCkKhaLF%pGS-QJ^s;#r;_9a_pi20G$vnv_qs>nl(jzbIb
zY2rZ3s~9oe)*SO?UKJ>YKt)^DCcahb&6m?j!LWqcg$y!jRtein>-W`F%xLJ>c*(Jf
zc4okt4DZZ%c|1ox?d5FtlItH~kozM>kI(Ngh5<JJ+y<nm+VNE~>6%<4A-OOw&6glj
zP<ldFSW2PZa3`G$#K*X4YvgP*|8odaYy6u;v4-zhx|qt~1mh<2as&u@u%@23Od<8L
zgN%d;;_>rGMf;Az=si{|WK14$M1kh@zAr~_27%BK6X7Vou`>`K*O`B7XE4jmKz-2{
z@57ajx4}_-TW4|peK^hB3uwRgnX2K2v?HON_y=0#C|&E6F;O$zECG=AzjlNdgGTEq
z)85S%o|6f2g(7aBHC(MbQE=)toY8Y;f4IfBtOUE-$WJuTd_{loc_dc#<*S&7zV2nd
zv<K;kkXJv*X|Jj+r}IG3*6qS;*@M<({g|q4)cehy%vS0TTi87epBO25zk#=*IDX?#
z=%=`Opc*9s=V#Y!F|P*{AfZ<ytGq2fYgMK}?D)dJ=Hkye8gPARKFwIPWpJg}C+1HS
zFdRQv@det(JcK_+FZll*t%PfU{kRR-d;smjOVzrpX7dI5Krn69+RPg$n|k3`l4<+%
z&cof|@`|x!2ACWnb(pL91e5*U6VDu6*}#7hjFN<c8sN3S)q8ac|JjoY%#JYS`BfO_
znYa{Nu{LK1ToA9$g&i;%J%RY*PNfH|HT=s?@(s<<Nj*(BOQu8#?}PA0bjj9ca}K<7
z7>(&X0NbS2di)z5$6!+k9=&gF$7h!ZTllX}yd>Z|lRGf5pEZPQHnAqagQ3-iF8nk7
zf3-iTF@roVR42iiqwV_D2BB1ngkyscjU8yDbZdu^xI1o%l|vuo(7kho>z_0)t*b)&
z_}bUI;0xCWdbo2aZSilqH&sLt6LH19ibZI(+P_^iTqs<ze<k${gkk?m+QJ<;Skfc-
zTVLdB%xo?Yt!!^Zl2@EYIBso6vh=#h?+*0i+J89nd+l^9zl?=Dx|k#EZoQu$8*Cld
zJY9xl#_Mrxe0dUf5%<NUt$<)!3#5sCG40EN$wb-JHJOju`!{_3v46ul`^A5VP5YTX
z`f#C%4ZUE{IlHk#Sk(u=gI5UGePdHCCW4pyX~k_66XLdcxAIaiUgm}MsH%$+<J55Q
zazu7hO7Bte;=wqlwZ0Pj`?{i4?zC^bGNyp2*3WFea@<arDOTLP`{oX`lU43smnm5P
zg)x|EcG3?HKQ8_$HOr;xxKH!A^>{_m&r|g|@Qn=Wk7}?V=CTp7`%{k0;%KHp&@hnW
zu7LKu{p2sqmtksrgv%Gdp(Fg`+<9;TZ0hv9TL&+IrFWqRxP3>7FYsKd<a`F}pH7~1
zqe`P<X;k7x=<}RkL^^(wADl(89Cj&|<Ql6yxaJc7Tnr{Oxcuxb4l!b512*>*FU#+;
zzr8!;rSm8ySf_=aaQJL3{_6d_Xdt!+TvNEu^aI?hiTN_ialMOTTHm(f#r6XTzRX#!
z;=R-}7yrK65Ap;15pSNS_31AAx{C%Lz<}+`SPvdRtZrf}w+r@T3Dv6UKOUx9Lls-!
zgZ+!j@y4dAx!nom$eE&ciVGz8xuUVv50i-1GzX$;<g+t&HHo)*(IoZbNRXBX-!jS&
z4P)E_l_H8nhT@jQF8YB$_T~mCWl?WT!eGRr!x`V{oOX(3UU~Ue$`7_@Zy+x!=>j<I
zGERm+6RY@`rHV9u><+&BAr?hL#kJj>jchIZGhFz=t?U=^fjPn3X-{LDCdLs}zV49U
z`|Z4Q%m_-LTz1zZA;{m(o!wp8$}f)R<wOu^@p6k*jxubZr|RnN1ajohBwc8z9m4$p
zd1;b*o2Q5x3*nL<ycAqDuV?>86|m7;tO*N#ICJ_>A}7T0!vI4zY39S=EZal0)VJnB
z0T#nE#(79rldl#`L34<If{5`kieneR9^)B=m?M!&bZa{SNC2(I;;v++h=HawFT@)Q
z_e{zeZ-ymNzePN1Yq(ud1|%lYss}KuTgSN}qO)x-XJMZK**#yf)=xg68uMxGSVB1j
zEe6%^t{RUHk9|1$U~Zg+2Dpg`4KAf<9r>V-g#Oq~&pd9e+JH5p22KXGhVaqMV4-MW
z?Gyk1q3liIqpYs~{~40NpwTA^YOJ6^V-1RuSky#<CXm20FhP{nf=jC+RjU+c2v(HQ
zNg(r`PNj?Aw%@ka?som!4N+@ISQ2o>4XIQ?ae2m3p`d^Z=J)>G`^+S9`ThR?yk0QR
za-Vz8J@?#m&vwsEM+<x0r{3|lqG-fFT&7`gTI5@E+PAv|D7geEIf<RB50%GF#-Q;^
z6xwJd5isNtMg=1I%ixXS)F9<T{DQTLJnyZbK9epTzjTl1(lUwUqU0sCRWAO99q^e9
zk=Dl2eq10<bHr1<&8jOQ!qSb}duSOia*bAFJ(2`oA3qd4etTlqnThqIb=`RU{`$o0
zXVxdWMrUexpX0x@Lgo+?M%mk1=HWJfUJ>`fYmHgRyO)O=u2AMEwXeUtKhKWGe!HxE
z#InL@#K-+$mgY`s_}!xzgVdRK@)Kj51s;~Wn33<vp9}(GCpQw`KRl8=bqNL7Qgp3~
z_wRmu+@-3^Y2Bs1j{E0qbE6><24{zv$>~vVa~lYc+#T+Gqd-+U*$aC4>pRgZHr`E1
zFB^yMa?Gm`hg&f2Pa+PKC%e#?kPm`Ve+IRNYyKU3gee{+V$)V^=9TvD6&&*$zD5wD
ze7oX0Ow_;fwo^X#B46g0`j*oSs_US@-86Rr&B4OeU<Kb93F2(Ou@^J4j^*G*<WYyw
za78a8Q6OJvUwX-STq-&&)$xWg7OYuZX5QhmRr%AiK3nE`96ykixsC;~M&{B9mVNx0
z(z6t7@10F`@p0K12EqRTO35`&i|~$=G(Z_pa&pb`vvM89{vo`4Tm9>4zrgfuy<!tW
z-X+Xi8+ppsiQ(TmT|0VTWjaN{Os~MjfoM7DD9+bDzK&#=*{59Fx4r>>eW6=bUjy~^
z>rsxbQ520N7;3)*w7F+UH9uo$Ifj_jxE?wu9a$=h_w)*wOQ{(q_@99YZiJ?Z6bZ9m
zeziLm4&~hWT>};T?O9F-)VhLufc5P~xAV1v?BT4TA)PL$^ux)$;dJd;pkq1UGwLn_
z*{(UNf%nFX->3zSaycb3@=ZJpw{~h*R}B``yEg!!s&RhW5$vcBZg7)`q{-ozjie?f
zA(n<?!dzz*uO@!n_rvUyz4KAw7v6aV>QK?anfiE#iROK9)lce_z!G;w(9~HpfFJKn
zJR>Y`=e!1}An4D0kr@f1^YXl@Z&C}OC;yeId~gcF=Uk=d&m>v}NT7G(OT!W~UK$_w
z&Lt30blw^hUr&N3oZ2P0!#1HTO8P2|I1OCLo+~jyYeHq!_J_szy|-?sDHEyCFsu%|
zg|vnzKCFl?!QMKoM6zI<a<GDW(?}UmSAS8!Pl7w^Fn~Yv*0NJ`7yw~fes&7AgPEAD
zx4%u;RoEJj6B|&Z(e_@#LS$JX-J7x8;+gqNbl0&nF?^(54glJyNZQm5z(!hmftP&K
z`{5lz4`DGG11Uz0D3Jck%4Mmdf0b)KpZT=;sR(yB3VspqQrp^kUqr}3R|9lz%6Ic+
zYN60R{FZ<m%mOQ*0=o|Mmw#FIrkqA=BrRlFdev!>5@Y3pG`b2$${@TMhpDEr4)J25
z-W;dB^t=MrGr~-3-j2PlWw}yPSqV}Z5>|zYLbaRLU;<_p4|!jq+bRhT*k^^2OE@F~
z{`lLp*uBw|eAoLJEE1&{yPe(=d!CB~?jyhF6%p?hMm|;Qok4#&j?z%t+5v!X>O2OV
zcx6;<=y4EbEHu1i{}x}G@(cpI74;EdyaIUM+qc>UE5Ba3$#Ek@F3EF_=BMqLkZ!t*
zUY-WU^0yur`Zirh2NHb)Uoa~g{U4V-mFY5-{&4*~*Qh|=h4!{YY$dtgtJH0J*>DWv
z-QKQCbdFQeA5}DU#GlL;Y&|<>*K`#IYwh1MY~A}NU&Y5gbP<ilE{=~|LP@?Ty6O~_
zD~bS&)A|me$=?w2{s<0;JEOGm;yla?yf`t(ZdEZmYi_<5FcNkT&MKfio|?P{u%Woe
zppm_qkKQG;t0%IEde@lO?5l-HowiLp!uQPov^muK;WFCf6Xcvy1gDYQDkw|-89nxv
z@<0Z<P<zMp@o=UNGRi&pOWV6)41hNX3ajej{5^6!b|<=T^Ok5>41O6e1M~*sG&2)>
zH0k2h>-Y9@YR(k!l)@rqzrjHkprP&iXwSP8l*q=GEIJ9aki_U?wy*wy=FNJ(_HJF>
z#bUemN4iqxzFe{>lRfHxz=J%@i&W${Dzbp9TzlYe^HfGc&Ouqd+_B>}kD!&7KX4;y
zr-Zar*zLIUw)hzRiQpXfdkr9gsl`=Kd#eFaDEqbE%quV6zkYeN@ge%PynO*(@EMfn
zP(ghX9=+}XVX~K&kJS|IE*c9Y`eSrU6jBL&I;(e(&VE<o!`s?Jd=mY8;=|?bJL$!m
zYHo>O*pvOa)(gHq)MUS2->>^W7WU}=;*aRQLCBAE^;aR{3a*T}*So%0dCxyS0{L5J
zazaY+KVJ;rNuByF8WDBlgnT5z1Vd19O++TDu$!I)kHN{8{c7)cQr1wi^2r&0<QE3`
zKH<%fYEyD+Q*sAhL=O2X@h%jsDf&F@htBFz_tsTsoz{maE}u|zH2)7a@h;Kx!@-Rx
zEGO~rtfur892__+Na5IbRnS%$<2<}iq_;8n#30KlWCz$Vu@j?5cC`sIwhHE7Zc*zc
z&g%76Uz7slyGL#Wi1>&2KmNc4txlrJNdwGF7=zQI_f0sGPgsS$bx;^Q;1(GlEJN=>
zYUd?hX1<TTT$gjrL@&3Fu1jo%OQ>)n6)p;vVGE3%l!c+iMGDkc5=IxHzDrc!mgw+s
zau43w*PD`E53{-lGV(b#CAZl5)|6cLa2Zd9JCj*~X3AnCXgoShhe4DrIY#h*Y&+K4
z%@`QGSZMC%7KO=ay^D(o@=?W-p%fqgaZ`FxkN*jY7-(+mLuw_Xed@XI2Rp4_%zZzc
zi>9QPEsKB1W9@e#Jcz?AgFC@}7@r{$6BW-z3oDD^r0WP~-}1)?tlRMz@lCBiTF6pR
z9*?1v>@hj{fDR2Yt`TST6$D#9v%g^)ZYU1~KL>R7Zbar6W~wufd`HtPdO<l%4EVfw
zr*6k~Wp3dzhrb=!Q;~akF*ruPc&KGcI&x|Nu(8dAlaK4XMIgUUpO(e8p&|sc+1~ln
zRI`!hotBZNVdf=NXo$AY>ZtjuubozHD>WE;my3rK!IF{pT<t?B^w-Dv7HZ2#fM-AQ
z*39D+=AFTp9fn`?UdPMpt@1TM4jDy<Q!10>w--Llev0t!vtEAUo{ZoGFrx5bQa8rl
z<cHDGear8t@7Wqjfx?XvFl<bIea~}<Ba!4a4D+to_FP{%KiKk<k0nM*6j0nS`r}OZ
z<Uqh0>sVG|r?Y}i2*XZ|(z-YIdHogmJIunD`8DyTroZAxc=A)jhfp4V^bs{R_w7%A
z^>P)C$0Iml7|e1NA{!4^UN;6g_6{?Q&pY=Q&YIup9Z9kcm`d&-0VlDYa#qTmE<2YL
z#$Snsn2)!igZB)M{n`+RoRFgE=bM6uvO~#_Vk|q;E9#B?ZFexrHkt_)5uMENs#Qjb
zpg8Ylte!8M{%CL1TpewfYkF}k*DU6o?8^M(3wj?P0W^!h=q75*1JRS};}@8dBT(P1
zHDU*{(N-F;^bEc-7qSrf0pdHnhrndEovz~;+u{9*yUa;?FX>!Qeyk@)@Wg)4!pMO_
zsdIic3H{C=#1A8>vm&YaU{iQ?Ry$R1v*YU=WE%<v9&Xp_^dSG~*d+4Y#K&Db(G2%H
z(Lwd`TLXthufr_|l$Ah<+JRt+(5+orPeQ8kv4QCMoFZ6GJp9>a;WVd;AqGChsLeGF
zy>;#Ds6LnAz9aL7p^iAf<YQu4J<Wa9)A9Gq+NIWzYsw9NkZrO3vKx#{tC!MhmW2GK
zygV@lD?MtGma-oC%HE_K2C}v>O1awsY{Uxa{R&e!J)?yEHVq*RuIrXz7aF&iK65Ig
zf9h7I!GOrTciP#4JZ>g$+c(n*RFRRq0w^p0^pp4J#K&FLXi(<|$W%+msdHNYdw}2@
zccZ~;_j*Q4rxePgO+k$OFEJ~a9KU5e@<wu9RM0O(ui0?e8}PR#kL8+~d{m$Ltr|Fa
z3%_nNzq7HmQzD2O=LU&YY2hH)sPcO5lcLAU6g`?D#JuaY)QaWTyyV>ZB`)&)nUZRF
zH*`^|_T5O@g&jTKH1d!v*&gN>X=>xJ7NA>1#Nj!0<FHknl@=xBw=?LhKC0ewaSp-5
zLBTmStfg|V)A5+F5}il3GZq=nBo+nX7Tx#NfcN7wQRNPBRIqoU<}0};4p#tGiIe^Y
zSn?4xyDWk-9ulYi>ADf?GHI%{bRi#onT!Q8D4@!cE>u=WG+Yku*#QSu4b@h6db*{<
zL?bC^NG5J>VnmE8`3*r)92;mNb&l^iuqCl`z+i4S%t>zPWp0pYou5nl5<t^(YaqHC
zh+3YG#ufUC%Rum8Eb!?Qe7*-huYM2iG>386(KPZ6A@pE$w6|xGkohvm%yQ<arKiur
zClPc8pM~Y*I!TPHXaJc`%K%_72t6o-vT^ivi_poVJ`<rKC%sTm=kS$z9OTSjRrPja
z-1CrS&@6g&&JQ*cf^iKq%!l7R&aTeWhwNK+rD1<83&bJs5yr{bhr7JB<`OIAdhhRC
zhE2k)6N3aXhrFvAgOV_KN0*Im+TH%NnNVH`JkZA+ru(gTz53|MRKR!2%R>CpdT-H9
ze3jV1DDov^<Il$#fG5B{^qv|H?WycW@7NQ$Z0#^xyQ7CyZH_N1>KRSGa$^JD;ims`
z?hJbZhw+c}U2jzr^Z%M-PA1+L;wP{-%3{o<oC4WRFD0}(HHAqxp`^V{0)A@T*(zG3
zqULC;*mKx(#tr9TW*QIoePX}X%;~aUYHv<a{dt^1xdroV9T%*aBlH88{TkyYw<n3W
zVIu)=^J3I%U9~?)i}u++c&620oGFXt#4r0(o|_WJhuwZEeAP?xEH!TX5Wu_*92$ip
zFJDX-em`UrL<bG9MHwcfl?Jv%r23|>8unBYC<BZ|R6|bdMPOvjefN=@q)5e_hHdTJ
z0E=EFhu?HAZHPYXy70RHyyzl5|0~bs#j8M3JXa5H7a5?Sl@Y+DG!A5lzn7oFKwy)2
zVOa-_c=Oc3+c$LZVy^aSG1)al(d*hr^T<0SqG0dU6ubI9<&OLp;pGEw8;gJ7gSC~6
z@&knT1@`?WHu3?Ca`bTP+G?Ke`;D7?2I}u}zS~(>{RBzn(sK&w!Ems|&!5jRKPPcF
zm(ZajrgHHh+rIsb6bI>;_cZ<Sj`(^XTb+z{x%Gi_Ohn2D+BI-G(S#qFg~pJltvu?@
zl-E63SdRRIl)&CXV=*KF0xq7KFGKj!r{SmX@wwM_Bb`*3?uvm#<YMMFOo!ZmB`}#A
z%7+SD_?Ar$<6#_&Qb(!W{9vIj3B=|bHh@r3Se{&$*m+XNn?;FN2Bn7H6^OF%{&L;o
zO0)W~Frd)1*OpUvC8u&OD<9L?sw9KMID+J_y!3|O;LCX;)O$caT6N17P%LPI-b<iE
z47iNIEUyZemiR6=oT#`?0z~`urYFz}YaM}Aj5QtOl!hXRi9S26&+^FfEG>ru$YQ9q
zg+>~vS`e{;m^(l)aC)T{j@G~OtpPSO1J2iHy^u0V*c5wB@g%DRp#!)vp)qIWcG#kh
zF*qCu8gLHXLKgt!`zX$ooTd=sX$H+R+!S6&T%ByUyt;fSFF}7l%<FCj5Ca)Ov=o>Z
zAfqTFX!r*qQqJn&XQJOpG-~|$e1Uq5F^P{C2B{^AUKLeML2djxo43yD8_I{V8;iU}
zKx~GW0}_NtEI?(S--5~1nZs#=(>}r+ctO<~=&Q@ea5XGQz0o2P=0r=WxH1quN_pwN
z#+WnlON>0sbBA6%rv`-!KKpDcTwU-vUH!d2%>m-H7Z?!e>KII!777|8c+ogT#))7!
z8wRZOE*P8+ldr%eqzWhho%tJTmGGQHBGoPwHOvd*u31(-%p4T48U*?%E9LV4fwG+%
z%3er=HkKz3FEw(lslo05>Vm-BAT*_`1-iPDrluK+G=MP8_p{J?4_s#_$(5QU#h3^*
zNw~3-<be011-+AGfzxt2v}`BI95n-SPEiY2=6f0^Az|w^V3lg3q=jz1+zgH;$HJiZ
zAsEyo{Tog5WLhBeJFfEUyBN+kzetGhD8f8G)(5dnAbt(K*UV$HkehkD|Jq&<HIIcT
zGmo_sK_H$g5X<t&Ga#;m#&vK2Gnk1kc1+{6SLq|xo94rzTu6c=kol2h7DIPt5G&20
zKHue`7=cWJ*W=X5+|Gj>zY|{y`Sn!Ogt{EewB_r`gQSK7nQHTCgF3jZ{7UZ~P|u5n
z&^BXe&YH>T9XUEM-x)?^*i_~oATaYAuIK&PeqU+6ugK^i$=vrovoc?L^TDqM<!=1a
zR7g+1&z0m&Q>g~!s(w|O&oX07TXAr#RbcV;-rW>(R!@iL(t+A?=l)UCywiCGw#p0U
zcfMVacrTcEE!f!dYSi(*!3zqG-(PrTNT+GRLXOmY7z<&hnLT8P3ubP3-@*Y@PB8NU
zP+9z&+4v;GZmOn2r{yWYFia%-t3LV(EBsJz#n){AG~d*}ptnI3lUo^%6ZbYN1ED=b
z{k7p2*Yu;QlSJ%>rp~iu@3boV?K9{~sYV+RbD=9TeSJlR1cU}EXyEe>&~u@?6#Q9q
zA89bjxSJ2fQ!6t)bavH4d>+WedF}TbdRpUuE=AJzX8-&?y$Q42eqx>5dUe0PDDAoJ
zOOh(`Q}`3};}^VxhmTRJ<sYkDz8BuPJ_P^D)60`w^`~Xilgv3hw^s)sZG&;I6ljGF
zOO^Jm5?$N39|-S|JEv66BU}nrx`55u58Q*4^x(GvqrH}^wU_aqcPHKQo@Z?BTbbbP
z+o;}tgSV?NBaztv$>&hcsQ#cvzD9}wilfBZZtr=*f2H{ON&vz<pzYv%bwR>LoDJSJ
zT!z!j3JbjxYLo&Ie=O{g=r257yV_UK9QKJ0Q{Lziz4`$AdriyMF=_(s*jRGNNZqC0
znE*o=k#`OOsO{gT8eh41j#gk>^~P!ULzZmpMzkbr78Bn}#5N<uhagk@YnMg{MeP&z
zES&(YdNqaj;QXgw*p|J!L=fqvhvUHX!qs@DlD@;!+peBs*}{LhX7uP8m()+49tkHK
z18c&F5`@6cuP5(eeOKdQ7GCO=(>CONPnFB*LzVbKy&<$9W7Uc67Xq1tt-lC8B74!T
z9_+bFMc|sxYmS)iM3C_a#(R~HMo^(nw4F0ylsWo0c`!~Tu$sV*uPD~WL6=u<jHB$c
zCV41B*%SJefA3vW{vvj0aoUr?>I()6EIJ3g=gnIi)odW>!#~i;*|K$*XfxzpU?2vx
zJ@!Bt_2P7%3G1H>)@z}D#ti_c^y!;71uV377&tz3TF+!LZK~Prv}6r5yS;yZHCNlg
zoIZ+p(FYzo>P4m&r**hljMcc;r#SShZr!K4bg=72@7KCaFDoka=AJ7x79*MzQ$iHT
zC?@jt3hZD+iHhp+W>K8MBgW8a`8|sU{dBcAz#FG}STjSJ@0qm(?;b{gzC@YLDAo()
z+y2|J>_fEK%mh>6!OX?{u9EJFt?n8ksQpm9qRkajcDkioXMW0aDTsOfFt3lJpx&c`
z=)<RIkzM~4gE+_!f7zRJFEhU1s-Dc@V~xD)eNUK54ZneJ`o>4VAB?`v`NF2zL#ps}
z&6Y(}NM%Mvr}v$%Jtf9dvX{AT&{Meb{8ipqTklZSyJ^1iA=*G%+6wfA?-U<C!!>pb
zzOKv;16y2l;_Wl+ark4n>puaX^h>2PgOcE7FM?6=rv#q*-R7HHZQ6a_E3ft&-pyk)
z!c4+$@_{hPgP4}tRjTL&?+8OLV*@s?wk4YNq8yVYE_1;-!A~5JqyFs04sX?R2FrW!
zauA7%dyF>hGDfm{8Uu*whk2rU{Ujzv|CD>c*z*%_E%4sF!h8>ePD?c^gI9B<Mo#MF
zZ(($ek{Bl<DKV&`Ir2^I_g?3l2;{5fjw6a-fy0C}?%3L$%t!$m7OCNcZnVoqQ;mN!
zv0(w^+h<Z(eo&wIn3yB^owy=EdxowI<%QFc;kL#|4Z#aoFrCB`yhUg(MWAh?z0cET
z7GElmv>8RZl3B9Fgs_PMKR{MXb*iOj0vP#R@x4@A?YA6lp>VDGc_gSHJd2YLGpK!%
z<20a~%u}c3KURJ$#i|@-c|=wjhT%=ia;-aZulJvM29IX(WT%6cZ@b7#Z8eNni6IP3
z`ev8`%)8!H9xdXI9P5Hwab1;}skVIsCV3g4Gy&<|z(}b1P;18;MvHjq#yuQZN>Dh@
zGTO*s@$7&1^W1l1_>ND6q6UtI&3u~|W}I?}6EuNOpf0mHU!Mg#S6FTV#^hrlfEm?l
zQ5gxm4|KrE9#qHM|Hjo?BL-XtT6+118THneU_FM7bs=0m)t6uS7+~}bKrBM|@Z6D)
zO1Z4e)a2n|Fr#y9QZ=V#8gO{OxJ>-wEhO5$`-7ER4LirMa`JHu+TSn-pCc>K8{SY#
z%SNQ|A-GrT<#_rHX^K1Q$v%x{dR`H-3K8LF^3<!-H>r~B5a^<-fWgfY+Re)nUOKA_
zjPEb@dM3zip8w`%5$6_r_fREM<uhjyvrALxHJNfs7DY1{aWNCrLGqucH$M%U`;dKs
z$flRrMJ!;jJm{Sd)EXeIw-V_prBamWos<UQwZd8PFfYwSi+;N=aleu$?xA0%?<5J5
zWLO!!*%J0zRVm@;H@Z;!d4Qxvw7$e+3>LMrRqO;SeaJrQLnX@$u#^V;e1BT~=J@Y!
z=X1RaW)OFC@^`;hcw23F2ELvhUfo<Zp}iy+K#_Mqw;j`)khe3V_>XvbeV<F2X7oHk
z4G{|?qyvMes)yO%>j3m;fZ5XY3P7<mZ3N%{z7%r!j+o~@2qzz$*T>%1lzhxAMT(>*
zK`*&JoR)>~4~}?IJPsS)_qIQ+b$>gZ%>{tGqzC^4*bls5>{;vD>*h!#B_*Wyw?5?-
z%%t2R5vY})S28$ZbDYYlG%>!X{55YjcD$45AJ%CcOpB|H3>-;a&*)!O(Y|dK5^3s|
zGTE(>gk`~o;lg=Nh|qgX>bQE27W%OE6WBdlxkdO=N&#18W({Q%l;Ao6xL9<`_*c<~
z+vntuNNReWVDQ_YKpRs+?IFMuR5^eIi)q{h697pb3}lm}hE*nV$@^W3EC2wSuD_%&
zc(lR*3cN~hrBIXDQ28mC>H^;NvkhOTH3L%nE8v_)%1t91DstjME;No7arvD~g_f^^
zK5X^=w|niko|zjP2%N;R0gSAheAJ7K%mFI*^?rKHvUF9*G)_hBgBeTO|CL_{E|R|0
z^i~2C_fZX4V?3`f@$qSZX|HBDspHCg9h?N-TTO2rwliO&nmm89RIoTVJ{Gw4Ii^Cu
z^NLNKZ{g@tolt_`M}PE(Q`ej?e+HfnO+jitoFcWwrR{M;ch?)5JHb%dADKz@GpN0O
zw!A|OUrF|Et-DaB>hQn!>Gs|{-7e-tjXaSE(5t9ORHCX3&1NFZ-c{}Ie9`EJQTmbj
z{zrYr;j`$n?lb7pk2vZ}l(c80Y~aKL7gqZ7qy6z!e%2|8+D(Djdzn2S8j$8tCVRU7
zzCO9GsbE?OX_M-cY{DT`X~*Pb;bYO!`Y@b$|FGz(^(g|cDi=N1l$sU_r^h2v*Kx#K
zu4HVhnb+auPH&Z|f5RMHN_qJl*TOb<RZEAEQ>R(&M$dCbV)b%H%Hlk7M)^W#<WI`u
z6mmxX%IwB<M*gw<9&`V9lM~+=`OoqW?%i}t`A&Y7PLSCLk94^zLkI|!@tEIYZRgUP
zQf~+>8q2I2?+ed#Gl1=<S}Jd6^0lAOHNr8xWBK%)YiOE%e>d+Rj57$lZ`VO+6#6oS
z5axHiKO)e6FRy%N=`EtHA0(VvF*C=7MFO_Tn_!(xiYXK$uj0WG)Y)mGQgz0uH)9SQ
z{0ge>%e=Xs?j1(X4<+tiT8M>ty|;Z92|B8aV|%@y(?i~$KOOPjxMR>tRm6;k_cy=X
zTi(rfv9kKtbni_>+|MYV$d?bR-rS#!zcKQ9eew`XNP5(<#BqoJNg@3$x13Pcf(97P
z$QL3tudw;_*)WNSrwLPugMr&lW(Pm1ix!bv$oNMiBR{o|E&8e#G!Psc8yvpf)ZBc6
zDQ*)o_c9IJzj^_%Jo`JeoN)3fHjlLKe;@!A5HRut8xr&O7A3Vxz8`(dB_)7TPiT)E
z;Q*~q$Ij87xr65ZeNsq;@c=ph+tpOFsd=r5H6vd`q-IN)u=IZQC7;SZkV6i?<VZC5
z<~TJ%4vvd|Fgp5fiz<$iia2}BDgs-I)bM7%0FL=%C=`3czkdL^D$w$DEW2;L$>%5K
z&KqPA7hH09d|5%yXk>_<=s*o@9YUVcf^CVtZoG}FR%IT-_uqHENhN#Z43P|5jf6ns
z;O(7{djC99&gZ<(T#u)&Pkma_Q0Q&+mBRPyx^TS8DJa(-E=ef}%)COnA<3s0F>4){
zx%Jj?(9hG8$R|Yi^?9k#fY+yrD#~#9M9a&qdQ=>YjiMKDj=b(>@X&zHVK!2mFZGpa
zJ&4d)2D3(@#P6p%v3q!+$h~TliMMi<7^dLr@=^n9WTZ#7pP+kSpL%3uU4jXmmWdFT
z_m_(`(bYdz`SjK0g<j7dJs}uGf+N0Ame+OOe_dp#+(@FN48m+8qQ_^b{O3%xSk#Df
z`Cb}dgW^z37mRu<aTO)N^xb<CXeA#Hq$1%uBTGPjePpv-VR`Nd0LhC8mTSxx(aDq!
zW*Yg->WLPW!jt#kex3JHRrdFWj?^*l?rBEaEu$L7zyOr_2W1{u1+)63b+w9)+83WN
ztd{0q{GN_ji|a&*jy))i#+~209_(KiiXEPKr6e{hb1^{q`;GBMC!g`7`x3iKV)b4j
zkQr$be-3;7HhM#7M54Vc&*PnTwh|`}j&>T2fivfN!~T-VqTSMeT-#n8gS@dmc4tq{
z(IW~TXTC_|T1Uawj@wRk$(7vI7#M9G_QN#j;-(v8&-w*_L_rK*V5rz@0t)21Vo0(y
zxxTmEKJ%;J3+z7+-wrO<#Esx=PCrV#K7g<U4~-;xvgzUuZ$GU%tA`fA9h~?F^I{{-
zehW${ec^^sF2$tAo50uXhF*N?wb7!D$)zr^wgmiSjy)yl$0Heg)<@IX_>3Vdc3Rf;
z*M00OvB7SNb9=tYAQ`J**1JiU*l15t`mxj*(C#)<<iOD)v>nnJBeqEFMI!0mz)qAI
zYsNU=|N2=6H2q8JXRaxGsxCnD57&*T3rttSYC28W0jo#PbJnO)e_$hJ>tdHUs}F}!
zPEqF?TlPnf&YqteFCLH4<M{idDHPkoZxnf!#fFfrH+r7qVQUB52D&JC9EZ_IpSISU
zxeduZet_S4HiBk%=j0vi?|I`BlIwYFKXF<}Od6<9O)MsJRMqxQZ#dDMicIHGNK^3#
zKncQ}R;gW0sre=0)Qx5J&_T$S1!ojLGFk<v%p!R)PKxVA*Dv9`pXe9r(Gd`tl!^Ic
z?*--;&V`ra(efi%G9u+pb)@`Ar&T8|HKoqgc9@mY9$$%wCKMkJt@T;{?0VyUX^NTW
zjH=VJ39tmdKqD1*avf*ApDN6DzB#-;@mdJd4JDsSyc}$!C7<L9pk(l<nXo|l>om9U
zob+%|d-QBG7X-w(CNmwPWy~AD^!d5cV{K_p<z-zGGE~JGJoLZb?LBF~c3O_%sok};
zk=O`s%%%;yo^2pzsZaN$a1WyEE{0049WNV>naoLiB3vA)QOUdn26ObGu?#2QQ(p9s
zATd@qOMh<aijdRV4iaR*Jsg78Kq?RZ+6w;j-lgUT;!o5Ck_(DyA@N#CcU_1Vfi?H=
z5K`Ur;1({{bl5wNPhZHDIXLoniW^BzfC%Wb@YeD?-?_=sFt&@3TmXZ}OQMNmtgc<&
zQcWLH2)AhChbAmc+x9qfXtKHjy`&}-S9!lH4Fs-?KAb^y$mwU=`@Gv*jbz<ILzTQx
ze+DLQ2?e8zZC6HGBmut`QTo#hnAz**14eWh+0&+%at@Mone=3`V7*dE!g)72r7V&>
zJ$W6bTcuZ)s+pIc!pULfnNxb<v2fB(S@h5S@&K#5SfpKdjh{!2yqfEpC%eky@RVno
z*-G9rB!=mw-oO)uAm9OwnQu^getk3TG5mD%>DXiKb+lx1TV%Vvzu=Y0$1gP|H_V*g
zfK{6;`0?}4v~mbyL#Z*;wkWSb`+a9faDQGaZ#DG<yxp$q?J$u`dnv&SGv>x=u|In_
z>&B$EQ5R@ifOI`~?39wlY-Rlh64&Aoj^&Zs0Z|>>uBfnTc~mYRt`(*$yEzZPCe6Jx
zgK3IM7<*!WL7CGkU$J*G6IRP?naGBgM+qcR4|R~+vKiCg0q<?N04^fxoY+=g?X>)q
zGF96ro_}>U0lMoW!4Hijz0FCq@B)Zli!e<{UX>;KCC(%GPB$UM*(KN3SKow(ayBuu
zhhj+QFd(l4$=-P4xtTxyKw%k!cr9s#qF=-!xtuK>OR+{Cm7Sq^skA@lLA23kw%r?h
zt10=hUwt!sh6I5zw~mrXRECN&kQibP31Aax|J{75uWJBn=zjPh78?^GjP^!-JzKJW
zwE9W`Gr^)q`-4X1_{lEjx^Vh^UJF^;yd`<6EM<yi)*D_>7vLbwfYUlyZ*#+ql6K@<
zBg`O!VHQPRu7R?8GFVS?8cu4GH8q@?&lnz!j0@Be9enG!z?I0cEqCzkxImdMSDH&!
zSi28kT;LvEY9HLVKnI_k-+t7kQt~qM!L;SmZen?5Aa+#yFOBw>Y2t<HZ~JQdpw>L7
zBQJ~na#Zeqy?s9{cmKG(FV5ZXwD%uDYr=2)0ek;e?*1ct|8MU5s4J_`FK{=1Xxz;u
z-dP5#(G%s(dBck%JGv<akrlXKgGfD$cg#?+1-6sfTEt;-Oxy(+%%o^#ym~@x2*+gw
zVn<*{gn#(wdLc8f9Y&WP7zlRu{RYY~FIO2^#a@~U-9*n|XT@z4auZLo@w%rcx-k5}
zA8abd-(w%;{gSVtL4^;z>^?=VmBLHhn(pZM`ZW@COp*x`IEjtj;MFK~><0=-v1@%g
zdVC~E63os4Z2DNVE3fgvTgao(O(L|Op4d;QeZ7hB%$lg5K=%1Q@|95<J2w@W^nF`U
zV-KKL_3n?CG{KoX$T^6w60?-wB-LC}pL`51U*9vc5{&~cyFNVjvJeg=fDR{5l=}^b
z!6I@Ukd@h#t41auf6kW_3v(8{k(Gr5e(s`tBz0IMbqNd0;gKYdy9e+LQ%#fWCMRQz
zndy?)H!thx^gQ;OjLugY8}6p&BF&i!V>_$%_bn~^GcQtStJO8;v>Ns=Bw>A@(MnF7
zGI(~oAr5jqCA{B{ht~7*pPL%wj=P6}kH+>nC3PX^tfHST3kH_V=I)3eaOIq}X~|@6
z++ydfBmPUTYPqA_5w~-*X!Jg3&Jovh#lvZZ&RI{9_1HP9le?m8^z{!qMr?7;TIYOk
zUD=k{alqd_NUc?wAz>Xg^hHo}jz9IryJEb+vkU!}x~a3=u{Va=W|TWl;@9*-`a<e5
zNeVWTVI*~H2re8uHhY7cTBwl-Cz~07r6FaMcs`susVNm>2sm>$$#y0?#*yG2&L?7w
zO^g{fxG=jPVrwNABpUJ2QAsyebPZjj8%|EbGI*;SyU*v_Y9HOzK^tx~Yf|)7T)K#l
zc-ftmmuo>p4D==aoG}=Erzv&oCjn_nj~Uc7HWpfZQ#f%!AbO$N(_F1{Wx#`8!l_w^
zAf;|nw-XubMuElBaRYjIpH`JdFWUyWnhs>2H@b!QKlNtn#~u(s{X{qKXLX;__t<w|
z(%1gRed#Ce%lhAwo^?4I4-<BAjpjdH_@WEM#!{jw&EAAM#_JOJ5~&)P%KJDb({;vo
z+G7tsUi7H7rNq@KGQvhkg+j7CtT~;F&vg?uf#_*&s-CaO1FFQ<pyt>-y|}45-k7J<
zo9HA*V&|eq1Wt3Q^7Xqlv&+N)^7LgL**L_vi#0|d|CCNKV~0rUS}f}~m4<8fEWRLL
zzcJ2!F-$9de>!sgQM>9-hx+p<{rMMc3<B7*=+X9*A#r9jcEZ{Q+%p{nA+(=wpLwVA
zgxHLwGv+(HNuK)Z-mr7}#=Xv^MfEoa152;v>1I88Y_D@U`wI{ScDFC&Q$tGL+Y=07
zK@Rd0SlO@r5;LJPPw@_$3E!w@gt){jL3i*LHQ_p^ckFfM@bA*17nTMCH~)wbX0=2q
zW$}m%-l;O1D6=`cqHnxLAAOX~d@xGGsFdqA$0m`X7dN=60*%WTSw^yh?0A1kd`+Pp
z^*uAn;g+$XhOwd5?wVWG0dq2TAvmbd;MRL37pQYMY7)!K0?{*E4*gACL^h5`79E|<
z?T2Bk$>#CMVk(nG8{JZCn7@>HPmJ>kI?vw>qdzn~k~&S<EDZcR!~jxFA@v}f9$KjC
zm~a>Yx5SRfo@Li1)qM)b5{SNHdv!;4AG6yGu;E*_`54D{2%e{!cl&+vrWg?N?MG4$
z!(VezXh~yJDoDZ%h`DCn5~R`1Mt;@J8Icr}P2%TdL)Sq!6^4Or=Db-$%ol~4yJ3&{
z`aZe;BgZeX^cr$LFH+MSS_0>M4(7?h6jg7B&5ouhD#N~PA?wFj%p~<a&$4`-U<L%m
z7e=b~x=Nb(xcLb)exS8~`~|A=n>tU;sd^gSJwG1FEwYTtOvnCe7VO|Aim>>$Y>w>$
zqsE%q$3AIUYWJi<{KXe`PYON$ScISAcMtvj!mddrf%WRonl0P0L>NW!IV}Q@(T}y$
z#2n0iQt@{-Lz8sG15s;sQkd(V-d}1Bqchq9dwp0Q-d>}%#!cT+AzOx<yuQLKe&1?l
z&r)6d))FmSO`+IiRu89b56?7p_A&js_c8rg41X145lj4rH{ASKH+MY1%|2&dQJOn<
z4LACW?~6F24u-3UCnThCKaim780nRz;3Q51Xubw`0HGv0uU(=L6T`dWLLcIS=p@q5
z6h@NxsghS!6P*-EF0SL4XB12oMW*YXP-d^Uap{^%hNzDs?$a%@_Z$#mXGEXZ{<>wr
z%;3}T<z04?`P`yD@dkY0AO|a)-oc{Yk@<k-WK~rMo45LmU+;X1jJ-CrcyZY5O8u&G
zq{BsL)`^sk%$}R)pNxjq08Ce7dpMtf0>)N_Fk}T1W|om(l9#!$XH;^a>@Gd5y_iz@
z3+Hq`8D}Cj*MyqWtbZ0Q-Hl}`qE7bmcL{cfm<-G70<55hlhiQ#4YXfpzb>^)?>&}i
z%xn?s6>teCL@przkDF>F)2>?D+5Bv_P`8oPHOhjxm}A44_hGaliuOc(`Bioc?~U^{
zj@uC~V!QKjKIf)xbybor>~-)9%B}5Fj<*5t&pd$r?WPBrUvSO-X|ruwcE@QfNEO-`
z3z614B}8V%&QTaZ+wY)lL#B*WmrtgLIMl;QIJ|*O-!(TUbHiYcLOwj;HKL2lEn%pV
zan&DGxsLrRV9>3(9`pOlT;)k~LvAt^mOCwqJ5nrHiHKBloVi4Z#2eE881)Hew~s$2
zvh4FG+kA!I!)hl~>!O;AI$ekaTwS={kxZ194kF1~zpp0H6J4{>jI%63CUoz5SrZlN
zv}nRgAJ7YLtN+jhkT9a&H8u1vv0<7Y5!cHv^|0z~|FPso?jHs-0soOE@`i8po5%)d
zRb814qJQYa3#syy)w87Mn)%2DYoVOX4eT0CPGF?~dV$;*j#Vc5ZjYT}Z(^o&2d~o%
zTW4n2g|y&(;XKAY&)?1bLNOr`i3Ym`XCVv>0{|W=JWb>FiPAcvB{Wjv6MmfDfIA>S
z;cml~B<k3#RyOez07>4dH<#Ks9sUfzbUZ@*rsk<~zCiP}+BSB%TGQxAbq6cl=(z0Z
zh@gPrCM&EAYH;AWi3w$_Tc3afX6yY{Q1&(rkG&-1wEYDzb9CGB+3-3QFYI$J-R7M2
zsI!9j<DU38#i1`9UmPps2gRaj=t2>ChN`$Z+}sQXPM^?sc>ny!^7n4xB!@SG#CLcD
z_8Qc&GmDD7U!7z1a6Cf77OHCR;5@?MY|iLJLHI+m)4tD`_nkuCW~TxLXHKVo)@7Wg
zm>w#J)YYe)3Uy?(y`*=1!%6aO5~yHtH-XqBrFrOmZ)Nt^flg!4+QLgBH;z;pD|dVr
zJbmC5J-@5dMS2&e96jq;P4O2a$jWbNh)g*0UYDcHcu{f(nrgTc*K2&wSM+pll$j6E
zna)2_=?SGy+X;QCs?VT1ZT|u-!kwW+hVL+uo2=u^8{-^=X`98_YyM9^dU4v0`9!6b
zv}JhfQ(?)`REl!>)RI5s=%g@KByy1!yZh@Rls^GOo;L3Jpr<E^`P6G6o@^vkfX&x%
z=o5PJ57P~K$ANytW^C=T-TBov>1EyngE{^0bI0LmD(<b%(ie2mhraCO-=Z;Pea-yL
z4sMIc$Osl=0R1z@4=x1%{yZ|<N-dvBtcEzA;H|OW*!TdGZ?iGkC6nx<nB$51Xrpmi
zWtrv0<qdG>p$(X3r+IV7s9v~savK_j@v{uUSCcr1ntKI1xgx1y<s2DZ_hki)VK;0j
zAL56_<`1XJ8TdH!1^F>rKBOu6e%0HJ$pcigM~<7)<er8Rdzz9jaXmvBZ13s_lXk{w
z*=|N$>#nTnFLGzHU^sVmIxT0ToSXeyBe^i_Ip~EsMDLE{xo=7rj&xJXLXG7YFA8E6
zA)%c1s<4(aZz}_=+_GFNG|g`0bXs>~{9?f!f@QKCt4+NLXSMT=JRoHpo^hMA@@Why
z*k3o$={D2pxW<jDhMK%bN@}jWN3Fl$>Hdatj3UM#<)#}42)q^l#dDVRk--a{R@u?0
zYfLabbw~XD;mzN$tKT!P99Y+RaiBW-6(5@arc$iLixHz3p{~M{E_Bn=gW;Ozme`FA
zT@5D%Pv#LV^m#Nuj|%!dD!35mTwy(S6&79Lwc&iMyNk|p6E<Wg5Iu$L+&U<s1JD|h
zFL!uFiI-0@U|}kL=9Si=D`G{B1j7#ZLHm$$K4>fpU4^Cd<o?4dA+xps=4nG4OC(SG
z3~lQfP$XM%N9x=V2DkMT?%As`bU;(`$tI<n*hT`6mKo(kkR4^``4R0X!2+8T?^;*Q
zbM_c(aGll1;)R8$BD+PQ-jOy>U$|!Dl7hCO1Ep8tsSOgc@m2(%PD1E6CA$g-1~SXI
zvvQq+cXMRd3>^q2MNK2MJFS{r1~{knQ7&!QTeL#>&`S48avs?SJ%2CXMxFi-s@8SH
z4RC~$*{G<|tEf-Be8`KjOu-4uh<MV(`?Q?CCdy;eWNeUWE_Rn8cAf7?%Js}`{A#|f
z`3mK-ujb|LH8<+MtM~q^y5Eq$H<esll&5pVJW|Q$2FeT{*`QrAXoqXIE~$bzqa%aq
zSzF>C3~oLJq&h2K<YV4LY8yp;8uW(J0hK%|5I;|@um5KyZD!22&{b;|>H16Ji3ZPW
z=Ig$y_kM})N96D6>x@7&#187#HN@XRjG6s(H4nc(3OX&vC%|v=x?c}Yv(Wc}E;#Sg
z0G|dy7G#u=$*!wZT!+W_Bj&x~6%B3kU=-=mj8iHE8lJ^_!xO_U%zgth30>@G5=wT~
zS3l{jxKD$c+^g-uLy}Lp!8a956Ur{sIMubV%Ut<x1ZrVd;qd|q9B*851byuA1|~Wx
z+Zv7+<_%^`%+rFz&O!FY0L(Ol1aiHJOGRg|dDB^;)NZCiX4vttsB+GICDB&(f#y3k
zN1yL)jK_^t+p`;eq;(f+YZC{~Yfpk1M7A&F4g@eBnYjdn82;B4I4v`gmD7%&|NSp=
z->=GjZ{7I)s@R6|?N@PfrhqD-52r;FFc+}=0wp4NEWOvjvxat%n`|lHL<ub`&iB{5
z<5VP8+OmC(YD0~;uXDw66$x5X(N8pB<8-ScTl|{(SD>f4w^iFsk78faX(eiybFwgv
zuy8PRZtDB?8Rr$%ya+!jJYM)E?ZFqYXR%e_pSA`3$fdUb-bbTE1Lz7=XItl;*3arp
z@O{=`t&fbvr*U1ion>+;)ECHXJ1A7OaA`uch6FzcxAqg+^)tUVpTN(}`s>%P@AKX@
z(z3)U)WpIFA!J4YjObF=W#-zpr*&7~EY!z1(^z;6wPR19mu^GbvhtY?ZC97ia#8HH
zy+`w8HVcX}3{}Dnb*@gCR@pfss|uyxEz?$)g^Iztft0%i7o|s?$C-riM(<;!u$<hP
z612Esot6VMYD2P?b7jUSI?3|FI-Uok=bQD&z{SjLI3|#Ge;t2+MDy{==Ct+<DiR)b
zB4F!5oA=U~h-==AZGi*d;GHHS0i1>GXrZ8XwCr?)S?{DXt<w?@37qF;#1u2>XY)Tj
z=6^ab%{N8AwGqJ8t`_3j>9MQzW97&A{Y}_zo?l4<V8hZ~pk8ZY=EMUQ@BWu?l+0St
zpD$k@#|q3slv!p5CE$Hn!4wx-QKf}zgcu^|z3-pSV-U<~VqFHv3UQ{g%tcxs3}!xi
zDrRm$<^C-CGZQs)nJiaYM_C;!GsiGz@p9V^Cb!XbjtBuO1_2f+;hK+4^Rs*LVeus3
z<}AU0aX#+UY*~(;S@Lnba<VChyryRqF|W2Zb3kerNpN-0lWC%F{kC$H-#of=)q`}C
zH}|tT15tnPz0XAiZ)3bQd|&c#<SIY^<yNey>=x2~3#d5cokVmD0cj~VwSkr4dmbAh
zCpJnChgSv~#*XXZ!J@C%r)Lvzu$6?;CSKz94=Xo*6$$cm$|#G?4C3~>K7t%m=d7hX
z$$UEW!}MWlpb8cJ$lO-CxT{j*{>Tm7VdMvH=NpAK;A4l^{YBB^sjGOGYAhrxdLb}|
zh%ShvZw)o18sU~FXj1@L#uJ;gSFOA!R#~6y?1@z<;vRy<kB>H^Jd2gy`_j&lJxs1e
z&bn#7n&dXY@a-Sfd0z#tFGY{0s1Q)%9SQM?8~~H_aeDG^<UKWx@@HD6AzGo~`q`3m
zYPIoGt?4UhbAy-iTZ0@**?P>!8z{cBpTq;-GUgue;r&<*Sj@m+ik3Y(B9M6v%JBA{
z$~4K@$2{#9YalCO>-M#E8G*f#Na7FMtC`JS2y8cyo6y)tJ`vA|L2ixtz-c&`8bm&~
zKKIG<dhZb@DN)z)j>O+Oj%Vh~to!j4CHFkzRgv;0h;!wcSE}|VXPbcCy#1zceW^)>
z$>u_10q=be?koV16fI!n=^hjU>gdt3ejec_n<2j0m7poK-ut+mKI<?4y|It01J*u{
zlhmC2upc)k!&0h@+@w&lTe`1g^n@dDlU7u~Ta4J0!k)#I4XJ{j#f-uS)3nTSv0p(;
zFQbJEZ8TloXL$av?LVs-g9iDr&Tu4eECzYCU-h=P>olW7o9RQm-^RnQFN~z|T^lG0
z$N>kL4h0srFat~dB~|<DlgNeIEm7yql0m?n$RL}V<YY^KrQW>vMJo+ZBo*<w`T@06
z^D(_rYPsZIXt4eg5n#1<1QkJf3P~<QqZa{22aE74nh-m*LdlZ$sqXgTo2^!y)1cU1
zEB~a54%<8;P(OogdoOPqK{{#Hqa|k~yaC~~7JB1Sx}mTl&(E<RA~KYC8yHDK>ah<S
z1M=-XnrzV%yg%xBchS$OD*(gb@@_8mk_jnB5*?zDzgAo9I^OBw-0q^~T=IdkBKGyi
zK46HudmR9i=#k~f3}0`5%=^qhy|8j`^5edr5DW9BWW7ASA<x?P$&Y#Wgx=||_kGTC
zum$!|hv2|m)(E|<Ia~*0moVX)XIxCnUChZ{T$#Jj9N;^t>@!GrL*bI#tJ2&>nYn;M
zj99TyycN^4>8tl8K=ZY!zWB&nHnx!apg)M5x*7q*|9|im8_Dqh4j)rWRRbS}2T<Yt
zfVI3Aw*L4_?lqXzxu%lG?AAW>2*17AU+<FJ?XEW=y5yF6)N!--4_Uth#$<wnBy1Kf
zqkvW$)G_XsaA#*ps%Vjaje)x8M*q5u>+86ln2NN(%8i^>^cDYQWkYh)Gai;1xEvx>
z^5urAP2-adEg|noBgJfR`}iZtZ@JaqS)U;Uyhpq1q2ew>e;4w<A(viyG4C_1XFmO5
zk8DbA(6Vdnk#zv}yNrNm1u`A`rMa`+`k8-?O}psF{<XUG1OHmx`ksHy5ER|%Usrmq
zq7G6eCSM_(7GrRc?MYp3iOAD)*lu6RTn&W&c=(TuC0~<(P^w;ejs2K*$QTOVAwc#E
z-@;znTt_Uz9M_r1f2m2F5!<z-x)&eV2i*esxtF>Hv#~=R%}K0BDGz5`G0{#4NgObb
zW2qTBYOZEM?8@%#Pd}-NoIE^n!IFt?YHA40B-l16(Y}g72;PRrdaCP=omxps%+$n^
z`b2G8Pqe;vUi9?ZxzSm*mqo|dULL)%_RQFsU6Vq`ngE0KTn(_nIaVKFnL}DrBia}{
zcGjFlF^U9jVe~m}j<GjBKQTpJicX!g=wub`8Z<Xo8s5N@<NKEv)D6L4?fGqkqBXVS
zqD{4D#kwi>1+zaL8*$vu`dQ3_St>gqsA}5=<!UwW6R#9Tzr*tr?N@pJ%cEiWN3<Wm
zt@0=`I4U5-);spL3Zm4fo=pgg?9p0Z?b52HEj={MIx{Ddy8nj&VS-lSA?R~34oTz$
ziBHtIGUT_uHH5nKEwOMGl@Lt66b(YB?4=9iEDHsiWv&5PdI>jW2e!=T=k(-3<{1~G
zbTNPnk^&sG2bi*WW>2<w#s1>7TtxNp4+^7`6|LS>b7RO^@dX|MM9JjTC{KO`EkFf>
zoYm7p@ee|=&9I?St(&7yMrz7pkFe6sSp$Lg^jY0yQVaD&|7@2+BV^M<R^=PYtBLn)
zO1>6mn^?gQx2gZ>hOg7T8(^Ar2;nY!_$n5+iuf%D1JNasnz6C}gcFA@Y(Ct%f5ORb
zD_xB41h$IFsfIG9ERh@;r$t^M=>{RzXVRWvBhki|R@k4>{pJ83AvJnCjL7<!sqlZC
z`$5$F5!C887yFJseg;u*nIosAQdQ?Mv+{MSq#X>88|KWtj5wEh;8};|^vlP>VlzyE
zd%veNNOD@0@j##Si<IiEM|I3Quq{^)^LwR5&6w4U^d7>`@EvzGL#uT}5_L3>ZmfEm
z2c(2pSGAu9+WJt{5!~M}cx$X+-+J<UZ_2b`7Ru>I{@lp(BQsuo_^oIY!bH^bXStiY
z(Nzkjy6DxB)GW+!jaZe|En&;`#F9vQSS#ozRYq;RC)N-i$+1cEN<T95Av@Hp|B-ZE
zaC~A};-j7z;fh46Y^hJKk7eo;9|ogCQbW3RcxV72*9}f|i3OPLUbUHX>fGdwuCsb_
zD7h)I^TXONM5n~x9~PZRP$G%eaV(L4{{3TP(D5S*Q@s>n10_CmO!Tldhf|w&Tm-E5
z-&x%lXq&*)1LOXl36k+oUBKx`u);{q<BMjl!I~e)?#SUM-Yz=<>Xm-zW5`W6p?ytt
zSrH2>!Zn+hJkeOaE(-U*2(vR=#l%As2g{=O3tk~h^~c{oF>=+m*xKxU+=b9d2VWLL
z?<1Uxn&8r*@mNAJ1&t5Y4s%)_qp8{xtsA`d3r?#J@9rKXy9?eM*$U`Sy!~6;2cpYJ
zlwBFFc}q-lYDuE@ci1y#QiMBJs^W}WaHLx>wSw*i>-TrWoz`kz=7y54M9=1o<0WTC
zQa8e{m!$(eu@UreK=#-ize-;k<i$@JFBa~9MQUEg4h7Jepc)Y_3dq$xu|m%#!Yqpd
znKul$g%;fJnH!l$fZZHBV;1N<y=iyGyBIm1V@du{@j}v5Q689+?;7tO7wGFskU$U-
zH=}ZV|8Qh~LZ(vnI&Fzfl)S^&M&b=^|1o8wFPP=lkCd|CeO7yYYA3SRHvR^?GY5ia
z3lB|n+9pV@4Qu_ET6@(_+5Y;L^pp3juQQZbYu82gJb*0y5dzWGOw8zV_E(JghX&A_
zI}AMHVV{L_5Jr#xT+t%De%rjR^<SSS?`QlWLyWPbiR-C@gdt?Jt&4SruNj|rykfsR
zhRq3~?DOzT_J0*qmB0V1FML||-J0Ws#7O|eh7U#dCP!_t%LZSXkKzKv7_`!bwCwNF
zAdYc)iTBeJEc7J?a$<$E_gg$OciSb;^saC3s%iOvp-Y<Mm`&|@N$gVPitQ^XP{_fw
zP$XIAtR{2^OxVY_Um5BNd;~@3pCmpQNHXNa2Sql{p4I2D&X)@luk0TDRGW*BU^>;~
zHtsImBBYxS(?jd{B?(U97XM5E*Wb{?ua*2&zbyt=`+pQu(hge5a}mSk)!(YkiHH79
zmx9jEIx|<%dTt)AnQ8xu$fA2D5ioc*?p4=G)RZJ%06nDh^&+q73kILIUpkx75Jf?l
zjWOZ$4S&Ms%=tMgqhuIKwD4{nBjz1zA2AC#sj<r&WN(q-sJQ{d(*EP69QQ<P*geL6
zIaX<A*yiZzBD_->I@aG?SR5CZK>?`e*Tc9#Mrvqz<}1u!BbWMe>R`IW4DOx3`TbRd
z>M)hHP176<OQ84U)EL&{85Ok8iUU{diOwewk~!6N`>q}t^66IRu25=5Rp|CtG{%FU
zNzSXH@tLgswP%k{MNSVvqn#O&4{Wg|>N~wq!{E-_U)J}XFNX#{qQ!y_;*qltE93&S
zlq(f_ZllsC^nw2LKS&5bouLZigbB}wFq4&TA}4X$dL*Y2N3NC0C4^AFYo$JV|2x!-
zmT2Gl85FTX(`Npdxx+wjaas~)ps9OoB@xEy8CwowY&dB3;S|9RZ!+s9!(;Zw_9*0N
zREa+UCxn8Tn+*+ts#gjaw~~Wy&Et#z-HU%WSqvFcf&XsNJ9gd?Mqo8uyYOYs)<pR9
z{C)8_(}U=6cPzxCF`ph<{5_E2w9eoQOc7t#Pe*32PY0UMm|v{OYPQuq+W^bftWFk}
zH>Cy=5v+L|33kMnhVVu2G6Lgm6&IzKeLbK97CFA|LbH>AJdrImtPCW)#$x>tI100b
zxvB9bQ_`cZ7F|cuVT{fdZjh*mNv1nW)o*LxUw0U_i%B-AqF04tm_RtSq|6=J=_WE|
z+2I<u;3hx`Co(kAK^gm*&Xt%tcGMHGox~e;zA5U1oH*?s!TNnxQ0)VZB%kn}fNtfO
zRWO+4YlfG8#=O5MU3)b#=OyZ4BuI`vyfvrippG6E;n-Un?xgr}lamiZK2@y_UY~ry
z`v;CSO%R0K=uZgg3>VzScyxJ927qWXoP68FZLHF{>L#Nh5>)OBr)9oIm&}v?SI1ef
zTQ1V$RB<_HLZONJAD+)hD%6KCupUXvs__6Kb2ZWE3*f%*coluCR`gPzs{MGU)}yH<
zqkM8cf1{>S&U-eCmWI#Nsxg%A5}Jy(pth(T`$vTtO0N?+&Gs1+E`^*HMW(1Czdd%t
z!h=GSlS6lU4Zy@mv@D}YQ}UzCcj=;OGd0vx0Z4Q{uRyJLJVlf1syY;Pa|zEfF8}4^
zxqkFZw67oH8%f>9%!loCPpn|90~`TxNWYQfZDro35-L{wQDbFvT-A0MX(WA38DXcB
ziPyqE=hj?Svg86{H(A-nY;*AmL89S;f&1%1p_ti0yW*grk8yNEel_mhqha_!(<y&$
zqdmG*Hzhp-wI@Ani<=ta)=UpU&}M1U`h2*SXTz0DNV~5Vxamb~NW2C4yZl`7RBxbV
zOwl_vr-|@|Jq*!7&#cF}-OXkxp2jkax!@+53vNQ~ys47&`<xYV^*ntoP87)%OLc%s
zYH^v)oMh9>ts2CF#iU#1u=8c*#iTj#esiQ5N|G9E;8PR$nfTz4vr_SrXjaASmgFpt
znZZcVBM5YSa?I}*=i*tlm!f7}cf)rWH8xxAc58?vf3A6@jZMD3n$Awk>5uGZNhKsx
zLBHRYD1;zS96h@&OJc`mZ#C<bv0=b-NmHj)a%qIbs|AO<!A`eeN`<p}F!l}-fTCjF
z5^5_R)K)x@L*Q#ts&x7K4E`72PNc;!vy@x$vjSM}bPOiQ4{*lSm1wNRF|%G8Mx7b1
zwgg4yO_AE_F=wlUId|OBoALKRY`*a_bp=SjLP)=2PJFE#)TkECm1OZxEMJORe<3`x
zDRmR40=?uUjurz=Phx3)0WYRm&rysqF|)F>$GCYZNBQEHV22*wIj40D95s@BJ6v#6
zMYw=%UhLU1vrG1AuB7}PEH<Nc2xjA~e24NVvZFA_cR=R~#9YTCZZCG!E14{b*{e);
zVb<r&N=;{PE3b%ACM}AcxvgJ<k-<j71<T<e*u0+b)>EWDzSd|dPU}vpoRV(foU0^<
z8_$LqCI&A`7mtb5VCoz7*Tu)@=BM;09(Fg};nM^1OhyWj3<fxOCY4z}+=Pj$DS1;h
z6z~}#Ep>r>%QAEtJZ=Gxk@QVvS<X(c3wVhmR3|{c2dYBjQ-$}mH8TBXV`7<9GM*5g
zv&Scg-lrp8A~pM*72nm@rmWD4I(3aswT;Ih|J~kf`iesE2j$Zhcg~Q&Mivb?Jt_${
z0W(AzAAjV!&ER=A!Cc{hhZG#OaxYXM#d?%-)}Lc)bXp$PL+&>US`CAyTwSt@kR0z~
zO*-Vr)*=I&LB6Q4j``{}@G^(!Nbo&G?TN|qzb-z?+W5Tw_(fdosZSYgg?$O%Ze_4U
z=q<~*@M(#|zd*I9f$nDq+iJE%hk}WDMMyaZQT~RV*w8jCsBIXWp_|e1XY*G{NG)iF
z@dMs@A`b!gTY8hZTyqWnd9Wuonq0V8kqq_=CNWC`<J$_)7Wm_ng@3gp&p>GO%@ON)
zTCh~m3>9SFqq!z+8Ja=cuR%OMIU2f$CcU%Os193JlTPa&xngdcW-nSArdcFn4#RU=
zS82jYCvO{C*-OC*`?N#`A5lhssB~DdiQx2{mgA`z*x?WVnUXFX6&abqi;ZUS$kgP}
zr**s=_LA7X%w9e*ptO+Zq-S!v5OKXrbRi0aKXf@OL#ipU9Lqq<KOux1Ffm+9`#GJC
zHW-s+A>ytk&7Ro4`mU9laO~`{)R26FBcfzDEb+d?q!($+7RL1B{Hw|7G57I=?S}`0
z$+K9z_ZV&#Nse4Hg8c}hU1!4cksw>bhIV!rt^i5^R!beR9Ze&5V!i=wbDGB9bR{D*
zXK`UuaMFS>yiL|Il)G*4w{1<q*D~j5p-<Ot1hRmk4GYmX&?Q(_`IbBz03}w!AxOv4
z%zed~Q-vPUTjoz-f%$k;=2}f<0G^s0wI{QX8`dYSXRKRw5f-tC7BOS4LIp`(fm!6m
z=FypZXth^f_EKs!1t0o%q~IFdgNhQ&GX3wXZ{xh8ahk#fjU=9Il+A>dw{a;j#;U!2
z_B+fz?{Ze+!r*||-+9?5)G!-cA4z^4P3r4;_a5sN(_&1Sx7vQpk+$|*r!^{M`rl{U
zISx9z&esR9-zzPu{v1OE+W#}%4Z`3}1hx00-G<xDb5jqk5k}GLMj#=;rpIiQWaWj#
z-^Ix9)aztIrQ#1sya+@`CmzyThbXb*wjr#oC37>E;w^%yw&;Dp`vYx5ReB@6$1lG8
zG(EdzX(0L<UqVpD-gn=~r@Apk?f1O(en`xTD!@9i-pI>+?1|<+dr!VShRbY>uA$pW
z4u1P>2S6-w(8T1qSadXJGS69DtXf|IFh*h!#;!$!bEcP7Zpw5IuEGY+k*`Qinw(y?
zlfCH!0V4SaRhNCLcl<>j&gzMk*!HVyOPrNAFs+@{n|jJ0ue)-50DhF3$e_=u1^~p+
zVOy}@7sk%#4%5NVON`n_iZg5ojm8_Q-MG{c@P4J{jEsmX_;VhyfmZ8G4$vHasXr9I
z^FBUNNW0V0prY7r-P8iwoQU;@hsp<`hmq8k$Ulb=q<+W~GG=ncCNSRl;FM60krcZN
zVATQd#2ge-NROf<8Cv~wXVC{$#JS^t_#YdKn_PhT$Z%mRH{DhSn`wgT9ytGNBzL-#
zu*>$)6=cOdn*Y2RMVfAPG!1^hgoSrfg^v-0)$Rh?Lx4tU6)4~11A~wWCDBFb#XchL
zCF_a_tu=UdeLNR$@n5f^WF&c|Ak%gj#>21A)R4JP&-{5Zu}tX6{F_HcPSv<AsLtH)
z-}l#lVJJ~kpP|3Z0<JZ501Cv7`Uz0vVjkPx|25zHYt;K$g}E2^<X^aYF)sh&XZaVS
z^rD;>!k4jmr7rZw2pt%6yfbu>+%Y$EG8f3Rlh6VKg@kYqj1D1=J33Hl-h}51GXe9>
zh1rMt*jwB*iXov0-g-vL%+vnyAhx~bmEL*)ph4Gr&|FNIMr<}rc?)qLsih^}uk7n-
z-jD4?srOxbaiy2E7jwM0E(B^b7rvh7*I(jYWlNQMU*;lbm>evg5f?UTIy5(P0q;Ix
z@AbW1I$g@<C_f{NOQ?iEaKc54?0z|Tu+%D<|AO7#zZjKp&AjrG=2sNVP+GN}aF16D
zv^1IzFA~0#)20%7Gnw~GiGR?0o)ICEe|De$jFmqB>?b@^pd1b2KVi#R^FP!`g_kge
zml3~ovwv0X-DIxV{x#o!R43;9Wg@~z>}2V3GQo!0>U}G`_6vqC8(G+DO^3WIM0Pco
z1)4ML#xs%x@@1)4N^MOwe=HY=UW62cgqOYF{CI~3s2j`5m%6w2#F>`SBJWM}=%3{~
zDeb+;jh|^tx?tvU?uGDP`yBYT`T4Ng;Ky0(@fi~x_y|N7-c}ssvTFO(RJkXFmIa~}
zz%ATWxT#TgBvQAQd5fqT#oW72?K2!@&D$-eF4Y6GfP>Z{hPo!2N76NFxgwxMQj=H7
zbyLls1wr%5x#4bevL!ccx?HhIzx)wiqK-gD{(1s}=hn|4i9ILJf!7ORtcRjs%C8@+
zp&)Vt>hH4B3hxQL5_+OL%wp>+y?^qAZJdE-vTod3;{A!+e*OUYp8MiUwm_!U*jb@y
zA$y-!VKaLU<-I3+QjYKF=t}%N##B`d-FTsJ&8FCK%7R1k#Y0P8G*VP<9(<~PD@Z4L
zK5D+mO`VIEVX)<AsG)AnlS|0#R#?L>d3Ws4uI4v!I}lvN=JVhtJ*yeowP>q-w&*QN
zJmIG6gAWRA1f#7p`5~>o`K0V~jmeEB?UivzJQGPT0V8jPvc*3CtOH9dJGUZ{V*%Rl
zeU)A^F=Dq$1TqE;wqoMfZ6J)bC{j}$onzfF-UDySm=V2|g=enYxeE)=wy;hoGkf=l
zDXRqy17dfxfR!{VJpjq^l~7Nwy~}8XHcrTWlaU-$pExu)x4+f0w4B1Pld_C=#%rKa
zYt)IoWccG}SW?XMvBxbYqshQL{m8zMD&B(JiPd%Naf{wDJKFQ}L$W|^VRTOIQPD!i
zO6xzi;Ew3N_|nRwVjOtt(l1PQTG}UuqI9+r7wk@<JT(hW{QiZQsHlDDrsfW}TRSv*
z+-Ex65i9SZNcK<Ew{j;}s`4K9D!u>~Lm+a>Ppxo&=nghTO*B9Qb5ige9-UTO5*?L;
zB}7xK*V9<wjDQf$KQLd#sUK)~rMw*}7rA9JMeQfKdQDx)g=O6LqxZ0Kk7kePolnpq
z^t|L;6p~;hbtGgLNe_)r89U>tQ1dI$9y<Tx<1Ia!7d5<CwAsE`^oGk(2-Z`usL0S`
zBsCDxKN(Kff_=>FPD7^v$m3u18cE+TpSHCr9}vwxD_M}t!<ZZt<d^ziu?JB3L;YY|
zK}J9vMqMz$$#5mKpmMKL$VdNM$OBUVU5cdw-v>*D7zav*)AD`l2&WY5^F6iNgncJf
zT&`$lX2K3Ecpg(w&h>T5g{3v9018rDscJ$Py>IS>Vv}8}LLV80YM~00@z$@wo2f!I
zT~V8n1z|X^6F}02P7Qz6!ZWtQx#I>v#AEjS{8h-CCDH3-m)w_gq$C$JO{YV4ODeoS
zy-F9+UyWg5LUr`Ys*d<AmBmm5^8t^;Digw6Ff-uXKcynID3te;-2S@puly&8Q`#2I
z@iXW>HH{YPs@>!)XlEkYbZ>qfE3f}NPakIePrOwYx$4OJ#QRS4TKqiq>6?S$&X)%!
zFF>UvbHKz9cm>_FN|06{Ts+a~i6J(X-xP9=npzpZ_6z%Dw(Fi)X3F`deeOvQLw+ab
z7^yZk>lco?q0HzZYd0ASlj18F_Y#HTF<fKHy)!;!0|B#ZB$1CKu6C0JQYPt-N<j?t
zZVbD%s@F;?&B!$lqVLW3$LNpg8yBJ%MAE;BQ^xNhACJ~qmm#IisKat3|M&VxdO}5?
zqn+Q;f-V(yV3ck372(vtxO+BUs0rxsXYnGo$v7ixw!}y<s>&f^R!Gdd@K{*o2p4~u
z+?B{>uj#=~+M#pLWdA!~9wG({X7jaK88v<T&mTWV!=yK?*gvrv&`&g5E0q=sdjvgi
zk~v3)4SW<#9!$s|T<ENnwcbso?$M9)%cq>gzqyK}uV1K+vsz^1>MI<$DTzIcIW<%#
zYnEDn9?$%@yuy^IH-kN$3Ln97h-cD#M0~6&pord=c>k11Be~wZWB(ea!u&hCpN97!
z&S_aMP*TIno3t5E{u<0HPRpOn1s<ATae=q5BAlGfKO!`p)v>eLoH6_C#OtBND+dPe
zt#6yH2Q$jg*6r5%wrKg;AhM#*+Jc<(|E0Gw!>FqOZNbg=_8r-oY;V;mxy{hPdW=Ch
zH@_Ia?tnb-YTT+hzS-W=)#qW`V)|P$EPW=X7x9KhL3HNNkfBd6;vCo$_Zg2I>jBZG
zYFqZa=)m|l2}Wx)1ed=(lG$R?)%yNQne^pF`K28QIS`_px>4G%SRDlXv9bPpx8%!(
zqQ9mby8S2VlXNP1e__>jB|y`T2NE}-?u(<xN;4bzv2qE5KdI2zO8r+JF`<kMnhP{5
zEXS!BioGDtoH%%4^HX7VOx;64$amf1_2JYHBwU8a{$LM3HXmO&wep|}i21iya%C8S
z&p+Vm-emHQ_>4kCpDf&(`y^GkMVw`v;r=E70-af!NjPcRag!kf>K)=LKK_mT(wD|8
z1AQ}`S}QOjeO<6-{enEa*#d!<o-u)H;iQ4s?~DQ5K+u$2scvP?rL{c&GD#cE34>N}
z;k->|Iou3iJQ@}&E>@$|d2YIRyj$~xbH`Be05O9)U8F~iH=FB`U32^f5w`h!kb9_^
zI03vi*z({fW4hd$F;7{0w3GO)5Sn;f!mp8eVZ@mwkNV?x@Q}0ONL5aTOq<3bU5~@8
za9UUqog?2=q9t;H202n>N@x`^0(k$5y8&*=DL^?OZ0baoPL6pp_HxdAl9v}Sat*M}
z%4}YIU`abqcFXMJUCfDrIoZCqJYCDMH6S-Wx$b6$m}l5$SdNjq+~6J?mNUw(`S@Nt
z586?=jtK)AagHa?ke-7u$UK**$3wcPC-lf-Dm_%B9Pl=<i!^gVpLWINN8<Z1j1|<S
zYh@F*2D=}q@MBbHtrHjv0oUq3R-Qj#=g+e<8L>;I8@FoWtp(&;b_*`AuwkMc?xb}G
z_iA~CAW(i>y(wd3Pk~p23k3=jF;zM(qp<{GNUaQ~j#I!TksEwg5u#byp-*o>;H^K<
z5x_g`v`%3t<;WzDC0F>H6hp)Q?WKx8y^Tj`mngv5YkYnuXMDHXPvMR<A^G~xr1h9l
z?n)^T5LhDsEt1^ojfH=}?^_iOC71{hEmhSv9-z5G9vHP4saY6Wa*n>AoEo|Z-Q$wH
z?!iYXmx=j)Pb{vY`lQ|@UC~F)kNR!B?)AKAoyemByP^7q@?lQm@m#Y)0M~(x*1+EN
z)%3v}82G%liiEuD876Jz=h|t}RD`WB=(ncCRgFAt(<~5PH5uA75>90gATuw$Q~0N*
zmzx@_sD=FvhY`)t`hA`%zy+5oOJn`*I~5<miBHP$lz7Q#PT#RUi_F(3YUD_Z$Jf16
zOy8pHi(><%L1c1hg>Ik^LU43dsVka9FL$BZGB-I$zZ96nd)ZHtlUVgPEa<mN`QyrC
zL!JG)ia*)JgY38Tsq-I_&k=)%(2hsl5M!yZ(d$l^O<?JN^2Au?v;++ey^2?zV_Yd~
z+rtsAf!;}S!b;e}CCu_ouBueApHVE5y1b-`t!O%|WJvFLnPW+6-j6Q7C^hs^2|5Vy
z1b{fJ-B8V=v6qpyWB(2(KIn;FZXC8mM(8{^%o^+W82rwZF`=nuKG`M|c@risz`_fD
zN|5t}ClWbJXa<8^2w_Of{m>$Q!nl-pmw%v2qkj<2%OLw=Zxns!ORczlRRZ098oksb
zd$rZwCWQ#~B<<v@(Xry`j9uQP@}76<9v`Kw*0nB)CyBCoO_;}g;8hd6<1<F=sfusK
z=xO6=SgyKBgT|jaAbZCr?WWn+Kee9w@+QUvR-Y)@u5JXZx7kE0A>)gf2EG_U^-!Yn
zOX(MCNiNo*&$$FdL+ny<_LzS&6o^%PE?oU<z#Onu2NdAH`DjYI_AJTIcx96$*%F&O
zk%$!7Tv&^})3TXv)f;8IYO~0s#LU0W;N)bq;~>cs8Rtw>dTGz%^CLC?SqyKP$-G!B
zvU`LT?+N0unztx^dUA4x%6A6qv@b9CpKKq0MpMn>%_oFwo@l<H31%C@ZaoFE>7_>~
z|DY^VO(P#?NF;Cvnu5F0lQwxjXUwvj{dL!tBWd`^Cn%>Bp_Drys`qYIxu4smK?=vG
z#v`2EYv-T#lP2DBU9d0Kk3E!(P7!#BW)s2D!M#+t$F6q;5N-zs;XUl+BaZ%*@3zro
zI5ob`Soev4jHGZgzDk^ZYC#F6StrK_<S^S6y&{~t;YHjFw+3Qw5mmh)vD3i{_A>UQ
zX|joKL;seZW_jjs-xA+7JX2~}^ub>IFubmxp2wGpZ98U5@!EyJ)LYFxIU?Wav@C~f
zMAC{^GJ6T1Lm2kCvRZIjzs?fpte&|bxe3!Dz~PpgmUv~);4N*9u(xpHHgVx$RN|&@
z#fm_l4+LquUZ!tliNXY&d@}JyAs54RF@TE@=e5-1ERBsZOkyldBB97I@})vFV{kqZ
zrCD%x>hch-!-=8JY-qmX9G&~0fzZ30)wdmnlCq#axv#EccVXi79rYdAqK3gc$b;AU
zM$zDpsd_+NTWo>#|8Pfq+o?dv$9G1?etnwLavFF0$p_G){DAvAgVCz}>j%U}X&u<V
zz9bsbqD1Kv61(c0mO0QNoMxC7*NAA+jyt@8wI#xa-<rM79d`(P@+sy!bjN6lN-u(A
z$=qRVch7qpUl4xr4?%x20^f!6&ny{v)yD0|18L04F97JYTtS_H>$J?`Lfokrg2Zil
zlz0adi%^b8>?YBG5tEP(X23$vfOZ&CtS{V|EnlV|i6=^gtBg{nsQ-y4>dgI<{{335
zJF3psQk3=iW8*Yak!mER4{aMmQFm|2lwsLU>xsOJH!X;>rKY#}<<#yoQ0TT_kA;<s
zXvJ(E?xpWYYCN0}%zePv8Dkg8J21{xb(pzIw<g1u>H^_{;!fYW&H<9KJ?<&r)`W!h
z*GXZ*(jl4*F*(DCI9ptzA~}d5j0;SY^XNRjrJk_wGdj8{Rr~Lzn$fX$!fD0i?DtO2
z7_;q5%s7y8u$L<vdsOdy^J?DqakbuQsQ~Ioda0deJ>HGDibYR@d8{nKgbg#@(Iz$+
zSPRRwUb?ADOe}LPy*aC=EWl@8e^`C;QFap+CSEpV-#B<%y|%WH#*=8?dJM*GQx-%Q
zaRJfaLuFhQM-Qt%P#=;Q8ZC@ZSr8X~u#_zRas-6|gHvHR_#f)NI7H!K?5=#_=leAJ
zNWRfGiy8-S>C-3;W`DLybtX2;0K@&F-?%9q!a>BtOWxDZtFN)C!WZV6Pv9%DxsDGq
zUlaA>oSvBhXUw)<RiDs|KA%{kLD^8@IT-QqNgFzr{Ymk(QrMo8heNB`V{mbp_vY9Y
z+2#KFfF|{#QQ{{MIt&>|hD)pqc{kvkAhkXcMQoM=gfO|8n7sYo9a79CcOY-S81Vi^
zwq^+)bm>eHiJ17wfUH_OV)vlNaHW#|%h)ahpV4P4b3Iv~KVJbGt%SYzTx+`p;H4r^
zIH&fYrtbWqA&9k`_-Oz-_US+Bt%3q=#LHQ5XUI4nmi6aq=_q!?8oEUzRTzzmC0skK
zDk25<Zle~C;m%&Je3}zWr>1H>A-iO1dXy1zh_8thtXe~<rqp339QZXupf?lf@(qan
z1DT0Sz4+_2uT{cK{s9!BuVyzHM{jT!Ns$>Be+bM6%I5r-9<RxM62*ID#J!G4!GzMt
z852s_L`ndh(<;j?VapW+w_(+@UlO-c*eOkg*k$VRLbj6Fcm5A&Zv$s#RqgSgfdLLk
zJ)@G2X4f$%8<J|K%dMGasu`Gp=fD{pLygi3Ly3GTl5=Ftw}a;#;CMXB?PAe8x6G((
z<t^jl8w>~x+EoG5P)iWsp2ra-wc$mD|M$1{b7ltX{_Fprk8+-u{p`K=+H0@1_S$Q$
z?KaC<p>@$3I#_${EL{X&CUy+K)bZJ9w*o~Q=BBgjpw%uQZo#LA_emWQv*dO0E%Nlg
zQn)WTh&zbJd3GDB-h<Qxq{+e)?V}Hl-r(ir{-znLlTPwawiot$9ruNbi7T)7p&3@@
zUq@m1ql_Ze!S$r7P|M)$kQ(Gguz4#?_^jGwetWBT^XAsZy`F8@*&xWd$%?xX5d8rp
zQdyO~1veGLMP(jlKnAC)uNpkRn9+z$%eL%_dHKtLQ-DK@#|?~1{vw{bd17?fU8X}b
zqG$NpIpSMeLg(A?>XFEyjMr3Kvd~D8q`uNjF+orrN;Epi{+-eS;Vv1>z*)P(2!=N4
zR50`0(a>2%YE&0^4@fo+%nwbDx7NiPX=~9->Zi}PMLf9r*#U@9P;b&SFkF<YF`6h>
zJiB}`&n`y9s#T2^ZhXUfx4Q}&YK`D%wbC36PmVlP9#uqfePEH5&*>ZN@MSM7gsplF
zu`k3{UWwybB@$+nN;P6%VAF$TVW5xez15e-u?SFrrRiLJ*0XOR%KM<w>|4XV+?Ph^
zf>4}m?P3(CbjQ`L^8_MoBH7h)GcGCDE!1o&bzsrNJs!B=25)*xo(JSa>GKtWx!b{f
z9-BC}wYW2w_Kcwn$5FqKtIhD<%e~4X#$R*xDmw;ZOc{BakV}5cE8Omg9}r7Hr6ZMK
zFw)hbPGZN<$Hht}$pxazm;BzG9V=-qbG<?r{OS2hyK>j7%Gaf<stMp|pM@0yII+`m
z4lm8X_C(fj!8&QCx~tK19~V~07x>HlL#H5s7sKcA;RKLo@*gFv6K$FZTb{7$jk65d
zFXNJiXRFv|igRVgwdzs5wwX#3w+4s$BJSUnTC2ROl*Kz?3$9Xr@t)cY00(#54S*qA
zO7oa?R~v`N=b<|I5$})#oc{tTR0Yep1<*ws*YM#HQ?1p;vtHW*U1mS!SS|7!WS{<&
zzy8JH{v$7BcULDyw;VTDn$CK@UR6W(F%}-HGPwId<*O=FGmUJflIl*h(O3?Xy73v=
zIB>6Sz{Z|nD_N_recKa9E#D$A5~q%PC{bXiTfvf}$vJYMGW{nr0(=+wwkn=F$Ev-b
zN`&yn?3z3Hs=~Xm!5ZrBmf_y~lq>(3I5oFbb^80ZCQil7i>cSFx}(v&4qCO?u5_L@
z`Y%(6HLW16F@@2~6{xVY@Iqk%dmDekD>hkpgmUDuWimX)WRN{!KCSi8gN=aAl;VG>
zETgwEe3j`J<Y1b65de~<?;FKoI<sCED<9H^9=$$w9LdMW{hppu%m4DkKV>U$TK5y9
z*$t)pTeZNtR<pCX+^VtBgWgB@Y{Nrx4DxcLVujP`dZjvD=(6XcVy>Z-kyOks=#;pY
z%aogfeZ%;&0x+J^HT*(St<=&Rq|E8i%j=wP^OphHd}C}x-fI&ZrP=)O0cT(vNh#2m
zdRMfzsDY*9Uh|4~ovfT(5YOV}cgQc)m{93FZHXyxXoO9BV@j}Sy{*w9;7luWwIN7m
zA*4pp@L9F9bw!tyy@M-Yz?9`AY;nTKx4WZNvQRKlAkVnZFvYZ8$M$QYmtlp>dflca
zzh({Lw_4A`iNL7&soLx1%U}?#e|iM2!law`*9YXxtJZ#av2ql<5L>;h?5N?(Mn<jJ
zDPFRTtM9TvRUOeZ9Mso`&PNX*hs?(qx8cQnD7yue=;j|Aa^!d^jy*mxdMu)H16=lC
zP5R|9V=b_1%dU&2K+Gn^wcR#t_1W9Mv56S%gZFP}<-os17u0qgrpt?VXXw3`J6)A#
zd3Y$SvHGPg{J*0t^E@j2TPzgB?z(Voi-rBvsI84gsC|2)c!SNt#HnMMf@7m8_^?gE
zXTnpg6>v?URx9fdZo^s7OnE&i^`cALy!fm<9~^pFSjG4w<*D)&FZU*dm+77t^Ol|>
zLN)s21%m^n%OX;&M5ytg<fe{h>)4V0XiI(pCijC$kvF7)U-V`UM7u;j$&*lH2q|ww
zFMH1MS!p+3z8ws&l_RLpU2s@LMl>8<#WaR4KWmnk`--VRC*drB-vW-lqS)$=hMsA~
zN>hnyIt!ttNTw4rN@tC#NxwV%F;zOf$FJbL=Jj#hFkH5WRTZ37OHZn%<!=}zg}}?N
zguh}*Z!kJdkh<;EPudX)fR9l%wMUjQN{<lhV=I-a6UB+2OcWaWer(uujXQ+?a*q(I
zSzX3xui+6CH&?!rdbd*2HMWtwRU|gdY-?WU{#LT|HM+Whg{ftObAD78D;YOB`Na$*
zxapFVP#Vq9hfG{QF~Npi+!?JJ<uHqkgk;A!9G=O15<N*bBk#%kL|>W`{gWY+{4cl-
z8=w^w<t}mA{S*&hWNq|+)Tb5{A!IGgvld=4%A+H;t6j|f@&83s><YKiA|}LmV$mig
z|4TqQ<ank}{khtI2S%*<|0z^R9ydNYL>`}RH^yg`*aB*)K<i>d3=SE*Q!mNdMBJ|g
z^5G{A9X1??U#2UJS~H^-hV%^|$e!?VD9aUmjDkbxa3QI;g`GGXRI^+Kr%?ff*QLe!
z2Zj0vangpbxK)PV=K@2r8*1?U_i`P=%)Vioys78aM7>czvj>H0GM1=X6)0r8(DcG;
zt_S#;G`k~B$l;rS$&g(E*bdq{ptWS63BC-k2avVGp_@Z@<IsEL9GZ<8j55jMIOdQt
zAr8!;C#Mz1o~YSY!&1mB7>L*zrDSzY`q;j6Z2c;~`D`!qCrow7Vg@S!_tWxsRBQ62
zr;`r@9#H7-Jhfi3njvM<^lQ@W8s5naO%`y-B&&g6SQ4YNeZNj*?~D88L4Sim?^Y*9
zf>Mkg4=z)Rh=v}s_&me-%LBuFFCOE@t@R&ct$#+Tb{J;;GZ-KuRz_jZPn0H(HE;hm
zn{U@vb(T)T;D0H59CKO4w!(!&4)S{>!G30EF}W!=y*Tj?j9;SZFRAx<QYN9n7lB`4
zcgwibdtPE?&mMT|@?-k`CE_PkqbCdJCX1C1>on^<{F90&vV9dZ3S)Pc_f{94QLb(w
z2g%T0->;l+{luMtJaPxE8<D@VZQHVIe7uz&%xBcQ9{e2c`;prY#zBotwZrkHu}$Ij
z<5&)KRV2qhq5WVTi8DQ(`nJhi?Le1??he1_@9Yk54=<*2D_`ChW>2_pL!x4%c5^Ya
zKL;veK|d4+7vcmOi-$Z_3j?;Nlc?F9n6bi}7(TbUJB|AO)_>tKne5QMFLw@=r0Br~
zzfnx2UiIsuv3${L7Z~i6r$^=x+=4zYalm$=I0Y6CrRkA+MHC!L1mxRyc3Hk*KtsDR
z>*oW(!;dm$#4NwBMhY(`hLd?tZ?TgwCxe@qQoPPfC08S&2i6hErZ>FB^2TQwfnmB5
z&pSd}2;A5p@36%1akc%E;_=iU*i3G9A-aS?X&;bHT~=#klqtUR@@s6@iMFr<kXB`<
zOeh9yJZN-anfIHQn+C?5#B(ITf=<gki8<>D$|U)(qMqc><CW`U^tvVp{}A<3?qA`%
z_{a2}BU;Aa-IY?Kgb=9I5vaN)swDrYm|K*>xn1a<V(3O1a~?VT78@nbXu^6tJ+^P2
z@Wr|-e)$)KEb%84*_WpkPuh<Z3ud@l(~mO?>5Po9h_)AkkLo$cn<Se4aQVFnqLk<^
zFZr5@gf+b|BOY8vmsRt^Tb=%hS9kCspu?yzYjF0MB?CD1Z7aY9M^U7RwnC{POR$E+
zQGAfu6|lCUs~mc3;hBE(LR1XxhnAC#%z!ehl=3DgIz(5;w63D36;HZ7`^Mqa%b9y`
z)Qj}h4L#X6#-ygv5?gc_firqs?3f=ti1-Bo3Yhcsj)XV$MneI+pkvpYT#?(@W%t(i
zWDbr=ug=`7{o9HYdQ`){tz?%PtT(%R7)II?dU%M`?7JSC*!G7*GO&)$zVSsb|1}2G
zNh(>?2JPqcCQiW4*edO)v|w(KUx2sxr~KP8B30Eg%H`W7fA`V?&oT$bc)2ZHa2ynY
z4rYdI=;>dyL+{dGVr#}4*>|5=l|RjHV)5H6dB<K&piE4K$2p%vPLuujRi+nYpNXeN
z@%e^|^!xkQ*SPCpsdq1WI>R?sQ|g_Ct+ocJaQHemI^U8JHoJODMf&xIp2l~ka_$~~
zSa0=umJK73E<K1I?<ZTl>n@<r?!C2^x>GHesB78V`hc#}7?pM7d&K@bzO!v|w^N*$
z59aC;<MG?sd-(-r;$TO9Y7L-6ZUlt%PB!jE+AS{Y>~Zg8<71n%H`p!e10`p}HRrV#
z7|;rKzoId$jAA|tljnOmSr;WXFQGJ1%bUIIvpmV%ZMAs$UyB!&E+^Y3!0ikgVOvpL
z8DC$+$_@1g4_Dar|0u+H{qAAGEga<Pt<EaQTL~DnotGR>_RjGObhH~=`U@b-$+Nhh
z$0kG_0k;EzZIfqRb7to5rLF@z)BhI45kd6O*AufN`a@<`*$%3-K9l3-T&4LMOx_^g
zn(FO)*z|~~w_d(kiz+gv^!+k=?l4uH&fGB8^nDeW^B<DIWeh|4-i;sNdFE~rX$=0Q
z{uIxx>nzm{?`(R(TYQ|Bq@~F<WQUP?2jQUY>ed*N%-(-hwH7a)#i~bv_r=LI<`ah6
z++IL08V`48*8<fhIFT(dzvN5XBk}4uILU!GFJGf$1#+iWQi<friMl8bSC}*PNEt0m
zt}%M<yV22cl2ewF#fz)SCRXU_8^=ROZ<l}2SHAwH4S3m?CRF*`IPWdF2Q}oO1<$gA
z?|Ux7Cp+qX_E9Vy7e=F=gt=+S*34Qk(eyF{j{;Jg9^I)UG;W1JhyjksE;)WbvG!fS
zM0fYPyV-Pr2lG;=ppNa?Pqb^w>wDMSWz(D5pWB}vo5;SzVRz56JWKCMHf>rk8w`;R
zYt`Y@Sa)8ruG62^(vH`hyA{#Cyjy2-rh^e$_+tojfF8)F<Y-dK!-H|#2Iw(dKrw1b
z-6eTjJZle>$%%ccsXleP8b(uD7S+=mW4glgdpP!Qi_ZJHGQRdOBoNGbkYS>M@Jikf
z<#*&xJeO^Qeg1e1@&{*>YB{2I_w>>w6ImHNKt%2Xq_w;JUEv0U75<Jd8F}uO{6_by
z&yHnx!;CX2axd@phtHhl=m~9sd;u>TsgMt0KyMlUV$g?0W;&7hMk+}9@dTZ0y^N$Z
z^5gqgjSJw=sm8F27C29o(e7;ei<jH`PmCD@7A9e<gZ+ypCg*SPxkZ$cszEC+_(JP1
z5#2Mn0j~`F+tV(f14ryBRf#NO@m$P+Nq-Jjm=`6Iwpp5XMAG`pj;i0D-H#|}q?N+V
z`Q-st$`KOw4$#>_Pz0TUroyY*5+6PjUN>`I*a8q*>W_a5S0R#Z)u*T1-i~8nlBvN0
z7E};1WXX=bqaO-3hF_owrrrd9{DXj71AzDzV!FP#o~pc@Ty-;dI|;l134Cx&YAn_C
z{ZB+MnY$wyYVxy>IkhvWz7M=;-k8T&sq*LGr<Xt`(banBYJK`IgRC-lxt?1#uooSr
z9e6;Lc5%HqzZd=py9myK_z=BgVGr4ZNZ$o~W79vJ&lOpJUZAxyDBJgKM|y|919EX{
zizp{x!ZB*`>|meK@{tqf8G8m3fn&2@OZmNK2bf&%<u0|Vrn5!L=YMhQwBoqU$?+(f
z<7^w;Z<<`curF+<pc@AvFzn`5-Y-M_-^m}xPNb9K7Bqn=^{wF1et?zAeVg!Kym<vb
zBpNJiLWXq$O~c{rb8H(wGpr4zxcHGi&Wv^Z%`7KPJ5vi2#YzH~Ok>7xrZ~-Iq1rOn
zyz(;Nh!0EuVQvQk;zRxGD^m>}xLs__KFxW)(KxpC_td0DbmX5*{gN*-G@q)(Ai7eL
z2gM*p+0>Kz3i}twSvKuV-)ML!JFu4FasFR;Ny*bzF0Z4=A6Keu#l2UKgUP~!95TdW
zwNh*5;miVr$48{YW1bH_#oWf=Ulpu|1n7`7RDAGPi69iTr3YAomG`DdbW!1KSY8*C
zT`7vrcE`Qlc@j~FcYO=#wDwx!TGtg6+&cAsn4!}b-J146!0asiulBs0?|GHKkA0U|
ztd*S8>wdvEcFs2`l{o4<|FQ<-o?Cdz5y^-SC_*+g9dTMZr$W(!K*Z{4Z}3itXx(ZR
zB$0Mh#q+P-n)=GRdj{*|ftNo-osx0+Um{t9DMs>D4fngv3gl>i<+Nd`qkYmxq3xi3
z`HwvBkDf^4Dz+6C9Z>V>KbdYY7--?>Qgz<X>)=&7?H32@bo4^K@qbir->r0f-R)(F
zU%Pcpx$j91f>8hSk`kDzKFadz<4MFg12C?Z$zhIQ!N)X?lH2bxEkJe<E5g}D`0%D<
z7Arm20Ady#eQ{mY2L|wNIQnK8N8g~D;JtspKkd^hYW_ioo(#8Z0t+)Q2s1mj48@Go
zANr~1A0hn7@OtW5Cu9tctqbi~_vDce^Cycy)Z$5yVlelJ7NsYty?-<iPlhMbUND}I
zjV{blC8Fd0N}~Ht@>VBDKx=qCmG`z1kL+e|D>-@`$r9Mg`Gir*_HY}r(7<^~2>4^~
zPy`s=2%gG+h{x-xCio6t|2=qy4Zwr9=O8@K7(6E(2~Qgpt=sT6oGmYp_g5<c@*{5p
zGNNDLZ2gCD?nWL4f7$%^;B245IF}KJOTr+a&l{i<hXT4STtQ7k83KfvP8uc`izrL9
zF*wPD#EO3iTnAM;<IN{j`Ifg~p}I^t4}y+hf;B*zMl%=o6JW0TkvscLiFo7%e{{<u
zM{tGkIb`90{u}gd8j6K}x?efaeFVl}_n)@zk3F*c-=VHx)e%*c=gSo4T^W!6xS}pq
z^hGLiX3run$o-X5D+X#HJaQ0}zcUis!*^1{x`*C|EUmW~jr8PTICZnnQmi+ns*hwA
z8Q!6?4KPeE_j@e6bF(coVpjylS^wxbt8jQ<-=jefDI5mDqu|uo73CiOWhi`q7gb-S
z@^ybW0>1RMf~_(5G8Jp`-fyt=SI#KUw4neDfi(T6u!h=#4<7*#_!=C#e~hoEu=w98
z=jnA%0F?3AHO#A+_wDuGH#anH!^cLO5&+l~Y`*UZ0NZC&R7GU`e?j<Ucnx0%B|aQP
zS%3RfKK$oV)~qU~QN<uT5rGaewtqZ7_oLPZqy7epLBjgS1NS>sv2nxOJJLGPk$;5i
zZQ*59;pWAV_!q;A8DQ7dh!P9GC&Jw<9mq<VCkNvVf^>PLqjS7B1#?6*at+^1Tv)^s
zT>MH7sq$}nf>kY1n&Br(=Tu+Bvd8S5M6M&4F^&euum_Rv`P^r{{89>gtB*B!I16yR
z+4l-tIVeHSm$C-o7g2as`@)ax_D6H-5T!W~@W~D}^#rh&chD-XIg#aaZMSw|##Q*I
zP!uua_96G^gpc{1rQ2#Vd?6TWv@?afNgd~okl1ynymM-Ti#Cet=vc3p`{B^Ky&Ko*
zHgiMm?fecKsKI@#dPdseSwWqvAvH%u&>z>E$DCS_Z_Ah<uJ_rEL#-wQ{4nF!RD_Im
zSs%nYfFc?A``FNud->M%>mjMgc<tnk++^#BonnC-?7EA3rOEssPQ=2i%B@j3+CS23
z)zOE1;INuLy3SQuqNvkzYvTn>cVRniAF*B_Ud6>P;19FtrFk0n;;6`L#0)5Sb4be~
zJW(fFfw`EMyGu_vsfk_RIyrKIBn-uUt#g-U4`P$NiCUDCIH&W}IBqd>0C%WWe1l&r
zn`!!3duV>PvK9pot-E=Ymz`^mWp-yhqD*u}MY!0;pn7fRG0_S>7!xs2oD;{0RM?ij
ziSsA(Pj2Q6vI^~HU_=kTvR=%_%;_wKD>?FQ1j&V{sj<KH#MV?!ZC4FA1zZL~{30hn
zU|(ky{Sl5posC7DCCJn&Z}A7MqkqAd<s(&Wj40=BO>7aq%QYCSs(2~qRP5d7<1kKw
zRpocX9`!Nq-d;RC4oHm$qc<%*^Dv2=sxI56{CBgpd6AS6qD$CSwpPOFUA<kHErMD1
zuv(FGC9?W3z$b$#46pg@>C@T7=AEqv%Hx*%v1o5KwOY4B<r{bNk-4EZ;?@SWU}l6x
z;MXJ9_8Nu(kN<~AtUMxFoDd(N=T7e@&n-A1|76?dQD_FiJ0MlYX4;&}daGZ4^3JDa
zb0zthTGRL~&;~P>>Dg+;EGGgEeFl#5X!d37Dp@=&qO)sim1)HXrB4H08)vrFa1`XD
zT<du&&+q4&s5;%&K^YJmX`Ez#89<vY=SuRC5lZlcRRCRVQgPz#LE~D795@r<&$Hh~
zE*}@_-cBxU{Zk>8Nd{*b$cbuVQn95j=)IRu2HFDskLiJ2(lE=HQSauXV(&Ve*`e~T
zI}=I^hXXWRq$?(KW;+&8u5p-p2~ACO1TCcS=Q!*vHw@Qo^&&XuF021gdaLU1GSv5N
zBvgZSQOKzl(H|LEnU?weeBx(c*zb=&uxPy$^!4HJ*L;Gmm;xEUkp<pH&GR8fU$Vn-
zc2eJQ*=H)kV+@pkzGmh$m8XBv_amb-O@{D&^wRae?Hui~8He#J{x}nvQbSNWhhyLu
zxfeLIcgipf23`};#kTrR5^j+2(p$Wn2g%}@Rg<$V*OQ;{5pH=m%+ATv;R%j^Dhz3I
z_NwcZk6)3<7=K>MC=vQ^DW8D{<(1!y+y#VLv|9X6uic-GN5}T5#R=D?2ovq(FuC!m
z8EjaOY;T^hDAjIj8+bML$qwIEngL%iSNh%+>3t&nWb=i-mwmwM>)^PNSJ<B26+FOL
zVF!7tzoVvN4ew%J`+a?+K8pB#@#}E{n%MLh*0O%#7dd|#PF_<U3i4GHkL%yinyPjV
zM}-}!U4HS*_@qqBuvqGmzDIc9rn}gf^q>1!tzYfax3lZK{D;KG<jkP%sbAsyjImuY
zD*@6-L$dJZmYvwQlOs7MQOOgt>oax^MdrY#yv5xj&9Czh^&6TZP7eWAstfH(-pS2a
z-SAr#{f^Ub>N8>@*y-bPE~)B!r|2NUPwN75#dX9@#J-@Uq6jC2f7vDV1UDGAuH72N
zEnV$y*N05m!@{7KdxER{lV*+c&bTkc0&=+Jm4)q@13y|AZ`p+`;=vj?aqMpWlc?xP
zHuZYf-NI8-Nc!I4D`J-1BPq7cK0>$Y@#TGCR`u*#ctYmDP1Lj3%gN)~6xh4f<-XM|
zZ|LO`Uhd}z3B6>c9lKlq^nIrVuYxw7We#L1@TQlWr~)HZK>vhkaB1_qup@jouLk(3
z)8C?e;TAIRd&KSzzA2}3A$kx;TidSDQ>5!`SwPs<N!I!(BNEDuoZx3hE~R3j3_QV~
zvt$?Lr<KlP&${VR@47_*qA5Q+D#4a}PolV3B&iSP6FES2co<tDf`90?I4fQN^Dt`e
zYb$<hC1n$(g}5jGN}qKWuJME7ZtYj>BtvUXw4smj8Mt5*`(4j^xipRHNYL7Ot6K4R
z1zG=$H}R_0)MZH&JFx<tguQ~_SZYFhF;`m!qmrOP5aI-cP?rL<<RPh^1&1XsUvF@5
z+?-#!#}KCo))#}n^lD0=2yXOpBY~^jc~?vARs&si`)oyc*$)a|vS~oytpY&VQ^8M_
zTwip7z|<WdaFoIjw`g9?N)+>k*dqB}6lC~k=?#%rEA$7O-Wi;~?g*%5bTXX%i7q<9
zmMH#GU8i!}MB`Eo-7aAG)3qAWpRRlCO6u5tA)u7s!2?CiAU^w&<@KrSE%CfhTe#Ev
zW|Strr4N~fs8aVB&f#12!K*)VzN!zPvq^DJG@pmm%AO9GY%!s&;hC8va~s>EI(`9T
z+{gN-jHycfz!~41j|PZ87{pmyvN4Ljt*VM=J59r1QEnPf?t{rv3w*HBf#TFi+KA8y
zJo}I6EnBH430R>*=nUSqHo~P4mA)+U0dWO_x~L~|qSA2HCx(}7bV|!z4b-IX*a6ZW
zWnJ*)`=y+4MTVU+2-%kX=pBzScX1e2X=AQ#Dz~fNdu#xLi-{<KPOZcsN&Y}&J23ub
ziax7&LqyQhQ*<sUicD}n+p$Ba`Ad9y1m#;nBAFDGUHbhIWj{*Uw&Kkz)fonW$?;0?
z;#2C((AfaXcp`YFyewiiTr22A$5CfFA_7ad)^|<J25+&p9|xv^qk8nYYN(jWZgYf-
zs?d}c!g?Z3;g=SWfaME5Gc-{!J`;QaSPGlWkxk>N`AyYEy&`m72jBP&x{W*{U37t$
z`zpg$<_1R~OxPk*C!Bz~$_z5NzGnzZbVzcXlY+42^qpk-NO_#@qnYTlu>yhTE7kme
z@tpBfb?8N!LS<o$E6UtuawobUjYwgU!?7&i#<l8Y=9b6T%YTxGQ9jK9x|peMMHDau
z+{h6+7B#8rC3nTz%A+COxfM24Sp_fvsvx$evugdzk4enQ@6w}Y3V7K$5M!sfV$_qT
z|67|Hj=}Sh@4I|0E=*R{%+?ssB3_Oyjxl;LUk|zyg>TvH;K4jRb@+~am>1k`%+p)m
z!%2rBfe?{CS00!IqTa~u;-Tp0(0EEZ0T7-B8$c}>ft%igN~6EzX2HIO-s<mUJIww%
z9!coThMnx;8dk$8I-g-qK@zDilhHh$7{3RP`=A^xPI~03hW=pUuki(c5B42ADVNb^
znY>hou0>w@)AdTbLMo2|A}C5@EvMK%J`Z0*Rdv?Vx406qgC_H<ht*3=I#Sj(n402_
zkaPBK9@&(b<u>9>-jlueImviwyvlFyFgvOv2Z8@ij<tT_X5W5Fv-Q*4A)W>+%FlAQ
zrj+rxM~~SW9EE{xHkZMt>9IE83LQNLuW5UKWC{@@cst*B>HA{28cj7i-(h&*cctAI
zSLivV3<T|xePW$wt=IFlxA@ztu6VC*g57M*+PpLmo6UJ8jX@o|LbJ1YuK{1YSta?P
zksk%(J#{<Z6b+Ql;``wgFs%!h0$i)gl{%K`5w~^rS>9FB8kdjlbqWNLf6u)_1b*R4
z!(xXOcnWFF9%NddOxsx<#CHxCtccU&Xv~n>v_fd){1eGt_bgewU7b%9m4)rYa+gxB
zU1c+o*doG?I$A1|#S53B9@uC1swyqGzx{-X!u&p0n_*VlP47cRNERcoaVZgfcLMV7
zT=&kVr@g`Fo}sI3KDu(MUmJ+(V)kUd7?8_XuM9p6iZk~Lv51<>q%0NhRb#<%w+USr
z?l`xcDdO|!`aM-{5U>!i^lPv6{Oqp1AXCU6%zqLgqzEvjtCyMVu(-lxv34seAD)uq
z&gB&Nt--JrPTpS+MmnRE6*-xvB<*ptC2+Zyjdpd$e0mc!iJv|@@cH>Xjrws$apDUg
zKu-X^n;%>Ug3|;)6Byn54c2bGqM5>LS`%;(OqzTsZ{SQJ#h$A}UVa5vL-BI_F9-0F
z8cVh6VK9t`W&HI2f=|JZO@tvx68+%0ts^vSmU)XGvq|lSjD@IQvBB@16sJDme6I#3
zyhCf%!Td<Y25q_yeE+Stf4^0y6khi#J?d{86Ib@&-w8ZF+j1N|eGe3)e9h75TLUxI
zKzaR#i!Jm}5~U?dt9O8V3FpW50?(ZNmh(lbqo_uay?*he9n(vd%p{`=%62SGwMF0i
z&5Ks?y|?7E2IIdwRzsRbk!puM>&Ep)-2RDRxiF>|6Z8W7mwAJ?_|rTI7uXQALV+Vq
zz+0Zjh|(1_g`w+@iSfN<K)l?i!GN<kJt2dEIdg2~N`1&r(Mv~u!FO+VboO3aAVwYn
ztUT9dg=LgfP;g^;7P|;oR7jk3cS#Hh`rz@OJJ9pKk<rVE;U5jpFflAWEW(VJo2fR7
zHY+W#%taVk7aFz?;NQ<S#=1FIq&tqS>;<7;)FQ6b^gw!dcwxETGWJFF6`@Yqp$gOc
zepjdAE?&JtX#GSPwxf)5;sPsJku5s(AXyww{PfZUM?(6|ZHNlk=S(ZtR&_?{f=i(k
zC1~edZsuE|g<Wjpyqzrh5Uq!U**`Z9oRG5R<+SGrv59AbA#s}d|AoLWnMpLgEZDt9
zdXSgDOXX~WU4a%93Jv&I_|0xY<d~2E_J8p($A2(dFAcu=l-MwyI`@eahqp?a|9!qc
z8)y#&yMH0|V`@B{qms(Fr%C=-Zo=aXh78z#o9Iw4e^LJKbc!1F3==`#%Rhp<7;)u;
zIIy!~nD~CB!2T9JS6{!V+8?3zWbvnl`qD%^xSt=PM9ft|)oq49FZVP0oY-~&&d8>>
zW*E(6;f*lO<1%--Wfl6w)l}#An)ni|;V<{A0E~JuZ^<kgvFhCUD(Bde<Bh?E6ezmT
zhjx3(M`!XZ`ovi;a^rc`w^_s=PPFc|S_+I#mjWYEu=B&PCtrq)e6*9(FR+&BXt2)0
zu8Ww1$Kc5t+--q}pZjd;T^Nq4hw7>keg1X}p!>z_R>StyBxLL4JQ7?`*Yf~#6DQ*o
z?-t`pFYqh&6Mxq9Fo&bcNP=#?4|i_TDHQywxrMIxCJWs#536u<YYpVOA4kqzeCm(i
zBA3T8ZQ~zqFWjvsPCw?$or%-aOsb)vh425-Ab(dbSuLoE?AnoRz6_Bp2d&MMYOrKP
zpc{0^DJ7ki5jYmkq)0UXN)s~?{N`V3$2+|r5|XNdHXBcM4%G7>LIF`Zj?40ntpn;D
z_f7Q4y-d8}=#ejBDDt=c#7dUir(}q`E#%h<A`O}#cPpVsS~!Gx@qz()QP%bFLoX|P
zOID~^?Uz7p^|&4Twr=ur{l=k8X(VoeERZtpw3c^O%4P->^d$~rtSEi|G9VX|6wOwa
zH%uzXIv7<4`*gncw8i|Iu$N$53t4B|Y4|9eI+tEwoE49Jyw7Qie8aR}#LZh%@PD?N
zr}q<OPj4^xQ@TKCT_L+Wp3Vsm{p)K|@m1{J$TiOSd#8><p~}tSo_U%m{z!D!Nrpwz
zMH&Xsq9NK;?L3Gg$r2x;#!eM{_f{qkwsH$2PJNN_$nb^rm_#mpRna(Sd+IXXoNN5a
zBq_@Nf)=k8w*Epgh7HP70Cf3uR<UF7N8W@wJ!Wuxq_=k^qBQS#Qm`ocfZ&*&x-E%O
z)7LV$PStkGRqMRk?oQ-f(V5VJy-rK?*@)r2xO~RV<ks9WjO4nk(dukdsV>o+5BT28
z)|j>^Q(UpC@9y%rWv{G(h;U*B-Ck}C8f3$sFvAC~pEF7)eWbJb^Yz{mc_R_^<dMdU
z!%bO?CjqBMR=?`tR;bU>H;U`;DVQXhtwvk2)t#gav4sdXzJ;bJfoyOKybT*nC;2<P
zB}@3if|Q#troyMatgXa2{u4*UptE>BM6lb(*$@-QO$s1NRFG86!3S)!w5>K@fYdDf
zbkg$E3chN=R~1bEp2SZ2{c6e9l!B^8Q;}Rg6bL0Q8+yw6&)-JV`%M?ucuQdDNE;Hp
zyv2UfpKvFJTYJ~t%u}pH&jCLi21)16<yP3+Y>i^oG8sZoAI{{z=Csb{YwEqM4lohb
z5ll3-LI&^C4o_+v`$;c<JTKT39#|pE+)=EQRn*HpF9a3+Diht0+YOvgq@yt5`o7~p
zMovJ0Mk$vMxcvokvEq}gFl`jez09=H>763iC+G(1#WJgC0nKnWFGj&1+xLX3kUz7t
z@bpEa6G{iaF9<>#D|q_(5^6f%0cs=Gc5*czK~-x-q2|L7+$Me{kXKpdGr{!qI<$PF
z0V?wgmD_}T-vBMtnKD|SSYbo3jP<T`a1n16D-xkNdpE6V1rBQeYWp@|)RIMMjBCW`
zOY<v&e{;>^abA^b(78++<nY4`Em)tmV6D1w<_f2PoS>mp_EiR`+Ri0%jI)C0ounp*
zD!Mg-exliU#*n$~Wye9cmOCa{s{9@Y8|nkZ1*XGIbl6xbwt`Bt6{wPWwbCUvSsouO
zm)XtC%J0{1;R7$bn{mf`Ix##~D<+d{ZdATp?A(5Hcbxso;ygyW73TD^Pjm<znK<Uf
zMnr7KCD>ens>d*f$0+S0_w`5-{G-_E@P}Vg8*jrrxKj0!(SQ6Vzmz^4%)>~h7G@RJ
zC$RIZ(c98V2J(#3I9g+?mFhH#W+$}P+Zi&M7@Mu>%U~knm?dYR)l{p~cmy~6I<j_&
z9cmCX$=Lsq)v$B;_pLF%6y-tSYZb#_X1pZWdAr6M&XFi^f?s4d`o)i=w=H*HW?Np2
zu^Y)pI+&h=w(^>onhCQURVhfj$!BL=8_RkQW{{Wko|DXhcOIA6C}@yZ!8?C81X?ez
zNO}>fkgYGE$$L<-%=jrlz1%0LHB=sif$^mFF0c;P#*O)#5eToKyy-n;q6l}Gx)z~r
zpyQ<f44wyTk~egG*pYqBkAsF8Bo)_yaKy~v@G}NLhDVrC7#LlIU$72GNK5~4!0H>0
zr!?w}d<?E+bu-aa7V*rQ;6`GoY@82DDHj0DAg1fg>QIsVFud>>z8>noZTUlOe@LNi
zk2?2ZJjUnx$>v*o03=!bmBg!ZznZO2r+p?1_9~IRSFaeg_lSzJ8yn$HLsUfM^o)p`
zb{2Y*!`F&56U5u9=dz68t)+p3Lv?j|xurZ|0n_EP#y}b!3OoW5@;z;Zk;ZMjyl1pJ
znT!c5^|8dfJ}%8a99*!)4Rt&@+#N{8c6pUNX&Cr@RxCL4S5Xm^exG9y3ylBALBFO>
zO>pcFP{>c`Hqr-hhA!;XWQX7;Io_h9am$-jDMAi;SrhbW*Jo&BK?u}V|A#}u$;<WO
zd_FT-x|F26%6Is*0e=wig3sL&bu#_0{T=gKUCO8d51`;EJn0PwGCo<?rWGgbvWQvf
zNeK6xYsB#*x8E1#`|f8*$y3Z=Le5`c7PQnxwsBc}g+fuAE`kfb=Tuty#7KNss$NMN
zU;$uv+h*zEpz1`U+5G2uTb7d8rKzKZDvVbWDm}$mWE~d}9tx?KJ4_4ALh_;_pLLoV
zH1J97d}Uj-;5w<+>sa5M-Nkdtw|F<zo1$6C#w{{akwpWOBFb4s?xOg9Xoq8TL=oAm
z>!^nCrs67*qnG<KPaB>Lzt4>l0La8Pkzpb;>NS?pd{7jpE_HL=E&a7o6g=@Ah7ViP
zOv}qarpmflin9>m2#WfgvmT1B=`0)|^!*?)$;`1viT_qn5$D@{U(I~(v*~w<h+9R(
zWAc$b!a&7At@-n8b8R%(I*9So4%Y!?)5A$Ufyv*jg}HVpQ8odVVnz#EO@JN7QT<$@
zezG^4C^jcbzum!&W4MQ&l4OrT_hORXjf!*eS0pQT`AvN5UH2iY^*H0n)FjhQ>gq&s
zCe=C&!1H0K=u(D?hmo)pvAXiFLT07`MsSAk8tvbcnnIM~$Rv2_c+p7u6Mps*WWM$r
z^OD23I()$RCb=TG9n_c0m7T>?(X%r(gUhZ0Ze`be2et<xWRFPktXpS^8^~;n`IGt1
z`s#*nL&y3&n8dd<Ysak&wl`$`M4seDFI5|@kpTdIAPL#|mRSEDw{2F4<QfP;DMidc
z&Ue;;(}tcT+eaC$%+KYT8lR%8G{9mlXz;1`CY$cVYYexcQ;x=Tw;}H3s<}Wr@V$1D
zIGEX=$#=xwL2*99zqQ_P&ee7auEHI*cd+1CGA8-x6YingY>+HO=^_W2mph}9!ra&M
zHB!9?xn@t~C|5kE%jEp&gHLA6awa1^$zC&?3f^g#)RjJie8Bur^A(&4c9gY}>Bffj
zQ3>c-vD7$in5*Y5{+30MmLcd=_Ke4xth4xy&J#e^8Q7;guz4w8Ao`Z8l}d>pM6`_Y
zlg015Z86wHy@(LbtJFqUR$&EDzLR8u0z&fo;5fw*DW?343h(AztrF^y^L4phETtut
zVjK`GSJlpEY*zB1o#eB*+V62iwASqgLp08)Ceob?n|lIw-tRF8TYFv}MkBhN%_rIC
zEBN@ks<-KZ)}?pUen*#tvy>JxqLZPGduqGw(LJ^Et<+|}6jkp{-5XqRwdo!0wU=lP
zv8sCFoqP}DfLreMN31b$a<$9&)LXq+(BT*uSHjL+6`6Ys>KFk0koW0R-FFQ5{OnpG
z1}Jm2)oK-Nt0&hC!|=j0F?s!p$J<aQ3pW^;`W2Yo>efcr&?svEK~xN?F%Cm*vqguD
zt}IG052*Xk)OWiIR_sZA+Fzq+F#bmBB-|wrX)H@uk;GEjpsQF;A?I+25DbC7S^q+1
zaA3L8k6_o&)#^w@FSkNpiE3}s1>_~dpij5e?&2F7-^&mG(Use3waM-+?qDvdvt6oG
z9y$6u8FyE2$uxtZ#bx#{(H2#!tt}KKWBxJ7qNrP7f0oqJ3{~4u-(f2JkQi&fY2OLk
z`8K0w3VX8;uom0LaQAYwDodZpnS~*|qjse#iISf!&(+EuOfzOSD0X*VZXH19de$=6
z0OV#He=(M(8)`FpwE6}k-xGTFZ5{m=;`B#v(KrJkd!{-&V#!5g)ae_nDLYK!vpmQK
zm6EHofKsI3&w&)(8h~!<iSigPd6U)-*KXRPGd3f;o!CWo%?e7yNFC0uE8UqF>Qocs
z!}M4i)Z&jrG&-My=ei01uM#BCpCFt~6f>?JlPfYU$Ds-q?44OLQd)RX$_{VKsU<n<
zjDtjc3Lj75m9`s*ac^(hG9-4}NKp>@b^X4<2>SBT)*KGAab|<2drUhujz990z&ilR
zw2TC^lSd0U!HGO!p<yIko{J=wP4twfqL)AGD7^OWvC-1Jg7!3JVky{84yRDC*T};9
zf8*dNioc-E3?=*~h9)9SZf%b2(5KP$*67+>`~V;0fmvmYvC-bc=vMLG{FbPrM-Tbq
zkaxD&#AklPogkP+skY2D^B}%<^s>UQcutRO`l0ofIZQD3UUKnaka~jdXd*49Twz0Y
z_ek@Kz7r&4O3Qy;zm=&=*cCy?cK#&t?|Lfu=ub@0CkmU>Gr&O)pN}PRAhl_JXy(AT
zFB!|@pzq%$V22V<e%?DM7a=$}x5WB}!r?kB&e|VyGmlA_;*7q#jovg^UC9Ee(DRo-
zn9#(Od8^=wp5_EC)o3>BqLmgw%Poco3<j*aB0tt7a0xqX+$NhH>-DmVE07t+1Sr=^
zGXvtPz3jze3V@=~_3_usCV9|?zFp(x7jbD{F>h3*%2o4=G3O)}&K*cgQ2Kj`NVdmB
zBSHv)m2AlPr8}Ie5TP@;?N#x}`z-cVoR~9^(?^lK2{E0oqY9%0Z}nvLH}^5Rnd|8$
zn_Sc~z}A2~G<KFGYV~2NFhr<DT^Ip{Bl*zH<1!wUINvX!$VKBos=Q$KMjKTxCp)Fg
zSv7q>hJ1Te6>LPk(6RLolWdy;=me>Rw;ENpweb$4z{~KZETiO(T2VAgkX&Kgxw37n
zmi2V&E5fbR`KHYa0x3d<M0j6gj15`3(`e)ESD@?yLm~@@$z3o4+++_QVyyw43^4s9
zVss4+dEZ9*!DlF?8vOp&M(9IfumVYt59uiQwk$h}x-E582lLoQR+I2$CKqM<O`x(H
z_7l7tSegwS@O*L-e5|5G0-9K|4tnn_eXW9+e`oI@(@gTlNPv)xyOZ~c>{`b%bAM%C
zV^jz};7TCnNY_UR#dNT}_Hy|c0nSCH)ay4;PbpWsRmhLV$VZ>ieX?+inTkx}>3w0d
z@DS)yEQVkG>3YArwCfmf>o16l=9mw9&{o(K_(0U5Sj`<aGR=&Ux|SeUCYN_`>BB^X
zMDjUv9wy^}dua)_2^tS-riT5k^QuzMSR6ALEdvZub)xSCqsYwx8p9JH!!ln)XPrll
zUiMa*9-<xwzswo0bv(|?Uql-=>&j&7<*qY<18`TvA<K+0XMHc(PD;Zb%yOE>b$wr)
zyNpeOGZg1NEo!%aLrto3)v(mZoda`f)T(%j%@V4TF}-wy%}!fHy{esuKW`H}UcLiR
z%Y4Q14K`m|wO|309V2oxksyKcA7ExpR_rGcVpZx%4!GI3UP)`TLQ4JT026j9o)T;9
z{vQ}0FV~0h!UJ=O+!#(|I_LL*BLHRtn+tff%h#k7hctOv363^I0)#2E1ZjRj_0?h)
z=s~dl@P2#I3hf-paLV(oVSCW<GKg2_{u3+%U=Or`g)je2lZS4;haZUKduQ>&*;<|D
zJ_H$;r}^7@Wrmfb=$63Fg0V#L`+tg2KHSH~qT@e&vRAmAvp+f9apdyYql+asumENb
zszmTj=Dk_oHUgKI?-OknC$rG3+*@|k<b3wz@LQtkJ+774^=#MRMpCH^lV0xId<jjO
z@Y2KyUjFV8b$**Vqdv%uxC}`!bv68NINBX>=%FBx(Nc9d0r+p<mvsy+B0AT1L{U=C
zae6Xj%U|X}_!PWH-wKws+=d^b!LmLzY-p3>JgVK<j+`af%tw*%=JhUK2fzHCCX0il
z44H%IC*Ko9m9^&DJ-B{N6i@n7*o|SmoqYg12|gaox?aIoF9couLN;*}SmN;6`O!Qm
z&%^~wXo>l?MNpLux6<ash4k>Uclu4=uU*NNw|M<uRoHc3k{`Uq!V1it%f!P}dVn+=
z!w(XeCvqKBC-dFlh4t74EWi+#t0*7ya)Gcffif%>bMYn!A-zL*RCnZ_#pPB)CCb>+
z+e&j(Y_1a97Cu}4vRon7&pWItKG2`uOLF)+CiZN>V?rZ6%|IjHXMg5)idCdMuFHyV
zn-0wZ3V|e^XwZ~rSP_#z@ckW*VSK?vPgJ7Za@3h5UrMn^Qj>4LIX3I4Q4T=DqQEPi
zbsWebB(Lc2CneC~)W4v2D(gL@wV1JD+sCgs;8zeLN`V5%l#j?(Z5Tu==yI#t{Q;{^
zlPa~3jH9jgPIB1l9p;d>fp0gY1M52ih$^gW#WlMGO9Z!!6(zqao#^X=h;zKryY@fs
zM;%XnZ~(s&?P{}#mR-;uBn1YZ(Y#;4*Ce~Xiez4vKZ1tuEE7-ozfh9&@bUxNlu)K6
zwv>2Bu9G#&6#|vb=3y*+UR=zmshCk0ZQ|c99ie!e3G?uibTwLsyr<G2);eThDL_=+
zIJX=aT$B72dh{93*}}w9)rxpvZIWbdQe*mz)+L;C=2z&V$}LWY>noP{EKYWXUwBQe
zMiXSoP6;`N-G-KGsMz^=s)3a>;H|#HmMPi=06J%2=sOyR#6E(CcAz?XOZGx_&|=fh
z%SX^^<%zAi{*+y@II4(|A5e!Yxi-RyG|&2=i!5JW{%5Zf3Vpf~gQP)#OAPY#7fB5A
zA)Ey?x@AUJC2G_G&_^mrQ||(L4TFeu2(HbltOrb;6I;_b{JHoB#_G(!FjoEHG=3z4
zjJHLsWq{Wq$ac_m{gqXj|4({MEBlf{mGl^dUR7`{-2s{^2{o}=KZ`Dtds_8J%*ipC
z;2iZ^d`ulGI65h-lA+v^l<l4|x~Fy}A8Q|v!N0{;meK&%@USo8^jcw$TXLZ{ZM>W%
z<_)$MAe86m%vG#&uwR0LMCqiFX!d2+>0S3Q0+A>cZ^>pZv@SS(d2OSBX<lwD;j*7W
zEN@?k_WZZwEwX|P`6ldU4x8iS&fsc{`(o{Be#3gzUFPRMS>%wVkArh~EtCW_86;Hp
z5_H1s{;}-uap7p?zmBApVMHWpeFo!ptdSMs&o%iNM&VI^;Wj;BIRmi>E8#Eqx>i?F
zK${n(ADVGH|7fIw>cdE%(Q1*|PCj~(4k<e*LVJ<434eeLLx2U}1B}S%>*Nh1e@S>V
z-`IGNd~WH#QxlVSo?s<wUbJ^1ODoGIw%FOirg-=h&CtS5$t$%Tiew$1$oJ#K6#krl
zmL*DGV2|Rf11hajS-+?y@FUkpszeXpra$f0q^<7Y4qLQ^pQFAtan*bQSV<H)&z+gy
zrEv9uQQ3p0VI1q<1kqFml1V!&oC3Q*MG9kphy(erg+*DV?(_0bs^CMyjrCW(FB5lo
z6Xp1Rb~uvnS^mnYgN-rvV?u4gvj_eOHY=bHn=NNvH!xdrf8qm3D12P9d0?JeNAG%a
zNJqW=g}`W?4UZGFP1{m6q~zX`<ZOBb5$5^MrYF4I`HU7BZFhvTxJVZ6@7o#a-)_ID
z-{og@Taii;z&_%TI5W*JzxZoo=Q6ZIAvf?yf3mrEAzHQ?)}9hSmypa}5$6>uaJqvX
zn`yn3ffaUp#JS@mw(pnEFe#1;5b%@OJ+tuszYVMq4whMSY^5ulLpS;hp1fIl)<&ki
z9<g<?L9tPdOmqeLp@PN}qBxbsjcb#B<<-|1d<3^XfYyzl`g|h0u~BJdb-d(|>eKHD
z(^NA=e^Y+g<|}c8_`Iv0@qEEnubeGGj8r2Vx?6)=3(*(}rqu79KZ8=^8gtg!IMEhR
zagC;>U%Fk4*X;rQLW}`_C!ud1K?h<k(2d2Am3xiZKMp5-Sno=e8QTw%dy-{vsG=%#
z7Z-#!UmJRzWPGMJLOb1_-fX|*!o>8nyYCeA%$CX&!$?qxIeVC=QkCC4iGG^nE;ARC
z8fFl=KHwS-VeOJqkr>_)>ujD&7;|epeYfD`NZ-q=Q+Kpfrf;{-igVA8+&Jbb`gr(K
z^|ieJC<q#-51co`NcFwj^bMtg$Zo1@%UoT9b*HlqJ|v#ie2R|udYZ7-YX9^$z|kfF
zXA+ev2@qDC5-z1c%B~*1N>!cBQ>wisv+Xg-8elgJRgaPCbRL#>&CCsoxG!y5)CJ$U
zTI0m6>gBgiHc<G~gI;c~hLCMUHh|l@^w^q$v1#K8P-X>}WZVX#m;bnxb!5v}jf`lX
z?d~WpO&s8s+LanC*z+oWgCFAO4adxV!GL2IOv-=;T{2t0$>Id8F;Z+FAwExXRZ<FG
z1`_%?4jqu<(rc_N4udE}!Q;zaNq4AlR3CM8A+wT&2_WjW$PL6Pc5>Gdsw{r&DmrY5
zdLQ+coM2EfT{wLrI#ntx@B4wC(8me|`s;)a=0bZtloEHbE(89LxXp#jr46E*2uL$A
zIg4e`b+vZ<!b8Y=O-EIu-D^pi=P+;%x_#uIv?A>6qDvW8E~xG59DbTmE5;;YjBxAu
zcd>@bT5zbRTJ?Q{55phuj}uvCAUK_bXX4vE6r}U<;68k~h0XA5ycwMTj<dm0swv2@
z{);LENqn5Dtq}lgc%C4uWD-3_*TK(uZ5hUFK8VQ_GnxWIGR}`v>NTJoS3{m@<}wTB
z-emJdc+C7KWw^p0&#jvY!RlaMv(emqQ8m<!O~Q7_#j;WhHT}ud{A_38!M^H2ctIrm
zYEFDX(!S;tWr8JlC-84F>qrj@7>5;S1ODG%v2dHb(f(J&kMsbCuLLdT-GGr$3Q|<p
zWp_vebNL9A%mJ4!(iMCJBn%M@;g@BT)XC2z>3f_5Y6uTu4__k!^Vmju_U*vQd5~|8
zPLE19kMX_sL##q@GkZJ*1>rQNM7EU#U;yHm0PoFsdOPKkUORryRxZ6GVJZD!OWxu-
z5ht9#3RBpZX$DjXCCq7TmYmWovmP_~0s_v7$!CPfWZHZ&{Ow7h8Sscq;m9&Fg^s;E
zS!#KZr!Zs^sdhk!-EvYvpS^-ENyJDeAKppbyZz!7y!(1pFeiF<YZ-g;a0Y>I{MgOD
zIs~uCqAzbQ3|A2yR=T`KGhfrd`M<d>R<2o#xn&5~jD+J3TwD3uUHLjaH)0bBaoxl7
zV5~_V4rvlyp2S2mo2?WNIuAO+={78GfRmc(uLQFq5c67?MJTLQF?ZIo{PTpMknjRV
zbPD0mQ|5V#wZ}1JH$M9kyl{q2?p(+*of9hBvd{mhed)q6txG>#T&ylaU)P*K5#Mi~
zQJ?Zi^k3DMZCQ$fxu3VKnYYd(6D96TiNaf{uWX(gugI>|XM_dEjqjY}>xiB9V#~62
z41s^ZlZy#`^M<zU;V%+(IC|^)T_f8@Z|+!{9+TZOhUyl0OXTs~>aE^$xOUH8cFrVM
zsF=M~C7I4qIV4l0-qJL-9A?b&vJdejv$m)gUVfID3?|3D)t6LNv@N|f*0#9=sP2xS
zdes>EWT1kySx*;Fx(-Iw0$f=VaxdQ?=#BuZ)bV)BIo^`%`HtN>cJr29Fo{e?57nr%
zGJV8^ud+QhJJch75Z>UwNaE=i<8<p$?|&-Koa>Tj(_ghY6bs>B8Lnm2ZDy5NlyA9h
z(X%nOP_4PdqBnJ&{ttDmy6*<zr)}RxSqSaDXSq=Ia*W-Fnpb7Lv43McO}-QQFIz(M
z<XNeS#;bWipfXFI?GT@K$WR6^_A5$V`>c)(shpRbJft3KAKTX35v!s9u9XVj4vdfB
z;Z+3B^K?n@#6wQGFuTN&@0IXI??;EEz;W-nJId87@?A#xVGMw)FaNEm{4pWs{eki$
zTzN+F?d9i2<&O=|8&ZCpE1!tU$730&$BYj`kHn5V`6J8{hXGT}Ts7=4>2;stxm!25
zDn?R;yZ<}mM7Bs!s_q>h{#nR9xt&@W&m8=Nq0BIpYwQ%g^2gL}Z}?^1%O~M6>HsL^
zlQnwl<^Ln9b4*y!RYV>~d^w*NeM|Hiq!E2~Ui4W_sBo|&-?c{X-Wz`OZ{F2L?`+Iv
zC<u@Fn=-MXWm<tUe3|9Yk!@&!BvhOdZvUHiJ<+>U!_|ND?w07CYoBh0-_(;u&l*)&
zx3h1ulD>+k;n5Mc2D`0zFEwkQW0xn?L{E-DP212iSO#O^hods|B|_hOc%mt+x+=3T
zHu!TmWbN!&I6@`=2AEgG%+HGOR5MVC{9eO%{LNz}X$~KYnj8fE7d##SJtMGI@WkK=
zZ{$jrvf;x?9A4+Gu2Vtdd1ZEY)6o<`ZU(2P{#pJrmM@kKv{*%pj>u2pxrD*#;^(Z%
zO1$A5I7xz%Sx7F!Wq3h->Zt5hjg>s?=3zM%esluzWMoa{5O7=jH)Xv1859g>^3PEJ
z*mHC`EQiDXwe74#??wjnFd^5E&WvJJv1cIk?Fj7mBB1>hiHa#c%jwQI|8#I1!mw0l
z=0J67Udx2k1(^d_pZQRg^lf(YQ~{}}zEaoL%)!wMpW*IsY62?U_c+?HYpcKL4b94g
zH~CL}-*V;8^?ON)b@*`P`G$|#j%;7OKj+EtGO<12*->`au=5XwNZ3U$IYEdO7n_>5
zdQ!ZlcHyV|!nj&*^;Ruia5ltKhb=6VqK6OHKI(sY5)!VmmQVv|dW;D)RM*~^NZ0rW
z_RB>ZRd2afvKaW}9!3Trdh^qn5z=hqt^J#8ygXTjVqCG6`z1^?Ekss3pB6l#)Qqyh
zKjfFLn7_G|q%zr;Gdhv5Cy1xPtTUJ7@bEy}Qv4CCRd$yw1mVTtr?v-ybwndDRU<Hk
z>_EQ)dAPz~J|As<(ep6`fy@n!l2a|mw0g@owH%MoYdOkWzCOM!J+|b(%n*4?{7M1c
zQk&zfv@`tIysvp){&l*jWno+|OgB8#a;$WNHgEaH;50RFEwk}YsAVl=_hWrQ(tLFN
zdcc5Hw$l5|mGwt^x#PGZeHo=N^a7#V4T_FclgILA{H6G2OfWVT^_{b1TUBFr)38L-
zOWt)$)ivp+1j-7-Ra)l!iqhrU2J#3RitdYQtP1X0U^RNVzfgnuDX69LSAqfc^avQ1
zx-VpD%iW`ow0qg~(t@R?8_F?~g^pIc#KRBij$hbDMOIz8KUG1C>N5Wb%*%XMU96Wy
z`*(1m0kRP(XjwtrJ*3`pd@9Zm<)?9NU-ZV_0T3+obi(pbxLJ)3f%~XnD^tSgW`mdi
zEVIMx0&3IcI}9af91L39<r}!gYZzi1x?Zy}7o8pU#uNUa`B5J{FMek>7S0ai!Cdca
zyz_FF1v|U{ko<>SA6f{h2|!8<Tc|Nj24`H#*)BO{5`{B-@94M)K77G?IJ0i;-ikIT
zb!YI!vtUSn0Ib3Fm;#o(+<fz6*wJ<uH9`d!M9UNo#$=E<7;`W_#rAkd(Iv}`+4N`c
zI`d%^!N{(BH7F{h(4u@Jk9jO&0|Zm}x}lMp)Bha}0F#&fKtu%m=8<qRa1ZLk#x0oo
ze-fq8!%X7@GBeqYO`nPQV-LY)!=7M;xHedmqu@|%ZZ&*ZeZ<Jv!n`~K<yigS7*hu(
z9r>hGngFNKyS#i3&>FU{Z9U21@%Wj%GGaqruu27qyex(Q5*+=1fFZq1-i?dr8yc1L
z(Cj#ll5oM}fJF%n<A<C#8J=UbhKi(4laT8P-X4J;Fp`szKO%;_a)R{z+P-(ot->=}
zY1aD%=2f!kIr3Z?>y2jl764%mg||b6TA5Y1V7OV>4JYck^L4g??o!5f4rcG^ERax+
zC2jCg7maTQ=e0o7R{W$a^S|XX{5b!(TJS54YPt8*)S~p|Q7wIIgg(qM@Mv<N5_U5`
zSz4K~{=FjShYP<3ND+(vjvl+>6KW%u$ZN-jQ)p-IGM!R$rPyks=?oTu4LnRVpFxno
z`*p?9NhZkiCva!%)>!;2!6vNa{+um|iZlF%?G5*LDv<4Ytvz4*>L3A|$pHe^3tZU-
z2zU!+9B}E(5CVpSv`S{vDaSyI?r@?<cKIv({Nhz~!^<6rGr?@OM14<;Uc8bw2>nFq
zn)wn^!MuU`Q!5kM#VdGS(U!UKc7BJ2XIK+otyd*+%x`$hcVOFj)nD`g(g6C<;v4qz
zO7OIH1x$z}3jub^IN~wDNUU{tb!VxaP+YNQ5&&cPV>=)WUSS?~6fdNb4ITJ$<iDl`
zIB+U5(93@i(u7^ab-*-(R|qXX9eMZXJmimFs_wZ_DwU;Ags`JACuj7w)IC4A;nFhh
zyqpvdzc8;ZypndTGM5M#2{(`OvEbTEqNKx?^_O7&;8LD|dPc*`En-aV*g+{|3i~Jz
zuvlGfLYbRzjElDr^m{Y>t>px^UCw0)6p`5SE|fbN%u9DzN-a#tY$IU$RlBAZ4#-)F
z_*Rwc;gyW7%Fc!n(D`k4iJ)YkN`jLb+1oM{3vT8Za-wX`J=e>Bz@$G6!btCh;Cf$>
zQF?x<>ri(0Td8Wa3tnfGTlPZ~&Kx|>%gx}zJZ&d%!P<QOJaSYYK{ut<YDq*Be2g=;
z%CqHS=6+k`#_ipB3W~%4>5Ma_2K!^|=N^4eEi^LqR)0&B)xV)CJvaLRV*j<J_8{0c
zkG(>&^Of$FRi~l9%>q~y3fmrwkpi-?K6~(s<TpfSwDngaUh`)E*YZ2Nzcu~m?B>=)
zHpu9>#zlv;v`Q0Iq1H>wVlXQ_nizjCe;lA#8h)u^#2!efsiSSZBVkgp&ca^DBEB%+
zcM2H8D{JZ`B7G?%ehH%=U?uM5`*>NFL(q*47+>L>`f@~-V}c6G=uBvK&6aPFTwC4~
zN3zSK$<!Ekbgei$Dw+huvOT<US{YpUEW8aO6=N96*b?0`swe|mTEGncl_$%hN9svf
zV?_u?2+!9@5EEG+Dl57<7mH{Qvz`Zc2)k{lrEfcvdl&iV6QfBK992n;E>)pX_+O<H
zK-70bF0`GL?y)`Wq%W4Ur1>lbPJNweAZs7?B@$)TLAKq6vCI1I6#aGE1mp;0(q6li
z*Ou@4`NZhdh*;mZMEK;k!bmv7KP+J%`6p<%Qfd<Hq&rymJ#_}t9;We;ZJ%xXoR|9?
zBQ0iBN!PT&c+czzP3^@P$E|qzqh2>Hshb~Bhbb;|0lO_Tqo%^)m#%T3<)ThbVTCs4
zpdy`AE3JI!e4p4cbiV%-n$m2q2#?ihM&zWm@Bc|oud&quIcXsRIfb`@K<Rhdig{$W
zKl=FaRG!#ML1`6n{?k$+xVn$(9gh_gz%h_5C2?cpse$%k!_%c#AU3-RsqBK8_`&fP
zx^V_B^`Xlh%%uH6BmL^a$Z(6P6-UU(K_)sCSS7H}2Be4@7}=O5OTM$~E6Cbk!O7Rg
z5!>r>XW_>&cMc8C*))JO@u_8eA*wz&nVu5rA~6FGO8qKx5IVXCVEoeZ+Fd*~riUEF
zmB{VnTvRcX<+=Fba+Se%r;7C{uX?>y5@}e5tQYR4s#s8@IXq^WDOGfTzLV#}N>dIc
zyw0bxyWYY(p7Aa&ugy@}@@?P4J?FWjUg+Y`aBn%B*2~F!X4$&G236$yG4-$H3;l6<
zi@VaL1e5-_yv<$dQY=q@Tq>wRf6yW|=|tpixjEiqH&M1VqTd&CkK=U><u2ip4s;g)
z#6U>$AirH%50|Q<TnqPY=<}!{KuOUWyE##V>K3yVvB;v{&aZ&+^7<FXlllO@*R4J|
zmkIWoVcc*!ENEtxswq_dx3A>hg~_e$h05RfCD*?wYbKkZZH1Rep8?D3JI?sDsp%~H
zL7kTq*Vkk)Ikl4JU_o-A5Q>5g&`7@L+J{u2RrFdD{MtRb8`8##y2EjZ@?krvO|icJ
zbcLZN)z%I^{NNk*Q9IE3-i;F=fi*Y?$87pUw5oXsk2+TR3B}-;^fDGcszs0^Qt*tV
z&OZm#j#8Fc<jKK`YyQRVaeA{H`x7e?r@)@v7C&cw@3HX8bUi=yvGjO;8e{4A^3xhi
zzuQjj`vp~U@5j<dwe?R?e%=-3MkFtK1R4rqW~oMl^NR))Q^dv=9<gidG=WH8yypUd
zCdE+c>>9KzhA(|$Sfs`Q{aoG$xUS|bBtMG_`<{Vz(0pAjQQaH^fU6OW1anoZ*1uY!
zm*tpWc-#~=siOlzti_cyO?;xfQnagzU91r7+u;~f8;mes0iNfF|78jQS`I;QagEk_
zeyKf%o7%WMt)lkn6<&8@RKYjJGsK-NVopQLtKcd<#iM(&R#q63?@u-9kY6QM060;u
zM*h6;j6v2Er|Pg47nf+T#pc2QHP*QyjA7Wz=o@;<z;GsuSnTzP5F7NNczZj>hN_t3
z=NR$~C8rEF3rCEFU#D4#qx2W?X{zKUgU0T0d*L}-EE+LVE*Ab6m9#-;#Mdxy_J}g+
zR=2mhG2CT0&XH|^qjylBB=;akzldU?5+><G62pEnLiNM}RM!U|{*ocn%YBw<k|>On
zs1CnC%Y}!7`_4afxUJ9={*HRE5%|Gxco4Bg2BSvk53l8A!~J4G`Og|y5d&Hs4-?!&
z2hN}7VfoWoex@Y6x9|vOd%@J%Y5y0CYLuf#RdC8nhBtI;`EOLE$F>#6){+Y>-vdGt
zrEG>DkqG`yljrNAn);<-D>7)GM8^#5Q>n_9(Wwsc59J843?cXn%9IlHNLaF6NzRFJ
zwfXJoi$zEySiz;o^H0)i-#fIn^lyAN-SL|rVhNOgnHH_oUM-b_IftlS4~5rN1r6ty
z;g7tKNCK`wkNDt5j?@`aRe9ftd<C6_hlHQb!X~9GAdSu=4mrn3^=G>iYhtp%DSIS`
z6#S-bj;n=%6pxdjkanCXT_^Ntwaq-xnZ%RkCl+C)$Qa7veV>ooL*X<Gr8R%(2o12R
zX8jrMZzo+FbSgcntvC{Fo#&$$8$P2R?^bum1e2sm88oSnWUh>lNw=H9MaO&u&+q2l
z3csSmKLVrIHQe9#-_d?f??~ZBC_Vx$4(GduAj-lq2mB?5*neHTv$$u0?EAe_tEi7_
z)F5y58SoK#!hk^VF|L-SRg1muomy|d#ghwLmSW?|?po$Ax;Fj-50_4D^cJ50xA03k
zdQdxca6ESofZy9%6;P(3XVH57`n}>J{A73Om%r$YfHh~GZGR(rjb4dRV^CUZEgomX
z2n`hBTnghN8<M7xMUei_=M+H-ALs0k&1h04=puVM=gl`wtX;6rFMai}<&_D-&ogTa
z|Fx8=C5MA6&gFm}BF$ojtfW-%^Utzsy%Dv`+SwEw;9i>U(MY*WQF5g+3K+JDlf7GC
zRV@7vy}71p6^hPj0Lo#L-5FFl=c77GPqJ6G!i?TTw-9!462z0~&SUv%0K0`(-iJY)
zhM^F{AP(sp+c98p3}8b~bcO;{*FyXQw(;d=6fRmYG$l8+FTKSgg7p3T2*&o&P*mh|
z&TkLRDO~vte)(Q{g<kLAR=->Ics*gyJ>jq{#|uAQfy?I7T<t-gFTJ7m06$*-7<zzj
zvH+~|y$<*)-uh~@8@D7XG(kN@Q6_Ne;xws~={CPu$vG=d-SHNyB7ctITdvwdodVid
z>X%$`OCHw+Lq`Q4Z&d}U-%>vrBcQ5eu`W@(dOm=qj$W25zCW190I~kVewp6Oo0>##
z$9%qzwe{vR{D_8lG>@NH&_Y>mYILL8@4=+18TYz=jb?lGis5UG>z79@3VWqnL+8}M
zd|KO&lCFv#`HZ8IrxBdtqx>T*-1Hn|u2Y6`%ehdomp-OdNJ_nc2l^$FLa?SS6F_J2
zLok6v@05Cj!I^|Q3-@Yxf^ARnX(<UjrL$^ViCVyG#5skCRXE>`;3XthqOd_=i)J^9
z*kH6>ouv!s<1WGuij<a@*+v0fmK6<dG;5e&AiKit=L)v75D<mUop{-ts6{yjrer~%
zP+mo=f&#^0Twd;0DwqFx?gwh6FnL}yJT;x#j43BfKBIKWrMx9km1<u9-0&a{s-&6F
z4%2|fcpJQiZ6C?5M>V3Q>fq_YCv|#K6+Fxn8dMop!;0=vHJG!+ij}-5r$<VEnYRmI
zEN2q{-}5-ox@C_L8!V<G<Gs$*mAa&1yBNEt{jzae6?T$rdNKW)(m2k;_ON!@DQ&Uf
z%ukd_r0BD|K`ZTO!U>$bc2TFF{ZuT?j+Ks|Xcu7PdKGdp+AmEa5^~FBFDuD^?nL{-
ze3w~Qt({#*y@eJLxR-x7L^IH0O)YP}7QLxB;>~+`vxzqYWiu!6<hN1TN8i*NklWF4
ze@DZfzA=#<+V*H3B_t6_KBJVnG)5Br;R)!Zep>db`gkn;XR#GC5y_vl@O(S$y($=s
zP|nM%iyJTBZIusv<Bm|V*7|-ZS;)w}GSHvt6js=SSdHUR;bxQ?(Yon!dEO6N4TDe5
zvN3^<x;crp;n{{gZTAAJj@>~|nNqsy-&mj=4lbq`i?P(PQoV;S=!Rz6v4QHKz)!aA
z>&>8vrN_26?N5zzygIHEa1z-=t?7HRn=oi?j4ygiTrd5z(52BVd#*;@hvnQVS`9xV
z=uc+y-k+)m1c%M=_Y&_=#q8iUJQbZqEqp@{>3DrRQ~zYXvw7e`R9!}E$--=RJ=|X*
z$!-0vO%^ZR+)giD#RO4;gjZ%pWQiV65_!Nd`>1kjY2NmYB0iH5YxFC&xOm(3$ZbkN
zZV|hZoYlRGDdgv}hi#_TP=k%NtfE%H+y)s_NCXdKpu+(;i3@xB{o!|*I}lAy^+aE3
zf;kVjOX9e=Eu_TsV&%(x+3Elyp`~mQA8MArY5D=TGMEN08W`<1snUg=YXd3``rZ7K
zil4Lm41kNTacf*}$uSh($x5eTk5NZB1%+DdXwpB;$X;N_rOe2}j}4(Ygz`M~D*P?$
zh(tMP%FAD&5o9N>Za@^LPw2OtAeAY^ts6ePLvt?Yr8pfT*s_td;-QVFb|Je=pj(6@
z4%?5~v?2HwR@Lg|bxuM#*c~H2B_#u98S{L?zN@rN<WhH4-!aBNAXIWyKkqG;)kRZl
zwqI<XQ5^StXJMO?10^aBv}LX!wdP}DUH$2*@S7Bbe;Mz3HMI_T`<R7kRqVIKfX^q2
zqy46M`l)2ot0~s~Gwbk@{<K+k(2Yp_V~*IEdLGc$e^u~I7btNK%S?Q%{!sPg`st-{
z3G2JO(yI^zVq9qyBkNC_Og)@N{=ByY^S#;M;DhXNAmy}?{8aGgFIlZja^K5|F=V>u
z#k{5RkmK2G{-4GFU2cjkJ5zE3<hSE^*)l}zpE$VxY4V?P|Frz4>=E)GLqAPOSmwq-
zXyGeRo-|Ga+SsAl0uKi773k{8opd*5x;lPole>b^<rjiJIyjg7$WH}(wV=sf*=1dW
zj?iMr{CwrC7`z_zv?C>3LtT|+NbtihLFa@Ljl{yO(5YC<Pp1IdMnIE)thv-zcQ&(D
z@vi$Q{Kj^!9iNY8o^@h+Ri~uXQ$lX>U*RA)vG%mNP|L!roS8k=TO!?6t{-estYC}6
zI-IaAfDKihO<U5Bx8|_%|CmxaR+8UURZ-FgZ?$Q>y{5!z+;LCL?mjSjO9ftvOKtLm
z+W^kNmH9ZvZvSB4PjsrZWhu(vAx@d?u8yT{3|Db&bYC21$F*GnRxbYv+YlVb!DY55
z<K+~Y5?*TsTVug9omyXS3ZFzaHryX-2bSzk$G2t<jYxem@*%A9vNL#2=VjY4@84Iw
z)tAL7RFQrZkgj+v^QAF6`?hBHS4FA!#J)FAijV5M$H6Vzsb74@J8DmfAp|FpHJ8;e
zy37`g>?gEkcfEp^jOTOv=$`DB%+g6Ln_eYGCb${HF~fa|zv3=5|CoHVCvNJo<-o?c
zzi4yjqDirEFQcv4(~a>#e@wqP;y+J41&aB^clo(*83%bc^vv{&U#sy8Z$Rw6ow@cR
z+0&_(!RXEJw+oGnPFy><XoIBN`WJ^6wrRbf$e^7G_y=C8#3f}nqrcrKibE$%kOa)f
zHNhhKbwaty1{X!IeSJkXn$0S~r@ZBBmGFm_n5`1WzOBS*l*mkPjJu^NDYpjnWvxFu
z5ja|~TQ<5zziAu5bX#B~+;W1qWET@G(exPE3Gv<amYia@4=oto$s{ct%Ux&F>kHqJ
zSRZ_fV=cV=Xr9Q$s<Ex`aA8YZ&nqL=2P4|DFI12-r)_jE?C5fY*VQ$#)MyL5{|@*;
zo_IMW%#~YKqjHTL%T0FI$QG7wff_7!)cd7btTlIPi7B4Q2uRt~l30p!JZNRH&!i^v
z0jeP1h*sF2P%y`5y3k8z%F5m<6%~UW=_i7lek+RKSR=Md1*!KAoN(|;@Do*5*rE0N
zkc9^O;{dvvAvQphr7J782H9P#bDyCX+G@&u+%9m(`jx<LKG9opgAlTof6N?R-$}m0
zMDZKA#!dXQXr*C0dJTN_Y&J?NCEYk?zEDXrmJL`sUrj%kXgcxo35nvT`Djwrp#BKo
z>8;$sbRr_K@(KNt!@RTk<Ci^apiM4~{b+XAfzj*RmUcE~pXTt*#{moj+=LhliKYu-
zdZ!6T#m~o+<DUsf^S$%G`Ft#V6Y(3_S3uj}#r5mVOQEwS()cw9!eJ;k5BifRJQnVQ
z6&Nh&Yi)&IQG&=|6-;C-rP{I&593W3<9a~9p#yEEW_XJq=J|~1NGR}yD5QQ|+LKUa
zbuf8GG}tImUhZi6X6+}TT@KFq1|+dLIN6o47lM<5dqH@j04@uYNCNWl@FD}Z6<XQY
zi0huvIApky-_D&ce4V}sKhsKM-_oGjQjOd!=8qR_#s@{MNTz801Y*=eJarXC9C7|6
zDnh&jMJ83HK1=hitKoB2c}Ddnikx^0sgs><$ygq1=QKZR@clYzi+1K=2m6tKWfUU5
z=-d`V9ds@$@3S-~<nC1+g+Fo`Y~xY5i~Boc+R|!b^j&DOhwpswA4K=K7atpV@dj(@
z;2V1J4t?<kNOoVmUtgThi)GFp`dGw1%+goaS+N;W+U;GZ^L1eo#14_%oT$XqnXDsN
z7^Xklif10SMwYQ>v->$8e+g}XW+<-#oF80>lE?xVg)}%3uxEYFO~tyQW8?I)!e6OV
z&N)s$rtjt|DI$S6reF)>fzyz_kyORZduA7*FTFt<9&2h1`)kWdKw?288-fq;SOZuc
zeg<NIF6ts07~1wA|2(^}Rh$#ClTaFzzZwdv;RJp!mM{8$0xpJA<GL){^x76Z_rMu%
z#nwqM1jVVS7>hQ&`J3Tz2T;Xw+c6j!>()R0u0>B{+=(SdKiGd?W%~TK%muZL*D|T#
zVe9)yhW83bbS6;h>(s#dXDYM1Um5*K+tTw0fUKb37Kuv6F<A?OW!Q_6tf_y+{)03B
z3&DrcW=!Bk=LT@TRU-S`y0%P`gFzFE9u$Cm-!wd1V69fTH9$Bv$O~$ktx>b!aBSb5
zW%<0Z+H@X=t@{S#N<4eGYT^0*9886e4vJrs#>(^UL~w8^gU#5;HDwY_phb%5v$$+}
zhEZEMo?(*uwOB)noQ5i*cFN-)oZE58_zyOj!;?0*zwdCY?|~um4ukX?e(_T>R*eX5
zn#2GXudErceonS=3Vt?4BtY`s-pSU%;9GjoJK2zYt}<2*j{m+Mv{dJ2of?LI(BD(p
zhEFmPw?x@$li+{xM}BK&d*QzHWS@z7F;z9(-`~*)b#9Pm^iq80MKR9Pws4{ZtBJza
zp#L_bJOmR;+_`v)mEDP#*@wl^TI0vloYKJ8ZD+Ne-G>)RMq{BTRB};8TNlb@@E(8z
zQPubwyZNE_7scAnq)ZSizZ}vZdtbqvtkM4$#e#RkVl)Y)63LEY-}A1n{C{wOxoRa$
zelWXF&3w7>fZwZaNoanGt#A1?+yY2O&%M=C8xc?0EyFNV`vtZJX29F0RNc4i$UnFR
z(@PliOP@QO8lNb<9;|>e%Kc#~jOE1Es^Ylom!9<=!0SUDf8%f()?t~BU3$^M@%p><
zwg3OG&+)%UMCO2o2F0llm56&z5^6_BX>473RqauQ`!s11#aQ-@v9g@aPw-k7-CRHi
zxmw|bYqXi1ZFzHzdQ*-aYpv7u3Rk9H*DJYJ1$Ewy-(ZrG%ysNoZ*>LM12nMQbU3(Q
za(VcYg_GEmW@*yb<m5YN!H<8D^LZ+~#fPbdDVB=2EoF;^6|QUwM254;!6xSP3e_d1
z-}1h6FWUBbwMR8<N9+)uS3zSf^{ErCJ-Ox7^y$$9TgkN4r(Z<=w|oB&d+!4nRdpr)
zze$23NoS~~iY+bAnn<D<2#Pgezzj@a0s}-qMF~Pk0!a-?noI;NYBUKYB~e<jwYzl7
zZtb_UrLAkxsznWAfmUqMwMtvs($?yXpvKk;tt9jNoO|z^nM`KXZ}+>q-~Ik}l$`hO
zpL5SW=iGD8{ret2eEfygTT5<e+vrpM)$xN;eu+2qlIQXM$E2g}c)h4&@T_$+m=(Lw
zk*DWzS7=#p=sQ+#Lo*Y96!f^Odw)l`sN>XG>(0J?;LxE%Ik)~&vfp<680B>Lmz0GT
zl`IS`D7l$3`?yLGee*ojAI<&C*oK)_$%?kELW?@<Px_L}Z~bST`(KnktNrmJu>|Wb
zbdtvh53Zy9eqZ~koBeFA{_JgRY)0V@MsuI(Z<@(MSgFOzUXHSN^wVWZ%<98`op_0t
zarR1AopL=7WtQZ5IzOf)Gb`#-xA)5is*W&6=?=Ks*SqrC-tZR;_#Q_nxMf+neoy&d
z%3Oo<tKSY5gv;fNEeol($ZJv8Yqwq&sD91Y@i(*qC(Mt*M|WQJbUur?Fzt`qASrj9
z2#+frj4IKoSy_92b+oLLPlEoG@iNImrQzeW@A<CNBJ%mJzZj`^jZ$tA?LEleASrSb
zx4Clp$^NWd(1#-jocQoNGY6x`AMbolZ}RJY+V3elA`?T4n4GS#`Eyksyu<%sh6_HF
zZf1UlYh7f{yh3#JehA%P>arfU5Q5ah_KRB|-bbUPL-b?l#;OX?E!N<?@Ij~US05&m
zRqzu}`IF4NRfmOJ@JKcRcU%l*Lh#D2=WZ=7>x#Br8m#`CFe=6;s?G;Z&=QAFR6qRI
z42MtR)RuL=9js<=t{Ph4rM$v7$tV%lg&M+-VDIL;-YR#!ram>)F}M)9QtI&$lUX2n
zI-$1kuj}nN9~4{IvP#<0&7s^y^1e9oDz6FlsrwgNH<afV{)!LoenAK=qI?nPycnV4
zq}Y**$R2)y$-D@gnCLs7mMO)tnW(<-(H48nCgFFsa5o(chQb3+l8)=Cq7{A+1O!XI
zYz1hifUuXk-O&9iKJ1EuCq?#()9~5v>W9(u3yufbqu#M!l&0$?Pv=QWhtbnSOm?7}
zxhgi{1=!;y+*ULT>q8@yK2nWv&vfZpiIg?*qH>q4n`8J{&wkmEn1-^usp9<V7p|Z0
zdj7gdJH_H3aokp><5X+$l>b_;6sZ1{QiOe;j!$SBLzmN7E=p)Dx}E%hyIvjn3tQhR
z(R7U!6+cVaLKl}RJRRv*^Q7-ylzd)PbnZ~fqE;sr)ty+>C@Jdr-IO%>?I)V4iyjgv
zw$oxdpOf~a+7=J}k?+s~92uX5j3ehNPCPBsa<nPkoZ_uWKES<3`U`1gl4iZU2=V~j
zZWqXVpFrL>oA-m}eXDstY~G~_Nctn@eTR8J1`L1g3e$jW4kD;lTfX;=E3t6pkE~Hk
z-m6#py9b{rBCYC&x(}9jyzVML$s7lBH>a))?EPCtpy0_sZ`KzAuD(FQUJ37hw)<}d
zPj>VbvApT=A7+uqxA~m5eO<39j(8USsH{^qb$Gfy%$_JT&C3Qc)-r-j3$9_Ij70)k
z-&iYH@K?WUFLQ5q_ES9R*k(H*yRWeu<<*Ck#ysii=*JyqeSy35NQG|sWc)%;P(C0Q
z8q*n^dW!pENhQL*0bvK(a@jV=C>JVU>hEUmQut3JcvUq(Yy)fAiK^B;&2XxScA&QR
zl&Iz-hiS)_qYgf9e8$2IP)eXW62j861yWl8g_ZT5xQIo0FLyB7vRSA|abNKO8^!gE
z1t*Qg^cVb1HDx~AHN<9~#1T}@IUhx)IbR{w`XtR+8m}tKH0iObNhdVt$EKQQqfIpJ
zS@$q_v$}`zbbgM7=Wy5Cl;AoYIY4XjJmgb4jH?z2iwoNQ3%U=@YWfapkk2XNvh$cA
zV2(p3f@jFRv$Dy6qdf7NhwYfk=^9t}i)AVD7yKpBD)?Q0POu6&PF3ZEX8LY)Jw1J*
z%zj?%bPvjSp>{$HJ9YmgokTuKJzck=gY*!d&QUys?^c_WNkdnmPJ#&iG;$e~f1I*A
z2Fv))5c9%}sn*kn_~hf*co*CDiyntO!urrzzDHLODt^u>rOA84<9*$GyH7E7T>Pe|
zV>Nkne-pVIwWI*hPk!69<wx(%E&qb<O?ua#(S7RVtKFyeo*M7^8%?d?N%JkWg2M#|
z;Pdf+QUqNMK@bB?IdOuH-=X5B#^Tn;<05Ph({=d>(TLK|`fDdNZ`rOc<xn*EyHEML
ze?ifCTX9cj_lAnM8xnm5ducIaeYfwul^B2b!IQ7f?9CeG@BYc&zm4B}Dx=_V@0cHn
zY7{)lPU>I!3x4A74Q6DP(Uv!#BW?ce{h1HTr)S#A{oVbKj_*2t)k)f2KV^ZpNP57%
ze;ZNo<ilSe&5h61_@=(lHXaSL_ntcQViMH%2}QmFm_Fz_ug|+ysOX)NX~_Qb#rRdX
z?-Sa(kN66HbMn>RtdDg6au{vC-pX?_wdKYS-27E2D{YU?@pK+W`FUEyR6S2m2z@Z4
ztoyGg-{?N<??w{Tazw%58~bWtMVaeOVF3%M2c-fp?v0KpIB;W>sK5HT26%Hfc##fb
zP7uKF=@OI=@?|tm3F>WO|86A(#SxvjyC3-rV-!QW`+INxP#4p4U+se}1&6zzL^oa?
z??3;^+XuJNMtq*_dkYRvjw-D~|8RSsRlUjM&)|Z0KYQ{QlMnXhjNV%MHkPrwKSY;_
zBfEcgbXxbp`CNT{@@1yHvE{D5g1sGki=K`8HsiQG+x9cYhfn*b4){Iu2e7qe-KX?L
z3`|V&b)n8;?1L0}u`~i4KE{y7nD++@PWgI+R#eRR8BDF1#omeJkXm;=hI>QSxX<}`
z8GO)=XQT)FL#ohk6sMZl9FGEun);p~n>F33@`wg7M@Be0J)4B;(_L3Ec;%>$uRDTz
z_mf3+YPX%Y70qUlvNt;ZWJFpOp5|ZA>VB~;OgX;pH>5d7<h;0&%PBUl6Heo5PLQAY
zDJuFGvFK1jbfy#iDA5qz4!KGwIt@$jA}Ushq(qA2`m*0)#TCZSN*0=OWIG|W&B?z4
zf%NJa)y<W{TPEG4SAX<J-~X4-KheE;^JY}9tox_Zh7S7n4vwGQTQch88@|2K?6QKB
z(lXIje?h;md%tMu&-|`Gi5maOQDYu&>?<jF(s$$jk^(*s`wsKrH&Kq~4j+8wog+E#
zj8IRRZP&|}VPE4-HvLtQ%C|Q%o?3{tpdx6w)RSJAl>jRur_GfejO=DDhdl@n`CKK_
zFrk93_bQhfW0u_P>3oI&MyF(te2$cg5x4R{ReL~mvEG4hY@^uRj=g7!-Jzy?|2lqe
zG^5~WhLw@e8r|xgp%97WHYSLs&WRo`==CK;Ml?clD$&RxJ4Mk64$KL<h>H+J6Oo<W
zD&{$2L`(FJSZ%(Q9{m*yuTtDEd9}Oth&J(34Q=8hDNQ{4T&3;>r?8%*&lDRInMr+p
zy2Ac=jqjlhdXQg5{tc_5hBJ|7MVQj9$k$Y~uy#r;{w3{!Mm~ptbdDd!Qa!^{_W^pm
zmw6zY8k_v>M*P+lsHWg)6ZMX{@f>xJyYa6Erv96!V;Q^Jm2c8OTcpFDnB>YQc_iWv
z<xe(F32NZXY(%_dkDCW$7TOS;rg;~&&`)xnS3hMyn|_jOA@tMD&Xa0aek`R9|77e*
z4vTglh!;gIb!lq&7kNi^=^IYGDV(_4p#cRIi=<4pD5UBHFxK5K798k4NH<V$ib;sg
zV&_CbWBx+q7(K71Lhb+&u6~}K>w3OU^wAsnE=s1~!}Bg>72wmDLp5lw{;Qf>;KKbs
zzpmZdGJF|aH#K0BEl1+#l;XO@JzM40hWAZU9uWzY>zCxqcE38g4-dBBCsUvCEI5pz
z?`Er$sGzU=MITq1`#j|bnEb&1#(D;-f2>^ay`GM>hKg$$x!>v+H}p#JyUm0KbSZL@
zXp!;z6itpe-tXpBm%E-({Ym5%)ImS}ny2oF_VpD(5f?81U&Z-^DoU5Vt{u;FR!zMA
zYr1}H=n|?8U3kYrQmOc+CBhy(D--_eM6HOnVi8`xq+z5i<KAK3zNTiOXgOQ>9)S^&
z0~9J{$e>9oxe$B`)mRxpN3KE2-4W$EcSKyCa_I$v)d!VeWyT18e$0^lDac+b>|6}l
z;#$fgNgz(Ns)0kdr!#^<aVi)7g?C6TWYsV5u2p#^(rsGz_gQfW|Dwn=$H<#huB<*f
zdV;p~XzGnm)`*6>{H{~JC-9Ig*C}-Si7}!n(s!OCUUc`f5x>}v-VGVb$_G#bq{9?4
z^UnLE7wF1F!H>TZ{%J(?TGnnhNm1fD=|07DD5|qp1^Rlk&h<S(r(;DP5Cu4r&>=`)
z@R7amsJ`I05J_21kI+Wihs9YSSnycV8BRSgtG9E8cn;c|P#totH(pE@ZO_GTcuXoO
z)adF)a*1_BEViqm5E08{if&cH=Mquq$Zs(E!z-j6G?%Uo9iJ6>3D)}<SwAeUthmQ*
zbA69!zq8+WGE&z4=EIE=gXuTkF;2DdjBVo?`wI>xImRaskC0rheVR>=(<d<S{)PWy
zcpZ1%{RK~__uqRfKa?4Hnd;vDS7D&1S3bdW^0z}x*@vM%ksZsK&eIyN#$AyPjAdf{
zbmFzZ{WO@wm<wVt_Yi{xmcA!n4$ep9N>{(K%8_dl*dOj^E=?7q+Gs+XRVq)LRd*S6
z9H@zGMBS7cXz|~2uBrz*p(QKbabzx}O4@l8kubm4abmRZsxqcU)bxhjg4aDbIU3&m
z3Od!nLe0?SkFBy^6<#BCq4AE8^H3Sf_Jv=5fxCg#{5A1^4quM(8xp@i7SBRgV9OcY
zxcBHczombio?2JL9ursK*;fOu!vSv9@7^ETjX>4BOjqBdrH~)+_*phoQC}viBHRi}
z{4Y%pAuPv9pL1YY<dFhJjPzaN*_{{}K3D9XoJFBVBlm@iRaPBuPK5ArCO!yH(s6=H
zt>m#L`}(rwV2tdf4LIuos=Ujk{%ri<%d^WOkCG$KB)<35cJA?+FvBTd_G9gL6(4TP
z^*nTL@7yPPXWAWqJ<s!y+cW1$e{cB{y;s>d>F0UoJj>3=!=8tpV|lIM@IEe$6RfhH
zqYfXKh0EJdh<_Z;qmIEX(_i?LEvvLFOFt}{1e1<%&LJcVvXe?XUu!EozBsmTA{uT-
zpUQh1&cqjeBizahCVqrmU@mDxtYvZl^ta*9QCoQR0j_wvsO_Myol8#JI2;-c`&9PI
zGhOXhSP#G0s*7XqyATvx`1IYtg+5RGn%MB~w3cw3CN!d*b9zf2W)g$>L^(>~+jEd4
zzV?!=Nt|$ZhpytUC+wkCsyb|#X;3Dgx$c*R+B|U0?`?Fkf_j-X>9{}6Ulz`H>TFCB
zd%C_yHpQ>-llgIE;}el_F>?6l)Mak3-)jXPsjjPPX{`-Se6$t1SnSB4GH(RBM;<60
zS=CTq#dqd&Sh&oh(~-|=KIPeb62tTO{TI))WEtVL@K55UcRo*)ZU<bR$j!8~*<m)5
zFj4RF?rXT(uef*4NfzU8`fW$l4*jwtdI1~QNWlD5`13+=FE>QXTEytdeUHBei)8P_
zdMZyI&z++bDk8UxVmD4!@9ojS!NHTyo_{c}onI)zcN}FIV{c^iH{078b@=xNdgo@K
z70+6I;_ZzNbo?@tNlo7trg?|w4|nfP$XZU;U@U7zIa$jKI7k0ld2iO)o-TDlqjx<^
z{%RKtt9ZS28R7X8L@(LWNteO8?^DWCeh0?Njl2hBm4+&^iZQ?7#X!M}L02^BdL<k{
z7;JJbQBf6q;UxS?Q8kBycRWru;e!ow1~GDh_d_OVJ_%)K{_0u#vnGk)!k;10@#46C
z#5m9RXH@87*&2SKgSzE+g7(K3lH>QjC!_@hyQkmrhHXWDh+9okPuCO*I)0BIn(oMB
zL!nA^{7XSsShk2r)iDC_z*K(*<fz>}>a^jQT(xsaS|m#f(eN<}qCkx#`~~zT!r>Qc
zT^fzNNr9@pU!xj2YqwaM0W48F7KIZO^rhi`@~i6uHpz@ifK9LLDyk8EX~@kA_SWS3
zWjRdxl`P_ARGuS$N>z~G1O=JB<GH;=zU}i7+J*Em-0tP#u+p*deXow_`2Cq%#@u6t
zSWo;KlhCq{ObwHO7K@)Cv|Tutx%ADsQiO}adsmo9rc6NI^*IvqNU6P*vbT95q)QnU
z>C5<_B!TRurVP;6pg=W~`xuJf(|7VnB%c^Xcle{iMDxjW>Y?tIVvf4_-#Euewdp0-
zTC?8vH@dhq<#^}=;dju7z!vp!uAMAA73MmTuM+v2Smc<Uoxf^(U^14MZlK*+eBH->
zD{%)kH*LjI{JhHCAoHqSHr!J+^>oRi_j^=Q*@1*gD%TMPt`u(8bpDFRAU8uC0TW1V
z?4{Yt24C2zj|(os;;8Ya3MI7=f@jb-I$S^{kil2`=r}m;i;5&v08}dx%6Cy?#XpIB
z7^REtDs%Qx&~!>+txRth!$&m96}~N3c&Cm$?hik=PhM!dVxzKTr!!-*C&SA=p_G#T
z5JqvhpMua)zSH#+VF^w`p3I<g8L#0ZJ%Oj|4dx?cwJ%pDPP_hD>I1$krCZ@gXlO#l
zKQed}g^qlI2d6*9r3&9`5^MzvSxQ~u7cS6*R^U2>3xrUNOsNp+mz}-6w_=dsSNOZ<
z$BA9a2Nsd5CU$xvu@y00RK(6y#3CccE9PQ1i1jPcDItc>Gz48v<%J+CLT{n@Ey}V|
zCgCyeYDYI%UJF$z35RZmx4Gf-;IhB_4Yrnfcq-V}eMHLnq%acB$w!@XIO_%vc?zOs
zq7S@QM2fK)F;aybD<b!z>GsVun}ywwMhgixE5$jmAXmn6a)qQ?u!=lOa@}7k{uo(5
z8GZpmn3?T3=!$$-VWe15wHXMTf^3Wrlto?xk+aW-_=@nyb^J;dzceyI<!y%s^2hXb
z1IW#%z)F=J3UvRmjiY<-W`^##PjHBikU0D$#4Q?f7gAG-`hv*SQPhIH@}d-VK6-kK
zQq$ez<B~^B^F-cCO^b}=SEo?Z0C6HB4EUT!Y%JoV--e9GOE~-aM2J7(*TJg!$9)HK
ziCElTB$`SQp-X)Wek=4CHGd9X;b;9pRQ&j_9sTw^w6EZBWWCIfiuvTIY*u)uO6lp`
zLE)f6-(R+MeU-jX?bG$8ADBmdKcnjV6rbqB>tHXvY^;&*LC_XGUH^-Lf>d;finmq6
z`x;ter%W(L&c-^#`%kCcDzP&WS0p`_uzK>Z!jm8)K^;C!lxEYNF*Yq1HXVSN@GQi>
zbt_w^{^(PE9AAClD7HA>+`}Ax2~NsRRb`vNGoB45H+cfRwa3^a?yK}I_ua63ALsM_
z0%pE58vP!pHa(lZ$xHYVn-EsBkkZe%0J38+LpC@fI!j%5chd|RNARJ-4@FC-P04Qi
zXk;f*4!;8z=lo29J)Lqsh6UZW*XYe(<TQ#tDATsToMYxh$%?~#{DZJ;k1pl3LuhPq
z&WE^TiIYcsGiu6<<?L1|_*3VP+rr^**v=(W&>y2d&^u>hpyOD7px`Mv>Fp`!xttR{
z5qAB>?3?GIfZp}Q+{y8Okn=jsM|B?#6tMW5^`bh)VC*=bzGD0#r*+tA6(CW+x-WTt
zcVTY$LWh9J&EQVlAE@}xm_ob^8LP2B>=cy?bU$`V435a-o-j}0R#3=(pzbaU6oH4o
zz}g-EX9cG2y@?yYYLCR^;#;wti=T8dvpUAXqB8<?rPD=B$i}njml)A7<26e=g`vj+
zy<MXParakjz<liW*!?O5PoQfIK~P1DUz)YQYn;3pJJbG{<f03?S-BOxk~zI&F+({P
zUHK#ueULV(Zmn^3cTFK|i~6ezP;Sf@&!9|Qm7ttm+xv3XeAmkuiVV)&DwXnV`Ywp(
z<8g7q7VFzJ5<K)@4t;3Ja_jg-vG&u>N3uf~Z7Ch&n_8B|4OEQruD~JmbZ()OU3hWH
z;Jn_f+vFS;A6>@-In0OSPX(^17}@qqPAap0Toj&5%b@8>))4pVd_@XWr+m7Pumr^x
z{oe#S6cwU3%r>g$z!gd!TxCOQ!bGI|yDE6$L-$a<M4tHV@2Zq1#xeWLw!-<cZ4&An
z8r;$)O0mCeJ2LEADVVy;b_9CM(8@jxv5G~Gg4ToxaY{dxe}v52Z`q2lZdD%3{2l2f
zrOrnjDBEeoq@AO(`(52-yK#-mw&NN78YJ_2{c;vkv5Q0RBdN?4SMOx^1aayt<T%(m
zZ_BvX@dF=|s+AY~TDGir9wGs&<e^oO7K%ui|2WW9M>12aUftN=)ht2XT_FIOG?Sn}
z`U99L83HcN5H<}M9(p?Kqzo<<c}($Hy0l(lTDnTNbOg3MCJYN77^nNQHq=i`$raB0
zs95#KG}rfsmpm%={6WQP@n{xc>BXygP!fb+7)vbU6=WjBc{(2yDXRYMX?em8<Mv}s
zalFFHyO9&e{w=zy(nENp322!bK4_+JyI)rL<A%^z;_4Ln70(P|;-;-eOxsKS>>L>#
z`5+yS(g%@;a20lXIv*y>mdAv<vgGzH-ojI;ftv4$lc$TfA~zEsYfpwH;oaxa^(Z-s
zZc3#ii%7SXc+uH#2=<AK@Chscs_hDYpA3O5x9kuP@ythrnQe5&^S8$Q!?qpR+N|&v
zb}(sHmZ4W`5vk_mALI!>+I-hy2MtAOs^Z`gRBp@FyJgkzIUc2b>_>C;)Ua?Z{1Hvd
zrMN@V%pw=X{UXf8{o)?V?PCUs+!H2lZq-KwS*_k}WqJ{@wThqQ+aCFn;%++<MlGR#
zOL2IduJ^Wmg7j75)fU<<WjnbnWJmCd?^tk38nmbLPZUFczD(f|wH8&xoa~S6QcIhi
zf)?ifHk@zhe}Np@M!Ui_qH$Xuv&kbIeeegu(FaG%Yj3Xtj^F*DN+YZ-I>%wHvdEs!
z@5Z?MN5fswQkDKd%xEhfhbY>=rB{r$8ZxMF2<sliSahYIw<2Vb`UUtgrZ<V4%X7TF
zqle1msgq%&DAlx9PnQ~>y?cvgRZ3VAS5Z0?pYo)WOh#YKWJoM^5(PDO!dMPvRgGLC
zvR@Jv_X~2ZS!j?I$xwo57dfa>9M*2pJng+IKQQ$LPv=vVQQmzMTd3~Ir<~3{-{#qL
z4A=CBM(G~T*FF0*L`bCRO*!<==OY!XBj059JE48uvLk#gf)WBS_d6rEKpT=4?eK5z
zIw_6oT!b%d{t*QWLnYAIEhmXzWF0qO_dKZdBaQhwcT7w%gi#JkPv=>}J!Qtuktdp8
z0rgl(ngk&z1zAk|mIswd;d<z~l6r^{Q|hsTw#_7-;-#na>KN5lq?~6dR+}iQ79e0t
zufoR&bsBGxrQ(#w^-}8{4PqSRxbXjPAW>rfBwasOQnONYMa3A;wtbO$nwn`d;kT%=
z!GQe|$sB*s$WP{^E`xpZ5h)}U5f@>6lUQZPG|I@>aM@w}KPtph563V%?2O2EWruxR
zz9KFGH{wL(%Po(T%HSr+YyaSf@Y=tDsC8`8(C5!wj4b<b@FmOT#{2krgUv8M?AIb?
z>>-WJ=XsnNGCfySsfNy_Xu3Zag~z1Gu$J9aFZ6{+bi6#i<Jg&7vbyyAQ@`hq4~a>|
z2z~9tTIcS@qtt_--$9>@MART?%J=0(#+VEeYuLaba}!T|(9tW#%%09~xk070>2-N>
z<|c-Wg}7*o0{oz5pibxHm6WmJe)waGiqHt5z@oSsA>Ji}>J?b1K(F4!Bj4GQZ7tkl
z)()VmI$WL!lXYit6l4%RTJk)_yWBf>SjYDPR2~VJ-{fDB>ySJN)7bi>STG)+pCzOq
zhssz!t;x0dKy07HadW&7v!zENOy_=hIxI;AX-CL|%#?eq&z8H`Rr?Ylpb%h6cgYa(
z0>sG&z|Zn*`V!Om%wuqtptFZZ9N8!2m|#Z%U2d@VMwuyuM7C9rjGW0@q_%HN!O3N-
z{mKuJLkGV086bFuCqA>t)~(-hOlUIqd%Px*lr(Twu(vIGQyJ&XL!~sY?=T0puVu12
zx$c1$b^4w&jht`{7VHlfB63+CWAgb(xofYleJa>r0hK}bBbR^LE%Z^d*a@_f;PzXn
zcjp40WG0b?6!|QTU(o(GT!ey&nX{=KEZ|Up<qF>@I<;j_ZiQr_=lkLP^1fTY_wLE9
zQQ=DcN<EJHb*iaNhTqv_g5ygCm1e9Efvj|xT+^cvqZCpc5)}Yzmb;)JD9^#(=3G&l
zEM9`WyK?;kyZHnmBP%Y(httZBLUe*Dz4T|Y@|#GD430XPjf66!FV%o30j6LzK-wVQ
zA>pE_noqYsCGFjrFlF&a%bBzGF9{uthnD2JI=P)ghR=+eUxxP?fs?-~@0~I(==yW<
zPeOL&c1%(199B*ysruxEe(_H{U8^OE5A=3E*Y*->bNnu6zKMn)T(p>jmqxhK6<LdU
z#iiS(SjM^$c2rJXjtp;RUqWY}9IfOI<JpLSeb{VEdjoTbzsRi~;n@gPB>hPuscs*5
zUE$kBd`MdADw2MdNz?!mmROOv3h(VvtyjFrjsv;j`5%ajT$)v=NgJFlVKxS5qQktz
zcBeY9-?RVQ4_0Y!Wf+vM?@Jbndx`*PItFlszcN}AT1{OIp;qJ?USjhZ3GLbBQq7fT
zF(BCE8!5;%+m$@VnyrkBq}i$#tJ<#CqixDQa19K13}ZyUFGhn?6|86+mnFsvrAAU!
zQv#*2;)xy$dm{D9gOT<`sy;&GV}Zv6_HI|2OD?71!Vl48`4OfxUH0}{gh}3mgv*6y
zwtCkWn@Rjg6R(A|EjQo9_iH>kyppdoceF_-lnS0Ad520JzRg^V)~V+D189mZiHb?&
zd3?0wm$sCykLviD@(kk5nyjYbsOChKhqNOG3fYJ(T$+ut@Tts;8&J$n+5bpay-Rfu
z+zA$19a$sg>+^}ipL?O55V6zx>LVDnL&Bi%J|LM0k=})|s+!S;agqsZDs|n;V}Q+V
zCJ}b;3=AkXrkx0@tyFppNt4!Q+;J0bg|wK_;W2Klh*|VT;A<zFE4(mAw-{9rE#|A=
zmKLKgQV-BlI!P59Z|M(AhCezg-eQE-M5k{&wT-nJg*1T+s@3em-1)cc($(*J&C_*@
z8ouf+-wt~;v%*!hO=;vm$D|mNEp-pG=(*zj4$4=zv9W@{Wc_^xEjQ&qKmd$VJvZM$
zm3q+o+ro<?$K-@}oKRoW?D_*VcplPCRvMCp@u6XPI=_e1^@2>Nd>0BetC^}h+E|O?
zBQue&C$(os?xsFggnr4fmtvrVGvTknM<;<OtYnJ3iitDh3gsIaYZiVRL3Q<&N?}E+
zu$UHjx^l9la_^xD9fyqX;LwIns^gXp&y7m*s`QZ#;DdhJfl^bsvf?qRLIRImkrxS(
z`wimFh|JP{9DBevxQF&IkuEaAGn=V(SGS0+jiM@0E$un2{&vieRFp6l$p5M(smpe4
z34rEYpv?Gms&Z&XuM;3POLEA^xuwtP4tqLtDZR5V(7Tv4_X;m)YATImQ#f}|kR*3H
zb*D2o$en7T@e3J&h0i`qHy*Jx(%r1uDeu~`(8uOwU~uA$cykftth2#4-N_u5oK7dB
z&?GQZHJ4kEt=wWQ=18q(Er4{c)G(ZOg{PxM(nefRL|`fDtjJsJ=XClPnV1-B5{(2K
ziG-7`@Zyo0d=Y?<|Fv)MPTQAQY5Q3!+^ogzR&olDPpFJAkDGWYPgh3np_9rK3L6#D
z1i7io+z;(2w1`YR^$sK={iPHHRZ604c@KXIzDku?qmwELJywKK4OQ|hi@QgqRSqd*
z8rjLLP?F_xDvs1vN)}J&UuaBRP+7wpi_(!nX<J)iUU;M_;S>}Yrnw^QqM-!z!nlS|
zDzylIMkfZrW6J+XsFk6b882cSyH7q5Wq2RFB7ves+P4Tl@_QPu)4mP<f7I!u`p7{m
zWuyRvaq~4=nmjkc?+{L`((PYc^%)3Jcr{Viq@4t=@CK0*WH?s+$6pu8>Rv;tr@|Ag
zyZAw6S)@@DlG+mSflvt2lD$Hn95qd8)n6cmf6I1bEm&#)282kFoj{ndL(%p5Glf`X
zbv&JS(*+aLPK*`Vq`VIGEZ1ljN0uVUIG+xaCfqtg@$(qZicd#?k>}WlY|^Q5;z@~w
zRPHo0j(Kv65;gT>cSI|gnF@_hIauDG>8uk<E&QZ4qI89yhP%S@7a@_rQsS)0Pk0%+
zvP(Y_bVdG=oq~=i!v6}74Kq{?#1wM}OE>d1F+VQS%k+cx<79pIR>^|1OnQIr(&OJs
z^eP-wppa7mQjAi(xw@F4iZ@R-)WQ=XHzMaqQqCa!EQ7(A<5EWcmA$j!YtgXyZaKZb
zt(-kEYX0E)s~5{B-QHox|7$Ev1xAZ#IEW*gtl8?qK5$%kxwf(|ybY>YN0ENhmeEhX
zS}qN;E>kSWf{NPCJ6@^l&8ezD!I6OLNBROk?yl}#BFX8#)n|dYzLd)uWTW;0u1>Tl
zGkiJ7MSI)!hD%Tr?nyXxX6V6=Q|ItSIw~x9xkUc$blFcKZOQKGbdy@VNrwW~=8S(s
z;OM}Xd@j`XbSmGLfRTYMIoyHE2bkqTCm9EGspDi0F1`}}x}YQpC;Y_YVCzq@8vF;g
zWU<`q=PTwH8@;7o`HX$(G1PrFuY^Apqh<$Kr9BkEIJp;a^4m_rSHk{Ss?DSlR+Tc3
zpxT`#wIo+QLXa;+j0|)av+qyD<J@<mw*6^-m*j@$xS&>FeARUsE@Sv@u<MVg{gBt_
z@x2f$ZCP_iR&frfx8pm*Pm{Ex_#FIU<!izwl_fAWKeQ$MT_XKl@5_h3u)A9+rVN%w
znxu?BMF+6QdOnKVPR#XT`GIZ-+9U+Y&FDh>-alpqrjx@H@XQGZd)Km2=#B6;%aF{C
zlkG??f%_-J6VPK(5k>+HxnqylVb{YKK#EXupkn}HpM(64fipc_di>FlJDRWhvAeL~
z*Yo)tSBKnstadW~HvCc1E#VD2dfpHQ^k(IA(~n$A4t3o9!&%z^cL(sIu0ZE<HI!d;
z7PiZnHvDC&j8d<4!prMbKNh|l8Vx;=@z092$z<F{s3Bt;<U<DI)7~+<{C%>MkMg;v
zCQ$IIy30(Ksdf2U4^M_aX37rTC5ix9Y}=J=`>6<*li_5J4is>O<m;`IWCmrTE+ydc
z?~_l=(ck(GoS6d^kI5fNaR{mTx+keye-dv~3h$#Ntujm{{63~HBG&dR$@)&{!)%h{
zlLg%0BQ2!kc~+D9+RhcEYd|WMn=8{2dc6dFq2}QMdTrqy$`HDNq~fXkn9fm2WFPl2
zp$bzWx~p$Jx8tbGe02Wsr3v&Xw7R{8KT5cNi_OfD<Q+f?ll%PL7aZ?|?Dp^gYNcY)
zz2Am^OX(6@OSg;Y#101d<ah6FT*Z27U5(m+oGlcJe(Vn|3-ks?A1KY4`_6~Q1Rixo
zE%l$ALqGZZz}{EUhr=v|j^vZ&62@{nlMq|7e$*aW1%GmWt|42dxeQicAqfB3R;=Uz
zbrIEG*)?(2?YEtlGC~=DrV^(TiW*)HR|p=)OzA@C@16-v{aM@D$EU>F^VAo)?T>E^
zZMmvnZq|C^__tMgfsP3FZccxo;|*Goi?0+?&0dY?_{;GgLH1+610w?A3@s{VETofB
z%}=(<O#YQ@T@+iLg$mJp8q~hA9INd!+Wyd5(hmTBEm_Db-lm%GWTYS4&4~JZ999LC
z;GKPOPGY)E8@tGr4q}GYek>t`;2bN|9bO{!!M0Ml{o!wHr*WyaK-*=ZmMuicCS3H6
zqkLcpeH}d<4BdvT+b+<J$tg;CxA#CGdm#Cag1%l;u$Y}g_re)*83O2#uq1LN501Zx
z60TSAq3OiAl%k0riu$#mmhztpEL$#>bL=lPhgTD$D=20sqBioZOtB;|__u-RBP!xs
zkf%37&6XWLe~d+ZI~JjKNF5>~F5RtL|Ew=SirrTw7M0GbCihsN*L&AL*i1p?Z5BW{
zdu&6w{nF!|67kE<%;I3dAAQ{e+-DWoJCMnzOvBZGrBZCE8#nn^B7b$t|82I@`J!Wv
z>Tg&cZ+TVCX~`#GxfHMlyUG(6e#k+2=?>vZv2)Hr_Qx##q18td;y3`eZNBqm5j(qv
z#~3|6J~B!R$ds_QH>G94PTH{?9#|orh_p3$V16$4lh3YisBN|LTJ5UF8UZ!+t5?^y
zjItIq*^Ra98tNNs?W&MnOJvh(do_v4JF~vAs%3+EOO@3+IHOdR@VJ2w82B{<zii-L
z26h?PYT#cC%xkDA<ew$5$bz`M)=}~@F>m5jLgoD|2|C}pXz0%x#k+0U5<1HAdc8dJ
zmyZaRmfBv+zSy!$OC{X8_~MH}G!0DF!p4RTc6}p{@;b^APE4$}nyXrB8$(uW2nJQP
zz=pO^b6dz-*HRy<wO3ccks51O(^^SpIHH)gYJ)9sqLo)-<;}1rwY9cPYG|siYM9i@
zp8i_>Tx-=g-o!@!8oRowF;u%gWH;0{t_juI6Y^RoSYAI<v`zNfsz%LgyP;}TZG+v^
z9I9_>Y_)D!wrpBeLvvl#wB@-gmRsJ%R<O3wUedI#w#8ahFDD0T?8Tv~h6WH={;HcO
zB~Z1Yw$++ne`76=wJo9A2CJf~t-&r^vxYb8(uqahn);T|25ZiOtCc3Sh3Xqx6(?ep
zuB)$c2!!a>4fWNb`o=Z34t8ksdRMnJt@SE>xw^G#O|7uhUbe7eN%_JB%O_5pXwNPW
zmMtD-*>>K<i&_Q1afcaoO)d2|H#H7rhF93>UES2Owki}$8LC><T7Pq`=2s#)PDGrb
zP?IJn?>cYZT5lf89+;Lle_Gz+iFpg`yqm4ODm!nLomXq;EwS^iL(NdN>DJo%)>f%r
zQ*&*Lw2-RRq1qN*9O7!JibZINdFyH$nr(Zb(h)mUSKn$&$V6+EYBJWUmipS&mJzm9
zyS}=it)|w2if6nuQ;=6GU{Tw3h|!CR2^z~VMzNyRs$X3LvidcRO)a%v<m_#2uBt|*
zbik^Hs>U0glsc%osx=l37pv>2+0YaUgBRUtToX$PC0<2TD{2Sl>*`n4hrD%dU|(C?
zBIz3IL-kb+Lb9b))M}_*9r9K;HMFg5goBOsYpWV8tciC`OH*63BSQ&Dlxbs=*N`r1
z<87>3TkBO6Q$In_)KD`NfdnKXXs%iVmqWEyOLeQ&Qd`~D(prBLZ?(-$Eg^4x4b8Zo
z2B_4a)oPXYt!v<|LddPO@w%pU-fHjawnlWCx~g~QO%-Leg2uaQgIA!{+FV-;2~{w`
zK^m%Rk>;RPtu@qA-|R(8>LGKDx4Ok@ZEJ3BscmibYU$LjZKkos0;`+Wu5D^G5-}QV
zL5vbdQsv{pi7aSqtfv9jD)OnRuvoQ0!dKU$MK{&L6KbYftF;6pj^1J#MY|^0sGGeO
zWwPrVbvq;JL@arARbyjQ2pgrX+yw6gJJe)XVIicbrj`xL+FKYbW1MVBF4cnZwKdoV
zEQXV~9t&iCm`&<S!c_^8%2Mdgh!r69n~gq*{h&3`NL%f7brK*IO9&;gq)Y6O#3aYW
zPJE()0FAZ{HU_xOSP)ZQVmfW^?bgr+N^`7<NoN!eE+ti%0NwVR&?@*6w}z^l^?Hpl
zvR5_18Pup+i^t&g*4xO$GzMt`wq34Tu&rKn7hT&}O=an?6d#mHX$-ZBxF|1WLmG-@
zT^+rJ7O5CGg+<yND7@ZuZPB)8(e=R77EQ{#AQ3vs66!I;jKoP%x{cd`2+%1K*)dzA
z>Z0niDgjTTi5i9mc7*EiSk^YRHHO4vK~?CcRUYcKE&)%>V8)OTl9YaCLiz-I8q1+u
zrYK|+LXw7vhN5(WNu}3S@Rr+)5?L|S_D+{LN4|y~LlA;Y<p7Dn=N)EQY`S`kjqMm4
z#M9DJPseMw)P~wx8f{dvz7fYoFnFt^UdrFFm$cO4-wDB@0g&HnON1)OTTQxI_JXVD
zOM0bZ>qE<?^S(UR$4O*9{Sa<M$iB3|Fage2H#K8%0LrnMILg}wlB*qL#vr|4WF~nW
zn-HYkp`dSOS<tqxMgaP;zOgk_TNU$HZBgopqsTzV?DZzuc=(3V7qM5@*|TiN*xR*L
zyle4_*{N?-7-kze4(}M05EUxXzqPb`7++0~qZp#)C(TTW(EDkjMEL?SJ~oN>Npm85
zixGux=Saef0r27k#1dCE+Pt+^BXN<Gv{&gO<MG%d6`*`r%iAdV=@sJ%8tp~17K_10
zvy`VN0{3oE97^coVi}}it!sk+(x<m7W?bvYQgtSx6|vOdR4f>x9Fs3CDzKYd>fuQu
z8gGKL5JRB2A)J&*lU$m!?jg03DI&ZnJ5Ss8Gkl>BGS+)YHtOlO7x?Du7AZc|bp2+$
zHs#dRXoHAJ5?R|5E>O;v$~HmqODwI|J7>vt6=g%blIe41&tHO8)vv9`F(|ZGwS^ou
ztHin$+R78ca7fQ6IfVV-OX$m|2h$>w)~Xt_X>AINBv)7jPf*eI{;;XE?~2d1O`2AF
z0#4V2LVE(91pt3xLd+4FFwwS66<bXPi8tQM1ZX2(>a@0M1A=S}Rn<36qg~?rm)NEz
zGHOsmgULE##;}M>bi{Ng!iW|@$%taI>R;u_q+8})zU<m^|B}G+WfPZGEGnC|eEDZ;
zn$|D9C0Mp(N!cP>E97bns`T&D6Du!B$Eu>Jyh>^;dn@q`4NdC=w#X1!i?Yxr%;^;+
z20rN+T}7$pY#XI&!7_+k?8dgWs~BiYg#0jJ4OMC47T6}WGy&bqOt*vH*%xarNp_TZ
zwm1GtQw&}_S#(N%yrkwkg(~}u<KUpy?8THMM-<XA%Wy@kn2bncJq<h%nsmmr{Kf>S
zwm*#3aYZ(j6ne{O7jRRl3(QPIejci$i>;n8Yl5x1ei^MHNwlt|s#?Zsvz!!_3l}al
ziQ=)U=`>X{Os2v$wKi#JKUClAb%qnRUBUQ3AvfkERL3}G4Wsnt7Uc=YQr4S(Go<Ww
zd>}`K)Qk8xV8W=#NKJWf8l`TyUJM7mTYNZW+w-d!tE*f}Y1*1?CKeb%G&3WkBq5Qe
z+0*VNCF5ajjF;d{wT7CSwdU61`)^PtJJwwnC);DKF5rn-)r4^hM$L>~H2Ko{DbHS2
zi@w*|YAoXzT&1KAS(dj&>J=N2+4dr5a7Le}T~K@`bZY2GfEL!)SOXR>4S+t*3}$S{
zXIa%M{cFr^Q3R+mz1}qApkZ01H4aDMrK1#jQ;i#icnO!jTK9=2KP-?At5v)WhmY&+
z3ZIgx8R<_~uVs4JZwe08NpC5maY?M{U#g6m5MeT^0mO8%YobbO)?j#c;b3!B2&ETa
zPodD1co)a;F^v@;pc;fs5=nieD^evSIrRx+GgGmI@r*(-S%w9AY^aSe8ZLd5nKWso
zW6<FYBvF^dk)y7!GagddE{S7HL?X>buv}uWU4o075}WjYLncaeYnWGC+pN@I8&E8%
zh|6>zw5Zkf>s9B`+P0cUO&1=Q*J~y)M0YmWYE}(OR@cj9kll*c)qs)Vjt=FXX!qT)
z2|9+&5ZJb_wY6<6j*ZM3IJyTeHOtppt;8q3ogg+2s2<dzQ{J0|9y5lI`AW{a4BB<c
z!luP)ATmMoUGZ&#>aP9eizeIrxg_?gxXP5A4v?fWKSvVjvemDAHO0mz^aM?O1dDUL
zhFO-zLSd&2efZbdg!3yy6g3Y)*P@kiaRR<7t!m_EHldK@IP9@0R%f76w!WTegiuwe
zO^yAF?E2N(Ptg|5X>Nt~WQlQx#i2s`5_u0{q*pb>8l$O8BKZCFrRw$T)&B#95&zkI
zc&JMA{r?pF_tO6jL(eA+Y+0%4TWsJo1D$d%Ht%OAg*)-bR_OfB`?E>!PbR%P>FzV(
z_ZaBV<HVPn@NfMe(%;usX*z#u;7$X-Y+$p2a}0FoaN19On)c&M3Ll&Fe%j#stO;Ll
z;1>;?X6kwRhEhv@Hyc=I;1vd*ZJ<Nf`-Kku-(0To-&d*OB?ew#pp$Nld4GDDPPfOv
zyA51p;8Fw24V-4+D@I<M44wm~++=v#=wCW$T&5Mu^MEgZ?=LTJdR{dn+eXH~vH+8p
zS8{>)m8<PZ7un~_-0DS>MyV9B1T*3Z5~7D7XkaFW{3beYSdKWg-4kZ27rER>en-3-
zj-9CCQUiAw7&fqIl8#?#;7$Wi8CYDT;~l&!&HKZXb$Hmok(cQAd;=>CEWT8Sw;Ooa
zz_C+wc%6aw8<_t|9e%_>r`)BN>+pLGJZ#|TVjaHJKqvi9^By*E>{OG^z#Rr2F))9c
zj$d!!K?5CpW3SNhD-GOXpcCJ3-alWU(>dW|OZ0o4fe#ya%s?e9{(RfybKV`;ZXO;;
z6aQ%w{|fh%$<Jlp9q>i-@UY3B;Y1iX%fLt){IW(ZzdjS6jDNk3whpF=Uuxoio(8|n
z>C5kTY2sJwXlr|Z>iXSo;!mW>e}{>GGYx$mCO(=bo~<<MH{v2)zIly-b>``uH1STZ
zf;92<CjYZ(;`Qzg%eu_OC-cAD<e!%&|0)x|B29dmi4UcT?=tb9O%uPw#NTb=lj#eZ
z_%El)zsbbEo<_c(HSu3hlfTBqpI_*3+5{M|z`*aMp-;Bo$nWtq@p4;?{C=9IeAz`Q
zzgN=4ck5{D^)&d^JshNoriuT&$?q}k+q}j=gLxX8Cce?ck4qEZV&X4M6YnfAPEQm6
zIg`I4O?<P7Uuoi#^<%b)Z%vbbgNbiX6CW_~Ur2+0v5DW2CjS-_|3I4f9ut2cO?<D3
z|8<)3?=<m0Ok<y_OuRRZ{khA;|1k~zyG{J*H1S(a{Ml*RM}>*M$i!!ucL!W;9xh3f
z|0WYZ&BQ0m_gV+hdqA0IGSl0MGxv=9leZ>lM0yTO<{z9r5bsgIdqgLeKV)l#CSXWV
zA_XZUoQkA~Oh-o1<V!A{a@i*@FP>VpYG(DUX*K?7wPmYkPpb>mmrrX5PHSAyT=D6a
z*2U98OWLlUcGJ3Rr>&p1blL_>c38z{1D*LLHcT}&HCt7qtcepxO&rxaY2u_w?80Kd
zm(9OXR#oh&xV2P~wA8?z?-MqgbXyIy4J<LR(!jp=2}35`HUo1F46oPpt-N_CY~C>R
zJvsir`n|%?S7hL51E*i9*q!2!%azH0BQi730)EKj8sXx}lR06;gsGVqxJH~+Fn+{&
z-ZQWLaQ4&>UjE_ME3W$J?US0$zkI|8K6?3b*VOaw{i5bavw_zcctH{@{*q4Df6xD2
z&@yzTgATpv;{Usc|G!?p_ma>5U+Z6wC6<l3qpa%Klgz#{<X8V&&GpT-7OO%xTHZRV
zrmguBYjq8a0qi@gst+~S%ii6y_-9+AD#@Yt^yUdF!sI{4(6AiDUZZ;1Yuwz@w5FwM
zt=f61R`%7}kV%*>U3F6%ormlLV9|lirA;@o1&&|3^m;e1onM<U@0?dt@E++cEALY2
zqvTIbZ9^^lji?IcwX&yHcU?|}YO1Q8M}Y~Of~#96u|;%JbBi_2ww%h=wzM>{XE0P%
zeWTsPH2-SWm?fW&b&Oz;srEHDEh}1XuVc?nGfR{#8#pVIvO#1$YuT+E*bB3km6C>r
ziKDDZ6C3JRwNA1cLSAd_sy22;wM?wDE)wXS!FI`s&7l^1`gD6jWzhr@u$0RDd;Wzw
zUgqIz3#@qJb=8tq?aR*3Yb~&@UNYNTEab(0ri>M9*&9^9qLFPyU^S&mBK?vWjZO$I
zr4;$I3ao3{WgTLjjYZEqcAX4;SIafSg9}Mo7>^re*6UWat&ycyy|<eeb~>+Kt@byU
zu4!zW*wnHH?X&BeSes!zmkrA$d95?_4#ZKxdbaW~tu?12c+;g9PqSrvG|#rP^m3`J
zi8R2U7Q3V_6l$I}X_CP?iT%-%wRO^(=7x!Np|uS&CXQMn`-1s@bxSP^hE1zOZ1SbR
z4NYxo`9uY?#-u$mRg;$58aAl5)U%reO%4ePS!@Bvf`#_AzD0|C3zl5R5)3=&Sk!{i
zvNFn+<+Z}T8ev~U)w+qJbajSuQL_t{jnbPglerv^AHr6V-w^2xO*bU%d!!qZ_I==$
z^!$5Y^qRCP{oh-TgG2bkeoeN}!Xx<^QLkIKZlWV@N1Bsj+BM0t=F~Q_d%Qty1-IMO
zesa+uCoQU$0@E7V3f9m(2^}mtSgOh^Hn7>i`wi?ju=K||-Mt1LG0;As!*>{{knv|$
zQ}c$F`ZaY}DJ*x5JzMl~vC&6+wyeHa$wufxyS%Y_qP4b`&A}VcuDYr=%u0<_dF4gR
zmOIFRDcXBW?V2{0I?e6?nXtB;AoUV+{;gG<j<`|nz+o@BS{SwB+ceY`StodP{pu#G
zb;H_KO*Agq4|Ai{O5R!yWz^Pl=s_W_Sh%=+sdWJ-S7<i13^<%$UPId`!dJCPj^yyQ
zRqIWRIedV*ko5W&%Y_hYYZOXiu~-u?S)G?x;3P}nh&;Am`OKl<m2VB~R$eq;1f0&D
zw}kZ=ubLBsR{IJP%0GVBm43onX*GzQWY>EuN?`tas~Xl-ZD_Tsz3iY`#jydFi|J>p
z)v=OVo%w(3@8P#fRr+QF`~Rfhi~g+P4ijGSnn`EEo0DLFzm6Yi^1ol$XYw60@LmHC
z8`%D)Dc8W22EJeX|5@oSGV~_H^OM4@H*|fRboZP3IPb~ON&jC3lj%u*54=89?*CPE
z{zsMT)OV|qlT(fpp6=ZV|L+b*Ch4#9?&!6}Pv*{K{w<S#S^OKpzccuECjZ{+cl0_v
z|NWAIuNwH-6*~N+d5;>n$E+8galMXr@YAEnk|>Au8rj3=ogtp4_@?>!H#KqU?V^IB
z0xLhiyk>oYoi7`T3+xi&)VueRf_R+j3zH+y&(GIbLku4pCx$jO*B00p+QkLZk%^N{
zu?}+fbS7t4C-f{f&egV9YKy2<)j%?<ntrJPPoM43bbTDvvKZeq*ICU>DTb`|HT7%i
zLly%7smF>%Wph@PEw1p*Dx;IY&n}j-TUX%KbD~fjJQ7`^!l-=P+7%LO&zNpE%7fLc
zc9$_ynAoy*MQf8J#+m25pY>6nW}$)ieq`wTj`N1TC#UZ-=^bb}`IEzw%5m`Y8~oG%
zL6_seD|_|(fiG*=Z{AmaQ@<bi*8dxD^Lx~%-^7nL^(`{6G)?_irV0Pg=2!FoC3O5p
z)q882`t3*){vSohe-+-aspsf#>vmXb^tA9h`u)QO4(`(L73Td9N$*a0I{1i5|L=v#
z`0q)g<J0E-nxt?i-z90no%sJOc+Pv!@i!xne=j{RB;k1=>HXh}|L@KJ#rL4&=J$wS
zVd7^QnCGPbp4QXi2aUd(_X-2gen^KmJe)ed&BPBrGBm!`<i9^nJ_mm?bn-c{{0Bqv
zI_YZ+{%uM0I`Qup9^S3-JMbLC2M5}Z>i8cS_%8<flVI4qKm4ptUuWPL13#Vg?lJF|
z{#2)T@;T|#!L24=OYI6y8E#PS4&Kj-*4nC;>be!Jp|(|4b5rvQna|~o=~Jc>YO8Nt
zp&TKOO)$D{ym3Y2>Z%pu+O;}<BzHKp)~;B^!4akgR&Wm0iAV#v*<{EsO|th49%)j1
z(7-|ioqYn%*xuQ<<gBm%vq|@T1N#g-V&JO=zGI;6(hq(ER~Trb|F^;7wrWnXw8~u}
zinCU^xy=H%Q_uRWSEt?O#JLm2(LW|i<;Zkwb|)SeJG4{HS*TWZa+5>q`uM!P3bC{j
zUKdL*AvQbrnF{4Fv~_i(q5^k#nasy7yCESYUqUML6GAFK6T@SUI>`?H%Fk5Z5)0?X
z2lnW*Bhs3mJoV*Nhx%1BH_Mr*6m_m>sfD68CTh+7DJjw{8pbMSahvQ_^=lGnEl|`K
zSb1wF<<(5eV+Gw@VqvLEEc9QlvM>_-!ykR>Y33XM1BDUk`0&<i|2_CK;l$rZ=MR3X
z^EvP#Q{O+nJ`~@tO!#vK9yIWA1Jm(utHHA=3E#=z55<4w@AUh>7<?D}LBDS_`J8fF
z%==@<bo>dE{_Ve0pPhO;(80UQ;4MyS9}XQ(dZ*rd3|$Wxc%Om)VBoz;_5J0`L+iia
zq?=;u?KSDAzcMskkD<$<^KFx_!-T(T_+T4-_#deG_urKdfB8G*c;q*_-VXd^WazuY
z4=4UXqi0_<@MZ&@bjk4TS2ezF1D*KOMsJ<>nWkO8XwqG1^!qAPFQ?q`Mt>hL?RuF>
z|L4C`pPhOgFnn<Ee%_S(ha|o_bU5i9`tLXCBBs3tj_Z1V*uZ;|>iavB&dI;rw9m^;
zy)QE9zi8^~q#H2hICNfS>VLf{Ct)7|3-p$6@vQQ4YgWLwXmQyRU$ES_n8SEh-epBB
z((%W1@&fn>7oU%aa+|aKyDcF`J*HTX8<OPjiFbW8^9q}<KV0CltfTi2L^pnbOLl>s
z=P?KTuLIHNKWbSY12(Wp_Htn19Lw7Cz(BNwJe7L}qCLQ)z+J$crw5{^f#VL5j@7e`
zz##Ahkn6Xso@Yo84E}T=dK8%Rvw^5ToAl2OM7IHVy)Y1cN#0)^h-T#gj|@bY08az&
z16KZGAi4)w^3p&w2RgR{gTT|kZNT6k2co+r{H=lL6gT*}MLPr>2kZg%a6jNt3FijF
z9FJuca*v`PSjioR8-WeLZNQDdUBDjTQxeY=pQq)W>o*HWQ(rFa+y)GCo$^b-?ZDH(
zN-l{m#OXf)3<7s?|L{iOY2Ys4A?`ANNy7OS!??3~2TlR*;*+JFz!E-jdI%T<z62b1
zKIuLLy<8{W0Nj4zVDx$5xctFr?ilF52>if}!0o{8z&*em?gP*HFzJA~z@xwrFo!P%
zZvzH_yMPVAr+^zL4MyJr_7su+9KxpzMtgu8f%gG>fO~*Pfv17nKRFn!IhXLu2cx@z
z+kuCGdw?$ibBaj^Jk6)9f@8sV1^9s5fxCexfG+_{N(Q4@=vfdr4tNw;0_>R%eqiAY
z>LqZ_VDtoV7ciGLa%e8}08ay-2L|VX2R+>moB})ntN}Iz$q(EGJOLcXSNlrFLEkm-
z^JCxzb^^Bpx6Avr;FWjaQQ%SFTfo!6F&`&>Dfoevz$L)bz&*f?*FgvH5b%VA19Qex
z&h^j>ECiMSgTN)gN?-$US0(%aZeLD1oAi9us}eX47y|YH?*kUDfM3AVE8*w))Nd8^
z0!wNs4_LUG`hSA@0&{_TfI(p88u%dLz>UC-z-_>uI^+W!S5Lhzp!`n}58MUZ2HXSO
z1v~_N3OMdY_yODqd<(d%0Y2msz7{%x4Zv-{6Ts(z!A9r;?g5tMK{s#-a9k7h2JUGl
z9kBA#(0w7{E#MOvqF%s_H&I`K>uFCDptl43z>+S~=MxT`0_*_>f!l#Kz@xy8z|+8O
zz>-by7q|zQQvltcB_6m3xD8mjnfd`Y0*?ZFfNueJ0dp>*{=i&dLpK-e0&_k`Ilyti
zjle?SHsB%PF5pq%Q^3=}qrjXk-~(<4=3We5U<vRLa0&1PumKqCK@Wi&d#OKgJ8(Df
z&|TE8ka}#TT;TREpbx;DyTK1^0Oojk-v)iajX<`7S(RUe4hjDfas~$Pg<lhS|3}IZ
zxE=WbH-3fiNznZ-gadbdjeNlE_kp*FbYF*F;Kpwd58MvC4|oW;2Y3SbJTSPEdIEcZ
zV<uDoZ&E+to^Qb)VBxpH3+w?N1)c!DC2$w%E`gulfe*l4z)pGpE_?uP2kw^e?;-a~
zDd&Fb2^{yYqz4`a?gF0pKIKk<&fV|}c=SQ?1NZ!ZdIBpSCH-Z*{}8<b2KOM3Pm+!g
zgY*D5?xnt$Q{F!C0fSGG57=-3`ig=7M!kV0e9h%8;Gq|3r&GaqgmB=|Ur;ZB$I#bl
zg#QkC0V{t`{pI~t;(<A@LB|!~dlUWvH@-!^N=SE_a)3Qq(P$4act$jO8o1pZjaE)4
z{pe_P7qI6;(P-`r%DE^S4FPj5jYgjb?wQILWUd6?v}kl2uy8>%I<6Ev3!~AEz>O8r
z=uzOV<<V%N5B}Z2t^L44U=8pza2v3sIvUNH39KO>u(CE9Jp?=f%$Y^_YVrdQ0egTa
zfV+S>Ye)wy1il3f0>}BGA2<bg0$2kq;e(6YfDP@@XjU2Vz+B)SpdWY?SOYA)o$`S}
z;C5gGa1U@h@Fn0LVAgEPy@PUqr@QzT4)ACX<pV441Rs9Nu6w})Jh2n{fF<81eL(ar
z8f^fc0PY4hd>1|fPXkW?kKPYm<-`L^fMYEEbKShia;+cj`e@FXBe%MskKl3qTmMb`
zhO>B>=^lMo#!UCvJ2T7Nc5l{9cYe<Zzq@GD89sM$$C-27J2EmK%oyb^_PL9E?);f<
zo3!Ma=^i;Z+u&*d9>l-8326D<_J&dJk+ZU|<L{hoDX)ir`QIOiUWgx)P#(BUdEhqX
z&2=AhW!~(fJZMNN&nM*-^6x1BM(!PmW>6o?=N{dWG1qNpd|{M(^lbOY`Pqx~LqL+N
zy5^8BO!{RK0DUb`HaGiv_ec|8NPPa21JPO&{~6+a*)_5FAo1&o|B}R4N_iP=DhaPr
zzXsw@5&y8n!<$~=XHTZjZEwn=4jm)rxL2+k<<2L-=P++xcE+cNhDc`1s^Q-r@YU@b
zh(0C(arw-S@hdK$1@6*}rj*hNWY0^_MNPMSqo<E@MrRHwCzV{NLFUHPYM{iT_z(hL
z`+ofJtTg!Ibo<@SnX}#vpXlgQLf=mYqSZVjH~795wlB=S0m%s8Um|`q{`;E}ALly~
zj`6)h)M5zZ1KHOkg@`+^@J)daec*e+;JZ`g*qaGIdPI(!q+N8J0lNiZtQjoK&bWDK
zh-8=c*9pD~#u3*`fTCZQvz_pJ34eYR;c@xK`5x!feD~oInQuvZ7~cMrf@5;66X45d
z{IOihnd2V4DFZd@$eiQ0uXB&}?Q@Uz?MI>Ac1Px>jGB0eq*m>z5P1d2zeEC{r$_Q{
z%7l*{S<6O|K{a<RXQ@{u>6d<OAo>AGPow~mSBUVH;PFWS^%V=Cb79X3+D80V;ukV5
zNvL;u3ca3>ejLkkuP<}AyJosKyZr90uIt^+<uGDa3d4|j*yUdDBdwpbGfC@n-^;%p
zt_AL9AqG3jzcC}A?`5M;b7OqMc-#=@O10*bKOUm;OTCwne=GULZa6>H{t4eqcoQ(8
zUa9SAzbo_PyC}Zcw>{w5d3+#x3wA*GYvk#7msV+M_{6em3Z?)~kp9$(f#{fbO`q{(
zEHfG}`Et*&tYfbYL_d+7Z)IXR8E+^JpiC)I$)9{jULS~x7@ePlhX_BMBD{z2gGu31
z{(Xe^5q?OJpttqtOCWm*e}mZz`CC5Zxmpn*{5eX#rF@-I?3d=xoDZBa|E|nCvwBDL
zoY8S+=C!U-ba$#<*N`OVOwzx}xLMMtYH#uWN9@uUQ#UtXHvK~JoMGBGUr9prAVfK(
ze;$Z_YG^reJt&LybMw*Fj5#R{w0wY5^Z6<8tz;fxrUW4UTi}4IKjHTh{<wsz{tttJ
z$VMZh^6ZTD`bleuw96bMm;W~3M3D5f%ZygVT)!|>@D&2@CI0&oA8-F+F|sng?X-W1
z)afe)-^qdK0ttxgC++B_n2I^=UgX?E`T*(oik{7j=`;2z<K=iWgH2+f1Sdbq_Z0b#
zof?QfD*^FxB;Sp(g63w^osXTRDvw7ZdU%?AoB8Yk(*v=e$Y%`x&Q`)-Je!xe9>nDn
z*MoWP_KXZPF@@RHHS>d_27GqTVDv7jR}$Y4*Q!yfzlU&~rJ328=b~3OmQ@Fo=>{zH
z$~;uv2l!kx&(2TPpYWB0@0URE8^0p4e=Ew^<<2J{=2u8PWj^Z^`Cg`9NT_GLe~H)A
zFM9aIyXc{`ADIuk_k)AcJ4`*_#b2E5uE;o?l5K%(#n19#?MJzhs{h?hIemO$?zZ<X
z$4@!Fl;s%3TLRr#u(<z2gHid4r|@A|e-0ly&HxpX5@$29SD%}m(KkFakS*=061+S4
z(DfXiMK3!tTD5WHRpK`ie}wpt#o`yo;zd5&O?<7X=P<d>rRU1{K7IyGDkfPx#^p(#
z3w0I!IRU;?=L|;0op63qPF4=}C;TA^jO%+^J@`s0bvFp5UNWz_^4!5F!{(&+sO?pV
z_-5i6-WtB>@E*eNCES*9^D6}2NB9oHM~Zx|irEF4PR4`MzK!QHi|Q#m^*rg@&l`-o
zgl{(p-_iVxbz<)Jxkt{<u5*vv7sQGPI?>xK9F&zG8H~O#v>n9Td)&{O<8IFQ0s1uD
zxtN`u8It~b_Atd&Em-*9KsiS~#<-Yg=O^Kvgda`{FClz8;Rgv<_Ond%vP}F;=rVq$
z(#y7?3TY5ay^fml)TjO8a*fw3-oEF!D^QvggQ-Q?H7T3VOkp;^ApiV~*NVmuMk5lS
z=qw-V4=Xw|Zbd6$d(0tTkWI@R(wOj6g&*6%cNlz$c22@~5q^+xrWIp934h9@SMAKi
z2wgHCK9c$7S4_J$_9(SpZ*^rpi{VWnStUP_M<E35`~>qKQbycP#O0y<{)`1fD<z5X
zq4?K8{v+himw+Mt6#h5;t+-BwM9Dn;G1B=Z9pxnY*=<h0AaVSpy*(w2x?nI`Apy$H
zWXy65iSXwo;){qEHaI`YC-eUKgx?{7ae5d(YI?`vvENJlcT9XoM$moOmGMuSQVG=M
z`$=c#4o2^m05yKeXvA|+7FNoyA%6Ln2BII4c*+qV^4ZAKX7VXVIj)~^`NZ4ZLJH2D
zk(p9Hs+=j{I|ROB?_hMj6p+NXPiaSh9@d||F@cBMNSgIQ>;?J84{iVW55wj;g7hbh
z3sZFWbljg3{ekAB`H1ptJgpSr^Rll^8Ls?M;oElT8p*oF1yUdQDl-wHAG-;+37;+D
zak)Y7Qfi5Vj3O;G?Nidrx=bnQ7fAXfzBH2q)bK@_PlbOBe$UGHiC_5cCw)8VTZZD-
zeqm*d@xJVsQ=|R1jpRE>KBf;7>#@*nUqvPi3H1nMGr}@$Ly`$!c9U<yJ;U`$)|Vaz
zUroC4RoveBrRT&sOd%HS56fJStWO=eY%u!TP`yZ{pL5+SGahl*&2%@<bg!R@vsCR~
z=?6U}4%3E=dG5MJv4k>em67PubQ#LBSAuBxc%mX3))p@uRzOgtuNW3SM_KaW;fv`H
z>jLiPCGI+3dKzfZb!G16`Pod`$%Cn;9)uXV1QE`?#Y6jVkyj0Wb`W06GkUx-W2Jkf
z*dJNnJ4Lt}Z_HsvFGEHy`X}+S?pHT;F#0J8(soTxw(%->Wj*j=;wMWyIwC;wJx};C
z!c{+^@-1-8k&1uI#7~e6Djt2qFOXNsKZXH8KlxL|i|wBx1BPjX(H#J3Pw(RAUhOVr
zE-HoeX3M;1abTE~9EM8$wo^_q<+MpT<|pC13Ex5Zd?yenbRQ!82;mn?xT@Fn)T=Ce
zE?kv-Cx{OdFU`aGNqE*d@QZNNUGZ^&Nk5KoNuL}(h4B6)JknPMO?sc{Z;c-v?;n*P
zATAW+zasz8Zqkf%8o;wn@Rtlm-w=8hr5MkYyGvW$`Lp)n_3me)^bq#z8TZI}?$VAC
zo3eT`dowbs@hr-c<1r<}0;f<!*17nj(^<ce^5C19N4ZMP0GlD>oa`m;v9senpYW}O
zd^^dP=ueBiT|)Q{!j--!+1rf8j=hz_^n6n%>5q~A%Mw8PJ2L{}KVi>}pNCJ`aYn|c
zsS}QD%zsk-p6KIK<S%7C`QXs;P~1)>+P#X5Z=!g^?b4j=j6*~WcWhNLs=qEAOMS0I
zF6qW24B9fjrm2h#M;IV=Yd0?zR8C6^Lia}S1$=|i@^t=Ly#JqrNzJ@R`q$x<$NcL<
zf^Qb<V8Tc9lXfBN@wPwS&xjvm->7AoOT4Vpml8i$@?b~sgqb&^n`bm$ZY+|>yO4Bs
zr2C?zGd~IU6W&j_GC&F8m4t^0KhsGJ6nTXRKSuZ&hL6MAiS{EIuq4S_v^r4(W@Xcb
z4e_8I^P$@NQOem|HW>YEQu%KYZp|Kyemb4LB=Wr?<59Rid{i?lJL9%@(HG%MB@W-%
zIm7Kui15)V!g~lGnIil?!Y#tf6Y3%OWuHVb;Y$<3OL&%j6YYfO4%Jiq5i{Q}dipS&
zqlLwkGN>IU$v=ku6wQIbXtUr=Zof=8ib=p>D$AyaH_nr8BqSGoTSERF<ew?|(I*-%
z&hTvYSMZ03KTN!`>&f^7F@I^ctWcS<V)&)ryU9Pgd@#C5@SC5sr$dA<CA?9>!27P_
zoze_C#T4$3DM`v1M`hN7PxY^Ylb?i7A$$knwgi};=yj0rorG^2s#mG}=tb_*%<R<7
zc}}(vHoTeZbvm)HyD8_`+`;I*Qg$-`dJ~*`q9y%Hq_3DasOLeG)9-RbD9CjC9K(dn
zG19+n>S4xT%Ack8%A5k>_AIBId7=h3BXfEVHN22l47h&vWoO{!$5U%B8?~UUjg+%~
z{$O;4v44r<Jept?`C=Y3(_$NkzAJJSo~OXGb>U$2ouTwHj_b(6Z)E5b$1^iKql|Z1
zwlL&sJR-lGk7GZt8jNO3Q;6$Ne7+!V7v{VBT$$4|-3MK)Jh|q$kGRV4-zo`}$?9~%
z18oEULX^|LY%u!Wp?Z?49M%&v?sM0za5vA^e)V<kmAAO-=DC|^=|!I#+$)1A_1IWK
zC4b5*T5j|>E`KG@dWR9vB|p*cF*uH;q-S^>`$>2q;l(M!{e%ntDY4WVPbJ|?30MA;
zi9;2w5aBBczeK{Y4|U2i=mbju+lX%`zD0uKa!A#V=DRCaxR=7E+3q^lB$lS)y+SN}
zKLOsI;QihE!P{KxUN5T;v(5PA26yu{?)9?>nMKGoj93`MEK6IS@T<~het~^n$^KD@
zaGUUZgpPpBZ_r#e$vQae2sgRMGWAbGl1R<R`)u@^^bBKTKf%ApX1tMvU&5a!T+-u4
z#(olh!q({-CdPgukF4{tXAV7cs98p@Q@pb0xy0Km2BV*sTq?dh7B6`HlArh-i8nt9
zuO$3l!jttVMEF+1l^-E9)Sq{cl=MA>k7XZRvLA6D;iCy3R)3Q|nZM7Q^qoRWT;K5=
zI<m@XP)!N;K+2W<b<N;Urhgpab%f(y#(t81ib<cS*Ag!K^461naV)i#pX}4?Bm5#)
zJVMfMB>YH~ng2FX+kmo<?-=0|GkA&Xf83vq+o6C+>uC(Ya0dm;`*O?{QFkmfxKONl
zYUq{9(G582j48rG>g1X*p|_BUnDy0z(bYOg{Vn0IpYX$kUuEd+P2SfbGu6*(Pc7ze
zn0|H&`8&zqUu(v>N?sIh*3~nvj`;&>{zSVTx?kHvzI^sWDt;&Di*-nvSSjZO>6emz
zy9C9@IdhpDXJtb?4JKS>XICZ;bi{t<<|04xi47T=PqKkX&C^Jv_Uo6B-de-{IgvMX
z4f8|d@?+jP<C&P0kZ^2tW5$C*_kG~oS~nQ|XPyP0;V&{Z{v4AU8MiA(IL2Pdca(f1
z>)GcgbPTEQ>KNVrY{utiU?&rAL6VNiqrH7<F#7ON{Y%w9&4vCq-i`hm@YR5?oqeUJ
zc~0O*DtvR$6q%M9uFi9^nW~eXb=J_`RYs5epgu%7W7iHw*BZX3UdNK5RL1`rzGkI8
z6IK5U>HpZ*x_m?$dZ8k=?+ZWR>eP;0Y~H*Ed=;&O(Wg!Q4PDIhC9Y#++@3U+Q3Of7
z?j!#(^1mYam&$sMs4R}STF+S^8<^CSKO4EKr}FHedo=R{BN@Z1Wgg`Ro&eA0kZHfF
zy`V0pow3wyJR;2pDR&$bKnF?RVDuo-50u?hCIchf)3Fy{c6=v{tdU6nQUjiT_Wk09
zC_U`RSURNt=rr+&FZLV5({{o~u4DhFgwjvWBbVUYP55ZSuaj`}ntf)mg+qydp7;vl
zm4Bh)SKwg;vdhR{Li}6AHxpl-LQj|?*)#(AcASw}?ixDUl+sjw*`K^)J?%pR;A5Kc
zYmYns+JpuziM8Ddk>B1x`4Yf%br0)vvHm}>4@<NkLw!i`Na}tc=~t3IxnJ2s_)fx?
z3m)^U1U^rAKjEh(EN*{NwYRHiZ(mQ@ei3A<W+?PbDZn1x%=l99o1cUS3ExTh7AFuW
z;atmU*`G1>HE|Ly`?c2-9x`D9r2WbM?PG+yjeLy#Ott^1g2}WWrKI23Pm%Xa;M=ir
zQ145O@B5+=sZ|lPd^$6G4H|7;*3fR$CJU)!?nV5$WiWaGp!JPWg_tQZ{A#sA>qU@s
zJ4yF|q>JkX;}Fx%neOa3LrmOVYTgrvFJ|s*$kIdp{96a3XAQNx@qRzi?ySr_KegHM
zXRDo#!~1u|ktviT`_>QNHW=*?IurYaB4)Wwf9B6-_+_3YqsXQ3V(4ohj9xobE~)fN
z+^k=xl#8*~f^Q@Eif<o`9ua)lwZ!osQl%j<y{Q_)Jm&Nh+6AvHVedZ_5RYzCW)J+@
z2#Q1CJ9r2E`%wNR(N`w>bpxz_WPUC+0~u;Q2I<2YIEM+;6g?9qGp6C6?B@@64n~)~
zAO19Fyq2<%*=ZJ>eW?o<{eFsa4|6U;$un-(^>~8Ou9-ubnay<g5F<}s(Yq`!?Q;|P
zhti!&@9^YmQ;Kz-_z}e@Xwq_z5x0_01LXuhi{GC~q3>>&)P9@$!HBDrgmF%G<^v+Q
z;qsv)I+`*9BDPcH3Cgeg++g%0q8|%mepy^UKxz7Q8I>?eU+mvU`TOxW4$)Sh!6p7F
z3i&gc`^x;d5RpE96%?k)jMLO{=B6`xM)YRgnR%BGqwPn}MD%CNVDx(u5Vs%DXY2>e
z=r|)t)9OiSKMs+9Dd$a+)^X!<jQgDn-1oaOt7X5&aFL<^wEYwjB1>tva;{`F=U1Y<
zC&)2gPTWo{bhD51{?z3tdnEWe!PoZ>oFftaW53F<{*?WI%>Vc8!^Pc?91bCeXOP2B
z@zy0~(}<p|-po4{BSoK|2Vd!S`k{1oAilp)MzfhSgudbGG+VY+reTAccarlnb^pZv
zG0IG^qs&ue%#Rt*KsGZ%W3jUI6?0_u&^X(AI#2E2lk+#Dzd9HlEA?mD7k_3K4$GYE
zS^O;%_m01~Rs01n3)R=M^OK}<PUjT)-aLbscW+N~W&L1WI(tWU=@)XC=-m0g2BR<X
zEck}_CEtqK4u3Y=H4?{Re)3g(Bffq!#7|`HUuw^|Q<(xks6(XhBmMOwbveW2t@L~@
z{UlTG()<%UN;9w3L)JauIl}p&r2VS#_KbFz_Pj`({&`H?%thc!fwBoY<8LYDiy6VU
zPN5KG*{P@6WW`+M5yauVmvc+kXX$zk8~4TAMY(%NW@b1uW%)5a$vLT=53+t@?B$&q
zvxn|0QhdTxWqt_BCNoO!P!hUc0#Eb9gVA4}IfSk_pW=1__GDysk4Q<E8W@P4Ou3Xl
zeVm69`6>Tl)(6h0NZ42G&yan^zU<6gwZT|2Hjq@#b)7oEKD(j)Oe#9AaxcY&Sm0jj
zb63nxNe%0DpGz5`7cwd-?<nO3emod0GkW$e@|Yub>cVvL$oP}{l&hSrt_y)al4^OE
zz>MN&@e9+{Cob=~?&j2+V2t~y{D&U!J^b8Y^z8T3KjOd4bGdiADzN0&0)67qEK1$N
z@f~2*@G&)-Ci;<e8RLtev%Vw~U2!{-%AU`4AI{3OQ|pJ)TjBc>!FPiFk3;z$mow{6
zrd`fQ-!g7aDM!@j|6}h<psOmfwNIUUb93&HJCFc@FeD*_02yu)hCmoDVIB>mpnwR1
zfS@RYh#+YZ1O)+U6_svrLL6GrR-|!gv{8BDfMe5YE4DV`Q@c@HL`C_(Z&#h0OT^c2
zt+&>{-oMs=*ShEIy=&L5T~)j4RMoC?YP}uaj6Hu_?TNVe0jsv7M<G9s_v`LvzgL@l
zj-O6nKF9BpvEs|GyjpwebJyO&bbsj?&1V~aEFZp4IPZJB*GGapm+SW-4obf7Vxw;_
z!iY3Er0)Zl`6*o&qhE#p0?0cAdB4ll^8QP^++*9=)pXj&kY~LU-iPgW2kgnX_X+Q@
zJulgSuuBc^uk6Dr94Id;K-fNJPc=N$0&BDQpMV}t_~glEzhuAl{Q}-Ip=bLv!?C{D
zPIj8UlJX~Z#dsX@<-Lh|yQ;T?diiJ{_NS2l^QW+kd%@UX6v%pc67n}kPM++L0i<63
z>FfY@YkS(AzI_j6Rky%DRE7Cyi<2kM2TZ?&U5lsfupnNR)AQJ3gzrOmgyH5_jC()O
z_kjK!Y0$$w|N3%vVn5+N{&a)|xGezxl$Iw?_CEDFfqCN3-t&V`!+s^aco3deeel%c
z>pkPc^RS$88iT+Ny!Y7tf4->(9q=5a`#I7r$~$@T7*(k+ulo9^@2}udxllYR=gO|A
z(>t}$1)q1i<S3r?!}n-+A-!B<U+cKek@~*h8F<8Fkk3YvT)2c^9cwTsizJ2OWZmTf
z$XlI%Qty|7{-;@Ij&t)o_Xs3obF&40tl!TO{~+RX48rFY##u=}3+*-39qpmb$&+gs
zKJL{0#<DI1GhE@D$g)q=ga_4xYsZG;128cy>epacS`!?V!bNdRe-7kVL4Gy~urFDW
z&mAV~JPcoJ!W)}#=}Am@0ca1H@aFa5$SE|d3CG=i8svKud~u{hnM?<AG#~VL`LYmn
z0(?c_>q9>CqdjL;!#-U)#-pk8^7*Hlv#cxj1ApCrlb?3D0Q_6QU&w+uogLQq3wSR3
z^>h!m*`N!+91PvvasT*mU0^)!1Hfxv0AM5tXXD-v1eU?a%un^nlX-wq9`I}A>X%x9
zGMw*e&qKJBtJuY8G<<oSNqE735zcb#XTpaAw&2U7|B7-ag1#Mc`B>HVHd5-ED8rYU
zaMvE{cj@W<$6HKz5hKVr3s$|tGd!G&{pEU_tH{|4z8y%XiQ!ve*Cx}Uejl4~wn_I#
znD3z<K|H<}nNkn+e%93f02`k-p7sHt%Zcd>>uFi{&OUWtD(m|^(C76&dGdWTPch?t
zR72{#b|9yu3r;(b<tqmbhqrjTf;iyRC+xsrC#3f#(mT{2@6og0amS|vuk)<)u1#Cv
zyI7A+vBo1~RIu<z{X@O*U7QB`Qy$;Tj}AO}a(DoUD{pZ9c-J0mhPxM}5s(=Q%XcE;
z6^+Du@-&ElXXkr7o};IKKFNk$%6kCvvd=wva>OsqYwO!hZMZJaa~q!qKYyYo=iMhL
zZ`#R|e>VNI8Hb$id4OH3o(Fzua0%69K0K^9>>b}1c!>n$H+3F})zWMf9s1h=L2T?w
z!mxP**T09y?;OPOU4o^QgYlg`0sFc2_ExDUp3boW;j0*KeypdLKzH!n0`a@mw-@fA
zz$=O91EVqrx8Kxh0vQryy?YaAKlqM;EFc(p>_=OGz8!RV9*kU@w#s)7wpgaGw`oc#
zJ`5A(|KI+93H)LSxF4T&85-g)olTLyhIe#n@(Y=}(>fs#hraw371qezD_5+4*$IK@
z!sPE@Bq4Wp!ThaGOURvF8h;TJ(M)?Rc_x7_V-exd7d|TZJMhd@xw~y9?iW<rCm}91
z@F&kc+z&QR5KYpv4bCYde|zL=Sw>7UeXKHG#Grjy3E@Dw3GSwQ)Zj-lb+|D7U$_+Q
z(fMzfR2Ne(1I&G#xz8~7MdrTB+;24ZZRWny+@Cl1x6S>qxgRrkU#`w?6LT*#_b%o>
zz}&}~`wVkmWbUiX{YG=&X6`%9{dseL+uRSE`!RF(<(c%&z0lmdnEL>8A7}0}%zcr$
zuQK-=&3&7>?=<)4&HZh2KWy&D%-xr7(l_@)bMIpA1I&G#xz8~7MdrTB+;24ZZRWny
z+@Cl1x6S>qxgRrkUz>!*UlVgLH1{s%KET|^nfnZLUu5p9%>71l-)8PR&HZ_Ef7{#-
zoBJ_y_Z67*&ArgvyO{d`b025!Gt7OFxvw(!8_j*2x$iXh=gs|Xb3bhE$IRW=)}(Ll
zh34MH+y|ID%jk5!qc2PqvND13=QN(=H35ku^?U>S_U)cqgyY!S=XNUXRN6JS0;d|s
zE6Xc$i$+a9FL%(n3pBl?yi0rQ6y|QF6*5z?MZE5F;_VWG4RE`<WYQWa#?7`SwZfP}
z2z9*^a#wDbD_H%7BQ)FEi8-d`-!Lp8fq90%)|7}Fea{3PE?@Z&&QmWs{WY^(dC^&#
z|DSG`ek!}kU&kdbzjcx3Kj~?}XizObx;n`}U-OT3yWj@VG=Jz8mw(Dq&HuPeI~p(p
z)%>{+yZpJEH2-aGl{bi@`JdhG^6&Yz=5OadqE5?S`jX3k^tYOSPpko>LACt#M_v9M
zJ2e0BU(lxo;@Ot-oy*@)s+RZb`tV1zyiE-m4UWkc<X!foD{rgezb&L0CK>yXS?FnG
z==7Gwl(DbG9}~iL{V(XR`TyA1<v+AX^LIauY?8EoA2f0KbDz=t@-`vDFa2-n_XQSv
zjQu~a<1hIId)4JTyQ9mGBu@Eh{kxR9;n9~85?+1^S3RQnKPz+jYYqRU^(?1An*X&5
zm;Zp_M}eL8r}^_cyZlFAP6*%Sr{#9-e`Ob!f8HyazneS6Y7kG$A2iD4-|-jC|8WC8
z7uEdb<6Qo&?`ZyCs$b3T9q;lVGW<hafer4O|CtFcfBao7|B3&yef<e9)#&;^`nl$x
z##Qdq{IvX?*SY*ttUkhZ`@5%M21)Y|S%x+#4AJ*A|Cj$||6RR0$^VV!hk>8=r{#Z(
z%_LfW{Fvq+c3N&%pP$yb{B?$3R#Q$BN85Yh9WH-E7Tx~7yUPuq_q|SER!zXX@!zyR
z9skK4Zv0wRBT0CfFn;&{oA^5akG$Z<pVCstKjBU(w3y^o^FRDrl0RSb%UfMZu6jW8
zcYM?3pVvn7%WS=#EeTD)lUFD0sFwh!zvDqR0F`&T2e+-9nKt@YJAD&s&-SLD=fllO
zKZiHv<ClhPJ8fz@7I?gAJjcy;(r$uKFTeHYSw&5}O%T&_bv41gxOi3zcn!EbYlNX4
z6!2Ut)Mj`{de#c{VkF^NH<{5gDgQcxNSapUy@`Q0kdo$jn?VcDUBbDLQtu_`bG{(I
z@?DHj?`3${dEcbm^j?S>O<T;DxSU}~E^P_5vYg)`k+jPh)nPJcF^5jt^$_TDs=(~0
zJnum0>fJ=H^v|*Uw82-(U1d&JaQouZLAIO>2=#SdMbP;gowTp#7Qj)5YlpsG8v$oK
zeG$o*m<PCp<6{ziE(e_JtRa8jGXWPki^$WTGK-u7@(j5LaNJ=*`9{2kYn3yAaP51z
zCY)tV_w18^2RTPcpGbH-%ggdjB0SSMLHV<(@?tB%T(IndPXVxz&DKCd8Qw-ME(H)?
z33*nyHDajnDinYnewsBIW<TW(uLPVHo`XX3g@=GWJzNJJo$#+f@rSu3KM>~1PcVEx
z_(PVrF$ATrt^pF6GwVVtb8}Ddcs~H{4Ez^G4o4X}=aM1%21+^MJg1i89xLn*`ilZv
zu}6mjd0C-%u$<UB%%YtGf<$9$8v%JkZAM6T>{hs_orCHV2+NHvWE$^_fTGyPNY(jJ
zF~xYJJ<!SdM2YFC)>Vx%82FXO?Uq%Iwo;{ICcH&eqbte(y}@&;8pRm?lfj!;HQG(J
zl&$48t7`NohI<X3U4<epVfNaB?VvxR{16v=w-pL3s#xb%ERGEO8;jmftQ<w`Zz4!E
z#*gIrn+lR0I}Todw#nWOvNaQ=D3%V9{^o+jW21@W2vQXrz=~-hNFvq(8TGdkWKiq~
zwDh+Yq&9XlMdu1KK6VAw$ya?KXG*L`OCSYmAds0c`u_ceqV>F33+mQEkOi?>M2git
zkh3_pgz3Z;R}t%Ck5PkiH5ka1vExj%LJfzs6|r=(by3_HzB=|O{DA)6>JhMQh;0DL
zKS;d_WOM8$B7+6l8v8AgA%bj=-A!buAUk3Y5E&*_yen3WVYGjQ=(Z<TL)~iCG%)P7
zGWp#}|D)-DLE_o|-OQvj6Hg`o69g^i_Z0Iav+FqPP(A)VtfMF@F$$W`xf0O>>=dZB
zv>{Sir$U|YQZubASfk|)<ZK2hJQlFk_>5uwEY)~K|1;67DAr?T?SoZ#0~PO*=_N9S
zAA!0moPnzyUW5YognJ@QZ}?oa%(U=Yz`pPS6l!{SB4Ec#kE2lIfrGp`-%^ox2wDzz
zYz5xElGf?GMfg3!QRiJ0PT;SEvz^0)-zS{wq(f-ngD!|$ge*}bTiMSdsL6aJ9an+F
z=Yhkq$@Ym@u5+jj;3F9IAqn=3flmhkjyi0;fzQdl)wu+ez)?26?aq(TIPf*$9Zql3
zkIe?pF6Zx*d4g)}aej@fhW9zuNLa%M9DV>!!v`HMkOfXM-9xd3%(6!@@{!n=6y#G3
zIU4K57(q1;wBt?Fkgq^Q5KA>(NWM(L9M$xDGByzrQPq@RC=BQZl&zYw+YGc)ES6lA
zJ^i8?Rv=HXJk^wYlLBoeUXenXu?O`zOdN&+xY;WJXWD^MwH4{bI<kb~0$WXssdl;A
zfq*Ht73c~1gvF#NYbOx@B3#m67{}6|9)*(5P6$-92wF}vL{YPa><lD4pE->>IVfbc
zm~ggJOJll1ly}yU=Su3u`sD-KPbB?LT(Z?_J~N#2$bT)#mcuXCskMY1X9s1jr<|zs
zSIW7baLj66jGH}2(c;u2kdQ;`0)f$TXk9K$3v^*xrh!{rH0M0ao+|=cUO4?y%f3ip
ztNDINv;QP*SRJEewkJc#8A|K?lh9kWKA*@7Qt7QPB)m^x)&jrE=V#gGwqOn(QFAb1
z$P1%v)FV_e@2|KR@Ne~C%X)@3EQLpy+q{7Ue=ib-vYdW@354a(IL}g#EhaP-&`yCC
zFS69GWu#pO=nsV2EQk8)X%>5%t`z@A0k@I5N5EQw&j|QOg3nUHHlxV<CjsY?x>vw_
zQlBH3Kh09l3vkhSNdE<D+A1H=tHSs>4dwue1=Sc1<uA6BH2wU`EG6wef5DuKEcJm%
zSTJ*zr49+WIBuyA30Vb;OuU~Y0P#)|XesevPy#ce(lBG%0$K%sMAX*zQ-wA{Y1NWC
zwlj>DD$)>Sw$~6!tApXZz*3#0_Njw|64Zi*m|zMTp(7zrXJ`n5YBdBwBMm16o$U&0
z)p|H8KrND>)?*1@s^MRuh}2>Y-%E`z6S!bBQf`S9mJ8YvDbxvMwIX$6l6t+SLRp`a
z1Gzru3Dl9F&Ct&_+V)IV+4ItMxPxx_7B(w&O9mc)g<_V^C*>51ZEAcKxC;M<qJ{*P
zcosA)6f4#EEyTrCUyu|Afu~T6^aVvLtpnbUR{5fm4g-y$9Zhq;p!WhTLJC%UG4Zby
zGjJzNyn}+tzuGRrFe{F~`bIqzwych4fPOPdtYbd_ZvZIn2B2dpE*!Uaq$*PgWCP$J
zyCVn4HpCWDOvzcm&Hz@z&snmOmRtznUi?cI<5B>-DY+6rE9hRb4!{KjHUrp2;7$N(
zApj2o7)9U@05UTG>;>=~fmZ?iK;Rt!E1`7BM*#i^ps0>2{1aGb6nn{W0QW{Mt2By2
z<gqR#mm~Rg81WX>fl{&>*q?!wYy!Z~OqKiwz#|0i0k9ZT^0HOM3COgp`{as{M-XyG
zmSCj^AZ4HE2I71Wi*ivNC9eTH0IY;Zyqt+qZOLH(A@rFgM*+MCpa_o!tK<h@ZJTOY
z+_uMWAeT5Ga*tt248S1*%>mqk`FlxQ0G|+u1L)EW5lassS{If<0;IJdl?(>Z2Fqh5
zqX4`_U^0MaIRIt@m<hlt;$W%7j}m{H^u_>=5y%4&$4t1S1i(cA;*XRiM89&mTGrJ}
zs~1A=B^$SAzXZT4v*V}om5f19V~jCNCIhGfAiwetOEuq>puPoJ6>5w<AJ<X#B3vhU
zH*UVdXH|AEsgkQgjTMeD_ENwjg>RI71>o`CWmb9fWGrmC<%8;g(PWWHQf*lWW9axN
z1pNwXbbJ*+4o2xkwJd}8fNcO)as<F%0F-;nwT7dSuX%`x^!=X2#&Kv>=A{HnP(L>a
z&!SII8+L_y07jQ5PqGSv`7<oL6USBgvn;zaTX~ywv@E;JBM5A>2hGv$`Yie8S#}ls
zm4Xh$cub>x7ROX=N<p;G{)FHk_#B)_t~MM7*^>mk8hNoNlQ)0C^tqOO4#8G!ZtMZ_
zOr{8-*Cd5rCOU}FB^25!f3{^`CB%<mg7!)Qw^6ZG1Y5P4!c^}P@?WXT-2`<~+XzyK
z*77g~YTZ8(CWt<wS$qy3*a0#yyJkcbU<O{V$2)IEtFk>xO-0kx;{lJ9XiF4hn)LUr
zT5~98`(<9!x)tGohNVb?()YDQVTW`t4iz#4YMsY&3Jct-^){AYBOTDFPdz*u{f41K
z)#iM`++L<fLZ2sfS|($Z)|XP?atUnxFcqoOitHx*D-FNL!n;zZGb0!93V~bBid**8
z1}t~MR;^{AwNA6kKug2W<as7`ht^~=x+z^cccf@?SBfTgr)aWGU`g?w`V=*2QhX>S
zMGd28xq^8=D1}~Y3}4P&K)I+b`_N@{oi-O%dr%RMw8p~+mGqAA*C40urd#&AqEhob
zVBpl)8er|E=-!ji2Z&cfsQp)o`wj5;4wImx5P;uXnP9q%<$6qJgM87x{X49~Zv`I@
zy!<s2iJey&BA~|zMByHn-*T(`NJ{t^2_LJf8Zv!vn685m9y`TOY8iw_D-xm!=~t!D
z%M5)x=v%Z<bXivU&=mTkhK|u<<>iL{NAR<IW5+f|I<}GM*wCwQMMYPmM639uw_DpB
zad<XvSl+%H%EHdI*`BUr_Br&o^91KPMeXKWc9G4tA1Od+5dgcr%?4KsyaPMJb1D-+
z(M=)=yWHj}SRHQ$-ENC6k;Ia_fPDw7<aYr27g|=god7%=>y~$WMt}{=OI`vnx*aO%
zyiQu&5)o=y?_?q3I|x0B(2~Cc$b=RpM*$2b@B@J51bk7;x`RLrz+V6qS;%WiOJIfV
zDXcUOyoyiHGSDW1R?;27asWkB$T|SnV<eveU|>f8X90K-KoR@Yk{Q5mDh6;dfQ=;p
z_$kq&0Pu^i>zWXN<;~wLrgSYBYD)p!2w)X~+X37Q!0LXPDY*AhY2BYQ$k#;rn=%lj
zZB>HeEI*z#-OExC)F^wos%|>`PGi;fXnQgS1RXy>*dZiT){vpcX9!7BZ#2<Lj)D5;
zGH7U{OUj4?;8I>+0?h$jMxX#d|8fAO0M-L2JIADckt?PeA<vOzAb=kTj0SLFh2+8N
z!2a$?cdaqkN$j)jDhx?F{s{U;Fcpzl;zwWfHL#M#0H##}$OFKGiAqWUyh@-7K(9`S
zQHvNo_%YBPwYc=;>~vnWPN9QN)v|Z0jyHq;7Wg}^0}$#A;8y_32rL9Jioh%Y3jvfh
z6i{+ELN+6$a=8)BT4PglP%iw%_nCmP8n;3iSGAut3|Tza=A`!t#4g$ZUE4pwHaA0v
zO}ns9<8xW#-GNu_Vfgvd20a^(Tv5dj?I-c0S5&=_8h-qWsuxqk>z0?lXEe!y#k_;U
zrJCq%D${x-M7MI#H4VK4Q$Tm+*?1JUQJ#&*aU0LJ3DyoA{&X<0xEN|*Vb>yCGUS;D
zRb>$L0D#JOdTH65o<O!L*W)lm=Tr9$BjYG#Ot5((UB~&L{|!-#NGw?ntY23E*8=zt
z0yhERkx?ag0*F)rcnClR0s6wm5_lfKK>$T8;2y67>+wD=VgplpYK_KAo{{dawGFK3
zhQw(D+X>JH_7k8D{DS~(plx^9Ktlmy0}~Naxx$EUXan8*SL!s`aLcEgwo0yP&7@eo
zORY`?R(YmrG#rht)*+}MjzxK$z>eAK-q|ooyYFKPkVyI96lAxFz6hPe*c5vAIjP9v
zRAhZBa$73W#Z=<iOyzQeTnZ$&xwe?4NTtru*N|zQK{f*EU(Zy2lcC=U`lJ;4?S}ps
z=nGTmI}H5=(63L@VMD6iDt|I1@S#%z<5v0eCh&d4d?6WVb${8=kAhzQqd|@X`MjQ~
zd|+=~Ux8MbTjXfVjU!dRXQCN|qf%67t8#&1Y!617H<@@D>GzClS7R)!n$0C_Od!_~
z?HqdrBukT7-W>qv4UYk+%rTrlYcl2Y%C%bkk=m_VEqVO!tI%{>!S4-yDJ1<lh0cZz
zW5B8cmjrw5#ZxnQH&>~9^}|R!xJ^K=B?rcEy}4H<E`c+-?9*#3sS5?X4sipQ3HSsa
z;ejhTv*`6tf~&a-*lQ~uh=FT`;X_JzM!+IJz<mUJucWXpvV@tq9{C7dpg4r;!!^(P
zi&ZlcGDDdhVQ>)Chd}+ss%Z^8qxw}`ITq?eK!UBrPgJp1amdq$lOj#7X$Nw+-<jZJ
zyX!*-mcCH3Rnr}MXH-!P+o+Dy_ktpbnlA1E7OhEO8j3D*M6nl@bgjO3G5^zKfXP0z
zkF1{ey@}KriVON|I702iIY@(xmG~XYWPxIfsxN{*EG{c?4CN9SuGp%y+<r4*D1q53
zaSnn5XDT)&9g>*E6o)7_B13tJbud`5`54MojMZ1MSqQ}>bC^QMD7FgC*l!0Cj@Wjh
z6+_NaYzjK0rU&v6?eqx*(d<(+X6ah}{~X7<ZU@?E9}@J1)jPl%_&V|w7%2-(x^g6w
z)>s&=*V+m7jdPi2RnWOy*E>O(mb=UA1LWubUFWhl3+p1DM<*jgKIb^DuAjLH=-vxi
zqF%0vr48FlklttCDc<M)D3brC_u0Q-u2q$`@*~D54ngMCQag@9$)>F)>~-EGyoRvj
zG$qe9ghS3;B%F3F;iz*H;kAUbocG92pBDTATu)8Aj&KX-AbHjk&UJ1g{d#7x$aw|L
zK5Y|Kh$F+F;vQhG#T)KR@rI|DiU*Y5@bvg}aA<FMdWttZJ;fWIp5hHpPw|GQr+CBD
zQ@r8nDc<n(6mNKXiZ?tx#T%Y}b}m%a-thE^gta$3eG*~q4Nsp<l^0t<=JZ8?p{D@Q
z8_tEY3~^gK;<gUcZ5`eG4@C9OK;ihSPlD4MLV5cW+}-3|fa3G_74QQD`3DL}zqVie
z+7a<<`=3+aqJc!|8S}p=uob0W+yAn1*m9!uYx@rf5{=TY?SDgMA|yLXzqbFN`U=u>
zqYIhF`y!wyO24-ML&X&1F%ISY^?vOb{o4L|zjlm%ZGXLAJ4U~@zuvDMqhH%!@7Ip8
zi2U__?HK*q{-61^BNw4mvi%u$1^VD97exIL`$t5zqFgNTM<u{%#Nn_%rnykgTmtj9
z$0bnS7ZD@k9S=s-i%=>`?|9I7$D?tSL9nsp-igvX9&92=G)nJyu&E%~QJQ8j+Z56c
zvNaQ=D4GtD!RCU*qoaxB2vQXtfUYpuLXbq1-tk~7K?X(X9S^n^q&9jpMdu1KK1%O+
zFkjhVm=dLTJXoL{ATy)%jt7l*JWB6)(0IqA^o|FOcRWh(c+hyqqx6mkjdwgs?|866
zg>hRErFT5oMRC<?b(G%mpz)4JIok*t?|78n@u2aJN9i388t-_N-tnOEjz{So4-OMU
z*%hUCJZQY*QF_ONwTdfc#ycJ~-tpjWW>UQ4!6yi6?|AS@W><U1gGulBYe>N7uquPB
z392n^id5FAP&>I)c*j}c!Lf=l8pFQPq;jSsxQR@(nu@2qsd&npuxIk1Ye8r{bdW1%
z;^q#$Lr}Z9L+`!^aoWutdXKPnbBF#)Si8AH?-SN;?$8H&5SMOHrfJ;V+1kw=I{Xh*
zinzH$DQ@o25$TM@%^mvmJJgPLbB8`ByLNMjj<O|cH+Sf3!rILpI`%K{Xg7E01l7=P
zZVhWUw}!QwTf^GT9XiQ$4@K$b4tW$KABob<9r7uL9F1}@GZa+cgLb?b-Q1ywAeL%I
zH+LvgFh@0`n>*A*L_}3H)_6#_glyG}ZthSk#bU`-&FSV2<q4Ljn$gW2YAf-?&5d1Z
zC^;tXbEr@71;nCTNorhKIXUPOGKR5l^>hTe#ry?82_XVoaDc_v@<a3$@b=vfLaVp&
ztWg~(vc;?mXIQGEQ1_s%sbW%F=T2P+a>YGh&c(A)b$T37-VWqXb*6!|&i{%cs$K^f
z-1DcyE!u+`@aJ==p_m|}iJBcieF{imG{grff>Dz;`z(+)KOrCLbtz`m3*rm7X8{C(
zZ)bY1OR2Pl_w!AG3Jdyx`j)`03)|r-q287Fg>}sBd(r~i&Y6B8T&}W&N#*E63ow`M
z#-L@|)5PHCf!N}lbEX-*)egkBr;&;nRj84ocd5W8cZ_8tK7VQpy;tooTDSm#Wd8!Q
zk`BEve^&A=pH|J;u%&KbDxVRVZIH8jz>PN;F|IYkws|Ntb)ygB#7##*r4taITQ)C|
zU|QBp%v0l7lXP-19lOUwE0-V$M#PTHfx1a@)D!e_%fv)P`PC+wZY9(GWU44KOl!b(
zJ{XV$W{j1?Q^=ZR74g_JwQPe4Ia>=wA@Dl{9k}5_EhG3D<hDN-2<?@xpthfCkV!x~
zd69@(PIIw0PU#d%!De>8-N=3r%0wY5uEu)4R%4+6Ze!wDWcgZ+jKec^DT2n^8)sUb
zpEXh5L6kCyg1P4**8x;^I3*Zj{GN~9AXM#0@CRtFUHZ^^GSyMTJw2JX<_PF2dCOGH
z+>OXW6*8A8X7?&F<W6HwZ!FA8_8KdbziyI07oFKz^+||mX7J1ZRtCFwG*KjjwJC^X
zCz(^L`WY7Gdc~f4iebAcnUCGf2L}m;qYrfLF_F36C^3FR{6%P_u9uv>LHyNvyan{`
zaSIGmZIbZC#9J}N&4NEeJfHY2f`1IW`?p4oW5})5vkRKJRRcPHyW|S)EuF(K`5FYJ
zL%9;}7+6n$<4A7}j5tw~5Z<{aMhN_+GRhR@%fKVi9|6#-A#?BZAjY$C>+-}!06qgt
z;xYi?z7V{`2u3#`zuPgn@70i)xE}1~U@zNX*ndJ^V3uNmFsE;fIngMWQBLPG3}f@=
zmbDu)X~T<-AYh>hNFd-N9iXMyPDfa?ipSLi$|(DtVPuU<CI6I6WF%HGX!(~SC9AAs
zL&kqJU>wEvf}%f&T<kH-PcbTfYRe%O{ig^ThYXf{1K@oC3GPE^+7Cbwz-9n_w!)+y
z2Xlfu3_fH~0e}wu0dRNNtpLjM`X)r|g~%P0wwL2NO7f&I%dI&I5t78yV3tIW0}ygw
zCfJvW;a7AnZE|~^krwp`70Rwcui9Y+Dobsrh4&kPu4In_dLO$P)^R7U^1A5u<(;_5
z>!LfBcj6kai|$&^Zdqc!1VQ~~qomdSd@Ni$5UBLv4-owhXh-Saf5-m)%s~j{2ueMi
zfD&7Q_Q{3Z$1!H?$CYaJHkCU8diOs46QcXQC=jbpEx7)g<ocRi{Re}~9+1M-d3#@t
z?LnL<I#e1OD}0O?3YM6+FGs0*HtxU;OU%2l$T^~)j>0PLKF%QjiTIrt800G;6SOeD
zCt%jvAXAm2Lsh+Lxl6%*m0@3md|qnOUMguXLg=k2!nV1>nl}{I*$C_Ypke3pvGa2&
zasTGV&21RBi>t^vrr@Y|47H9z@O#=dWbfoAHQ%sHQrD!!9qz_0ZWz~1s{341`Yf-q
zYYoD5CCy(fE33<H_KY3W1`|aNL`OBNEj(hWtC(pA=~pjDC3h1$EtY<fhT2UG)y20j
z?<SV&;yadi6H|5ZUCaB!R!em3Aut<^AvAUgG3>a~*hj#6hz*uX%DsmI7fUXaQPD!+
z{l%2yinja)@Btixd^S*9P#sKEjZ@cSIxJ(57O>|MjzOjaD2oi$TzVK{%u;oSX>(vW
zC=-dv5Nw`|*d9g{5k7v9j&_v7FIGog;Xk;-&m0cnZy2sqgxlQ9Ekc%=;5ckt%~zd}
zm}vL};);e}Qpm_5r_-<-Lhds0*%VQ;?2!6Qfvnw0t*43B?MIjd+Yi>FHZZ~IYO9;z
zIbe_kZvap>^JfWyINn4}rp4Ba_GR@s0Acg8+;UnfDeiYu++d<bQQm5q$_AfgvGExu
z#mNB5JU>g3(w&Y*?Z=FeS_)aNCb~j?=L-3VLb{z!h+;V%Y^XaL?`~t_?2_(+Kz2#X
zaE04zD|(^R_DSa$i;_O+e1k}zw9+7KV_#@#eotk?_9<<9KKiqp4g0ttG})07w>=hc
zq>WZJj9bBefpPby#(g&>?sPY9b;G!oCT?f9Nw6<mq1jD8jJ~k@8dHFhqk9a(9R1Oi
z{L49d!mvw@UQdbpgB$mkb96W*ZrP71ait`FF*nx0UIEy{$XwHcr@<KcQ(Nq&7@W%-
za3tq|IkkAi{y}&-H+>Rl=bk1K2X8#yO_FL-UvMnyig77SPq|FJ>zRBQ!?)RCTb*a8
zFmlhGNOKwC6-)`1puRtsVGZIQLG`#&XF>Y{?pOiB=V|Lg>HVG%q)__YC#Bacl>XMh
z($^YT`dJNQyTVm0lc^hw4qr+cfwE<LHi|{knaX6oNtV)7meR73*hayEeB4CDlt6xJ
zdI2JqL=f~J;OVu;grifFU!ny<8jXUZrw9O_>AgD%uxokm1OR(uqW3Vl4=VfE#APEy
z!JIlK*u^mcxMfB(2(rtk3`<B7d2&V8ph(B*mYPZZJ0nS}bE#oz4u8UB2&Pnd+WS53
z<N=M_?{NoWR@tbO7{A2rJ`XWA`xs4D<#TN2_Z&6v$alJ(#I~Av#1Mzj!4|li3tdC#
zU<+&$kUQ~1XOndZy=tL_EbQP{&^?U7npyoALf2a8%Ab&dA(LPhp_Q#b7(y>wXtjVB
zhXCHhxI?((HFS%B-;j4d2Y5qQQg|1ImpiPX+#nh1E>Fi{oPGxHkadF<NN~7Z&SZi5
z9ImYm;|DMU@7r8?;%sg>m$ru!(-%Hstr1T%&4ubsGI07hoEg#=q45HNoGlK!4NAc`
z#xyu#8cqqrspA<|t#L68>q4FjgopEs;VcisGjap?)4nJJng8LPae-(qx%ixFAb|kD
zk)t6Y+>&~7q^<>s)=X(Qmu!Yp1G!kkDp7p?UN%>de?xY;2<KPKh+G&r{7#)3%iJfg
zo{VVClAot&vZCQ|uH;z5=<5s3Pze+v`_JJt$>Cg2YjCk@x#2Z*z8cjX_n5`vu7Lm=
ztS)O}!{zcSAZx^aR_c7!g$yE9prJsaQV-lllS*8IK^zHqj7F?i%P`@zIRA9t+QjgY
zj<o~Ghx<DRN&JtTYH6$3J;)oIX;*h8xEGhS)dKR3&9pVbz&AG2t`%xCR_j`!UJU)y
z)}6&@-1(h$9l_K$Hq&k(#k{eZc9(GSjm@-s3Bs{Ne)GoWd<gTMc_%31K1+X-N$8h1
zoyB;$UAxbmC3`^DFK;@RQ;K8xDW)16fj<D~N)66}F!M5Ja5RWMXAHtaWE3A(`X)xz
zZ*=-g+rnbxjZT03T#&U7%isA*g7QYEzvpJa`i)M1uXTX+8=d~d9KiaGPJf?E0qZw9
z{e79JexuXhpEC6uo&F)rpMIm$KjLM;`i)M1?Lol$jZXjBKB%gFSpJEGWp%;wPa>>+
zSpL~md9meZE;<90oZFUnZYJO{2~d2_09-Rh;u5AZAn1aa1WF|8jkb6UKuq5GjLAEn
zu~m?7$DW4Cc{tCpys?#l(_-?@XKV=A(_?k0Jtrpbe8%LR&zQXP8M`0+c;~Z88hWX#
zsg?NAf~#4Hjp#=!+B^Z`<@L|dz#qs!H(BUhGGvOIEcBdu4rZ1`H(BUKfvqgM$wDuy
zw~@G$MK@XKfFRK<y2(Oss1Fg6okcfU=%D%t!g8|~;u?Bi1Qcb_O&0o4F~xXey2(PH
zD6wO_{@Ivrvd~u=$LpVsw^F5JCcH&eW4g&g-y1xqsxjSUp`Q%iys9zXWFcj1dCjUC
z(@hrg8eCrgY>#xs*OgKJHZqsVdOH}7$eWK@^mT=!N~$M|zOHa%$%2!`mGW>CL84jo
zb%mP>lAU!N0>jxRr#r~jOpu~1`ntl+1&L?T*A>nYq$-QPu5b%M5?S<hg<A<SDC-Cm
z4!0JhHtS}J&J|>Q7JXgee02llOv$3JD_o#%1u`>>zOHbgXgx2BzAn7{%PcI&qOU7l
ztnLJ|IE%inaGY}+t1gSau5h{P59G=$`ntju>UKz5kwsruxQlui$m%Tmy28EHgJ9c`
zMPFBVklGJqa~6GF;lYAz&7!X>JVcP~S@d;<hYGSIi@vV#FsbcbS@d;<M~H5Fvgqpy
z*Q&?Cu-9tBb)2yAb%l2`lj7?NKS5CYy24K~yV}<k-op&?P0;f|^Es?a>2;{Kv^`S!
zTBuN8aH*MAQ&xC*tYVC87^&rr<QzwEY%E}_nfSVziLWbmCI}uYTiyzdR8*soVlR;?
zCU1qt<gL)yA{4$SCU1qt&h@i(%3Gna11RA1*hHk_SW$0e#zaQHmXC_qN(^FD>?vIB
z*f(LOVVqvgwbLtd_!>kOr&r_?u|;{eGje1Esz$%t8Ts@)z}o2*`JC+9=@mK3cBP$O
zk*^7Br&r|I2JmR7SLDQg6oGbnX;?eGG_0Lo8rDv)$VsMqD2q<7h(|H<kt{mBB0jwI
z1*caQonDckx)HSFIdpnOB7#^dhfc3ZreKcBq0=kUL_|bY4xL^R-6XPA4xL_+R*L16
zt6I?M70DAUPvy|*6=^H+#ObvMygrAC`yA@i@)dwH?MSJ59_eLqIX)5>*vjF%osn|&
zHUg&DmVX-L6BZ-kyPfX=32nh8{bNMSjm>TaC8fY)bC`nVoIp**E@DME&R02r=dlxy
zwpw)V94mG)>DgBLC@>YNZs#-d8)!AE`XdBbt;D_5gEiqepEL)(C*i2`B6)f-x7n@4
zoz|OCbD_}Z6z)}LEd?HHfsv~sdT}9)E5<#zbt*OoR`V+r+lAYeD%KhE<P|EmJQF+I
zRct?=6f0Hi4TP;yv5AOqwTdl8*lHE)0&I<nO+!YnQL#ygcdd$j3{BRm*b^YGQ?UiW
zu2ZqSh`wIMMj^rm70X8SjVg9Kh}WywIIwI|u@=C7jR;8Z1{E6*A~rg=z8xm+UCBc6
z)Ij50y2`vO39_!x9P+qXSrvNJg`nk6hh!jx+Z4c+823n-gO}CNdI3t+J6oi2^xBpl
zER9=vHp0{&;e|y&;i7XdAwnz9Ux+#aOhNgqQv<hY$G!CG84oL<ofq007&>hy+kTHa
zMxCC>7lgfnRm7d#_FK|td2*4L{D+~wA>@xn2?8b^8na2}jiRK39@QJPLikz%OK{QW
z6!d}?G>d{>gZ?0hnj+{0EvS7jW~{GA75xTDc_t`YyJtJ2yfI4%66F?fAyDX@(LMmP
zoS+8{ufsJ^P5nrU>KLa^CvEq;U2l^OKego>jG2q23QpRrf(u3gzoM;hGm%5UOSqq0
zDJiwfA+Hp*WJ}@x1z1@fqFoO$C1UiBhl%Hp0h<`UU!q+AyhIE>;GxAoN}OK@Q$Y#;
zGjVAgA;AZsFOF9XPf$s#xC17vGYm2S2=;~2*=Jdm+lFbDX`tQ*9k?-bKInfi^vgis
zm!u;ew{4ccXF_ilS*L6?9oVi$(&RR6NupyW&7_-Wo=KkrDgM-!*I?(xMOhNcqPhS&
z7eC27b(6w*9C+nw6YVi1H4YKneXS5a)@*yd*|1QX#VIV@`YP*Gl@F%~Ve4{*_&teY
zS6$gb`&^2sKN-dfvx`<l#a}cWZz3_P(=za=FFmx818zWoxnutNA#26#JHf&J(u3)C
z@$MGDzmoiYL3|(auLXY)Ps`4Hu}FR6VQ=c$cwk8>b_skd@<&fV4PT2vi#jg&xU<m&
zXVI{}6N@OJzUq6io>7y)`ya%A5PaZd_+Qtd9>zc=zvp-#o$0PSMkGX6bW!r#j|QQe
zcsFl-6W4J3S;PDubKZ5-83~CpQLgBEAiWgp9}B!Jj1x#Oe!gM(9ueY843gFn$PK9>
z52l1zWjoLq)<mHGVVcdABJJ<z0561+YK7osQ;^n-3(<<M^3rgwC4Sy4bYCk4{{nc)
zRgAw%@aVZ{Wk(@+A80y%Yb1Xq(uHYwIhd-*RI-vLxyCyIxBVcNL^1_uz7kV$vAVHm
zdcQV7*kaeD)_U7O=k5~$-wu}U+y?L?fa>oIS5su0Rwr*9@GZ`fnaixof@M~IIWL_G
z7Fqdi(8pBXZz6O>gr1OzNZyTmmf-EsohD=$LdNP4zBW}kV~kdWB|EpCUVZU+O+Q~J
z?f1+ywvO7HIZB5iyYl-2@pQrTN+}o(515Aa^o9|1A@!0%x*iO=ka|h=yaybG#0SBp
zCLNXs_C|F<4!dUpPMilI9l#m@)z=xW%e1CaNV0Do9!``(A^7eyET};FsnK4(-_*Sl
zVQ*2!Lx$mIEyJ^%v(KKas9h!`!;L!5`v*p4Wd)}LpmH!>tNJ;^nNnFJMTM^4n2>5C
zBZ_uc!mov>G_kOeh^{TrC-?%2D;S*+_8o2oj7av4^f9yNN6LJaL`Qv5qP~ErmBUP(
zGU^C0zzY1H2GOf4O$GC4J7Jifln<}@<RmiE6L{H+uCTu0BWVsQ-eA)6E}Czt!QP|L
z=OmNvHBM{&Iix<PldgY}0NYmLUm6BBYpd)K<ZNz)(uksb)i+`Qoo7JKEru;rjPVB;
zpdp_f@%s$D2=w?%smO;0kuIY6Os$3>H3ngv%1H+41>{^2tY31#v@Cu_O03G?r!ZdA
zfbp#qM!YyNLMO(iwL^2Vf-2Xh(DxboGN`@VbXgOq&x;1R5Xcw8G*;T>n<?~kbRp7`
zcd;ekIZ`KAhZw~=1Vw|#jNjuvMXXB8m>f-DsAlqeq9wZLw&JgwVAeuq%~&mPHw0d+
zc|D6T=BYd{C18!4Qq-!v+R)!Y1oMif-*Y7SETp#@FIY(#v@^9rJ>GEj*yDC3m5q%N
zGWaVuIQepT<yaHU$9GPa6oOcj-!rG)KJo5Ke3D_bO3-r7H%PMU+Tf<AC!>6f$?PM;
z3h^oHbI!pv)ZT&*U=X^U9VR{=gYr{bZbNu)e!WzUt>UtCg0Mh+rjj}yd^H;YMJFUA
z${4vKWXmm$(MS9SL33f&-MPa35`o76bT}V<X<HK`&BXA7zwfgM?fVKY)g4SQADd?U
zWcBD`h@~b@Z^~DrdsC>I*qe!{ag_rN7YlDZq{4zs;l+&|m=Vy~hLIznx)eroyLE}S
zSACx0<Dk_QCaW1WoB`CfO^7-fMk%%BZ;;jdQv~_G=k>PgNruG;@O#E56+t6J5pq~Q
z&!o~PDQ8L(G@6x$+z2&Xx!EAB;r0lHHh#}iV-i;7y(XABAEkp&Z#EAbMw*S4*B1t;
zZuh9$5TyX)s5?D`Fe{pWzNLOAgRFuJ=UD1N0o$~D2w7DRdq!(Tea_wB4sk@$Zzp;_
z_0dNNP~U-=dyn9pDdf)0VG!eR)4<;e43Lrc;U5UbsKY0W*&iAlAz%&c(icRJ%q|*!
z+E;C<ZHsPTXEe#N23A!(K3{OA_!jVz{|o_76A5`U(QRWJqEE2h#GpvJV9RHNSN5Da
zf<I1t2#jC(W$wT9BH)G0Oh8r!E|~}XO{yG}6{fd{cV&1;!Z%)wb=zgsEkmYR+#WON
zUFs4x_>Scz9}$npB<pMPpJ4o`EV^+6&EN--iTln<uq3eK31LT7&r3l2#L%)O1oR>H
zWWe2TMOgbw0IUbF5I|xDfa;Tmy&dWrEs3IO|J`BZw7s6R;q%W<h%k(k<)^yYS5YL*
z_b4Q3u1$ukz01|vzR%^#n(uP$H(YI8u8#Hrm#a#+n2Cys2?<At{8UrBO*4~;iQtk<
z{2GAH#1O;&3z_J~rgE3zna8qfWMAAIT@~RWa}oF*M0Hz$>>M&&Tgi2w=L#lz73i2T
zTh(7qPlz_dbXjo|N!bA~=0Vnw#Sn8pxQ1K>AblbFu=pg+j>(Ap-hi+n8xT4Qq1D4o
z=v)zohWe)>^BA%!^Gz6A>OT?7bSpBOnqb1NLc9<XMwouiL7nP#rwEmKrB(T?$rGgw
z(J@TB-)53DJ>IK^kt$6UMt)Gmir;3W-T}I)>=z6vX%Z9dn-D`xVhOURO`_4{1Y=l9
zlQ^cHa=Cs>F0tZj!v(*9r9M|;awiNeDgQn7tsC=Mkxw%jd`^PmlV=yG@6`}=Bx37_
z!6jx=vB))(a}E11n298O$rLRzneYrXk0NR7zk?*J>w3eni7DgP7WF%*X$EwksivUU
z!Th&I*JLSn*v^&~`x;`#A2AW{MKM;sW00qT{2d9f8s*y!_0d@?c-BlnJFNV{u*=gF
z36h=Px-nm}@q0dSyZP$$a}%N$S0A)g)P^)F6M&9Herl*%3Q<y8%`Y{jHHrXxhQ|R^
z_cc*|p~SkecR0`R#94h~)cq96(s~C1;?K`aNLqZ}YnwP>*pmf3-G0rD5?$<a4V;<)
zm|{6ssc&7bPD!qLQxjyWx39}pOURYv$0xbAPfd`?DwHdfoT&P`TuYN&+0zmdp0w59
zt647BR&tfiLk4dHsT8Ycci8lb?FGH`Qalm``<~cEGqAXDm*Dsg7<!fa(BQqM<Jig~
zde!dM3OYUqdIB8XcLP`gpo*bG4ghPm1i)Vaj3n?efGq_6382;GDAW=o?j0IZZ-daP
znnEzEd^wmV8u~v$ufFemojEdr0W%I$8(Rz)DqMbQfqf3OV+H;mX<1!o&qzoJ`Z@Xi
z3Bh_+`@H=FD0;fD;m;7GN5cquR{OlosefcCBFNPLd3!V>R{%#ETTL2h;qp6yH1x8}
zL1Ftf*s6bTn7G2lJh)G%LX$Vlw&kZTv-4Y<EIdy6U9UAp*wk>GjbJVQZzBF(ioew`
zrHGHGot2O%eheuqvkcN4$XZCC4qaq^@zkgqExEFd;pqgPU781z#$+#xxyb!)JFP4+
zyd%K-=Z3siWhWCn4Z;7^!Q5nBImXZzgC58gHPS-9pchp>!3150pvtQaax;)InomC`
zq~G8UnPFOMnZ(xha}n(4M(<=IA4KE}B=UGXUMhVP6Bd8$g*N0$+V;}L=%@Ui&)uh2
z<!vcUJ2ewG2?<xn_NJubcTGw_5WbZH%d33WAe8%QuE^z>NTS@56r3?R!5ETy$2{T6
zT537D1x{{ZWr63=ms2G;AJLNZL9IM>Lv@<@R(zU~(4q{9US*K3K+e?SFc(awwlO7m
zksI7R8T{Ln;2YfFj>+KrQ-U9LgS#e!cclcs;Rg3h2LH_j4})rr@|jau&P)?5rE*ph
z!3soe5}6>+>(5MdDch&cNl3A<Y=??0j5YR|vJzPtCc0HwI7RdBMy1Sld2^qiDgvy^
z5h=lI+~6t6;F_sAHdETKgOl}u`kC^zmUBw|493PAV~6=xWq4YB`rkH8KnmffWb--C
z@XkdUWwsG(P<T<DGp5Q1O&DiXWhM+yQVCmoo=$^P+7UX;@2StkjVZx%-QfBnSZDf6
zPO;Xy!Q0&hgvy;J_-ZJ1r%AX1>k6jp+5&R?&jyj&`M@A|A>=I`0mA^Ra*65Gn1g@0
z>0IHqp2}xZf-?&w^M22?WN<svm+geq3JFFFt?#8qn_vnb>Bjz3vScTjVCHe28yrar
zzt{w`qr6%Nv&<h$iM7p*Rp**k{23F>Ic4Ra4MGK8cX<!Eyp=~%g1>ZwzfT5#m6B4l
zt;zh~lIs7I61$TdTzATpx;ipT8vzwSKkoO;b*1aI5RT(yEo6}u;!JYrPz;)ey_bW>
z_i%cO{GQdu?1x>=d0Z{Mg7s!JY-k3Eqczbro?$;`f;dG-x83OfAW^*VevfjA)s#6~
zb6PHOMFhk-KSG=OzB|PIPX13V41qDa5sf`^&9;V(4}*Vw3F!W08w=S)$v?>Dw}ro{
zHS8c0y=jv0yM1P;g6N0omUW5C-_;uSH3~!h_G-;(9vq>mL^;jhQqMW)A}rmhp`J&C
zb&nYqht>ie&Yj{haYhffkaBD=#{<K;r!wPiZm1Z}J(U^T2#(-ZhsYQ@KK&l&E8UHZ
zs0120Qx{U5>03r{_hsbl{owa|HoKgAFolYoqdE7vM1CtQGF5XPG~MBd!KjVMCEQZs
z_v9Wk35{jy3w8A4F6VV9lgMS77;<G+po$_(HSs%_vlHqevRo6l8&3a6$n0~-s}#Pn
zMsPo9<jTiDLFKyQxHB}el74qg3S8np$+=n+EjQa+y&ztz(}=rzZ($DCYvLYPn^M$B
z<a!R={GJ`I%!|>KBR6TzT`uunKZv(z;xle^9|v*2(ZpZ5slP>;cd+j3pDZKZWm(*<
zIkSySv5zN<TuZe^e8}?N{s1UwJVu-_edsdT)(C!sEOP&A!sI^WN8HJn4{GrTT<!iy
zMIP3~gsa_T*iqzBO?=kn{0~NdTo;4o=J+0}yh{_KE|IU-MV?}P`8`E$(elGLk!Q5b
zW-e!Imd)PZwkPLSL&VGDZDGJgEX#eGe}l`<&AgHQy4Y45ZO>RqW9uS&MEssTE|nX6
zBi$9ZD}ZVQNIOpJfHg*Iq?h@btYW}I-$R4p3We6F(O}fc@P8r)nYm176vmM_Y<NGe
z^jL=pgqdG!^g9qhl(R-nKNFgS|G>a8{19Q|^|F?A8N(^d8WTZjhstasTq6~#NDFhz
zh&7g9iD}w_s}8cUP+!PB&KlJN&8JBxmMVR|Ix2&N$vTtUhFjts_6LzfYik#-qru8$
z`Fd7sf)DjoP&N{Jo^>Ou?m|T;lW<sLK0+jWldRX#?N^_ASoS@PqHi&K05zb4!bEzQ
z4PlB*+4=NKN$jk>OktLyJIydZiz2o+N(yw4rDRf482b_|wpqb_4B`a~>fD%l7C(s;
zxj@muR4-qP96JPkMf3jj5~T!nMO>3)2EucOsyjiU3rHtPOqbgjeq%GzTU5$tI4?+-
zj_)xS&qCbE5=JkNjxnm)Z0t*2!P2GQMW;#(b@V0rkBlFP&<himy)tL<(?~6kD0*4M
zOsp~K>}Cdt+*?VdS3XP#3Ez&}*_1#hiVl%l=EWNI8LFsN4&hfB%nRbYg<FVwR?eE3
z3CVL5hYTsjkrbfI<g8w-n2Quwz%^ymP8fW~=S-IC7FzK!J0Z+7O7#Mj>vvipSAy&7
z%^E{5M)(fN%lTxI3k5+hZq^&K6%jIK2?H14M9Mg8{92eoYwJc_X;54z)AA+i#7)R&
z?yyn(0997ielT#+N4L8%+!&v6fe7SuKFs(=>ZpSmSX*qy_Q^@SP_0oVB(@|QXQlQ0
z*4WPwlG&EiQ^UF+>E<sZE9av+pSt81p{r_gCPO&;)Vk`BB@7wO5KcUepl=|kO))dW
zStrhr2Q=naAci{F+*iv9XPAIBfnSbnTg*;ylm`s4hZyTwh7$-2BsKUlX>7YF+I@gS
zOw;GQL68HEQLSNDZOa%-m4Q_*l&iHBX`dnxancc<!8u*{)NpGozeL%#lry}BL8D#`
zVMS;nRpBg4XLM}S2x_W7rxao}^#vmk+QdJ?cz8|k47EAL*LfmljXDN-?V7TS=O|x7
ztTXx9*vQ4|tN@mcTISjukL!?0%OEInj`TDQQn9SxBIjOfB&ySF>Hi&8&jvu#h9?rv
zhWP){wtjn64Rn`n{r1(>1oz@%uNIKo`t3Esz-|3@{XtCjTA^}Vzg>S2ll`-UnC#Sp
znC$w4nCxFTh{>Zrg;nQm$#2&?Kfo5ftqH=|nPLIJz*7Jsme)a<cymtz3HE{>IJk*B
z_y3!p&I+B0cs^$?Vq|;)Q1<$J<a<>?ZivI_O}%VL``>eV6HeJPd;NVA3G2Q7zDb1L
z)0?O=_WDmohDHFClH&KOnAz}1lvlP&Z~9y2i;mCq=Bq%roEC(0?jh*xLy4#7b^;uA
zt|vXO1aKqg{WgH}88uTMclDqv|D+Y^H+Ym4sQUvb(R{>-9mT~tY`+MC{#I5aD)2EQ
zCoc&3PY|*idz-YVfpImF_Y0cH`vpzp{emV>V-VqKf(8uxl=lmo$omCNh9F*glR6lu
z(?s4cXd>?yG?DiUn%ob5bEcGkbqx?XQ!2Rm5|oqdu|9||-+X|`+1ykgG9Qr2=BE0P
zIbJE7o9gimoKFxtn$1o1A#=P^_Hjx#$17!XQ+>!BuawPA^&xY-QZ_f$<Fh#wP?gP1
z^&xY-QZ_f$;}bdz8I;XU^&xY-QufUhohu>Zv$?50l&_jX&XjC!st*;YmOy4^b5niD
zd_XFjo9aX615(-CR39=Qkjmz!`jGj6R5mx&hs+10vbm`~RH52H+KOy$s>e%YoJy_E
z=BE0P`G8b5H`RyC2c)vOsXk;rAeGHc^&#^Cscdel519{0Wph(~$Q-Yf%}w=i`?Biy
zWOGw}s8)3Y!(OWyH`Rw84gLj*XNPt(ld`Ek^aMe@sXp{1v#U4Nhms$VIt(#BXFQ_I
znQK&AjGR=~sZa;I)J&^+CFFTCa(Lj2{%BN=Y^2Xg{b-cg<Q~?W+%pbuK>^7o_l%S;
zJ7pX>AKL0o?irsh1FSc>XM9d}y~#Zz<p86Mum6Rl^(Oa>V|Rc@Z*tE#F&x_KP3{`j
zo7^?5H@RzAZ*tE#$#f58bCY|9M=|n|Y;JPT@F|8I&F%$*$Ox+KNaA=4ZgS6v2x6%g
z+~l5-DVU>LaFcsR6A=+rEx5@&!#%*L1vj~8v{EdmT-B1B+%xh7%Tq15$vva3#FI_#
zY_2|siTfPt)9Mv~GwqC0br3SMxyd~vF0j>t8#Ob^6%Bm~Hn}qwgr(BB$^9SH;z3-z
zx1i?<=l%px`mZol7p`<G_yB_TMcVWR$@v&?r2W@mvmAcVJJNv$mT+Dt+>y_RL6&z5
znaYQN-%mMbxw7!6SPZ^wm3u8^DZncKUx;rx-yn)=!+LTY9xkE^J^?vuwf>1romnu7
z-9oPHi0n)-kFr$f9su*@1>Uaw8cZAP8mOYod=Xhqk@=ERFQJO?J`|pR2jkZWb#)Rf
z$mh%IYS<viYFj|r?0ePO5+faLN=;-8tDp_`h0bT@@$)%d!I{D0^*PKgUSmUz`W$xC
zt@*yX+DKNl1#Ee;J9Z;0FmDFa6|n6J1hv6#Px<DPRgk|9y@A>$+R27a0WoB{nNhOD
zIMgeM(@r+mW=S2lL*}!j$roXpMiZe~?MHyi9l1;seW}S!DCG{55%d$*J3H{x%bzX7
z+rHfKHjzQ3Ja>iR8NM95HyBjH&)}4Hn3WJYA7BtwHpC$R31m28;vHY^W9FOw+$&u^
z--M?jLs;#bVo=DD-x@?Ixe8dxdR)q<o8Z>uE}xtt8_Uxy{s&l)bq$25Ef&V{ot|Y$
zKfs6F5h&d00~VE_d3D%@Jfj?&WXQ+B&NC`3^$;<Jm9I7eSyreweorfdHPnT(EA<@H
z++bKPLM`*Bwv-{qa%h5jj;-pfI;1&=X+A#)A?d%u(?@LdKSluMr=`2`)e!aKR0#HL
zJaI*5RM&orJ|C>zX&ZY?8U;)MKlSoXXj1(L1XceImmUondh(mbO|K-c2smy8a4N^2
zdga?w1vF$30o_GFFSg31vl9}r7L~33yaR*k4!43l2^>kFdK)Ok<mmY@pv5ZyJPF_g
zf#(3^UIl<}I*lXnE&yjGfWrU|5?}{9WEHG!2V^Wo8a;mm<t<X8C@LQ*8OYeMs{v#K
zxDr6`{ugM~dcrgw42q#~t-kj~hCUkf=Y=jG&glKPp)UsgeM5(dCk`6=^`OI8)0bNt
zcU|Gj*WcT~%j?*hd<CkrV=YuEq$+Kp!C#<3>63G{1`i>oRr;nWDy~fQ{>mVK0WuVk
z_@+A&>s?|J`v>ULHQl>$2jnLb7uE{{x29U9-<k*%)H`=heU`b$pHgAGr6)~X53CcK
z)<M%7P?S~D=Y4P?P<}_g;{gDfp!X@IRsKX%JAr)EEJ91Lq@So<4Qa#Y>Qrd_edilQ
zj_*Nwo=YthM(;O`CIO^a0g(v7N|;$2w|XBp!EF&dPJ&0ODtul5tEt8!t=?HiGI^Gq
zo~QINlQF7N`eq7Z^`2l#m}f;itu^3hqTrd^HLQlk0G+r)r}u2bI30|KQW(iC?>m(K
zWH{J=mCiA${|fA-m!%@BQjtxm$ZIAmn-Is6;Wb-)CVPQQb{ld*Kf)fu&j-R}0OqOd
z=Oc+#WbhEfqI7Un?PfK#=fe&Tju)m%rmB8VVlkh-^#$IK>-5pPIY#Tpb^7Qw0lCzj
zv7GVyaZNbm4(ig6>!KNZ|AH`|GauLfT(@gl#wp5xW34e^$hK)2?4MJVA2=E5#%^Q?
z`{I<4L0lEgmQ_K9vN@)N4&Y*CY`x->i!D+Y#lY8~M5A)5HkU-XP&?`bLIxEZ2xY9y
z>Q`}P+sq^&-zT>Qb9s~~Tb`!NROTs=tbv)(G$5L?DQ5D~Z4Km>(ZJP&*^-PFTms6J
zZ;-P+YS{w^lk-jv9@w08^dWx-F|*6S-B3HyM+$*qToZxD9MufX#nZ_7&ZarmYbqi$
zpGMJI1G&bUB_HvoCDs>FCdFC9xIEjq1FcR7`oba^ZVlxspL0afyhOG&f(xt}7b=|(
z>qFGJ*P0HSF)I}FpbS?itcwy9Zk_bV%~}Hb|7eBc|J|daWirwUWg_hiFVmj#wE>?q
z2tmOwP)w&eI=UGu@PE<b!%1lQ?~ab9%4YGQJwVAc7az)igi_9U&frV_!Og>wdwJj8
zDd!?!xGgR``S>6VC&H<@d-8FFQ*-y^;|K@d?#aiI)RT`RoSM5QA4fPfcTYZ!aBA+J
zd>rA_+&%d?G5{^aJ^47oskwXdafCgod-8FFQ*-y^;|QnbIQck=mOLe5PCjk|WM+g@
zbNA%q2&d-m$;S~+&E1oaBb=JMCm%;RHFr-wj&N#@laCp7MI@bUT@>@UI>M>Bd-8FF
zQ*-y^;|Qnb?#aiI)RT`RoSM5QA4fPfcTYZ!aB2=O8@qu$5l+o<@^J-jd-3f)<}P{i
zF*9jSJ|?KA=Kd#{-G(P0e}IViFbQf=?4D|i36RP<6)MvbYNi!qh5N_i;1l%AGEEQU
z%tvtMSfpcR$uvDnrs>i#x!-mU9NfpmzeRQe?-11Ab`HE-4LR-+#)RD?j0w9(7!!7n
zFn$Gb`E6&WX;uIl>lJ{&;S-Q9D*&e+VO)b6agQ(_57<4znCyB5;Fpguwo$e25yn(Q
zuK)y25O$9+ChQ(zOxQibnCTvhaB_zuj2Unw!T~IfFlNZn2v-1bgt3DpjyK^70FE#w
zf*BZB0C0pcF-JAw3IL8UriiF&!WDqz5ynlp0)QioSuDA#sX4-!Se|Oa6#yJz%y_Z_
z5C`CMm^ePr1K9r-7+O&rpNGoI9?f2V0`1GwALM58iDJQ<^A#z30;!11FOTH(2eT@4
z9~@j-;ZJQD3~gJ;7YPel(X&=#34KP~QbkPC-k4}Pryd#9l9MYFQrmJ)Ju<!(jZ3v3
z0TFjVgdFiV$vmZU(X3R}mry3R8!kT~Jhv1;r!~m;;&}-wVy(xxS4UfFqSZ25w^Ed?
zL|X!GiM9hk{?wFcZLsC2JLc-Qn21k{Kzt?%QQKnj)r(nq6R}zqvJiT+ya!%`QU5z8
z0_Q(hfVmAvyU7hag(pn#>j=Kb4bC51BjTB8c^eExE3CqHMj0}4J|uDun&E1avD(TX
zp28?hZ#879fLbk0y5B=wJ5&!iIn{<BeCHEM+8YP8;U~Rn+wddD<E^~TCPG05N@lo0
zih&@e?G&T-7c%2B>P+%_tsj&vZ~EQZpTXMSgi>LN&18wa1Vl_hFxM0eqD{dd+7t|8
zOyL5WLepzaojzw$u4A2Ed;*!0I$ecusnaI`<kelAkfN<Og%c*)4n~{b4a!P1d##C9
z1t9<WlxW5j3V&lFvIu7*+P^Kr$4mqkVc|ChVG*v^v27>UDja4~qP;w*=_&S-f1wGc
z8A$D(##XGH)vSsQTMci1vLQ|jx>d1(RWT1)V^v(ws<;=3RE1#tw4yXigKb|f?b2X7
z5Qc_nuwBbrE?{#Orwi+F0o${|1|bZr2CGF_J!Y!$Mpom$kbL1&Mq?J~9&|4ai<DbQ
zVV2y43cHlA&*r^l;z+4}WsuP*)z3r#KT9VzJjg0+dx@_6YY-YhQJ^OAHEz>9tinMi
zn30PlIHds;UY-(ppd0xgZshz&O)%?CDkj;+t#&V=!&j{i7!KH({M435SRL|NzgDb{
zp6ihA2Zn1Klt^YDd;Z*B70q=P9>QwMp`VFUNLq`VLUD^I?w`LP&TXa;cMh~stB?Ln
zTy0X^YKnV^;!gg8IM>v$fuHk9yeWnl?Kz)xwh`>W%`iAgDvU0<1Gm5gx+^|8I!uM7
z1}3R%kQPqX;HnJ*{raPK_kma}7n$bZIR!~2{HR-Co_c|Sd~g*L!V~Ca+=3*O@@s9O
z<k#A0OT`?=7T17JUtVPebmVv7aOM-OkH%BXTo&^I+u&lAl~CjJRY?W4y+jQs_ZO5V
z5L-_%FVKR|&k}xeFR)NuMmD)5If}0$jTi7P$1TVR`s;fgZ-c=)`s;hF{bCl7WHD})
z@XK<6`RZBHMNfhLtOf1Et(;Wi5)6@l1ze#K>o}%&UVKdp^3_Y=Q!|^IN#6VfRKX4(
zXw2WQvpI%xW+F4ToxTZusO?QZ4|-tAa}ICHH(SEers5go@utnXZ~?;7Zh}zn1{A(`
zRSm?58`@j%hW6IGp}qBPXm7n6+PhYw(GBgbcSC!B=7#pBx}m-GZfNf>xS`WhPGs^e
zrh$oD*|%gbbL;S^a^K~X2{MN%pOC|$3t*O^u1xCEqyy7mk4rD*5KAU?|2s}Vs-M)Q
zPb928%IT8`yC)z~<;7NjdFA|0j#+j+%07ofcs;e#=OD?{F0{EPYm{xrUp^35J+;G_
z^cA!mnc4-6*Hxx=0poR*sU1eApCGNMOzi^3>nc;bfbqJ@)GlDWt}?X?7_X~L?aY9-
zN~U%J<8_s(9R{})JxHc@0poR*sa?Q$U1e$)$X7m?rJmXa3RDP)p4tVB*Hxx=0poR*
zsa?Q$U1e$)FkV-g+69c)Ri<`<3e^bG^wbXBT0RgxwF?-pt4!?z#_K9mJDlvsZfC1Z
z?QrlLk?k_I3mC7fOzi^3>nc;bK<d;E=j0V39W%8Hn5kW0H!~?yyTB6!_0%r#B(tlh
zc7deV^)1w!&tX*tz5plH7DFJFbt+VzHX>9rwF`_@jG?D?!5q$j|IO4cc<^Z^&Z%AS
z9fEpl7ksxIa`e<L_#R<BwF~~0u%6ll-zTi6cEJz!A}*(PO!L&KUGVT%kS<fZV2X1$
zc!X!y>8V}tQ?ASCsa^1Mvg@f`FvYnWOmXf8k8xYFp4tUZPz^n`)3Bb}X;@F~G_0p~
z!IMl^Pwj#p#mIVU7xXEH=&4;WsD45cdTNK$uZWnbT`*HHGquB+R}^8Ub~wO__MWX|
zYKKFsSS)607t9mPOznbgC7w*}3L(JfFmas1130iBv9i#?niJO3_v2xPucGlO<IvTs
zTFP9`;laPE6{9%L?Hou7%rD^$1*@N8vQtj3xfDb_Eu6;3w4N4DBNZ`vKuV7J$P^Xw
z{2ufcZ_ENTK?<gY`N)*e%}1up)1G;5nU4pRdXvgn=27($K>pO0j_H_g;m!3o2^?96
zX}~P1`zB3$_H`(tK_<#p<SuVc3X)rwg5=$mg0Qe4&Ci0$U(3X=5k1u{pthMa3oi_6
zLW><b@Dn6fFb|)&5w^DSWw3RMDzsfmj_VXV(E_}WzFw$>ZT)yRPTi`wF$<%wkz^{D
z$Onub1<WmeY71Y=ERqlAmn)WN>-88_on0T}uf(P9Dr7iy>jv=Su%QYugT)&WnnUhN
z#Uh%1JqBEOr?Io7R=f!q)aoK?oe&H|^R9w!{58f$ha#u|XizMfI#Xm?H(-3TX+c61
zoFrGgsE%<$aUUi$TTY!B45s2ASr-?`;{9^s-5EYtzNNMkcn6f(#bVdr0V{phh~zio
zo`<+H%qlO%mHxLfeBymk!e_-lHB5ZJfeg!pfo%FaG^JM?23B}FGzSxAwId-0w^3I7
z<%L@DKcFmi*m#Vb{t3<-Z^USc=UwQ`4wF)N1H{TMD7hRHuNDkyxVjAyI*kUs#Z3SP
z0$2c`f}x$y0T$T|U>1Pa32@~mj)lk0+~TwVKn2z7ycSreTciZL)Iy&LCXEA3W2EYI
z0ciIjywel_UjvALW;p%@4xN3*mOh(V=*lG<)|cfcRQ21Y5cGw$C;<e%o1{@K!eF+Q
z7}XcFscyHzuB39lU}y0rQFaaLAGDdtTfiX}c9gxt9-?wA)|V91`8PnNzxawxbO%xC
zG6e1ZTNn|(n{1s8R+?H+O7&TgX@(&&!wI*cK;mHPz-eMsXjxlP?ktnFM)?g0R~^+?
z7z9hXtOSFU%M$?NJuXdH{JG__9B^rxA+p`JMfxnT<+$=qdf1B>Uq|qjsZsDv^3GQ!
zOD{E18Y8tn5(RH<g9l;pO(|iB?$Y5aPhXs1;#L>Lf_PPq7+gwW_s8R^undf9*~=2W
zlwhsl=Qx@_wWTQ>R=PqiWrcjX)vXZCe>>1AtjkN;tE?d^je4<kdqAsEv`ZK^=nfz#
z*~^*Ej631v@4|R{D-J=oYL+iv#6&sWg}Ek+ccW1y-UwX#Ct#u^r91s@Q@XbTi2r1m
z+|s>*xlEgHIVYQ=dZ!@j+6+j?GJ+gV`XS=<k`Ch<=8IGHZrhmoYniv&ZLpAeR7%kK
zKub1UmVoXka=Bs^0OEQ@FcDE3KLLqz{+`Pa_Xfkaf!c1$23MzTAm0cXoo)fJo4|Dd
zz6KC~)Nr3I)xtOO*$Y4xYp=VmRV&w(SqCnww8fHy=<q948{hk)wMh44JB%Uz>(ZVn
zOpAmmX;_LKk<;E~jsMoLy4{WVze@{@X8%G{eZUA{p~5CtFZWrceN)2sr-tkFr=<k{
z=g)%U^G%wxd)mBIm$rFhw6J!Ogsy{+<aVefGbE^5%$k|D$B3wr!T@E<)8Ns4#55XE
zlY4;P#7dpUW<QlE&k4}zLqxYELr)NWEr|}^j@lLboldD(or(XLQlhLRG#<B!;TZrm
z`7nMZMa|DCt$*}#U0Y8l)w~4{tk$y5+@GV)E1A?D=&J@&O)O^il4BSQHon&jDPdE3
zy_jClIkQ_Oq^cqPAm#~(DJ?dM@pELCAQ}DifSz10Wwmb{k7~zpawuIM3YXj8M0gAl
zau*wfWu5zI3S#x<k<qH+fT68S=7qb3TFcr{1@qGMUMTT{;d%-(KTlNx>qBm7Sh=}N
zb-6I*ykQ1m%2uzpS#ZTH47^kK!c<AD*M}sQXyOJ#OmG#)e>dk439jP!w+YDi(1PnZ
z{KO0h6;G7U8jqFW`(MHB{5Gis@tZgjWLpWo^%cB-E+~Dt41{A&y{OPWTm}kumvK$a
zgU}&3RYn*b0rcgwrY}{p`nmpkKJ@#(3QFJBp!a36Rt=X-{CdfR{Zn7|F@338f2)Qo
zNddi*6oCeP<#HyY=@S(PWWZ#Da}_&oiPPX>)%0Wc{l5J#L}53g6DHPIE=<g-F>j;P
z0A??ug>X3Amubnx8pwST8D*S!*KpM-I7890SVMhTyL~wmXmGIxan&h!z8b)_pWuA;
zmn649{{V`de1O|v${;SnK>QcrAsVrw$R&caF`U<HKPN$;gMW%KjmJ^;{GG@_8*!I;
zPPYVf>e|mskZ8A`iiqA*mVrE62C`R`Ai&cEBRTtO7L8{wF1Bpr_UN|}gh9WJAPhWY
zz+Nj<{WiiZM&ls^_H_iI8l+jCn^3g&4Wy(w9+s$mmvAmbChdC(o^o8bhX-?e-lSZ8
zvVeCnH`>cGkar2~NiPF=FK5)BF9Y=jv;R1P^w*&M)c`#MQHP#QjG$M9(n@KQvLcig
zp9iu&Pav)HMuKvlKw3}qgP4tmk%_ck7)F`%1kw_h1J>sWr1e<^Sf3}5)^{pkeV#xX
zK9z-my;FcJrVV)nus%;9ZNz(k^?3qmwVwdi=Lw{p&2u)in?G$LVZ9=hHi@ua5lWj)
zm9ZkkT+p*0+y{UwLVO7(<Y^3x^sQ#GWq1SSzX2_L42Dx@hwWy#dBa}Rf1MNdVH8jo
z4SzynZaB!>9xFVK)H)S@oKX<xA<$L$eO&GEC5Y$^$8mM^mj1|Qo)F^s0BNNU<eHU-
z=LDpm%fzGqhrKrekE+P}hpYN_x^JhGPInSWfIvDS31lG&VJASEeHGaRR6rI{z>Q5|
zWQzh0E(oYIZc%UnaUEQTQB+h^R8-t%97hqy1$S}Z_5b^ws!ndu_j$kX{r>;&d%owH
zexBT%bL!NoQ>T_&x2jH++!GLdT(jB4N(O`ew7@EM&qyH8>g`a?jq#p<;C?}(G2Rmp
zd`aJpklfhS=*ffjI_=n*OyhtE=ootksRrNDOtCt1H}V@iqz3@;<DP)bbOwH5aNHA+
zxrHiyW5e@$X7ZkZ;13pW(=#*1@Lw$6x@RWu2?%PRk=LqcChrLd`YkT^1axKgIPvzX
zo1u#!F2>CgZdA`ifQoUmgljLtj&ZYuYcIl%RiGNU_9E;UtEOu&!j5sXgljLtj&ZYu
zYcIl%akGSLFT#!uL8Ef*Mc6TJmT>Jw*s=GarE4$3j$KL7as37UO^$K1gj=YmK+g0S
zH%quhdM1!LF>aP{OGNAWG46P9%LG{*<Ft)ip;=*<#<*F+t(MQ;`WQD$xOPS@#?2C#
zsF(w3t7F_O;da+cfvk&hvxHlx+1GE3akB)r+PntjiWoObxWfh661$ej2tl^TxLLv-
zDaei(H%qvqq=<LMxLE>6y3@S7V_Zvc$LN({uoq#wc1F#;pP7^yHTMC6W=753#q63H
zHFr0Ka7v^cw19gJjFZZepxV-qNM)G{_2MKI7h!W;;SaUB8>9%n5wLMfHb}IP4HA(_
zAUG<UUh@7>%{OF{`Hsk4P*+FfLV$=|2oRAA0U~lCKtwJCh;Ugr7@5L?LZc0xlmoj)
z<U)XmTnG@63jrd{E(B<4c1nca8_W{%;So9{^-s>H553RH3p1S-`d}JhGo2RtnCxac
zEp(U-$Xo~z`jW8ml?Z(^5<F%)E%XyR5Hp=-U^AU&U^AU&U^AT-`jzP(jB%#~4pU&{
z_hZ~C5emq3%HbGyN`%6CENI{5q#&c%a70Au9DZ+yvIKK=4tGjmn-N7sbq;q*V9yY%
zbgs_foH+Ig(N1xl%bgOT0>SX)PKi*l#FOc??%)l$R13uo*jd0Xt$_IrJ`OOhJ8nk8
zuJ{j>kwdu+9l%mPiDXx9CahrmsQXSj=$#lfSGD>D!FsTM7XMoJq0GSo9zqYQ2a~5w
z9#5bp#I(6NqwS)(m_3<Bz2&lR6K|Tt`!hvIkZPAf8HGM7qq!+DA5%jH&4<WBA7$oa
zM$16)5sX?S)Oas+&$?Kms)C&i_(3NJ40nqvAT@jlp@pLK50Zf~H)E3QXH-D_leD=8
z;G7)$SuB2t*oi!`{ujYhZ^5Veeme^3VTJC8$f89H@ktx?(OL;G#V1jlnBb~pkB#v*
zy8I6K;O^T2!|$^YT?!z+A|aASTY0)+R0z{xx5B)$Agc5}0FMGF+mDw-`J=$P-ileD
zp*ETieMDbGurfQHZs`RwNUAKOBInMx#7CeXf4bopM5z)(oXb+s$K=gI4%YmNz-m^D
zYitZS-NAF<dT@89BAuz0sv$?}$^<|pEKhLl+}oV1tQv8<oWLTzlyddNu8eoTjR(5?
z^j42#*yJVfBvvIP>;=ODeGjC<6mKJF5;9-<DS$TtbeoPOu3!);{cp28e*hr4xX{Yk
z$XuMchK$U`<78w`egshB)|<pwH#*=0bP*CQxy8mzmRU7SKG)K^z_brS7MOKU*gZA+
z*{|leN_ARlnRv=+$txa2xRYgWlSGA(pKfRswki$1-6~lRpnEruZmP#C7@X)%KFu4(
zdX7X_1B9j5Ye}`zRX%ocy_R6o#Deodt@g3&=rtcy1IBr=T@pUp1IzbtXQ{Gr`Bb(r
zPw><=KK70A-BiH9y)b{$MVecDCJblcUZ*3?uF@iVosKjO7+=oz*v)YB()1)egK&34
z-%HsR{@g=<nCbU0JZ)H+4BVy{+(}*$GUl{CB-4}ncJx!GZ+Vh-$(y6}Q|!(1(4?Pc
z<IF=Pe}?0jJgC2q{Y-6XDWdLUS6nOI+_S8!wK8S6pP8<m!tA{uywWGWDB!yY(k}_P
zlZn4f33;;@pr3k$YSb<x_3y%P2f=>`_&KA!N>yspN&TmQ1<dbj>>g{^lKMKqKEs*Y
zg}O~1JI}Ys*q57cY6p?~<C&~Eefu^Nel~<tK!~pbuXdzIYZE_-5(5^IxNXdc4bfMS
zTWF<**7usm_`|*N&5#6rd%PpHx>DY1P$1xPUA^Cn?AhBmR6Aj->_5<5@uwS}$wsFu
z)wPYoV)@(cz_Y29iBWL}dQg-{TZdVg4XnMq6xxZrJ;b*#%lU$L`3qb!*j&D_3GHU%
zu5yOp6SA}f^yOeEBeA@O*bV@F0mSYEFbu%k1jYjxa1VfK0CwC5U><;T{|bQf#HZ{8
za4vvWe*<tafHMhP1z^hk0JZ_Rguo5}2Oa>h3&5+p06Yocv<Csa2;egUbii5g5P%N>
z+)v;e0M5ezd}zsc0Z2puBwFK9_X8|+>$wS70!0JM>BoH|FsdxgM>QO}8$b&H^9Y13
zP)4@$QeYQ@T;2`9-2l)%jzPd0L@sB={Q<O!r`IPKqE1HlbQVJJKJqWe#RaNU=n@lh
z4nm9;kF7S89n|7I-@c?48y~@ofLe$KPXH?;i)hgEQLDjf09H=M8Y4%cyVHk!T(pqf
z40+5eXF0GkvWT2dfhCv|D`S?`u9`9)@J&g|i0!c!8AX5=Ay7s(k+TMvSmYr9cty~<
zmsnY-Q}WZhd^;eoGc7FEbsx8~2n;xqUF0SZV)d)|)mB8lx1WX}^z{Bs-@(tRB6v<h
zQs7vI*X}fhl-Ll)`N@Rv#Zyt~iII&OjTl1z=3FC*ua!zeH|17RZ>`G^%0G*x39HF9
zl;@dP^J%rgP79P$X&tJ<+0ed>#PSiqJ_S}j9>9dX0Hy%w^$Y;IY_)wB!07;%KL_9s
z06IPoU=4r;1h^~l$^8JX0&v$00JZ{{`62-BEBlbZ0{|Lc0`LTYoi796@ol%h0^oH3
z6aNn25P+u$d;y^RANczjz<K}!U35rW{%G>iZ9jB=n@u|gYR;>u;?>A@J-V9mYe6{+
zl#2fA3^Vr>PD6+>Au75|BA0YH-vr-);ATO|QCacM3k(N31Nr@(;s-$dZ4h6^1D(r{
z2KH}Y1HQJrC}8=OPeI7?e`1y32OIJz`0*>g>cWHoNlqWL5eN5Ha&NYw!d?7`#jcSU
z7|f9OT=2dR-m;C<U<0sruQ9y1&-#S$B_;Fhn)1#F--+-}{cWg7u1K|7vHdRxA8QPK
z{$L)dXBD3CZ6-WK7eTH%6@n><1&P2SRj4XX_i*ktoLJukOJLKMm4WW)Q8wCK96(x~
z>Mt@%5>XXr+lt9b`>Tl@*tB<L09Cg{Z!nxxk!r1E<|<CJjf}&??x@Esx>XEMIZIY{
zDmHi+jy4R=svSO6v3#wO$FvrhfV8vJB9*rsSG4GEP&CDA!&7cMooVYD?bYdFkJg<!
zT1zqu74KRtQ*tmEwE95PPG5WIs>|EOXm~Xo8o+_gPE~jL86A)A#$g8h_mV_@AL`y5
zIpA=#B$1cW>b@K}gq-b3VjmI{hPcHNQ@cXiAT$p7makKTK7d*}<QxYQ{18VEKro=L
zKnL&X0Jg218yL))^6)kR`2`=Ez_0wlUGNA^;=6n>&$J62&$I^fB)iZFLgo2&p_xME
zsdb@+{O%uIlL2tKF!1!a&|12J4d$V5p-Y(A!92h%bPXAXw9mzq-3hF|J{WT-r}Ku+
z1SYd-YKQ}4q-Qb`KVwYD7mdNgc<fT>49#))P!5aKkg*OTWHACuS)?>Q)DZf<MS3zh
zRw|oFKF~-liG1Y^C165^(*Z8heMB~MJVU;(*;z<ZHoXog(X>I-nAODSFPWeUYUJOM
zz0~o~A_%7n$&*JahbA#>KcuFP{XnSP?=#|*jtH79^FORiMu$<eP)gDFwWx(-c|w?9
zQ7!WDVQ%Kc=e9O;;_*upOi^v78Swj{04Du^vLEt4PH!}$n+}5qx}8T*X2S!08vvWx
z@Ib#!fX(f?fy8{kW;Q&~pEKiTHasBfC}uW1FnBiTW;Q%9;wHdmHasvIFHAcd9vJgF
zU^5#YIG(lWKTdClV1>#5aeDiY)0;~D;6F}p|J$727UI>RJ0xEm8|;fiH^lJLHBN6G
zxHbPryb#;&MyM{OHvslMw3W>W78}-9HX~SUOk3HEV6n;V@HJn?SY7{x3EM7c$GQ`}
z7VZZc=Y;S|``X%#*B~Z?@HQ==7hFqpf(7(~8wH^7ipvs+iFX?mGtus|(GD|OkGf>E
zOOny{0%(7WCt8v5f-9~|rUy~;5v|C0k0BVlA&R&gVpx%Qj};m3vBG0)1WpPTpJtIS
zfc(kCrUzN^Up(~NJ@hoI0au9k8G6Xs)?t9;Mio!-1b>tazBw7({z4mEi`dXJ<W$-q
zW~MWg)fnuRya!!$+Z~n{10wn9hUuUipPIHTMfC=T$`4zvSw<rFt3XW1N!9_poH!^n
zPB0xgC^SwmrE5`y)(NK6;{;PWvnA+L^;JkqoM6g4PB8a_SS}9^cQ63r!d02ab%iD^
zr*7qRT{+^RDvoen$%4-1pFmK#K&({dd_b_cu2}DyYO>LprkoH0yW`*QdDqYe<@69J
zA3&k<cpgxr$I2=)h<XBDX2kJ~xGGYKOEA*73UIYSu&l@t+V*y^of)BRZDU4gyRGp%
zU`)&(Pj>&$2n~k#zjiD^S_<swA0!^*X756vvKYnp|Fa_ssIonxfZG)sk0@YOPWK#9
z5aAI8Y2G6Wrh+4b(RoC{JNV9tdXFfGdXFfGdXFfGa@9R#{aB*k!Qjaw3ZmX43ZmX4
z3Zh(fPaaVa<*Iw~h=Qp1h=M3r-IGTYM6aZ1>&FtcM--flw5Lby5e26KnG^LMQ4sYW
zQ4sYWQ4sYWQ4r;-d-8~as6C>9Uh}J?Ty@701*?Iqi+YbJh<cAGh<cAGh;r3EWc^s8
z-XjX4-XjX4-XjX4?7VP9!TI>NN5%Z96CFUAJMjulJ+>AZ&-{|$R61&@EH`yLcf7c#
zpvtBmBi*07i10L)n_v02kog3P$Zmex0qtc^J0O@m?SPg$^0b5Qpaopk3UT(L1sYE~
zr~)F?E0feLmBzY*(+(J;1z*MfaGR$QYz`&Nk;VKR@1cajYLsqu_*EW=X<cFnCS79a
zT9b5%A)IuHA)IuHA)IuHDMnnn#4t_k5|eAz@WbzoM@qlr62pEx=@N4y;G|0o+5bD2
zm}9|{bcvxFNtYPHNtYPHNtYPHNtYO=doap1e7M9g;Qc7qYv2;Yki${V(ZD5!eudw)
z;u=0&Vu&c+ifj0Ai6Q3dR$Rk}OAJLsbt|snH@d{M3V{fh7@8%nTXPK`E-}OkbStjm
z!zG6CWDTF*D9O_fNDNhg?@WlZrycmOXN8)_O4r8Y;c^o=^5o!yS*(O@<=}%^q(a&_
z$Z403TB$pK1w!)m^aNo3bOTT9&X+y%!q5vNi1^|&Ec=7N3S=*S7s?A90J?YvE*tAg
zVWmI|--b@Q8_~5u+t-8b7yAy3V}3*TJ{}1aT@CVfgcofD@C<<Bx<4fl2QxUBT`G}j
z?-C4ndSU!R5yNb#?8WXU(LYN@FMboz7yVvzdZ;72FHxnTRB5B-dJhefKixpb>3mt(
z8%pp5$jZO6k^d2*%V;f$KI&jH`@@<2mw^`6Fmwckr@jSr4dad^+UMUuA0j$RYS!C8
ze;|4kQRh7r@><3n%@XCl^U^IjG$+?>$C0HMSPHOWIiBO6cJE^tbr1}{aQw6c<aPWg
zayH$zs<3z##GKDGPbSx4aJ>kwLb(WX{Up#|1HIzf%M$?Mm;?(KzhaT|o0+?F3Ac4`
z#I|l#oc?FSeuv>;N+=Ob6N4vZ1!qu8jBC3s<qFFm$LyEBW-tavQcTegY$*=`Q0%|b
z2u+sqa!8wyvdZkvFB^lXyl1-bW7_Fh=IA2CDxD5`VLuv6j-dPzG^tq8D~z-)OmZe~
zTa_dyeQ1+B8$j_u%hW7MsToqUCfeZrlrcx*Z%)R4h4Bl1Pi0n2tHf@bZ-tpXy`p!j
zRU-W(tHeM6#ot<{-zp&)NwuX>O&L46Q$ZA2k(6;aWeop4MO@gfXOY{p#A?&iN}5ke
z3!Y3$`aUVC>SIXy@b^rj`&toOl2)aNb9nH8D04DmN^`x2A{P9fGP);1=2;DHM<rrI
zK8r<cd<ED6RYIPO%sa(dpik9XLFb}2^QRjg!`e^&Z4$^P`3jPYFPe=-@Tb@idf<^?
zQ3S@P8Tvd>(<AL;lbrV{&^fpm?^#x!Cy33eLGSe((TvZCo`IbM&l9~BXyFM=XFogO
zNr!Fzf3O;Hs#d?jrCG`UUW7~je*sYZ-Bk&QXzH#cmnqiGM9TCi%b{9B%tt&KQN(op
z+=^KNpz`fzV&u%0s^@I_?1|4nG#HWJZ0ruJ(e`-qW7UV2heqZq90F69D>!TvcFyZu
ztg3ojxeVWK!X3JE6c4ij6wcCFg{O#Aorcg9hoe`UjByhIf4br6bXa`71oAC(FZ9lD
z)rgM6%zVLI^jTjp@H4@%^+T|uzQj;sdP714RmoGSWe`{RIt;GAn+DRK!Bcor9O(B%
zUjSOX#zuKlx*i;Qv2@%3iOsHOx$SyVR;sg99&GWJ)wm0)!=(@oTd;XowX{-5=W(0J
zE)9slQdK<K6DYKfkPXi%)%h}JEmLo_3<2bdKi$wj1ACvuT_aO-NR)<3)MYo!gp+5P
zclP03WRfI_?_AYIrb!HrIg~CkPm)B3b;U$U3yC`zvbxSoV($U#)`f}Y>aBRYpYb*9
zxaFDz^-w+KiADYhn8c2SdKzd4z|>6)*<SE=-@ua3*+`9+Jl9$hcDvi=@JCqrT?lKc
zXP6a%HF#bLx_GEv!fBCVs^Wl+!4_IoX+_h#88A(gdHboVm7c%~3541E7!w!wyEY+t
zU`(++YIOH@cw_0JEjDPV&7^L)9kGpLNfC`c6}hUo*>V-*tGntYi*y3A+2~<jQXwZ<
zhN{OQ%S6pp$J^K>^JPfo?6+%Z9q;lG_gZ34Gcm$}cuzAiBB1drVW-iP3tZt#*q!ve
zAq(IgLgjTp;X4JKhME_?M?hZv6aK64^1`3+PJ+GGqUylMWHwrAFY9B%o~*ZLQiZ-K
zwesN09Gxf!_`RQj!m0Plr!n8+wHyzq-gE+SjS~pp+_n7PtYt#xLD8!BCPp>Rt}l^E
z9vpKRrhkHlR46dua(L3)bJho|OD)CJGD08K+j@wwqOw40SxmJY3Lo)MeXWN`KkFef
zypda=X+V+Q(fC(K8N@{xh$jM07(`7i;@4DmA;;SLkf?qSEtVc4hixJ6rXc+OQSyIl
zu7w^V&VS`0Viv~4L&TATLc~MFk%L0SL&TATLL7RCIC4;k!}&i)4hnJTA>yo`3!TJ6
z#1Rh>r*&K48)kx<!UqP3D!_+UUgr@<oJWGjdBkaQ9&yBZ#L31h-noaOU2KbIh64*w
z<W3%h`)BP1-DwFH|LOD)5bqLm$VjLkbczO+o&s_z_n`zhS^~_e%z*VSNuk7L_!GU3
zoU(CUP9NiIhG}0#uq%_Jw@He4n}p;>i(us`P$;zr(hC}IlT@y+1&y~!>X#_$pz$_I
zrMF4Yc$=gSM5LhcHc90{5kcc^l6pS*2hw0gsb`VLc$=j1Gbm`hO;T$S8XWyCo;_2C
z5FX=$dWqB(O!s)!m0_ueNuNS^GVB9*D&aY)KT-ZXs=QRC(5}k>O8$MwCewA@KZ2Bo
zJ?nXI0*J^B5)oEe9XSs&e36Hc4~G}hz;k3R;FO5mAQ2e>_F$wQn!1s5VCPUoZjgxl
z3VJwlEBMotxU$$|P2kEh1lIgN=E{<L1y_!plh9{`YpV&Sp@R%3Y6&ieS;7Mad=r|5
zhYCnvm+*`MAQ)el@Z)+0@*}=3;im;QzAoWs^+M=wd|kr(1u?!Z;g|FZgcx6!@T+*q
zVT32XF5v?r!1%g^-_lI6T6|r?hr|`5(bpyXg~5})F5z!%xb<}j|6p<J>k|IO;?~zC
ztbME`er<hS!hVax*Tr=^F?(mgD!JiwUjwsu6OEDKI~jVbSZ049Q3-IfW}kkd3daPA
zA}aSHIGkZl>wG&R8jl&=jL;Q!6OWm6ug6S!3(37J9y7Qjfu@Lx$4q*TAi3f(lb&mh
z#JRilR)TaCkD2t=f>evg46aq6fS%$plb$C?LOf=0#R5ZyiN{QOz93`7V<tT=i1C<7
zFVv?(PvbF@UZfWSF&;DNUXPh{ug6Tf*JB3vFR%|V9y7RqVK|U;#bYMDMlXdl<1v%o
zU9SUTJZ93p9y95~G{!O3V<vsLAjV@ReS{#!V<vs1AjV@ReUwxb<1v%&^_WQ?qv>J2
z$4t1T-xHFXKhp1KCR68(f-N5)s8YG}C4CpO>!$LHIo*29xGt|`bX^vubcR%0Is;N!
zrb4|oNzGC%IN_FljAo3M9K-n|ZJtN4@t*NcxLNO+mf}4VsmVlt@IUsRiJa7h(f=#&
znUGBCMP6M8rc|DD6M2oGO1%)uM*hV<#!Y>N@au%5ssCyT_zl9jsqYa!KscTnWGZi7
zjAuvWpJ_Iq)Qh~g3pF&AOL~z*Gm(NyJ=h-b`{$$fxv6{~L_WBMl{}TsagmS7z6EEL
z0Y1#uzCD%x7?Cdt@4)FqfWLVZJUdgl<vQ{c)!3bS8C4Z{Zz>nc47@*;o3#!6YARQP
zBEK?S<Cqh1G$R|woJc@3#5m?e!g?<vnn}G#h9GuQFOnsgoz#o86cKh(FJf9-u9iu?
zNIOll#Lc8$q(Cq`sTV1hc$n04UA{3~SIps3pA;@B9zgO^tF&r!+M<&&Z5Vf;eyVuq
z6cSXam!ebB?b(K02w;pn9*pl>OEWvg;4w3OYYBqmdQ`x?#Tb41<_X78klV?$px`Q>
z8wK@5{S0HimPeRcwY{MU+};Fs#c)DT5{BDJ6);|aukz#Bu@uZ$h?8xmP*wpxYNj&9
zLh%Wj_Ak&1GZ_5@7HYxiv+;R8UGk(-D3A=2dA~{_$45<go|)DZ{WH-68~tYyx6_)E
z+4l6u)+hRCPc1Vras<eUKEgaP(geXM33lVOcnJ@^)2I9Ng`gA(`{{;#hSFz<q+-l#
z8mQ<MW_i9(cu!+i3=DyDp-KlHQLbx}!%u|EPdD%YkdCbXx`r9O8Q(6Y-(Q=M&{+kT
zs!QK&kkf&b^YgTv3$r6T3=o#`<jEWrEW4=XoefF+>4teI{!Zf&<YJ`LX&Qk02+Rf0
z?>hjC0enn=OPObWkLiX4#{KW%wI-BbK@pzOKLB8?YY0%z#{?+3_D6hSF;?}3z^($;
znM<I~ro$_%Hv`yD%66e_Syg>E0QV;_)41aRl%8mnz5p4l`N1Mvfb54B$T4PzRF~W>
z3CYpDVg=(IrMi|w#wHtMJ~Yrv+AzOt?l(Ymmy>O*7bTW_@~fJsY=kdC><e~lRGy0g
z)8dYVvX3nXZ#OTO(;Frr1QRS{VQ&AXgDV5&da{4h`zz7VI`GC!J*M8Kgwm9sZumDu
zca%0Wh6Vcu^yw(=M$nc&1C_QT=+QvSF0e9Kl2D2hI=@Ms#m|#nR0rPPr&n#XaqeqO
z_ii-jZqn4wc?N=bvkIHrxii7h{WPUlvstY}dOdd9xM$nAJ*6x8Bg0=nc+Ed-I17fG
zmRS~yK+m`?Au(vcrG_rG5~i!^V8dv-8zqd>!LS}m5yrz@l9-OCf|S-+-cs-)L)^2e
zdylb1WKn*)VF2bGObh8vLw*I-y5V}EJ~I)n$CpmC5!hHtXIq5EuUTdhwj5smz=E!U
zMU6tu+7RnlX}#sIr9K^aTY?^(r134yAI|=zI#t;Wq&j84Am;hrWUsIY&2x=S7NusB
zrIGINDE5R$u_M~HD!sdzMz{Nr=ry}7EiU>{qgK$g*Zp}6q(=IfUUG?&K_>K)i@~qq
zi${;eoug<}`j&%MhzpVY>4tmoCDK#+q1)J5Pe-;YxfppLUdO#FDSXdMV8n?dHP2n2
z0ECVAu+w6s&3dtEj4J)t^$C*Iv7ncJcYT7enhm5Tc!NQf0of`sc-wtxt|bdkSBv}^
zJl`6r*bzN`fJlM)ya+nL8|)+%JHSoD*dQsfmlYzFVT48Qg2dAEy=h%;kv$0MiwuhR
zFKt??=1v>TrbIsyWH991nw%A@dB79AEE#-lWANji;H#3sS0;nIyzdDX!P}BSs?>MA
zu@hTdY0Qhny+|jEu#>ErXpuLOmnaGmGL1oCv5S(TYt~pUwzbkGE>&}r4fqiO2?@X!
zB2~J}k~7;Qi78fP@^F>~=7O<n7Fu!#@T~C4{JRZc3)p4?Shb<h^2XN|JKE9%mXU^5
zwR13D!93|<OVk=f{B*-7m@2C}h|1XK!nVM3#S!gA)X=_9w*lTtaNnj=`#i^b+FH=B
z*)HQZCPYMnx#(??V}S5@C@6$D?DCP988(nAkCH(1re$+I+lH|pS!To7k1$WT!>6f^
zPL}TR6_2PJn?(IK_itE6=Dy~TMcCVkA1~`%(p;*`=N?|EHFqV87B6ycL)QrzO{%RX
z$A5Pu<1pSwS(qzZgz5H#3}@-1UAG9=dl_^t(8OYd4v^5Tf+BRFpr@k@`f!$C50cNP
zk9=BH#$od}AT%)x(T3?xNa!X<14Xpqf@Y>@)qlCw1cfTUdl99NI1=6^1@vJ+tI~5U
z(_)l~s;r0P=gHQW<#>rCnZ<n^rN3IfjpQrca8p7=3fAvNWK}<*`LS|vy9vOsR(`r6
z4;}RYev4ZU9Aeflo6`45gu}mya8zRi!+{93oQu?NXmzuZKDtr*H((yPgz3K_;<`iG
zfoD<t0iDtUlk&u`BL1ds3H$-zedI0smhcB%t*Uk-*L@zKk>3^KED#f%F|hb~zz3Ds
zw0XrK%AXZ&a4$=<I3_r01ExDvzT8}w`VC{kNkSNKEe{FOWxg>s`u#|nKix1D0Rwqr
zB|`Zo*@ct`jxTG(+l7EnVG}gr+lYU{CRi@~l{kx~@-Xlo5R@>7Jo-5Lz8C=stVh@Q
zSX=fGgUfsuiBu3y*0HWW4(;a=H#-CbzX$m6k09h1t8bk4oZ!o8iIE<!qWcgGoqhyE
zJWZ=EU*3{nW|SH7(NJiq$<^cj<u(-GmGWB&A$?>exsN0^9U?|Bv4mwD!^G-*lF+RP
zl!TsRLUVsFAz3pv>i)ro*HgmLK5-VJx?d)xlw!8EOUkVYQKXr=TqBh%Z?rOYP{v?i
z0A>|UW+19)ayezZ`+J&jskZb3Yce*JE>Byw>wuUl1Iuv54_%;~9f-lq)i%O|hQ|&;
zb!V^yabF=uq|l_6J1VvIMXl~17+azO?ZEW7sSsMq_Iao`P<BpeAH(KFP_|OR90}h?
zTq>BsTV$YSNWJk(y_p8Qk5sr6;lCev<w2;>3c~svqE#Xi@C6xH63-C4a};)&Z}m%N
zcqR0#ImZ%tvG71hp(R$Zj+o)U9j2mr)oiw$d?lP}IPF_(O347pGT$BD)X2Yi(z#F=
z(bqqk?4P@Q>q+s5)Z`6<*AG4t??c2e8(jrIV%2R4Nde;^`RRst5k9Itg7h(?s`zgL
zPE*JKsO8LW<UAX1gHhuQ=QQCQHHZJkj#|in<3_FIzsW~2on&nE8z!BFzA=o>6r9DY
zHro`{Xfo&9q)_^Xd6CaBF3^pPs<sAAO0V!$Tjrrj=7#t10w4G*dy5r5t_N&E84Z-L
z>J>hQwTNj|hcD|D@@2h*7{0CzwgXrnKlNVan+u7VnZVPU@YTSNqB)YuV$>l&UGKXV
zvL(-fFEZZ)QOpqd!bi9hEkog*Xep-IiI$@(VxOcqkA1i~z7y^9H>BB#B|>gvp*}X#
zDJF4TzTp$rZ<4Ijv%soGPO*HfnGZr9svmA`u(e8+E%5|P&{MWDalC;xnB2|bx}2uy
z$Hg^$rSFyiCRJ_BLq4N{ZU~{f9w;l)SNix?coZ58+zl=CRX)yW^}?+t17$_p;8zoW
zlHpfN_>aV8N!s93Tfp-23cE(+JqSE;D%SR|m0}y(k|+iS27MlApF+MdHcRlJ9N?F*
zof`Zm;0b)4Zjn$Nqptc~z|iY_{9aj4{8-}GOYi(S@jF?Awn}(eE8uea#CGXk77^dg
zx7*Ev{~35?6sa$Vj6Tv2-7nq4+hmNvMsO5on`_mYTF=H=GP@+9A;d9n^`L|<2iE2B
z+Y@5ae@o9eK|W;1O3#7ARPps8;IVAWl?kNyX=92{iHy4-!=(7M;6FB|_>833v5iS_
zpM)*|)}`fNnx`n!6Oyh?k>ApiV(B8Q9Q*mw-FKLHW^}Y7f?OW*@tbbG6?md#1muR#
zp{a}w4@t5&Az2w48uUv+yD&P9REG_|37MJuK*U`LyyiSB^MV3YK1gE+hi~bcO&<Cc
zmcAVH1`mCQrLTa}w_7?tX}avS2tR2W-&7&z#l}{UoK2ufXn8aO`bg@}eP07UXrqH7
zKix359U6g5HGVGEewkT8`F<(<@wUjwryd1{gWYDN%P*GRw#cIkOWe#s^}Cbr!k@$-
z(H#j%Z;(kA_ANrMTql<@|0E`yi<C^4XYjqi&HL~d3GaY@u}=leqJI@Vrvg8EEOF(q
zLDb~iBzi-e&#abwSCv`%(Vz#BsMWq~f~B(;0L{G5Ig>R3ukj#TR*Ey-@{DOz`wgnS
z2=+;F*k#m1i~dV37iyUN9tBSyE&=GU!yfrQs?KEqohJBe#JOCc(*^&9IF}N1MDW6V
zRPn2=Q1gaHAGj|04X#S(+c18Cj@jWsRPSE2NJq|7g`C4r&J=xm&tYyVf^ia~j~k-v
zlBxGy47!4KIOM#a<ljx=m4<jQNqmu=%T+XW$ay_U97oP=#S;BhOB~BxA8A{;8Z?%>
zKGL=cI0Blb-6SBFY$6l5tTUD_(2<2)ycv58sb?~QvGj(HEEn)I2jIGOc#h@1k;n$2
za^Fbgl3JuYb^&Tx<Z_|jj2uNo#j*dQgsnp5#*)Y#0$vAoA`h~`k6X*sy30-2<G61m
z(pz&lKAzq=`Z!<L0_JmvwR!jyM3JSc;h@WGd$yY3hhW`ins6q+bi=)X9>W7bTU2r7
zd*VOP?PZj)4;VTVrC}a4?Ibn10Ro~M<Xeu7dnn23So&MXda||NOCmF=j^nwgByli2
zl)%t)AbsfDfYfB}bxFToJ{><{xICB|22WgDJC-+!W_D%1Ir%8*n1?V;-hwxE+FXgx
zNe~H|q>iT-b=LcubAFPfnz92DvV6YDU!&NwuayX#(HhE}s;PrX&2aWor3G^VPZJK#
zY)Q7&<T<DV*;&4s;NV<VlSS0zj*Q$}f;cJFq$3nz6V0CN<CK&YG!ootou$Os6E;~@
zP43RjoFXZ6Qf4S~oy<``ghd8uwws|GR}E#YP{)3bik0@`On{uP87hk+(|$k_t&|^0
zGl0`1B1Ij0AM3Q7AjIhs!+q?xXdNvtWY+n;K9qo1#prvC@o8U$AlF?h&kOMkPXgO9
z+$fnk_G+PC24yF6w@}(F$pJq$Bn6v;$=simc0hVSzHUt|U=@*iVw9Q8(@Vnrd}AF{
zB=mYi<-y7|l*a{{2Lp%ZAQT$0b-6BmCypD4{IYtn7d7>axi|If*!HN_IYVercBaN0
zCv=6Kat4VCQh(K%E>>;TG*lkD!RQjm<m)uqQym2X{9RaqNmG9$Zw+8)EgGM4WEY4d
zyFeV-1>$hD>UU%ph$Fi|9N7ip)I(d>kzF8883d*}vJ1qy75r(+?_PlaDP}WIiaAR*
z#awX|Fz46$-P^zsB%8}aV|_30VhnR4Zi+bsAjRB<1Tph`2=mD`NGaz2BbTS$I)8kc
z@y$-8%>)-BpU$Q?0ft=HY%U^_TJLXL3N6DwV%ou<PY`M{#a;l@Hvz~%5wt*H9HUCC
z^#V+(VPND#h;#!53jt>g$EzjKo+)M2;vE+#!mJ5Gdy`yzG~iS>P<Ji<ho>>P|K|u*
z;eS9vV8D9-{VFvY81f7mekQ{(ic;b0$uOL-KYWPr2&U$edGvRU(#CkCjTLEzd7NdA
z2PXD~olMe`J<P`%=5>^O98+<_2M8bk6X0mrPwl4=&ZYj->0}YUoeVQ2dsO43MI=t7
z&U4-brwV^dc&<oO(fNViPk|w0FNu8wY@mRFE1-Qw2U17UEU^<7E>?l@G(g5#Om-@>
zm(i9Cv#5N=RRrfz1(inO{{$rE(?(_f6=C&(E-leq!n4WOjT|ccFyZcm{o%ocdlGiT
zXA?e!nqzCrs(c`)Qk;7lI`fnX6%gZhYw*nKi$}J|in_tJY@`|YLj7R8fZ&G^6D;Ih
zn#x*`<jfXG?BjQ-k>6#!%um34MX=TVfWxhjWUz?BRruc&Qo#!4hW|;pis`Kjr<14V
z0q|^8E&MLyWiChBxo*uDlra$DZdXYsd=%ojl4m!31L5v>LI(0St{;#dkAUChZn@Cu
zA*6%0#4EPYUM@jfZOP>PZUMlYT&(ji8xJUhyBPEeg0WLEt9R~+0%0ZYO>oCB%vvKU
zr?Htbtkos}zvioysQ+{*(7F?}%V_VMgP=BZ0WlGkcj8<ug3Zx4g4%Wt*z_FI+sSg|
zylrI3zm?>5$sUQN&7W>~9&zFlXC32UiZj2Gte@_-!>n_Kk*w{IxdLJRl&nKAYAd*3
zcv&<ni1Gv&{TZ`xAJ9Uo`KXn{F9MyX+ph;r6%i}G0-zpW@`B|Uhfif3)PwJ)j)yGi
zO1!S-88Sa5I(}>Ee*yiEmc53@{xC3nXF_yk;0{k<$a%#MYj9{2E*tHbWf>`bua&+C
z0@`~7yz3Fb8P<+HJb}FDkD4;+kW*|IGAJF(B?Bzu^N@~T+1HuKWr3#2#@L|SB?RP#
zVlb8eY&h6HK7-jR7AoCd_-o^sR#=4T(IU;di5=rBJI$B{yjXU`Ih*#c?6}g(d<&9z
zPXv!TTEe4_Xvb|fFdcn2k7yS2iqfxoOwvtte8|K2aWlsEnlnCc87m+$1xZ4pv+329
zs`4uvFcbkyrWVOiL0Sbv!m4@s$nSBz5d~xN_h*U)S~AO3YgmU)m>?l;GGrSVs>U<U
zbQ7X%NY!puq_u^pJGeG-uMt$OV|W#0@-D{e&oErk6W1VqXO1_+8#Eg&D@8Vis?M7s
z6$2)29AX(sKa|}DQM1XYYB>5zo9v@OO&`^n{X@z^DUzQ^m4}?y?st92Z;(BK-{rFl
zho0$OnLJG-Nty>Mfa>xrGMjRMaDN8#ftZ8PVmh-YOG%YfPG%UHvISabxK6{r;0j5K
zPqmJ5)z_uyh0M<8^N}+SJo;AR{chgu$x95A_Z-SyhPcv@U6kE6oV*Ir3?7o+=FN`7
z2PeBWe-Tnlp{;eR1pq@%uKl`FZ&5APrL0kxe_37BT?uf))k2=wA4uKIkVLi@`(Ca?
zh~H@IH{%e$8M*k4(te|g-wa3mW;pWud!!+Trb=-G?w=^tWGPsT{_a(OhHj7lE*+x%
zQCXbAiQQDYh28*W*QG<Wzoj5imk!bX96@s3?<g!+khsfDmHt+Obad$u?QbnewM&O+
ze;Yw?Y&|N1KTnVZjw1)sPLN?P9isjDf{bymr0BRHlU+JQ`wR8)&~v)m2PNq*(lda}
zaR)Qe6483TONVHGnIMbh_Belqo)0-o-LsiawLS_+y?ZY;=&X+ia;{5<Xn&198PZm}
z?4kYL^%5ZKTslPi>+~|PZFK1n?H{Js1G&PbL$rUmAX{8IMEgewvfbTEWTYTFTslPi
zN6Ajkoh}`s{i8*<-Ex|Pe+(vWxv4TlFJ}KessBXcx&Hf^$uKun`X3;u!rWBp-^J{@
zVQ#AQ@9qRLk0CDuE#Ni)OJlK8?ey~ikjgR@>iQ%#3)D-2M5GGXnrmu&z`YFt8PSi}
zM|3!{YU+lgpkeG&)Lh+x;-;bh&3y1=pp``5Cn`%8RYc*5tFp3e^}Z4@Ti`ES7UZ(=
zN^+}I*2OmT9)#4H(2(<;?NPy`J7;6^$nBw8TxvOA2bXFoeOLh#K@+nbU(RFDE2Rgk
zYR=XskdqIAt+ZMWCm#aa1mxsH;3k5(?}0ZMkP1dMT2X2%T2{5b3_-5C7SB4MOuE%J
zh7vQ6_2g^A&)|>`Aso!B>&g+!bT~`mro$OiNIvu1RD}j^+HtaHNp?Q}{UxjPeDJS7
z4wC#?ti2Z#wEYxYHA~&PECl^-=MR9o=Hdp|T-@NAiyK^Xaf53vZgB0z4X(Yo!L=7R
zxN>oWD;GDoa&d!OjkOgQ73eca4prk3aDO1kg#G+(N_n{-z*Ol{0vUP}tP*CI5{T;Y
z2vA{mDS;Nc9<Uo`ml9|xNHokYC6FUXZkSz4AXkuhm|aSsl^`9%>{0@)1*s0RO9`|Q
zq-U62N+3^=M3`Mlpq(JY!t7E4`GSlIvr7rY1(_UXml7z{Mff*8%q}HRq|1QJ3A0NH
zl!(^z!|YN5Wr8dY^NfW+g`NR9OT+9^0@ZwntNJjzlt5=a7|6L{b}4}x%?z&&vr7qd
z*9jo&!t7E4b^27WZ49$Z2@KOKfm{)0ml7B*$d)j>l)wl<wujlJ1V#$7Bg`%(U~e`E
zvr7q#7TtD-dB#FujBJqIgG*h56L+8l(s{;0@Yo(mBAsU}1gDa!A}qDtfHIZ<aBwt0
zaQs_9V?1*qc#M=+jAt$cr?DLEnG3-a7$uXvRp6d1>8%3y(|$4bR)Gfysu+8#z%E)6
zE(_?b0=p@Wz15e99dNO*ZPKSjBz;mpMwn<dF-gUx2|TnUWsv00zG&?WI^doKwiel(
z1WTErnLTmh56)vQvIfO5+;Oh^J9t{oU%XH`H+%&S6)T>F%-;AbKsWXyqB>j25^cF;
zmU6Z+;p~<(&pb&vH@yKkH@PKS)cOPzQ8q{U-)Gd@F9s#+38a+Jr?KygJq5BpgA!Hj
z9OPNgUk%tFdlNi*0qJQiXPt>L>_SG3D*t8%JpCPzAY5R0m$EC9AFfP(xH9?S%H)TO
zkp+eVGWp@k<cBMhA8tJ(xia~I>o@q-FOwgxnf%B(i<)-TOxw8|thvZ&SIxp#twL0H
zx$`E-t-leNV4IOtYGdAdEQx##oLnd#Dk*j#P3(}VLhk}@OR-an6X1dzc_Mzp0#t%_
zJgXxAVLSpq@VPnu0-hmf%Y*^KSFprJ<2BWV+{!b=h7|Jap-&@%7r`xs+(nd(sZ{$l
zarAecnXxVQ1@S9dEq}V<{4{(>-He{xCr2+-;&oKK=**cGeGF(xKV-|-r5@}Vg+${(
zyHeT|pdGmAatwr&tRh=aR-XGwKMeY<n0M<qk^FTmbqB}3mb4|BVDvuiA&s-OzWzj8
z;Y5=T^U(?NfU1&Cqz`3Hnhkm>Ew{@mzaKol5l?}ujHbE`;pL=N(1zFColyK8VZTnS
zF@0=Uj&LCNtNE={wjDv)oQ<#CXc=<xEp-=yU}%06R$XuDy+E(}i$w+jseIHTJoWcO
z8)F6HjbpsZ+<Ov|6y?!9!OE+AdS?^8wTJ$RrEdU#jioP#oO2#9{4D$hh8}XJHkSF3
z72x9L6`=Aw8~q1l^ddyBrrB5+s$jE6vQ(?Z|E1Jhn@fcyR@=;Pg}Mc^ZC-B&!hEhm
z&O40BM{U3yWyjB1oD)qYs9z<;`G_sf-Qe*Zdk{5JigOf7qMS4-&PVSvIsd)le9)$d
zNk94N)pIF?#rZUgv+7A3S&Hpti%78@vIvXqIz*zvD;tZg+h0whEVjSdP!?xLPqDqw
zM6a6ZDK>n9v97MMx=oKGb5kT^z7k}NxMXa$P2=}6HqL6-l(7M@p=4|xgs95N9tDp>
z5Y<OLshVf$lHny5kqlp85oY)j8^hF7)~|yedAE4vUEeHYrWNXYjdAufXES*dhUD&g
z=8iPU-CzG^n0_yJ`Bp#+Wqx{foI+S^sU4WRTWn;SzbAr{x!YywlDnrYBDp(Y5$0~b
zjnS05UiTYiDDQj|>TKGBOCNjM%FpJ81~<nlhQXWsUI1^&$O2^ZMD{}ipj^Qc%ag3-
zu%0RK?KU7v{`q2(3lX85xR_+E)#CR|l8oGB61u62Nxl@5EcIkzB!XxX)X1s}EL}`;
zxkbbzw^)QGS#4u9bxc2a<X!ENH?f&T&>chjj_lmq#*wYF*iHBE$emEix8y5i{URWy
z3t!5xeL$-+ZDBl$lq*XtLKCMz5EPd)A*$*;Tm|QNxRM;I@{sKyUP9cVCN63@-gidA
zcQ%-LSC!9L>{DQiY(iL-1~(?_3cj?Z<7PFfpt?Q}KHnA0#}=FKrGWX<4Hx4xsOVt(
zB!eG|4<)C>fnF{723qr~jnq@3U{MuON@7UCx3wOmAHh?3&|^?P!dY;OpzcQ=dY+}T
zK)<&1)(}$=-IWm0^vp03<z;_fV;3!N8C7|ojWiN`i;OT`4OUc<LfKJP@Ra4?P@_>2
zYmn-i#|nENGZnYV<)b9|(+yAHeN*&uJjpN!qo$(vjr_-zCvEaKMqg9`w1&*Ph`ODC
z&LH!H^+0zJy_o1jL~p7DdNR?6$;|r(OD-e2o9H>!K*jivNN8t{GZ6YT23p<L<Fml`
z-LGKl<_B)T%C%Pcd9(q@%q4qtnbobF`CtP4m<C4Zrr(5id#EY&FGq$JEc1jmld3wz
z3zganbxN+J>ig=E!l^ZA9^CokdyXph?t+|r6-Vgv44n_O@&T(V+e9v6n*vdlPg*+5
zzS`1PgjMA$mc9=3(L$%|2TGP3RVveM*0v&anT;i_B;;J&SW)bL%*wWwneE_DhS}`Y
ztgNyjdk}JWGI6n=Tc-*Vo_JIj39FhbtYPK=;cs0O4nb1?Q*}M?OPSd%mPtAQFc=G}
z%3D43wwAsK4d7l&rx7ZjwFn!)@s^2o8UvoDMljaCxe>eaH5-BXTVx}wLQDG6Lr>~o
zIndgb&E^)v+`QRTjkFy921n)b7Wo9o>x~+VGD$<L${m)8r4dByVPd~64e0`wS(~y=
z@(c@OnPiRK;0YbrEEM^vywwvrqgg20bmdc?&{fSsmm~BG8%i5pX+mus2zab?r;Ue_
zE|}n<n+#z`Hm8hIxAN1q2d9iuw-Jo=K)D}6)SjwWB#uF5XZ<Cx(Cc{g9)YG68_c(`
zIq`!{yOt3IRec7c5d}|{FIetWspSKoQ(f^d#IM7?e}TlvMZbdDZzjNSK0&_Vj67nh
z504oMo}!7YW{^B2DUxc>H$o>uUcjZ)KAhiA+aM7*kTuHGakeVr^Yyz8N~O;qkEnc~
z)yjHeUv55d$36=}!2N)U>Nq}*QvCG_8}*VhjG%rlf}#Zsp}~!&6o>umuwdkU&6-}j
zl9Ybj#FE*QFl&6R$q=_@;M^3(VNI>A2OwhltA1Q3$m&W8dp09n@=9(s;11~0LhZzp
z__}5+YT#?YnHKA+C{Q~e_NZOLsQo^O<D+PBJwWyd9?2B123&*!ZK3{*Ct27&JUQ$8
zPZ+IbdvXr?Dj#!-oyG%fk^%9^s9*K3f>F#I;3Mcsx#*C1I006SQDJ`m`gKLuX(#K=
z#91AvnBd@9FO8S#%6z?@Croi?fFp1c*_tm#*a^gDYZ5^>#U-nIHx%&u;x7XZx$XJf
z2Z|0&#nTtM6Hh1933Pv`2jG;@AMgx>mf{%<`SHZE|3UoI?UOm64F2FUg1m%B+KjD*
ziCqxVWQ{U?mL*>WavG;{Q6*kQbJFF=xSDT6hlnJ~`V*pN@N-?49}l9ht5)IlmTL!O
zoM=Sz)gIky=}&<E$7GUBq&iKUPmfWt+bs*Tts<S6aQ6!V?zZ&Nq~oU>3Vo=WSX!3g
zKO$M9MR#iPJ+(OC(c(j^1-hH?Hy$mrAp{wRc2L6?`W1ShcTB^U%SGrKQg$bpmNLp*
zOlu~nOw`hwtiX9TlYWBfpVAHKcd}fx0ymzRbX2szrT+-}YD4F)MHM^B2AJeV6(YG2
zOm4cRF9gh=Za4u^GbRfI!NW){YpLZLWSG=I1Z3Yvp3&r)-Ce8fcWBR}S&$zQ9oQb|
z7$y<vp;ZeQb1acbKw{@uaZ*<<w+NRLyFnPU0#nBBwsckkmHwi|s=)=0kn^D3&Wh^k
zQgF-sLbSbi@zD9JASUF*?J7WuI~#azD+KwzW)Q1iD*~$ZRV4mID+)pO4yZQlB%KYi
zI>YMJie^`Bz9Vn3P!E&JR9i8>5^f*{K%sB&FThmWv}=z@6`H)v;E}Ak>;(Ni&qpwG
zCPGwR6;kr|6Zw*~lC?1PQgvewG7e(dgB;wQKvcYL<cYqy8<O+%AZDrXe`gQk&Wyvv
zdCd2biR*^%K@CZR&7<O5P}rf7P}T6a=&4nzxMsCu=v6?&-`ET=CQE)1o~F&pfIXcT
z**GWAKDnp|5qYp_M5q8PjeW7$7L|&(hF@KZ{>1jM^Q?Ww6p_vRzMyUXUs+{I|Nn56
zrP<85tXYT8L;mqWqSE-XYdm5q;PwVBJ(66OdDI6>dY5G~svXo~yDXF8U6#r4F3V(m
z2dT+rnGEl;Oon$^Cd0cdli^*K$?z`AWO$clGOna(yDTFYm0($BFtnPUVV7k_0-2NH
zU6#r4F3V(imt``%%Q6|>Wtj}SEHf6;R%ZlZ7A(um0J1K_yDXF8U6#r4F3V(imt``%
z%Q6|>Wtj}`vP_0umf?X%dsGz5GP2Inv@8=d%QD#Hj+YUZVSHfB@+`w-nPnK3TjMee
zMaa?DfqPomWf<Bk%PhkXR9R*jhL&@)nlHm-gBEbPPgCj)Eg*G<)N~+1<)BcgSt|9n
zt1MKq#h^I4v)`_=WO-IuvVOD5l8R)1ca=p_<(!nHnxk4wZLicYeIgI)&Kh5a-sPmP
zkS~?>Q~}_VIW^;E$ui3v4tdkE-h?`OF6r53nPncAS#p*C!uAMwjG~*ZhfIZF?|R5p
zWLxa;jB>LcvY4P*4_PPcA)A4d3wEM3(U>&RIHp1y0Jo*s<iZAq?efzNZSX<VZZU%L
zrLO+K=jQk_JmDK{KWPg#6(@u}HzZ$9N34h3-Sp+_bFY($>tsx<hj2*lE3HTT_#+8C
zF>FGT{OJZ>a#6Gh!8G80^v6YW&R7DJBiIl&0v4aBeC72(ZURzLUx?2i#ON>=Lor&P
zhm@2Y1ohGYX3l7G-ylXk8a+$#LggFGs4oI3W!~4?<l``uZ#d5yFJop4P~XZ)tDqIm
zd^CYL(6zY*I`v1`CssfU;eh_j0u(Y1K~q_2E9X3#kf5G06Sv;k&$r4AmVPYgeGT2&
z)Ub*R7Z_<2Jno5>{NhuU^K5DtAkryT7$>d9S?(>MSAFG0DjrKH{upAiyxvkaB745t
zH}U-<S^g8VOqyhQ+~Wzx`rRxa++)I;viv<%ku1L;S>9$-V9n?W`OrV)G+WkaRy(e5
zUOOsJwQ18byvP^Pla^TpgYL4yH0T*7m`fd%uX^Zz^w7_K!l+Aao-p(ymTsD9b6#_8
z3f9=@+?83)y1@zt%T(^LW?)%-Ytvf<^OsmXXz|LZjZLOJR8tlum<sYOou^lmCUYtb
zQ6=#r?%BbN1g3Zw)`Jr2gISzDp44VrL8vE{BQ2eRR$ICe##%Jh6U!unDBW!(dKppf
zG*M(cUNzJPe29Rmh>iL+k@;R^mDQcD&#E(LA>6I(xjS<f!rewN%t?hHV%DfGb`~NF
zSm-At*Ojvnk-;oJIWXQl7(pP_-7^a@noNA46PrK*>^!@BCKy(dK_2Wa<bK6&YYad8
zZZpBqonz;anP6b4m~?t9XphhOOUEM~jn_>k7J94(G1Qp_O!IUj&<!6~MzrdFHiE-B
zDfJ-JN=8yoPK%_;v`9}*Or(!hFpZg*==Cm|Nk(_YPiMbc)fE;p-`ih75=YA$tu@cK
z9pG!2%=Xow4mce-t?e9*$1wc)`QYeMKD7hqfg{(aE&?fdA4C}tJ0L(eus`S%_)@UA
zK@K{7vU@M8tbc&(`g(!t%<KdXpD6h9ttJV6+b5j~%qG6(&IBQ|^UwMe__*CCW&JA@
z!|gsP7ZXgC?RM6e!B>hwK%g_rBrJowpxJYi#=%`Ms-HsymBztcu!a5tu$#ugU9hDf
z(KHV3f;ocZrg3l=%oQY_#=%{%l^`9{IJgV87Nk0jgS%iGL3*Zfa2L!IB$39!U9g=X
z!_qjo3+4+lCXIu;U|f*NY20%YEY#eVKRu0uyI_%i9>|<D4(@^_qV@bV4(@_wf-FvB
z4-u@;uS3q#G!E{9)%tHh>eD#53wGAKft;Jh!CkNhcbTKrrg3l=?5^JhvM!B-yI`F@
z1h$Q79NYzmX%^uXX&l@IhYPYLjf1=32tl@|ac~zLDaejA4(@`Z^cKX~na06gaJ1;Q
zJB@?8;28Z8(%GZZqs-ks0U416?`I~19FYYdAgF>Ikp*`#yKZp(B*42_Mo|>&6`-Zc
z#u$esLA7n=Om#UgAk-g|RE)@6jie&vZN9fY!|&#uf}p7EBZ<mBlIVFbhA%4nNO<;*
z@<(MKNmTZcL}edIv>q98qq2`AS_b~qsO%$&vi7E_48Ja2MzQa<#~lb6Dz+Q{b-!do
z<6wwC-OwH-l6e;zrtU{@Hu~AjSIJvP?JN2L-QS2_NA$0=5t?9V%Q~QUFtmRu;$BGf
zHbJ*Q_OSk#pm_X=1VB`Hq`>;iJ%wlCiMjI^?dS;G2I;w(El0kM&DN8FjZ;~Fw=sEr
z)G;Qeu9k=gnj-3MD(e$Z5*(={lNjfuz7|wjzj)+a(@f5sV+M$BP=InmPbLH%f&}js
zMp?DVnr7)#<Ulh4uTE?xV6A0jUei*V6d8+m8gl2~v}IKQ+4J)zVU=~rBeuQa#>TX)
zR(p*W6msl;BP3fN>&MCK0o9_LjWq+YvPM~i3U5eC7R&v+ndMr}vy4n@yJ3`<VAeX1
zgcq7g_@cRln>`Xf^h((0k&uOUjzY1e7iwnpmWMqODh#91A^Matgp_|X2|b&cy=4!}
z$XuN6m2jd*!sX2*Ol~G2Yqdwhy@pXLDGN?z?eT~?&`eByb1~^pH)+h%LYwluy%}Rp
zg=M71QZApCn2N+c<yTa~RJRK8BWz=_IYnq+_te`cafI@x8~z3k({S%$!_6It#wQK;
zUPc>BR2r_J7Z8<(dmlp|BPtE|J~rH+faXfW-MIy_yA9H+)fSr|I}sJ@PbKywX|qA%
zPd7|(lS=HN5~m`jQQ~nXvz4eQA?N|3qQnyn%^93j;t7fw1Jo$7cMD{n543eQlYQzq
zggR(EIqI1NLa@LHozRfr8$wfYaNtnjJn%^;98$3yyg~HaQ5#_`W8tS8K4?_<Z7RH*
zI*8TYp@i>=io$}{3`r{dE<;ZN+NQOb?a-ef&DpelWzKq=1dD@x7ih58rC99HpKY;W
z^CWR5|5^wY>Ml!W&8`BWsh$)!Ya3aQSjM?v<N#3WN^i@fvR?GaS<+0-nC5cc^T@d&
zDd)J314J$Kez+)ml0nd2dW7z4CUm>yG2LaW)O`tw&+by?nXTJ=Q|5659N0$CyaXYn
zt;)+oQHBaRT#g(Dr5zn*1GD6%OgrSWH1cWXHY(2bq|~k)0a3V6%|k{=?Uq1P-~}HM
z_ID<T@l^rW%fdciA-$plb49ups_3}xSBdU;Yns95We~%`=fjwzwcE0NW^u-GWqY)K
znS)O|M|;EsWwYg*6f+XE^SgeI1bypgBCc%w_FYUc;Ia}X_j}9m&&kkPP)fWwoT&IV
z7%vW|g~rF6_2O_^3SzuCoE$-n7l)H8i1FfZS_xvjIGomk7%vW|jUdL0!^soGcyT!G
z1TkJ5PQD<<i^GWvV!Sw<LOl|C8ZQoqmxf~aCte&*iD+%SIN-|5*<<6y;Z*3kK#UiM
zQ>}*pF<u;4j6Dj7@#1i5^dv|#UK~z$ap^E#98R5H3^wD%;SAH|K#UiMGh7hk#o>$)
z#CUNyBLy*D9L^|l+%R4o&S=ricyTym^l3=cdT}_`i^I8}nG`P$=K+Goi^JK)>>4i)
zXE!s*ebKE!3%LC7NMo_m6D1v03BQ2LG8HOaMTDBgN<^n4yB9jb*5cnv!4b9=|2BdW
z=gwrDN|nJTlhXPLP(n^(@&FMZy$-0l6V)6?2IG6t*5z%sE=O&n#Du&2*3?R(+;(c~
z@o$`{e(OEucTYrQxd7mZwaaF;-tV%6ZO#Hn2z#P^d7t9{|K>f>A$~sU_>p<j4JUEf
zTWqtu00=))!yIXZIlw%_+AJ*NyVO3GaU+-}3nSJu5Y}{Js!Ho`d2U0vN~d?2lX(fi
z2)iVISC%!SXG{ZN9?Z9j@}!8AGRDdv!92(mQ<?0O0`NHbH%iX04mTCrN4C($*hKj{
z<FB|+W1)H6%53@B)n?~qM0VOu20MI79s;7{Y-34T`GEPuVJ%2LxM(4csf!c55ic?K
z9pT4!xOxL<a2DKm<7|{Ihazwv0}HTJsE#K3x}XDqt^*p%EJkR1CiMu=)QML2GgwQ(
z1M7462K(dR1XvgU#)f5RKQ1go`^hS8wvEJ(sI)UIax*J-x@?J$U>{bpt4w$CMFKiW
z=`K|cd`peWNuF=xqB+S=H|z)1<hGo-Z9B|nubkPN2rR^{LAn!TZvdKlmK8xKi+e$A
zo&lA%-mB~7UR?tp#388%C2jeQ9<+ziqX+f)2uZmqG@YPD!-3w-YzR6PsL`tzrTrOb
z>NYF#X$YEtzvg;b!>Y6gz3M&bRWIXV$oE&Vq-f_T)riu5QJNyk@{O`oRg5Q|q*UDi
zrgWF=nQU)??it@vKyPY9C5!;ZRaqa#5i*z|hAOi8Q0geK`qeLZbK0(HAac#u?0&0U
z3t_`NY+sbIb)GcyIgWMnG)sYwnR9XME7^2Cj&YoH%t|W!CwWYR@1EI6IDq@$&?L-e
zixke}I4`p;rqHY1fBNYRG`%olv(pPY7z^s!^AM2KZ3|%jbi+Dm>7ImkQQHal7c4LO
zndsU-06lvI%BzZ{DY1PcQC>5#klvSpwZOuC7}$?OE+^WGXdP1;GD@qodKfl*6?#uS
zkhEJt3m1@O5Yft`fOaQ3coWbIfTl;EO#sAL2iE-qq(<-=y#h~e!HeL9jI3wWS)MxZ
z&>R<oFG`yP$6~y!=Ti23%X21K@Y4;H=;C-f3EqvgVmO^n5Okq`2qYs`jYb|%orQz8
zPobO(i6)Udh~SVh33-9Y0*eHX1_JjP3F!+&Wrkq%l-Zg&qoP?fZ`P@NP_D{mWeikt
ziX$L*k*E_8%dgTgNV64c6imYkb=c-*8ROwMso#I!ZK4xJ`s#nQNylu_3GyHn-R^uy
zNh%<10yqw(#nU~=84y`WUxXZox}mD+`0)t2jn+UlDIoGS!=|v53mI$t7-Z94C=ukb
zEV?(_YT~&Bp75)eC#VhNGfDKOm}`ND<%qXF<kw@;d^z~nmxxLqZlg02s|-G8RfcC1
zMU)~i0&YVSf81o^kF1I3+xWf0!lx?gsH8gwrSm`YhYYOeOHqc!fr|;+0--<T1w^fv
zvp=izCqVzt_(OgP$srmj;Qm683Cn;#`0@aNsa&ZKnv1vnrO2w=xfu2{Q?|H@nr^o;
zWgCjh4P<7@Hq=6|L1Z&!8)_+tnX<)I)C@6Gwz!I#h?%ktwGzZk*@jvRVy0|y6*bw+
zlr65JCSs;+L+u1HQ?|H@njvP&7FSUdF;ljoLS2VeZ>DTRMY1?=rffqcqP3Z_4V4LE
zrffqMdNu@@Dcg{}&PJwelUGs8lx?U+b9uu|+2Shd<AInd+fbdjZks9F&@g>2q?sw(
z&~QP_lr65JW{8=x4UH7UOxcD;X$Ph@Q?{YeqMMnr#Z}ZZkPfD7aTWD5D1k`RRn!r4
z6*Z|UgN6AoK+$CY92LXW)IR~u^juAyX|ASbIW}HR%_v!%4G!ItEwjO)`)R*S&IX4b
zAgD4q8ywojwR$&`v%#U=c*y5K1hjz5S|aJwB9cC-K_Eh1kfdTZxERUdYHG%?18Dnc
z5O66o;9d^q7P5>VoS|z$vNs+xFa9iycfzGS?j_*v#<L}j_A-E+O?(hj{)<Y$RQ9GY
zy-TL=@!+3fB4@J0@t=hD9xf02DKLg-E~oQz&IO0cUIIDU;mX;dWd4N-cOj@U%LsQR
z?9V(%xEo<N^E$%a38!TqpxhozG>Uh<|5c#=RUJX=%>?`xF}UBk09(0;l|3jf+Y@+>
zOKal<%K37YX|^XYTW+S=o**JyixX%B<m}eQ36wE&jkVtdC}q&-{rN{wvY$W_3EycQ
zQXuxJ0$AV-ic*=fMn3;W!2ZlP!Q)#%dRl9GfBF_Os`dW#J^dl&Y=>2%dc-8kS&3}u
zQAX8EvH>5(GIUk;SqRA0<JOUBB)%o|1cEBF4I*QlEcy8y8P^jD^SiPJ;cXVeLVkVh
zO@Q6Y5UgAZ!YCkDpZElbksK(fPa>E%e+G_FIhkr8_7Z9~3c@?;6M_LGBnO(#AgD4g
z<44rYi^1t;ik5Okc3SJRl%B(+nEXEc&!(nPeQFH_+*F20ryBuPP|LusYRmg~Qr0q`
z&S)^U<4xNsYY9S3Yvd-sCo`5NO<2DJdR)wurfH`FjHC<{7gY>f;a0G<r(=bVNk7n@
zo)s2Wg^w`wW12BrLW?l4Xd&`dar^U%LGPf~KzI>eu^kNrj#9&+@*g9|EX`uo!-CLZ
z(QMq?Gt0oxXO?Idms5>Sl<4h6x06Ib`+OGc$r8Q2*nf^@0TeT}GliWw9}U4FS~34D
zR4zE~GC7AU^abL_%ic-lkE11zGOBRzfl=kCMpcdyRoY9{INDf3s?Qir?jjs4JJwJ|
zsc|BxxV_kSl8GvsPqtYPxbIRe)~&Yp!U`z~DYt-&a_b6JQW8>bB~waJ@Ak0OJADz>
zVZOyW%s(BFkQM=8UF`_U69h_;Y5p&p(gAtelN>N0Df#IJE?ku_4Ka|Cv&Q03pfl~T
z;<{Y!f0GYJ40{t$Mem})>TNi_)U1@BDdi35r+2aA8U-ok4>h7|fmY4O>AVlIaxt)K
zevQ%(6JuEQ`BvcFO$l}~U#J{zQ}er-?v~%Adkqvf>E6wBA8Jfj&~KCJ-piC2DCyou
zjA5N`v;vdnsFBM3R~oEF>b8K@H(R#nen&m*v0y$gWt`ndh|>+6Pc_!Pl=@YVgI(T2
z5gY!wK&wzc|3rltR`Ix%@bT}Y)Fo7aes8%`1DWl<5tv}tk#UeWcB6awFyQ1up|cm1
z*BWWk(Zao)ev*}8mgCjbcfU=oKVDk=>4t{1q`p^E-|HLo75;x&eXpUu4C_uc^tJ4*
zdErlwGchvLn<={Yc&&Oe_wU&>_7@@Ox|1NkS0>00BD^<gwQYet{d|Jyt3E|Qa5=7>
z80tG7?V^PZL-!~@-|Ds)?e;p6O=bd8>i4{52($w7mPKMf>b|i^Igp8n#Jarco>iTU
z-*w%P{Rxpc1;MAAU@R-Cx}_fac^>*z9{ROS^nQ0)`U<A`rbR9V@}XgB+R1}T-Q<Pe
z3Eze8#Zaax!>aB(PxMk43o18lOZsi}TboC(j=f;A#MC8f(*OUrQEzD;6-71%6|)K-
zjW_V!+#j~B!V6sA$QSrNVAWSxbKY%)!=Vbl#DoCe9X8p|#Gb53-BBBR%|=j*W3=kU
z8TZ_Y0G0u0GfAudWi|$I`9;#{E&^=86?jxs+2G%6aRawN&zayKbPHIwLE51E0DK0Z
zZj_D3qUaA6*nm6Ls;64|UaR_YgmCqkWv~JY4BQWy9jP-lJPFf}qVr|~%*96ldXs0+
zqriF`i!`4Da2kPE0lW^NZlg_v2f;jK6K8$8!_wKiz22x46+qH;du-@Wi1n3(%6UF@
z|M0}hgk~lyHdgi9Hq>^}k_k0<ttXBeQd)wNSj3Jq`eH(?e5yQIKD<?X=pr2Cp%<|+
zXC8-+NnT2e`0hC#Xpg<efbmR*UIw(cg0w2kBAm_UJ^Fa`o>f*VYPtMszGQ-DUjU@$
zyC(4GMzFfKjnNw0IGLYCwip<F2rs487q!OlqTaHhGmxKdAhqHGOYUi6>je9`^Z-se
z8_Fa;(mlb|L52+<$&hH+9@2l>XyeUp6!#Svht6J#FbZCS%v4FVUl{FepaT<#c>rO<
zWr(IV17=UbEgf+Xw_AbpDc+}h@fz`~5!mlO8^BWO_lOtyr$vr}?)~2JgdksEdr(+K
zme<wDlPSEHj2+ZV$SQtU$`j;<yP~{Y0QC_ZETM0a`cW7p8EoQItwu>{_L3pSUx5!l
zm#@)U{S0EZoCbUj@j8(|3ixQehY}*|L10IBut}ng{0T9dDj$nX+RT{wmgRTCR7=((
zCY3|&%!4Ep7*!wn0!M2bB=Id)%wAM0{&d6GEKF0fbT(*$12MzIyloKewgMY1g|$fv
zrEEI#BIB$}MBF0cYf!uOr84Tf9r!@LqWeJ9=!NLeHVfaN8Cs3y!0$twenL`5yc_i|
zF?0m=2wMrJCV+=xTn9?$BclxZGeY(tWYF~h4iUHmK<Z2YI|1|u(7DCSCWYjCY|!Hf
z`2$&A0B{X}>JrPs>dA)A$w3^a&Cz+84LZzPaf=QiGrhhB{Sm}#0>Y5=4k;Qya28rE
z`3L0yTMBFt7hzu^!0ih^0O<e35n6F!d=M8?+MWo7Ub3OnnzdJ)Hm2%sw?ThE(4C0X
ztU1^1w4s+G^m!X<`rJi``<^G1muz`!kgAToVhqI&ks<7*rAtK1InBo8<U-wW%gD~Y
z5(XhNOxAClrSArlsvd2lBzsCIfLb^S{2}%oB|%zrAKSOS9K;T+c>CBbw39Egef%P8
zCyi+zYj8&%Q2(5CFXM-zp6Cble4E~9jWxKmrLDmaYD!ALmZr5nD0TQ#;v(`vX`c<V
zlXd!GsnZLwa5gaBL8&*<Oh(Hm<Q`3#&mmwqKW+8nnxCp|Pu6PO6li_g-;K?tBNFbI
zT8wzT&H+6EhF)g@IE%ok0PX<Ln{0zF0`?BD>LoU^?N@y+28e0|KR<r5AsZ=nzwT8E
zTBkXXln-Dw0iM*n89;Bc45|V43a|;||6%kALK1)d$}Hg(lu5r6Eb<u(2n~EU;zp3Y
z(egriRoZRMT+=5RY#A`g==Ijt(T>pQpx%$xBpJOH43g0n^K3?s0??amlF`+`>Ta`<
znb8vvlNAP;tv+Pw-+&I9u11C9V{Czw9MU_<u`-s+60O~MQFUoYty*Sb5LMtLze}8Y
zJJ|gV)8vqo{PaSG>q6G994WkS72#MQ*V4-{j#e-TEB;xya;uA_vkt53<1EH87PGJ-
z$;Wz)S}`&oU9A30s@8OC>fwz;{0WdTYBlT7XL>H+eXxx5wuhyzR-A&m`C2xD4@+IW
zh`7|%!y@og;(4_G=bCT&(WjzHvH<m$(y!hQeDqw56TZ^?YW<$5tjv5Z#k%Y?Q>@<z
zmU%iN%WLdgN$d*XqfecSG3a-Kw?0FwV=kcZ@8yHq*|c-j@SpkG`$6zA2rojH{-dZi
z8YdI~B+z4^Pkfs3N_?-snt+<<Mn4QHwbz<MzGWTXvK&;OA3$F`AML=koP%I}+I10P
z4Xj629|ha+%}h4ew+6&pz};_)<(>}iNuB?h03Dy__zDUju7A@N{697YdkHVYXu9q?
zoA3f~zYlTX;mRut7&jr550J>J?hDIx5x9aV8)~tVrOS+~e(h|M+Ynqg&?0P6HC|rd
zDrnc&Dn!=mDHh=!Hpz_Tvg~u%J2iVdvvy48_6K(>CsHSy?eYX=&3q$*k5$J-;`rd}
ztQ&xZ*5V=88DzY#Il?v5l2h^_BQ5Hmgq(2@-!u+TQ|WJ>DgNdR<)^MEbXo(dW_XN)
zzLXzyCWM$e;V(!v<08V-W&%vlC&+I*57QLxyN4e<gT^pO9^WClOuObx1P#rE-!uW2
z(}`0C79hgOQf(G80v`xlihm(t;Cf7CgGl6Ol_aL7(?K9Qn4dyT%IDNF9VVux{R8=r
zJ$40B;5SDO0X6M%)S<{F%r#rSC!%C<nsHxc4dc7d2%1VC`b_bmX8=deCLX1zsq>Lc
zraBu>)**ImO;Xjgd8oYpUgsi&<4!a2JiQpi@I=1Sb2vk$rts8G+&WJ2e4Bg3PwNHV
zNIgUNCeI;Y)SC7Ji)koD-_8(uaLNFtyBmZM=Q?NXfSEIVzG=o;m&~lKMvrMoRrza4
z<a<D>jR~2_^=*ImX>T)$anvy%71xxXKz~6xIWnJ)1p=m6jPTH@fT#TmON5W3P_|;p
zpv<SMDPP0(q3fiak7E!Yh`Io>PM||X)>tk<zz+@NDL#mCGo%M&TlCuWR><-9VG3+p
zMs3c$sS~&~nq74v1kU0;7VgI^q8#>u*nkeIUyVtCY<9O@2+MMnbjLqI!|xq=!W(WN
zW^?|hOL!Y$Z{K+XAj;1dv+s|!1oz<KTPNTJu#xY4Vdwyjd>0C}6=u<V7YTI%wDrj%
zpk4X%b7!vaPh1Q1xAFnJQNS}P=w^Z`?m@~o3xk1v;Ep;=)1XLj6vR4b{|%ukczY1=
zGV;4etf-{8aWIRJz{hxTZS+^Z$Jjj}$zMHNVy8orzuS3?9sCmY!QZz5a5NY}CjI?3
z0nQEnFV5ZrJgVaBAHQX@ySbZ9Hb@CQ2?>ORl8}T162g+uYeE1)KtmBh5K$2<AOWPP
zARq{c5l|HQDheV3A}9(rL_x8jSg?aw5IaTxpU;`u&BE9BeSgn?pC_4fX3m^*=FFKs
z_udjH=fc;Ou<7n`LpxWeTLC9}?jU^$t0KiSg*08rGtHAinx2mW&h&^C`tAdq@9B#F
zuF`|}AM{M8+@aqB?(R9o_+f+xqbz`j6CUe1NB&n+<(rIX7Vvj~&K3Zc;d4bb;Dw7A
zd3YeEF-Xmrxk$HS<l%uBv~9x`BM%S6$io9MJX!a|R6;p#%uEQ1j!7rKn12xOi+LRM
zF^2yndQh_=xA8A_AG7Ku)N3qX<lc~w_d2|T!TBhNe1`ERA|3&s0OvRX4n6ThiX|l=
zSFqxmL=e7y0pU8mC1=FtM9}<j0nN5BP3H)jcnGZ)=xBjP+<*ugzP_NEW^b6!=m?r2
z7tp*JrkNZ;!&jA8^Eno#xjlmB!3${q2+_nZi=e6IaW0e&KYtB5<q)w37f9}$k6^k>
zSPAN%bjZd*;4Y(gCy=U!{<CiAYc>D&VsOkEI>QarjhcUN?-yL=3tbCT7i<2dZJvb~
zYlXDU^#oT_9o;Hj8xUg;n}wJt-9YK<Zq-0#Q^+0JK%?FTeZbZ0M2N`MM-iPsysPh2
zM0<^>-9Wri?PMrj0XV8aEa2WkxR9{R@EibQHoUm(X4N8?$vgQ5q!GH~dR(^HrVZ2x
zIr+O03C?63e>JDF){+X}9!+sCQuxk;sp_2vXc${`%5y4(?=Ioh8{U{&ga5G~Q>Px(
zX%i^o<li%ZkWS`)c|T9!6;R>wDaqoN@gH@=%N_9_@0&+U(N!AVT=m_@wA7xY!tab!
zX*M8z&B@jmr$X<Tj~X{|GAex_D56N_<~1nmU3N$yy#hU6=sJ~t6@|J9W$PPP7u~Uv
zE32O0V_@NwWzg|rb<8Tpdh0-2Go?FZyhk%95^c(q*c;S+muCHtwiJl(lr9kZDf!`A
z6>iwYAw$c{5D_hBA_9I4a{tBT(Q~+NXn8+!8IvI@4l^gSB_+27ifZy64I+TO<-fWr
z_3!+rGehi2t<QQOacXBQj!QEd*m?<_4<6e_Qq)ZF3%r3&(VpHCU_3>}vsCzeZyi=%
zt&(u%eV{8ZQ|s~^`(XU`cL6(fEiE5ts6PJh%Wk0?pSo#s1a&PO2Nv?2q3dpf+7Ut@
z3()Q%4;)5iJqiN#-2lAgyA?_$H_q{r?~zDQH_q`kiA99vy8(E~HxYH?954AMqHdhy
zZ4yM(jdQ%@n~1t`j+cBBQ8&)<l5ZmF#yMW{O+?)|$4kD6s2k^a$u|*o;~a03Afj%Z
z<82aSpr^WVj+cB-0HSW3<0aqJTHQFuOTLMy8|Qe*HwR~R;~X#f<~XZvoZ}_m1AwR-
z=XlBY_24#Jz8iqINz4MGZk*#K-yG4^jdQ%@dm#{Y;~X#fCZcYf<0aoj)Qxkz<eP}P
zagLXKw*;bYoZ}_m)J@$u$4kEFLyo?2?$$TX-8)%GxpD4(j-a}6?%u`XsvGC-JtGm#
zqxoFKxxK7P`9c8I_Rj^zSk|e;@}j52^1A`6fyj3Q;2gYsuCF~>yglM+z6+^t?@Ra}
zN2T8f5RiYwkn%Ai;w@ex@uVLY+8;@4VT|IRqGg6~QyG&A+Kie=#0>!auaQbRn#Zs{
zMWgVv;G?Z>Z(IBqK0QO}ipY_hCZ1MH5$)qm6HhilTw)=dL)hgzMmU$S*Y_adwuEDR
zpHg_9XofycZkkxUY2s;5DHd;<c#1Xyba>OG)Xd?vJYRFDWwyHvpyBJC4!C^<V6RV(
zQ03-lz}GVa@rATXg6}wKIuK6u-45<%a6IVKeA{6rvm5X3XZn^9?*0kjeBXG8HGAOO
zE=JJz3iI}+tnP+$8c4uwMa(CM<C$V7pPU9{F`6&#r;cv#82pb_;B^G~mZVGGC%3I8
z3v6ygY|T8Xxm6sn)@v-*HU%Fdyj@_Ub_R&7KGfglRhc?BX{-)j6xnAaqK!)$k<Xus
zaa0r-*GZHJ!nLH#XG|8lR!eGd76;A9<@P>8r7oka1dII566O`9R76e5n_w|-Lal5{
zX<$iaqi!x)!H>p;<r%if-ZnxKq=GKlNUCowBIeRC<+m0o>*)`;3T6GzNV#6r*o4Fe
zQiSycq3JUSVySNZ=_Fe&WbcQ`mJ3<^PE>HUq@50@tyXDIu$WIuS|Qq%V*e!58j3@0
zrV};XMyjVsmC$f8C2g1Jos8bWXl(ml&-hoRazew!a!EmS)q~*OSS+Y09>kE9I0dXb
z>yc#-J@Am3#M?>9M4BuG#Cc7VH2`h^Kq1dj$fqLYkj@zh3yJYy-69_Nsma!C4ot<~
znxZxb)SEJ5f?<9wc@yboAqJ-?`fIc4%ZRg^?ZSV&%gku>0}FRjoadMp1^)6gtGWS9
z#ZBXrAwjrktl<GhqlVNn)?NtWQ#z|#^hb2ndtR7AYB5$E<9QUVu{cMpO|7q;0(>nw
z#Mz`xoC>@Hm5H<2MBWCTCUp~U(?y({fJ>!ZB6tvZb52|`kvUDwktC{2K|*@@$3ZDV
zlKcmOw9;mhb0Y{c=<6di5vC;aGh5g#N)dk$1TBUEI1K>5=A{sGS6EC35mW1Cd||8-
z35s<mVV#diVg2gGth*}KLqQ;{mjS@9WerWZ2JBm5{yGJ5?RDJK5pj!j+^f}bt$){X
zt1+KJE1{J#*+&?k1o02A?vwwlj9Sq+#W;o}_Zj|Q)8u>n-wqX;{0X4eEzqS=50nK@
zd(ifaH3KXZ<!4rHbnu>x(Og0fmfGxqELrk|io#z8-ner$hd#H4YVR^J%pBrUdqV|(
zi@4OuFu~KO!J3<CO{vKWF>wVV(^AQFgb?il-i8&|;M1V!6|T5S`(!juO<8$S)3t@u
z02s{!@UR=9eD+oB9hM3ovow+2)>6%-luo$RZoxNM^g^a&Ml_iVYz46Nk2M*X$S;X>
z{}n6rZ-PGO8%@6+wSpQogDP9g-?dTsB5~IA4XEiEn)ZR}xYp)pDu>jnk+~Dn0y+wy
z{P5j8WN5Y@INER~d&0#3A~{WxZ!`%z-^~9aspSL7I!(epGpI>=gaz>uObZL$+9{MR
zm#1UqfF=nDn%@T74AS&XHGPv5q)bLilhy!s1He3g2rd7*_?0Ff9A<w4?DM3Tc%7ZG
zIWS+E{2T0d&Hn9VAV0vK_gC<0Cu8}WL^H6VoxWbPYo^(?69+rYyd#m0>nrEzJl~ws
zbn0mr#8mC{<Cc+#{f1&62X(;~*vtHeDPI9?D6)=IRzsOuoDfhH`c6O@EKU+Er0M?B
zLMqe2=HwGtfr;4$RkE8vToc-E5iqgd769o@j|Gt%=Z*3oB(&ZMlF)i>W=iYpz^Zd=
zN|a1~=J9tZfK^A`jSln@=VGE0e~^e?GLF1D&`)A7Ci;#q5pO|1d5A<sqcy=UxG%5E
zs7|RBcZQNf8#P5!B8VnjNYq{vwZfHvY2f#C1nG(kNhd{+PRH@Z!3a`_<<n>)w|_`3
zI=L#8zb!YK%`*!DCVn0igK!zapIKFoO?XwcXIQmIQK$kLcFu6r88r)TBrbN2ZgP^S
zc+KBLlV;<ChwU`WEHF}q$N8p?>rx%pda;g^b{ZVQYOgCRi%>$bQVBY(LpC)Q)-|cr
zrI4e>w)!UJE(YHEoeTKQpy##_e#dmejbVPx;zImd2)|d5UyZFTWT5VQdx(E4;r~8y
zDQ2eNe*tg#hh|$B%yfU$df*p95u(a8kvepjnM8$7=r75%^Fzp%B2B2f=wJ>^k$bq^
zO{SOwQa-{+W%iKVW?5P$dG!*k^&GtDT<V~=Xk!jhy7duk3{p|gtlVG~GmVu@d$a-*
z!wM8&Mx=~7Rurg0#>QW&99+hnB_7AVXPlVvGHkLcHO33aXNij%6GX6UUdTw-2;Lre
zr@ypV_#w_zsS;i9VPTN@Wl)sKlK+UVx}Pe^D?1-HxvrZ87Aewus2t{iG`SABUh+SO
z)Z$TN4f9d6BUnVuN5M<Z(~mwdCu!b^VcxHScZy8NKQIZS<9B<xt_bo>#Ox_^>cu+S
zGO*$gU--lhh?<f1lu3R8q%;;bJ!M|Mm$<BjdRbfy<=z2Y)<eB4E{NVDE^DIR78gZV
z-3cp6wf7Z?KLYQ}HfP>y9r`LLQoH!z<L9(0dsv_`7PnMdq#=IxT^OIkKm){lftco}
zK(-z<O>z;lbOH3w8KT*7!cGUB0p>*qHCv9Zhe6K-Z>drAtByYkuj7lu#iP@@9z*Nm
zNLw^hGdqHO0oa7;Q}BO)88mW^=)_;tkS)7}-D*(rIacP^s!%JXXf)|^np8|MM@;ZK
zv{jBYPgXj$7NT$Orn8OI*_4Yf6oPyZsL9XWf-eJ(%V#`<GdEj@bk66)0<$pBQ35xM
z!2QfGp1Vcz_q!XoH1DScpF><GS6c<Ihds;IJ-!JFLzc1ib&<%d2&CiP5eRIgE}jL0
zw8c|uZm0=(q`@B+J=oz>>OCcM!%~P-F87q(5)|n;g33PJ52R1qT*UEOaN1aM+$!|X
zAidTK;?D@ZxX&6bCXo&J8T%KQK)fb>iFO|W=sx!$ruih0eGM9MpNaQCx7H^$2fB|@
z)Zp770>hB{hr*HdUo=Z6a+;j26Q|NS;0YMVu(??DNCe3sO~S+h*l{LFmQl1bg5>6Z
zA;~mazoAK_64H(<l?0iq5!LhZ$kKGX*a<Gy30I&o@@H1{tR1p9zO5dG$HP%v)%&|$
z9ODKqMfJ-x+AADB0<QYoXcyNA){?=^H^W{FaHOiH#qA_sPm61u2#TO%w0t|4Op62P
zP?8xT)7)Xe(ieZH$Q&WY*eTQEi(`d;J?L{*Y5I$%#mxgP&|slSnsiD@E^aowjtptC
zj81lOzu_O?Mel08*c#qM25I5wCVtfMT&t=$)(YEp8A{s9?9aX7qNlYPN!0)b{GTX`
zhG=%|ND4!Q)g4Leb2?pBR6fU>fnw%Ux`1cH4dVthHPtW%N=4<~8>*;*Qc=5stBSf*
zIQ$M=Rn*{cMU}!lEx<>a=UOq(zU3kFOmeY-odMqc{7F?GJh$Yp4l_xoaGNk|xB{7^
zQ<x$67~rkzejgNKx}cGBO0%GawRMdmM@Q0dgFqHGoSL46Y@B7}+@UFHIiaeynvuV-
zISe(6n_<!RT0NiZ!Am7kk8ta>2QQUGttZ%%Hw3(v)vEx+-VbE#=43R$q8h#U5}K${
zvQaB-nG^N^2ix98ueMhq$A^-GC6XK}TOWQh!F$|P+m^;p4R``j(hYIyMD7+amj{%!
zK}Nv@{KfV{d(j6k>L7qawLYVB@u^e0Gv0g#mDFSLZuuI3E0NPwk9-Zlb08Td_YB8>
z%kvce+aCEEfF}=dl;>vrcYEY(03H`$>>;j0mAhPTKSvgiW-xP8XlHqz$A1^j@BZys
z-U|-~dEOAU5afof-fKuu9}s%I(em_<J_mI08PhQ^xJP}))T2IQ>QSFD^{CI7dU!LX
zGSQ<yW9reLG4<%rn0n+hrXKl>spt9xDCx<>e=k0VfSX>1?<EM2_D&^e<6pFw_R`Nz
z#xUkS{P};Swp5b)-qGImh>MNmGnYqr0)kE;px>v>+(tn5rE8hz0eb^{<swc%hy(&H
z;5Ik`A(9aI6aR4nLL@Pu-=|F^E#N`Vi4zbanSpX5^##cf@Rf@=0bxoo&;WYi1cXTU
zfPSAgk<!3@_>U71B7+0^Gp9Tbt_bM&X}<+zY@iEuYbri6DZoc4aRS03Ob+msi#P%K
z6v#~hZo%LLgtn>-==W(K0x~PWS1#fNgm+tJ2RtNeYkmb}en7uZ`vk}q2l&cGoPeAK
zvNEuONDo2Q2K4*1nX)192vd4V%I3gEBKph80sTI0>b57qS1#fN<U7dOXSm);Lfwoo
zUq@0r-mT4J_ZmBJLB}(MQ8oB1uV*+Wir7!ayR~mYa!vJaZK<o8e0JA!d3!{=40|n!
zuOJKiA%a(vyjB4J+*@mZ2p$RUoit-j^_p#hM$M<G=q?)6Ta%CRy7!QC0Di)UZlk@A
zBA>Vt4I{3^*u_93_Dm=ikMZIgpk*kWN3LIZ<obmND*?7I)RfIn@4$iQ0FLs=^$U+&
zzwlHdlh-5HFYwY#thPOJ{lfD&=ws9u6Y|Ygt3XxrIkaOlYX}mInjbd;oI`D0H7B$J
zoKF&O&4YvsxWSfI^DrBE5#dZDh8BGcBvJ~G5%)IQZoph`y@R;Gx3HMG!O9`)I<nFG
zABzs?H4;{W&iams&CR{KI3D;;=<0Q+D8J1lvnC8#AG^hVn<~{GaXp@=^xG6|)Z0e7
zOB7vqO?OEI-6cZT;4}n*On5hpAu^M^%=?k0?zO-KzzxiqY}<A5<fEiFx)D*c*{L<c
zZRy(|1a;%mMC6;x+>P+m$vgt6Hdarxmv*T46uLsQhf?VfRT71Jh$8j5bn0PKh*2+-
zx(`)^0W=tvaj59tKrB5}=`NNYrm_nw1se&QS&nVAgBe8j#MU)KcwJmb*v7hSJU$U|
zJH%E=<&<}THaPWt5dYD)`6R&njN6ULvKBr-o8N(fHn}tT3;l~gn~3Z;$?E=<NEMU5
zNp26V0?IMOe2X%-KLAu*=q(zj^%|@v#fuJ7h_%E>meL&}r#25FQ407rQEN#c6}CT2
zu2&-|Ro*!9F43b8;RWRDsL^|*?EeVR>*#~;Gqnf0-lk`m`avaxtU}vrI-ckeqQf=-
z9nEU_kZ2XqW^;&+u)3ZKB0F{z8<KjN`FIE)Oni~~KnU+i`Z8<iPny0a@!nQ@ji)UJ
zo)(QQMtDq?Nte0tKbYfRc?0k^f;*3626~7pXPZ=G0`Rm%h_RRrcZENfPm3Jb2(p)1
zRbL9(-Y2j<UwT@JT?@YaC84ROe@~+3(y*3237e!<g4wS~X)y<#m-)Rp2VIDb7k8!|
zLc%^Iw47>~zsrfWy=3EzbUyEH{vlGggF(jT--5zj{l_z{$kP03!wiUwcD!xUYL=#1
z1`*qk-WuyI@M<l44Xw>G&yr)exo^WKOz<uyh&D3+(ivVx2BTH{?~3_Hz&;6O2U*rG
zop2Tj;OQb8^es(v!Q(OcF|yA5pmHYz3lTxGYssItxglG=lxVbJTblBVqU?ce{FwoB
z1<ahCfwb8uNOmHC4FGa3rp(Pj%DYI(x=Zuuq@<ad5EX5Iq$h%qhqt-Hg(>cZ5UB`*
zxOkHfjf%L&m>Y_?&H!>QrWA3LkdpOoh{pxuh7Kqeo*{9WsoDk=AZvB2c2Bndz7Qxz
zd5y;4)(`Sv1ERG#IBLnew=HwEHivkzj9uo6K3~shHQ?8vFs8w;Qd#XKC`;xex+ca$
z0Q$6Bk>-0Hpnhvi+t1)k=G)SR8-FSu^gjN~s;6SGH;#VnZL2@<M^Uak={MfC*lK?P
zo-ZB8+u~9gPXU)p`R`cFc_;AZxc&aF<o=u3#7s1Ci}L4g0eS=OQGH<T0_{6M(*kG$
ze6+RsL_C%KrSKf^G}_M>XpQDq7Ms~-;H|FKir#=ST?TsCNvhK|&B#eHTKz{SFGTWn
zlFZ9FS@-@Ggj}3(A{selizQ>TrhQS83}ZQTNtZG1XOaIm<TaOJ?zGtG@~zNEy2D?U
zO^6q>>Ha44p8;>jfwGyF7GxSG!Qh+y1>);J1Lw%miH|8&)a!VSR)1(^SpPkdfm%+(
ze>4fauNU<%F9Akd#Pxerf7Fs)yvE-uS#x^<+(w488Ch3`Q~<mGH&#Ywl2+ku@XCBr
zGtj=X9lU*NXyo*ueO(R`qd3-X)`VHwie^=@A1ieX#gbf(GN-~3uA~>O0aAeRcMLO{
zrJ1{QUP{b5qLGi4VQSuB*ufJch3gGQW~($l+``u2&4>K{Ex=$R2dPs!8@7GrhwqYW
z`4cJSC5SW%S5e(5#+jgyRFgicNvDwXEJ!<Gyq!X}<^ZFJ(~yA9!?B4!vnnbU)j1eR
zIor@3i~w*AfvW*L3n2Ff9g{m9z-h#E<YAusdc*rqy*0T@03Y5Co!YNq5th&_rCNqw
z^>LF0GHAjj)XTpEdSNgXT5~`FCM!#s%`C;)4@aS@Nt!_$YKWg%wN^8zB7+hzP($?t
zY`YH;m7!YDqd+qs(j26^gZw_0Ia!=~vrf2PaR%#&Fkik*FeXd0sQE0KzRWOGjtbza
ztGH3Rij7Q{uHr`F_$Sj*wkgt4WbQ;GgG<~b*f?VFmYb!4Jp-&IN_&gsgTEZp%80+j
zoehdkY%z3k_L2jnb*R1)ug~5w18KoL8hWwlnyK@A9xl!E0d#ZHu`L#Dk3go<cCkoJ
zc@DUA3X3h$P6AHtmx#W*fKmIUg8fDe+AkCBvv!5Li{*k3B7QyWZ>|u|Hv{h^4<g+!
zy0u}~u}&+9tsnWB_gnoTRk{ym$l9t2!rcd74UWgjbu=y0YL!N4nT5y=>qsBTfBfnw
zdl8N%LwMew^<@M#DCMQ&((i!tztCeKVOt0`YJ!r?7R?jS1w~o((eg8^I>d*pI$Nyz
z6jWDMoh@bm4mhoNyV$MCZX89VYbJCrsKKpYXu)kBC_&Bp11^IzPi1v(wK6sRy<wq`
zLZ}QY+hka|7F?U7*=(0F=N@306LcQ-mYKIlAX$$`Aatf_;9A6$%psis-tsf6Ts2T1
z=aIAxEVH?g|B3p4t_kPq5%>cA@y$RKAUfQkfjQSgr*xib!;L5NR3xQ659X}_j37_|
zU=@JkGyj_u8t5W1!DbwT>dMl@I3JWEgng^(7f4giUsqNohasXfOKoe?aF0~qmXbDp
z!8E$C>_%~IO`^*y4yG!t?7vHE1n*!+)mZdM)Hxwse)u{h<S0EFiyq@4M!8F4S?O&D
z-kAn#qO*p3@FZJoWAD+{V$LqKpHbZAe^yX=)dlr|x2@4qk8zAMcS4^;Sw}xM1gsjt
zQ#Uff2rg$aQl%I{&A-|KC)GqTFl9=WrC&ejl!xIY)h3Vm#H61|l_I_mye0THvpKZ#
z>p1Obg`S$}Br4O)?goz8k074eyE3xlW?(WOH?rQmu!PF`Y%=fyT?sfJfY#4Z>lUK*
zF`Z`#;`uYH^01ptty_rJ$uBCcTZq;}iHX)NMeF|nR~6GzD&{xfEJf=JOYwsivYDl5
zZTlfXN<nsA85voMaeoIzlmBWsECmYFpWT%dBZ@6QM~YFYGr@N9Gpp`nF<|Z-QM}Vj
zA;oh<@rA&P7wAl^-cX;Yj3(ccfT2F4q1uat#hN(mYE?DRa44a@Ncb=;p}j~*-5WAZ
zdoj&*z>C*tCiIMdkr?jOf*;XRK@q%G=UE;u+K&`0wGb3hyThV_A}V?x3d{Y7pzKEs
z1lmI8;>9+-mfq5ibD76A=VKJs*?t9VyKvfKcH=BY<}?o?Z&#*w=QKv9Fdrc*ms6PZ
zmjQ78(jNc@j;w!zqT;{w0I({$ZB=bWk0MJ@(_%D|pIOzp4n*!i(hP9R-Una@fZ|e3
zNMlzI1Ja|EMT4t1KgFBh6bu)!5dFkrp*+=n^d2x*7V9S#bG?ENgnIlJX_?)HvfGO)
zBr6{Azi422+e7`}G|C<*vL|Wk>MlGrAtZaC$nF59s?7|P+L}TkxBRORWj4Ho2U3Db
z^!8CAq*7Dg9=6^o3PGbCC5?6yMaW*vC=q#<xXkcI3!d|8s5M+E_%*<lN>_?X&jM#N
zzDoPc+8M1*YLT3Yz7Am=6sO{UXheppWk%LnO{HA`>nhH{rr<xX--JDYn`Z%|lW1Sv
zVk_#x13pJm)NAm7lK_ec`~hGp0UOho%>arU=&ZDCwNGecQ4!US&`}JAqri0U&~(>`
z=@NBbIE4K0nZA0MzlyQ05o4Ty2xTmV=e`~?)<j943A{5)@L#MZ*`gx}L~G`ha*$;g
zmdq&5yHNMYVNw-9rZpkWjo?pIeX^(?)LGG6Y1R2mt5SWksP-lVD%BNUcYjFr8zucp
z;HsW)lzM&&cyamvt47eTKQ`o6)7gj1+AlnRk$vrVppEPk|6{cHkXs2)S}!3g+72F9
z%eEG?*qv^Y`4?he*0KFayV>G8GTP1z#d4?Fd`f0+(RQMajp2HweSIy*YxJB$s^Wf#
z!8a8zFBZG__;P|64zi;|lpdq!3p8Zu%|cljq8tFU7tj5iN4TBei|2mMdV;<6=g~N~
zeHK)G<R8WNVN@T!@fK6xuJWJTaeaAPz;_2MWN-_tPb<V3y-Sj?xqp=$v7BNo{~_D&
z2z<=do6m0JtL@|&-v9)ZVD#hTzTUD1h=}%%K}_FfI0cI7Oy=CP>a&)5$UkN@`tor<
zf6jS;+&mH{>K}6${Wc}y_-X-3OR-O5;Ct|W8w0Tl&f-6}M*0wtg5kR_4YBkE$`yr*
zCzC$E;-AsCJu1n{XENu^Do20)0eG%8B!kh94;sg{o(5UveDJ~QApENpHWvTL<CkB1
zp_uB(b6y8Sjyx;0H$Hfj@^Ia;jQdmncE}idGSPjt1rq&Q?*r%(Jk9A?;g70E@!JJ9
z4<SAB(32cOdgP%eeFz!lwfPos&(?9s=k~6}e|;Wl^VQ$piHi^;FVc^GmoDZZ#hdu^
z&c(m*F`+(0w8!}1L<NsBDF(fp6Wl^@GB`OU0)7VE=_X(wsO5|x(`Xm&l+TC7oS(8V
z2s-I>U}tMKyw+LP7aBSCV6buSg3Gy_Z`-4rbm}0Z+leoQO3uI@(8q}a9PKP9LRM#8
zJ2;thM;CaG!w<6iovrvE>%?D%%5nAv*$4YJ^#SQ(vjzmm9EL*%otNd?7Jjbio&5qE
z{;jAe=S}k*RPy>4VrJzW5+vYXPy@(e(}Vm8{`;Y=bHrQ)vPA!l)c;dqkmmo21^e7&
znKNVepeJ;`RWGGA8|TORnRr^^R>S<*wKU4_I=w-D>@3os(Rls**m$P@t?_#Ku{$l`
zrd0suF0*ca>|Un3G@g);DuoXkzQJe!PPB#F8~A1b>L|hSTU(LU|0t^_&iWZdhQCH9
zAOT76#_^NZPP`y|go-{H2snw>r_45|KPZzeaa8{tREyI@5U=4IT?j12qGIu`sI0Cq
ztfP*!9d)Gbs3UDh9cer2NZZjz+KxWbcJz_9BS+ef9BDgpr0u99ZMU~KIM-mq#*0-5
zt_2t)=hVJ9^Gi6spXby*{iL3s=hVJhQbArn&#8U21qt|hPVK8BNP_=QaPcMRdgM8^
zudX0zelBl)^#sZEmlLTkNWP!v)V>CS1pN(QV_zddy8C%f?Q1MZssBE*P84LYpXby*
zJgEmh6@H#m`|zY5kg<NAQ~UIjdVZc$`}C7~ex6hN^pkr2TPR1rXWGwmYG0O#c3{l%
z^PJj;C-uN>wx8bV!;^YI=KFb0?bA={`FT$5(@*O8c~0%qPwM%3PVLiA>iKz2?bA={
z`FT$5>n*;#!_RYSpMFx$&vR-Yp40=uKI0OXdyoaFCeNnbL+G6~c{c4Hz8j!X%j+(0
zg5=urQip*f8CRQU)9%YzZ~AQ7eFa(6;eoVoYr=;pM}luB?Nyrx(!S>i8nvIsf8Q=z
z&Rd%Y(!T14{t)N(4nua&T2Rsg(rGca6%dJC8H&Bc@bMB!bZ5EH;`Tm<gu3?3Jo*$B
zjCc7P@Zz{5$JLG;S37f|l;y~AwG$5_mm|m3jvQAza$N1makV4I)s7rjJ91p@JP!I8
zu#L_54YlIjfx4@#^g7EC&P2El;Vguk5za=q8{zE;_amHx@B@T%5#EJx9>SFf=OcUs
z;T;IKAiNXd3kdH*cmUx7gdZYYh;U_V!?+vaxSqTWk9@!vBiw>;3Bnf;-h=P}!lej5
zM7Rv$Hwf=V_zS}22)k$E=?sK}5UxZx8sU8iS0Q~B!tvmLKf*_WS0UVr@BxG`B3zB|
zEre?j9!0no;c<iyBK!^ELkN3<-#UbY5k8D?48lhc^1yFB!UH8ZkwIA04M$%HUqX%j
z2VoZa<HrzQRfff0rMF&}{+*1Cz=NIeQWS)9(D^@!umwhhO$h%p95ZZ$-y{AhgtZ15
z#ukKA;cHJLyd8Giif{?SXArJNxDDas2)85Lfp7=Hmk~aT@EwFZ5e@_Y=MY|na2LYs
z5$;Af5#@Ux;dJ0HAe@hI55lDgUu1~%mk^GI{q`bU3w$5KClJ1ja3{i75Wb4=RfO*%
zd=25}2wz9|Bf|X%OJJ`z5SAf4fba^0Zz4R2aq=yMzau<|kT;(XA&f!zHo`gx-$9s+
z@G!!b2;W7RkMKQ&B?#X~*ckjiK$wB>2*NysA0j;01(QL9ucCgAB5a5H`557D)Xygf
z3-j>~M}#9$Kc69dbSR#YM_38_e~z#j?C=G`hfyzIBK#KdUm^VH3fwP6_zC2EgYY`&
z@h!ryI^*3<2seP=352~+{_hZ;>5hjB5a#qVjPDV)M)(85KL!}aj|lgJ-%kinB41@?
zjB^F_or%x@J_})S1>0YYGY@iZNBBisw!auBdlcJWjMEw6JcI)g&PN!N%k~%Jd<Xx#
zlQ{g~E`-^z^8$o-p!^FFp2WQ7ZiHtrTrNU*GxS=F@O8{|mLTljhV3uLIXr^xFUI*A
zbcQpgJ?BJyU|Y+%0UT^+7+{w(16oEo;{m&!TkzlG?7|4`b?yZm?F{B<?W{!!e9oJ&
zbBxmp^CQ2LQp`Eg9C&)HGYst_&UqF515PiLJ>L0g7zR~mGVF1Q(+91frt>UpUd#Cm
zC93VL8I8W#X$$KnIJ=-@T_+PQvYzua>{;Kr8@U=dQ!mFP*6D=*jhth!cVp)$<R&_I
zL7yaNJuH#z6qaHu(@BTbQk+*%qEu%LEZ5ZOhx%^joXx`auagFe&7J39;dEyL{3yeD
z0p)GsoJF0tboxMIE9Z5TrM1%s-jeD39>kW6vk>KK<IF`_vYoxCwH#+XY@F*njX6VG
zrxj%7Id8$r`ObEfuAP$vS?!%ZXm171nN~O{b6!E-4h}!HQRK{rl#b3c*kq64d<8Kt
z8cx?s(MApD9VoWfaJ~k%&v2FuK?60M6R^N5cvcbxe${X~VhDN7aBLL$b;IF^w;wOU
zLhy#+%tUa&a8@9A({P?Z@Rs51MR3q?K16WHaNb98-!_~d5WIuw9n5{$aOxv?*Kpb(
zcn?ozL+|$uXI25-IN&@3@iP&A3d7Dqcn7L|Hp10tR<|RJA4E3}I5$Jvxd`7!_IU`e
zhN<TxOaPxd5FRh58wVT*1;2~&Fx~=$1JQgJA{>qQyAgIn$rd5p4*rV~UIn>J5dHxE
z_aIygK1&fs!AQ#xZh>Roi!d7L%MngPDOMmH33phDun{bLAHvUpuR^#8?r=ZChQO;3
zUV*BA0AXLu&Q~KWM+L7zxE$qJi|_>EA4GT__(KS5!LipNe4_)05yYd;9znPabn6lR
zgYrCzum~=)0pTZbp8p`+P{?5fc7(o<Biw}g+=%cp&^>{0CEW2zgn1};Wu?p62Reqy
zkUJCMD{wG|1L4%O5Ke{tW+QwC<+~l>&5$z(VLepsT!hzxZ)Igor!&%LBK#G4&qBBw
z@v{*&8qIt)ohv0@O{XQgi^|FdPCeAaOoWf1LC!*WPbbnhaLyyFtW0!nK$Dn>u<n&i
zPju2@uh|Im5Pv&y#Lq#v4tmZ-_$~Zp9>Txi_LY?>&iP#CPjTKtQ<;VErefw#aTX)I
z9btWRZ*vePz+vYiYz;flLwFGOn~yLB^?nD!4XD365jKY%?m{>i_FRB)GxS-Aup#7E
zR;D?J;TJOzzK+H>3*j-5m*(6Kzr7v!OxSl0!v4^+va*H4H@3_~ST%t3EgZ9)@tMwi
z*k>lf)zE(y!b{NXXCti4B%e&@G4P**urcg57hx&ta~{HLM^o=i=MR+U4ur|@?>iB0
zK)bjL;c3x3)42-zECl{3^52c{7vx)nupazsF~T2V-z5;{<IT-z^)(W?Zt1?7Ghq7-
zbcJ!bC>$oG4Fl+KVJD-0kI^?7uG!xJv}bfi|Gw&Hf^R~mYc*-@DHQ<s_C*FyKK@;f
zKfNHgpM=M__Kib~+sib2br2CR-y#u}_+Nvu@h;clw-7qt!ttY=+AzP{sS5$oP7gFi
z$LSA42Ap+ppG4;q7#Y1@chpIx={$^nzS45mGQd>*Ym~tC=^XH?mEbz&j>q8eXe~s2
zk&Gy#b~5$<lCZb-n_%GjiX>c7GS2>EAfmqh5Fj)<{ymbMkKh{U2jOU@!%Zg3nOzD>
z=O%PbE@w61D5pDwx}8B;9O*v7f3M?3#Y8)gqVSG0294Y2BxG`=`=%qy5s%b(=UF&S
z4QB%^c!@I>|7$uAK~^oN5S3Qj`3B{#<Gc&b3C_(ZeO+fDoTi@B1C;fhZLmZGXDhfh
zbdI9Z8#x}hd}AjA9aExH3vQm|^g&^golID?iSsxdFU9cfhUr`hW*wHf)K%Y{R|5lY
z%dv=TB(ULM0XDeB#00ND7R}I=DM-M-3xZua=0c<-#3n))SDs$@H%{~~pk3RWG-8_H
z4`aDH2$Jb<0F7KhLGt~R=rbjP1pNhM*j143r~s~g+};>)@ZChG>1O^3H5+(cz0EHn
zv*9SbPReYF%4pOThI92Z>1K^yVU3k3igEPQa$(r$PZZcSz@$@wD_>O{2)KHhlP-aS
zUpwh~!!^)cgGeKmZ|-$nYO=0f-UM&#JXqE>RF%w$^~QF)4EQizQolF$EXy-o<1yY?
z7wXJ)g~ol}*fvydq{ba@Y=6|IYqZ9ru_MtNeWUA2^8}>F@cVr$UE|DyHBk>9R?am7
z8*$f+#P>O_lRX=6+|*G(CYyZKYQVp|6l6D=^xFjg8FUb?DW-{HCi<^OFYUTT%Ae+s
zCNfQsO#d<}d7B{l{t9%4u1Z0I{sriPT(bn}?q5Z++XX3&<GoPVTtNo=e`Ly?f>iiV
z6Ime0SpUTSK$b}PCi(MOgr%bOO@1l)z2>#ht<ry*^|3<gZ@#~z49H4B?(l!jl=}p^
z)4v%Vm1~tCclkHd7w;EjfuCDRt|~zm`kz3Pay=l(-TvnifvlE=@?zBWdo|Il=qGM3
zm$E+E*tOQ2hMM=SKm&F?Z2k$77{bS0_gEWh!}hybDa))4^^wp2G^y^jwgC3}+jar6
zT#$gjKmB)wrEGs4bzLb)qQ3)?`>bXOYyjuc-Mdx^lIbr*XXd(JkbM7#=ull%){~GE
z^t;h;T@P55$kW|_9sOptAf^6}1whsaGT8qPYjUk175*pao)21E!C<U^KZaq~L)K0p
zll&tpfUL9FDsJ-6Yy;$BYb1(L>7Pms9<^E`Wxl^9>uZC>mb%#gGKKy}kd^)<s<Y8z
zf4tUTgRGwrWJBy-1AuJO+jxyP$NokhPiwr<=2)rEtr~B*IaaFl8I3pC94pneP2=@9
zs~X!b+HF;CvcoEY*d4No>3Y`UHqjCPB0B0$G4L@XW&q}pLD!dNd>vF#3v?E)uLU;z
z8&Q7OH-dQmEmDAdD@ee<o6Y06APIgx<m5UbNTUBK7WSm{2WkF%47;wM#G$!INssVR
zoa<+kaN~0Hv#;5%-_72XEqwkI*zogtI@e!je<biVKTQyN_=wd=M$CozV+|j(yUv<S
zi}@UmHVJRXq@(z&njxXSRE&1P1{UA*==FEYM@mCM68%A{(nyee|JERo#*)9(Ka@zK
z)e_7G`}<?i*GNU|t1MrVGP$e4*w}$==gFZe7^}LirW&s|Hui~3q^D`T?%3Gb^t0v~
zPZ*1$Q8BkS8=~Cai71MXMR8?Vgkw@*=mb|w>lP%(O}z0Mj3MGx*wSVHnkk6apU8%v
zB~%=9>G^JNJNyqMxY}CV0r<1oU*<<<ZWo!kz0T}=F&lIR)?8*zb9J<SW#)5q%uYJ<
zO%ztFGavQ?DG?FaYd=cw?riO4=1f;lYj9m;7W&>gvvBGYnYph}1^lb&mHi|o!Jo~}
zrBska{~D&0S(k%Z8p_4uxV@u+xxLiR_Z{7=zhxjMrfe{XTm!7nC|QIJ(vn4uOSR<Z
zvyf%5AOU~!6+ngvlHhMl*S^eJ3l~fD|IOwwRFEY9Hd=6)+~!I)5)IRJg~f+!{0FJ)
zNb49nKO=7Rm=PG3Bw?k0FKcp~w8ypn^BjD~i<AxiJX(2zAe;S<k!+$=zz%;}XCT)~
z${v48K9K7KdCk9>m2kZvhx|_wxxv~D1&;Xlvow=M&M|*SPM~fSvg7{y$Zd)sr~Ipk
zOtrQl&!0w(M-aHZkK=!h@1eTeJ4GzIOQNp^>|4MB-z26C<hyRM>Y_jJUqV^aL|MbX
zi1j^P5U(oJZ6Yh+53+loAxMJ1*H9pps?{03AJ}YXT5my6Oal6jOxJAdDzJ`|dBz;c
zqw8+2AYT8amm$kMp$hohunEl<ZV6DEClxV0F{CB9?y?>tA898GH6LjwcWXXxH$>J&
zLdABH3Tn5Pa~HR_i+B~g7`K<5Otj1OhIJeS&iq1Dtn;nRRChyn%h`_#vz-8kQS9Nj
zLGZS<2c(!(y>BHo;G}A-;W{EO0BFQ-ow`1>u7R2jr!xK{i&HYrn+{uDK<t;P(t9FI
zPoj=mzk(emHPbjB{8)G<4dn1yWOM8>Z$-Z3zBFW!O}L5JuA|N22L+gks2X(0q)u=&
zvv1T+M40@S{J>C&c#-f!)o=>#4VFepc70ji?R}M8*gYjZk5SkhF3Dy+*s#eBSK`$~
z!=r@D^|XviOraX)6;VG!i&Tyn8cw-p9KI8*;*F-8VKMWDD6>zP(+yGVx1|tBpcc(e
zV*oI3j2aFabp0$e!SL2T^CrCji<mp2H~`!05RuI31|mc)_SAq2s0s%JbEgoppwFp-
zrk&2iD&qz6wqHQ@=2u)XO5;XSTQnByoQvm`X01lxy#~VoA{K%=nH>vY&K6SG;;p}3
zq)B(<pV)w>wIDPyQVZMDW0XMD44YcgXjsgeATOXWyM%d9h^pp2A&R_>r0pn#ecUD0
zw-l63C=C&8yrKnQnk$*51uUhdKiS{8IQ35DwA(%@@kY}5%Yj_sV+QkVnA;UT;YQmb
zQEd172*4FWm@M2Xd@N3CdrBE8@foSlqh$7#f~3+QI2I;T`k&btp2K#PbP6rkJ{=H|
z6^Ko~A5M!1f!QVN#8gf;>|cdYJV(RgIidIz7DmxP$QTOY{fi`5A>x;L#7fN)Lqe8$
zL<l<{BucqnLxtP-dc<OVv#Q~TFlvP26DUN{NZr~iJnZIEkFz8zC2wli_SNtgG^&mt
zfgaOdrDz%k0pBlhMyeQewIC^1PMmDmYdq|_q5ISDGgq3lYI`_!msXt?(W=v=Rj1D8
zz?3e8M$#~LI=MC{;`Y37uH1-RxvDQ{agZIrCi8s|HJ5LDY$~$>%F}6^Xo!{+Xl^1w
zORh7_&FrdLa$#X^rb(OA=gg<*B(S>lDm$QyHAp#djU*^7jbl)R0}m1hR*hqD6dQ+;
zG#u8qcEr-N&56h*&Ws3YUaWten9QCd1am@ZJsV5UO8u=B;OB%vMk?QMVLczqNji8R
zB-tj#duN#UrU>3DQSsI=UEA6m%Z8GImjZ8zrOO&g+gS7?wlw{($V+;=BR2b}Wa;gW
zDB~urf>iT>qKr)rQ65l~a)<tarW}Jwg8f*u@SFll)eatu7WgxCuSgXB(k32{X3Z$~
zdm>ugk8^4JNfm$P_17ErCSjJLn%)jcVEwQ`wAx<^aF!|V!6!kQuxCTWNU_y!=wfbC
zU0V!Br{s4rSR+FEV0p>hCKsDa$~fHpd`kKkbZQ|m_2$-~R?(^FuMEQ(scp~<&22)T
z+6``PZg+7-2a6Um#jPZ^4NG)KNOX%tBWXYLHCB}S!<3DMGWm(iBvG337Q%^IPdq`D
zto3YD4MO`+EVNgk(pbY%5(R7R)0OtG4*~NGt$ovsAWWa^HhaS@RR^5xmM-&e_Fu_v
zPF|9~C;;3<!8fs+Y2ub{h8qDPcsb0V;Z*5XQ{AkQ^bTO0`X3UeNhS;%f@LerNPBYt
z2CA1yYmWu38mI&}njUR$7}i&Aa}^Sj<Ke(SxZY0Yyc94Sb}}!q0OtD7NUFh!#E%x+
zw*3;zME^zvHxHYPBSg)Oq~ln{;!~0+m|@mW)f^EKo^Sw`GVUEFgw!tu&x}4Oom583
zRKOdhk4oLx0TfTDwqPV(#-g4TQ=3<ju?z}lUD99AEJxxw7vp6@09YEsIK%#1)sBpH
z|EMv|?Y#zsHMrJkTE;#A-(KBJmK#P1LRj@euh{HoRJZY}&2A%=D^5$nXgN1n;Nga9
zu3s(t5XFmKezmyEYBU{#ZqoIIW&avZ`9e}?u`iUxnqCS+xN6yU)27gXtqKTpH({#+
zObe%u8;<xosv~du@D)JLSauLOl)N)q-g5FfZrP*5DaXU|j%#_hVhnTHwtZ(<o*g02
z7I{We(NI`4%`1J+T+D=&52ty>hijoVBT@RE_uyuBbFZ{788(}%crG^VbT3D&Wa*#M
zWm`8z`k@xWI92+mmJ+XqN(JkoFH2|O(AP#7rC$wAQb%C1Vi%}fGM^|EIDIG+Wm3^m
zB}#J%df8Q@bx6vkk`hM8M-Wa>gz({{t`KmKnz??@vX8-2cK1XPO#TN$BVhJX$)BOm
z*L2BTZP-hrq*-&Z0hs1V;kv@US9rBv7z@`)g8=Y{?_2|S@~j2OIK4kn<1~aMwV;oU
z@Qd+#ATgP{tcajnBy*P)F!y1Te}^fok$%yJYX)nSpWBy4(uN8kdmZ7xm;5UZd!1?y
zFFV5FX;h!}ic`(uHHREh>vG)PFW<v3lI+evUQ+sGwE#Dc`H0}4uQ<OHq1#@i+cRht
z)?TICX)H;seWIJ{R`$v5Bh0I<{eE@<siOTGe$F$}i<%>1A*LzTA^#R8x@b5BXQc9F
z^*}^RzNsECIUwJZ|DXAmG2c^E_d`Fsjno~*fRFmQy>6r*2y^`{LK_8ZZGMZ;=C_bG
zuJlkT{)ot@V4d%eh<ty9@)d^j{S}c<!8+ex5&8ZK<(nMNcQzuQf_1*L5&6!B^6~x8
z%G&26@+ny7J0Fqnd??>n;e7u@<WsQD_fJH=e?s{hWQ63IvDLM!V4cs5t*%`&R@d%;
za6UUCpMrHhJ0hPQ%C{h#FDfFRf_1*Ah<s6@eEY)rJQ4X6tn+yy@_9n}&V}<uN90qm
z&KDh#FIwlzP<7yo$fIDL#}|>ur}G$1gXoD}(YAdlTBRBaqNOue1BOoz7(IG`s-bP)
z!L}<yOv8vSzhT4>(^%&?orxBZVcPFA2QRP!S%ub+%qc!#&I6iYV*((nCnL2pHh-+v
z3Q6J2Q6orfx|qXiThrtVE0S}12_oYyH{Fq-hI0zZ6CrBsZ6{0U)Gsh!veao-st7L-
z;i^Bkie#f$CPr3AIXFt63MnakV$|v;67eN@tGgV7aB^YwFu9YG${B;zQx0p4^bO2{
zzG%4UpTcq}FeBw^!>UlRQ_<_1+>mE+`H@}gYB}m+#_^&?`X}TA8F$KQNJa_|j;w`B
zh>@X`T4g$|Lh|p|Nf-x^(_n&(1956xs29TjF_JEU4ef(c@8&7QtMT|?tc=GpjvkDa
zc@<}H_MuqW?2&Qzki@Iu?;W)!s@)AVhlN?{+n5e$7$vda73$1!n0wiq;?f_7D3r)P
z5=#YBMu#A60=sb>l}Sx20D03mx&n=CH;bc@)A@*0%2W*BIdMEoM5Z|OtoG`-vq-?t
z?fo4<4W0;kn862c76U{XN#&)WEcVF=b{*o?e6QFii=XbOJtRteB1hX2ANO{XD{=%D
zLtKx!5aMMXD3gvZ!YuU#IF#L0;-SD)u&%+K%cL2A?DlHN<W)i?u)QM!Wuv3LBP$%)
zPAPP_!cw!D4w8x1D{^G~I1C@RI|`gRjgy46PDbk6oZy!zf`%ASL-1QYt6{0g&Wc86
ztX&*fR?lj>I<laRr=Hy$&Mq=i`xgQkr7}D)0`O>u8~LfrX`m||&b~5IWx7`Ba957M
zq#5+3U(~wNi|SV;{Y9-S7xb1ya#3r^-()SRO8UEGVoCpy#iQnZHk!Os|G=!kJ}XPo
z)Eq87&k0fL;&y<~N7Fk}f2QmGt>V?3JX%U9${V6QH0*@=g8h}3IZV9jLTmVyS0?)>
zSjk^`C0-2nwantwEK|cju@nkcrTEq>D`HXQxG+ZLb91`s-<Vq4#qlP$_mhQpalG)}
zcc~=s7$tca{k9}tVD7^M7ANDDwT7{!)E!8B7fol!wlRz*;&$y_gta%xaz!ms3e*xs
zys3kW+GV7QMS^OT0{!UxNj3Y!2wnLc4W6bWC)s=H8nL44Dr+QmTV{9Zzf-OqgAXtF
zP)nz*8qm>fVO1DtDEPrM<Y!jB2yShJTMLUTK67Ap7c4FCEgP22EX}zMrqS4WJQS5%
zsac@&mtR|o%$75R>)(K`Mqbl0^oyU!*6SWk%$v>pnN?$9xHhsk^NEM6O%zAgo1b_@
z`ha{{aem_Ait}OcYm2V*GwB(}AHYjPIM#Iqi?*ZMVDnVs`@e}-%=AaOtbau22f&To
z4JKmnOO*dQ!*7zI$y*>W@_t7rX?+q)`<~Lo4K=Y@^$gXN&8bgf7a|sF%HHiKYNu#G
zdu~`;pGilFH~i+s4@Q0O5cvU1Np58+Zf4a7aMpZTs_u}j#mk^T{%Xk8Iqo4YJAKc}
zPTzjwX>8RB-+mByQZS7F1iY>I%yY8E*z6E2z%y=pmuy$=A}+0Bx9~d+yr2@6%aQfZ
zUWr`rHX;+z$F-Gx#n)wDvDG_>+{{RRL%=>Dl%o-uQ$qG{N&!~^FTBfErKF)c@LdR%
zGu$1_0Z~il<83P)@KED)L=Tp?6p0z~ZemMvq}2soD(@I&Ab7<hv~^`6N80yph{!L;
z<PtgPhtY>a7V-&ROk6Ca@Vkl2NT=|Rh>OKygudy!uoyp1YsbnW@_OJoQUh_KQT%&&
zap`=mmMYR<Jk&P?O|NAI+$2k_d%l61vXO@ffpef6V7hLyICUF8omyrOIes?R)VVN_
zrC`nya@7<V=SFBiNuOaAXpUFyx=GtmyB=?oVTNkKH&i$5$!cO|<avVN=@p$eYo*J=
z-c~0cw&ZRjD5&HWC|kZL>J>$wCoalHi?Yu9z@_~}i*EM-??~^m96xtHer39}N}nv)
zT7H19J3ItsEuWuLKx>JS`VjgjD^{`xn?d)TTB{25r&gT*cTjigjQHYw{M!Kr1xzU^
z1?D<}hG29a7NvY5)U9;L!^Pa#_Q;;-=kBVtBv^QrreU82pTkqO@Hjpj3V&0z)rF39
zk0!g8jPbMT`@8Nyyjj+DBZC25*D@HGdof|jKE#iLKHUzI;IfjV2sQ%m{yl)rn(bni
zse`|mcOHk}xs%*7w^DtY5@+;qP}~yUnOlV9F0{uSO@gf;`I&R=YI|%alZz?DHXre^
z7WK=^90ak?$p&Y@qXb^9)9{%I*7@Edq2M<8-^kc;3|=kxoa;*@<$Z)Il-_KYoI`B{
zE`5RZyqrZP9R)rt2H6$97<j=Rl(Q{IFYACveHxKHi?rzN;L0kP!YaVS%to)Pb;<>?
zc#M<%D|P6@ZnTe_PPx6*H?Jd_mvvNlSL)2=;S&7^^95C+qoU#oNS6{Fl@cX?94gVr
zQlg2#Rf#?o@}0nQmujvBnyV_!7b3CwCwNwQvnGI-%WnyUDm$DMF1<ly^s4&zlJy;h
zLYVVdzGIrAO7k(RR={)n$*?+)ZTVg>>i3J#vpd7Xe?~h4UOWP1rT@Sy%mutmR*Cr1
zt1xRa7i|HnbwE2e^Qy|Ot$FukmU~J;b00TsUIk5Ij;49?Bx_}WYl@ML?b*Uw{}tT^
z(Yb?lbb{ts`b`kr9=ZlS$amy6`oe5{^$lvPFXWneav)r(2_|R;W)<ge9p$tmPqw`L
zpP_o>#3N6(y(R$9-J!E#G?ZVC?3NeGKH8@sC_5Y>7!p4$fy6nI|CCNaw=F-jYDgg@
zvX=q{dntTSUiE6g*<VxuZ<h%ZUkTN6xC>}LE=Q}!kznNh8Lg~(K=CuOH?b$aBZ_7>
zhv)Q#BbaxJW{p0FXH5YUjSnE+4wHNHE-C7r#Q%chYWyYQoCTW;qBs`(1-!r1=|bV2
zP~OB*vRPYa!C2K;Zi-RfEh6O-6p(G}Hq6#8i-^yNh#wabU!vntTZOko#FK}r!M&Jv
zTOH(R;E*PGP#52<dMjj4P|%(YzJNXRFAe7yOMD&_M>=#iwgS&i#GZoHQ8=2Vg=aKV
zI)my3P>EMzK5W{`ZG5WSg{G2fR?Wf+Q@M>TwluyBxs5H=J|B2nxf&29_~l=jMsQ~m
zh7irF5*2KEqb>)Z;tvr290-cv0MOuTIP%+?>UC)r15LEQf<4Hg9IuvC?^qC)Esg0U
zDzQc|Dle%(u`*P#_JOrJZ_H3<H?4++6O+XrEyNz`^uCokc*)~#fwf1@IrnJZJHi8W
zNl?2kC}`@tphA8++3t~2en<ST;xOLi8{kJ^RO>}aA4a@OU%^=wyMX72T6-n^H{$1+
zU*V&_g%z(IkIh%9hHrr8h~_WLC5Ky&qq8@%VHVE-<atea>_cSETUaz`Jo^MJ&+2OE
zSEedO2Fq}NQUuFCj`*V>DCUK$`0oHL1<(yZ0m(|X1Dg&E!+bDSWrz0in}EJgb;~aI
zd{7((S$Q8##5Ud(1azj`q%m+(S;pa}e4M7C-xdkY0Bagtf3A*ay<MDd8e;m}Qw>a1
z2a}0WwndkQT*~W5h<)G!u^i=;*z5?g&s2*o-w=`a!wd3OtGq8F@6Qo=<KmP}Sln8{
z|5lsDEz~qrw58Atz>CR@!mA?Ut6Tb6%=OJwF=(YGI49;tbk#&iQ$1&@c=X>edH%ha
z%peDst#eNTmy0h=-Mk?a`#oG?#vr7pxp_}^HgMSqFq?~nwzwFRE`I+kQU-jLghy?(
z(BzQNmTniM7MqAT1)}2LK-BIBG|?TJQa4f83>mrFEr#2)L5>_5L)r-U`agpHjHc)K
z%Icj43AqCUAjJ>ICi2Uc1LXqMfQMzrV!$yA-CVburDa!ZV%63M-U<gc4_4~PYfQz#
ztQv{-qXzJU9Keepe2~0??medP(-@@_IAnaltKJVFwUqZP%p)A${~{{uW<e+X1oQz^
zoJxI&Xg)ix54S*C*HfHpp}d25?0Jk^VD^#)GcLuu@;>KD$iqnQ9E?{b9IMnbx<H3Z
zVfW)B5%DT0F6Am*us%Pd422)*0)3{sK5~Tbi@DT3<MrSm+iV?;ydPP)m&hv?PH92I
zp$30uRbP}cUuH6w$Yqe%z&~4xUQ2c^`9iK7-hDA^%LZus({LBDg~F460WQW+c<Wz*
zi!~H}6LB#|9eHrP_iv`rUM$_fq-+~2%fY;PZeDBltD(%$&OnuZiT$(owAnSXn`<xm
z{<gL-+C;1c3}eji+$;dqBv7@TI_gHloF!!YnXniMb&!zrgiJ9+ZofZ}a1060A&x%1
zP@?xBx_o+VCD-{Lk98p#y@6}VA-t@&EUu19q5m4?o3wt-KzCT^<U@hw`*nOF;?Jmf
z*Al$4R<&5JUSLF{@CQvsF-X!R@_8<Nn6j3V1W%D)0Sg8-cZ-^h{xl(ft!6L`49bzN
zN8!TTblx!IBb2Qf-&a#H##k@Eb(-;H+45ch#<InuQ1dUyX~(Bcc9D!;_lD55WkTV6
zt$=nrF_M%-1mZoDC^QD)QskGaOAA+B=lPc?HN0AlbPPT@JW(*!iNXX3C|jtBu0sKh
zc3j4N2{Ki`MZ)VDkhMF8gl)_(_1j4-)cy=AvOt%W6*L(Hx(g}qr{h^ct5iJwj`hPq
zL)Xs)O{LAKD9U7ZRi2^KXnKyDnsZ_F1*TWToonkzbkp+Vb4+5(!D7ovP}L~^P?vQU
zI3|LC9H+y^@mkVFHkPFr-0}iT8=kcga5-}8ww^Vt92Tu*m1@6zLn(lE-W=VRYUj0N
zBk+AFk@Fvv#H=G*f!)uB+OfiK16~kls}*k`8-QC8*SS)&4ppQdjOA#^OcbInybg0Q
z5z;yhLwwmBom*<yDBG>kbudENnFs_^%S?2BcAEgF4T<c4@cTAgoVu8IsvV^^0q)+%
zoP!@<kNYZij^v0rkK(XfvvULN;F;d}Qq3kwvw0G#=WzJ2y9PLXv___~v6@H*kn(OC
z<9hWKkh7L<z{bD|9nXIDGZl|5ih)MiBRYYVQvQ}kxTnjVW1YM3xQ?HQV(B;|&x@YJ
z{zAswKwVYdG2!y=3zzo`H_Lk^RL!3RD&*jpv=4aO$=6Q8uDRe%{ziG*YBn*N4IdAc
z*_i#Eh#3N+!XiyX2MOs?c#V$Sih4mSF*DIfJX4HmMgy)qlYYj$)I6^4xA75sIhI6(
z+!pDSCyCT5d6FU|Y~*bnhB@VInKf5x{`}Ake`eK{y-=aDhcR2O3r>S>`LZWFTdoYA
z{|5z>Z7a1PWV);!thq9yz0I`rOmm({@Y|Mg8E<2dakSlj94ZPwSzbJ^rB}ecttX@S
zat&EttVbSMUVIFo@MBFCvAk%v7C9cnVNQ-*OH_A0YPc*TN3JF+d?xT9>#I*aRg0%6
z=E10z$XEOW;!lB~_;Ud5q5!-HU>1PFk(xXtF9-)ZTwk$x8})Dv@}q*H?e15ovY=w3
zZEqMUvz@h3m<3c9)+qcwBERHq5hlMl@0yG9DpMWON(E7=)`lov{Ss5XLDk<#Le06M
z`VSYWj+I#XE*(eJ(@+N@zQ+G3e$hqZ3wK_u`j!7<-Ypm9HROs-*6x1LxhnRQW`w1f
z{LHG?=xcJkTNTS2GI=ON**Q)2GxRNsYM|^+q$oB5K`Er28(A9%f%}QrfKE&ebC2&0
z?&7&8V!1=G9NdRyM(`M#tC6drhmrR(Ml<VAIj9KggqmSy<H<~##h-Fe@h6xm=6}jj
zMV1HV@1wJ^Tu?9yTc%CY@DhY;IVtV#uF%Ot!dxAkjpXxq9I0FrTn#Q|*Jv^^z?4X2
zK_qf-B(gdZc{CE)9Dx))8-Y|?FzIqAu*BY@6VXS?&#bDTdNL<nB3tFJQ@uAMc$B>#
zfebwzff!k1QA}&3Wi(VZILZuheGH3IwedaD;<~)Ziyi}8_M>I|dw>{j0x0adXv=6<
z37`KHs^n}N0hYJQQ-p_@uo(&8F+pw^+$N6-{(^)uvyl?YS~JQLG)99OWqDd5R#I7S
zjfkx$L?V@u$g)V}iAZF7B=TY;vOf~Zj!>bjYa~)0ffS93K&tEKHO$KGWr0aLafdP_
z`sz7oSZeTHCWCLDgC6j)fuLS47xiZYFE|Dx<rJfl*!M}~7l>3N)T#g<ChFvaB?IUw
zx`SIz3JhmI5a0>_Xe5+9AE8m<D-j6PlNnjr2N98F-$f$7Mj(YoV^t-zH1l#rY2=l`
zN$hwT1T!_ksBrOqg+d*9A28m{`+)PHPeBlh=JcYHwPbw#hDwf%;9WL35}6%=;A1Uw
z8{ipF9fejWKYSCk6wAXENHPa@UB_TRw@nPnj9~{58i`8t;o%I^k)ikmlDfoLM%PaO
zxX<wann<|hH^kfqf)cYK-hx5E4<O*jP@DG`W+nCmF`QFXX!hsA?0IWK8VD$O=VSu1
z<OeDw2S@hLi4QLXzB+~@dSxu|J{aLO{w#61khwZ$B)GPUgIma*=e0t=4tTpsFk}@3
zamUJD7sC^#e-PjKJFQN-R%aAx<ZykvsM|e&j?PX}CZQozWpWD7?Hj(wo!dT`K^x_-
zYF^w;nF&71XGn^vTVbJQ!qf{=jKbAABWs4_+?C?S&~RE=+-?{jbE?oBFcp%YS@k2N
z6lWu8Jk;#e41oMIhVl8K#hU!CF!{3nsQE)kLd}27U_iIyf^}Z2X`z7pZUSX7Nw$G;
zF|&LKAopUj9?YJ*NoQ6@!p@ur-P}3Q<Cl9*C!!?sEBOmq8pktnSbfkXCaY}K?cfV)
z*#b$>GM~YK+!mTBSu-hS@*prNCc({$o4YZ}tO+M;LbIw99KUN5B;lN{4g&WX{$CRb
zm$XJq6_}J1060vb8-Rf|0F(oG3V<<eJfJ`mrEILJ_?uO{<XSupN$-NFco~4~O8~3|
zFrL6h0Q&)S-2nh+nqB83bf4k>HIZ=1KBm`%#6ti^68IRvMgqqHoF?!qfbv=Zj7043
z0_Z$fD|D?c?<lBK;z#OUlGO$97l86tG#Rf9WPybKcY`<?-4_dJd}=_saR+mVYspG{
z(xC8UM4tbm$0t!hZ!a+rAj4XI1EIV^=U@dc(o)n(o^t5v#&FtRTEo-`+OW%$Uzo%g
z_A%5?WDkws3i*#(tm=RczxanlxO#2a_b&h+11O0~QZbzu>m0Rpj<gW{)H<4e6@c7}
z$$F3hnrVs79(mj_tOnBd=!91_U$g3Ea&C>J-Q-*VpkV@lZUCkO=-LE;`waiDiG)ka
z5%UQMa`RI=2{Uy3@++x8icuFm&On`_C*`&yAHvIvf@Q6!I39N{))ZTGUVL%{gPuCu
zjEW=N1dP<gBPxy)k72;oVWvmYUj&~0LJ>H6g`>5kdrn0*(CE0wk-elI$XB%!oC0qJ
z-uaZ4iUqv<CV)^KZ8j91t3hNGzN4vFRdgM0R_iSfF6r<|R@o{~8&2EU(<*1cPTuuk
zRYN`SN^yDpJ41AqEW%2gDm!7WBR_O}7)U$HDRNd6??8PEx%u*pMOGB=f6l27TqeVc
zL!g1BpS#GG!;zffSAu(vaDSd@Si)Ml>LIaF6L7Us!8s?gK&If<4K4l1m%@V+q5OKS
z*&z%sR_Cb1!SIN6h+hQa;uQd1C2*GpI?Vu3K-zAb0P(%><@+@U+Uk`{Bkd&(G{RoD
zp^5Ei)=4Zt>R<ma>cX6~YU=8G_!qudpt3X}U4pFjE>S;*O7l;sG`$+>(hyLkA#HVO
zzKST#GGzZ>rIx=FQJR<jFY3a+|L>(4z|x%5x`aj^t83H*xQ*1$3KoR*^IWJzpN2}5
zdvU&S=?YyD`d(PF&^!QjglQ6`do(RZJNa4NqC~RUSWBiqiD$G!jMy^w;yl%oQ~pQE
z+-^ma3Y|ZR0!H4vwy44SvLjKU%{E&rVpj33k7{vOU-mq%g#xOv)Rz{3_w5=v(wG`b
zV`6%HX>5&zqqSsM`4gHeZ~R;Xel*9DVQl78&;h&`k$ORjk#x2<96vgqQ$h0xGOF8)
z(ed0}QjZWvtNV{~?@GZLsrRBYu;V2mRd&v5#PhuY=+t77@01pIDVXwSR_z&zif)Xg
zdr+3*JODof=$Zk*eTM(nM8YK{h)GYvDAEr=1%Mty0Tk?kZ<mY(^bVrB(`>_=cTytS
zL!alPi=RSV{bY!E1i%;q_W`H^(D_eI8tU91hDs&RBlR7mcH0jC$3}J26+hYaD_pL#
z*guFt%`Do}n@Neo_}pZvralrb=dxia=i^AitB{T2?ErQF=&=_-kGJ^mL;m|3|JnuH
z8^%PElWI%~$eHg5fC46!FwgK**ns&C5MbVdrU01#F#u&(WGHpHRbBRdBvQ9UbqaE=
zCCAgqme>sW{{}D!K-ngpMV*r6Ex;a>b&pyO>HJlevaeZHdO5uGH%tpb!DYZ&Fi^wU
zJ#v-c2yo@K_sG&{N*ZvvtaOi?)BBpuvG5bGT_zIx5XZXvUZGwNEc^N*a9{4`4P)-Q
z%W3us$?Q!>6KI7_)><ie5%AzwNpKFW=OGl(y3c*<a2V7?@lJw3&L5j(pq#gADmlMt
z7brkF2(!Ck8Du@B<*l8O!^0eFi|Dft*~)9RR7PZ7??whR9qMJ2zpN8j-Jhrg*OKGv
zqz8j%*`GRHmi*;2HO7^O11oAaY792YJG4?#c$Uq()NG)f2I>)7^(S1g77o{xddZ?r
zCgece$eRNL*kfglbV!p8HA8jRsUozb8!JmXe+$%&JXSn5hIRQkaaqERlO<Y@mcV5R
zH!fx*n0yOdt-{8OggLEPccX7I><L1D2zcrl=&$i?xgUN_jH=1CGo-41&}wlr*uE~N
z^%c6R>b2HYH3~qXx3#i{o@s@Siq|4jHcFuuk~fRgqoB{B&)B!bya*4A&$NsId<{ZS
z^FSvhKl|30&nfL;q+JD~;>`e_z5sX)G0|B_+67=BfZU6jl)Q_S2bnTXv#+n&mwb+t
zBS<Ov0YGdUi}B?TXeusJV=7d&%EZgY^qebIPQ~SdLiuS;N<T|gq$D!RT$#!kYU^l+
zCKGHJAI;9x>D6P&PGm1`h@{R?qqsSM0{}W#YQnnEjKAd-AY<x)Y><(DDgdKwsHUU!
z3vbehItVLsO_Njmyy@7vGH;RVb$dec!=AQm1bPX1VEh(&D0>yy=F5ZGx42kG$vME~
z;p|%lKMcI>I6R;|UGB&a%_WM5v=#c9pm;i4p#^QRg=%Ffo3Q-lBQ-*OM?o~&j^{RG
zx{-|YiSoEMijw+Im&7vHbe5qoFCqm?d)IAJvZT9mQL?*bE7VLMsc!@!LY};lmxtW#
zmO}9IzPU(l1SQKIibZmV0ylrnCDMJQ2C&}Ju)0N|y46&<fw5FXsOOr@hvji>d9KNP
z#Qi<`K6xvLxn9^~;(aMx-#iz^4cbzz_i|fm5d&)y=FKwk28B$#VIt|3fm7{nd9b&r
zeqP>t5}OZP)ITrRf_4GVmLmKk?>{liQV(JtYZ{`Wx)5T@g^)?@ST%-eNdcDv8!)P&
zVceos0w_N-#+^6{&NUek`$1F<R3hfe_GmvBXDL~L6n6pI&q@Gm0AP4Lgi`ZqGTB@;
z<3*jlNb15(v@f;L+99De-NoEG`wIlc+)8Uu2ssy1_1J`z!oPH0Ztt;^y-j#@r{kt&
zD~B-(VSxm9@#~1|2u{Vj0jweL6o8)yJOZF^2aMIEEqM>vYG5Uw0XR<JB!J6`0Q>=9
z9e{R05Z*T$#4dQ&KTHY$xU?gH1_0Iq2y$1cGN+ShR7oXXbzg%l#oS5C2|{cb;3m^V
z#1xRMFgI7_;np3RfZjjA)dJZFFv@S$>1-yqgCS_l?ndDwI+{%>WQy{jHUcL-e5VzM
zBkv?6;}aU?Lv<o^ysHz{Y7%BFe@?4j62u0Hq^eyxet*&^e?zBoSKNWyk})TzpKC2b
zTeFD6FX<Z0v&><tF)jtUT+c&9bz>Z+8l!mc@NfgXLi|%Tx(b<Ts75y;ve8Y7Xmr;}
zqeDaMhTRzRfHbsIS|=`_`7^7IUKMI+2c)4r4CAYYc0d{$-hZYW+MCkQUI(sTEObyB
zmTFdqgu7~1Z%6T-)xu)ctlp91%gw-~StYbpH5yRz4fEru@nf)~!e*uZu{q^lOeRg~
zTQHHPG_Hi|w>tzE`5c*5Q~F#~*oq`+N>j8TZ%EKrSQj-gjPoFnrqs4Gn$pEoswv&3
z^QxwVS&KL1McB?~&$Ln#7#(236H&!I83%sFMF2i0&<4PuE^J32DH#Op0I-q@0JXaU
zm;m5<0PRYV-WzpLax-FnW6~S|Mcq)s@<+88y6ia6T;Q@V=|sBhJe{bfS9IAY^OT+G
zvKv*ZTDozQn7h8yL3C6T(L?uX7TiMi=Bv!~Xv#z!et9*~3hlGvdI3$bNmA%X2gZh`
zVrRvbx1t0c<uRPIa(B(>4xI0Uu+ItJo4CAM;G8)2O5o~{<!`~i0xpX|`yY|WPnPEv
zYq2F-Y<7doppx68=40697@!F_U04B)puK!Uv3#OVV2j%wO4uk@WMtD&sLG~mDw&BG
zd2vI*eZR~M_vn<ywi0bt)ti7BfjkzqKZc9S`aRH4WbV0N=APxmXOhDkGOPQPcrm8>
z8XwRTxXeZ0kh$mr;OeocH)HrH-9F&T0B?x~_L8a@Ij>>#un!8q>|UUkho26`@FB@T
zz%#exBmKRYcAMc<r^cgc$fKekN`{v~kh3TY1PZ^bH&3XF@Iv>iF$dj=(a}B|p4qmW
zgoHszkb{hW<RIf?WGJs}r+kBF2(d^<%W!jv&?JFgHA9^xs2HzNzP`Pprjw=#H9B!n
z8|6E73g`UYBU0GXxYSrvpmIu84A_~3NrH}Pr7Pc#^RGlkIj^tL2W{>R5OoJoc%7!y
zb8QnwDgWjF<LtfTqbj=p@q72CY${<Xp_7CxAk9ERiCHko0?VR-gaxE0^d`MyfY3Vz
z5D*Ly1yrOMQ0yW|u?s4SsAy2Jf~b$}!S;Q>&&&;LKF{;{eO|x&$DMQLoH=vmOrJY5
zSI5T!@T7{57S$CyFElv1bZ*!?1@om|#Ai_Jiwdix?FPa6Qu1R9VoDn^xB`CzxNN`p
zQ(LH<yx&H9AV+kxdT1Tf0eEU_eS&rTEy%Xx5R7$Cs<hr0#adhOttQ~t5;%d~s=3uZ
zV}`+ADml~ED-@e2@dxohU(LP^W%WtTu2#)y?%|p$=Jq@mq{#oO1V#y(m5cE(X88JY
zl!f<A7KTE#4j)1<bbN2%3yBr0&K%w`L3e!ckdBX^ngPo>`t59Is>E^vm$a7!x=Jkh
z)%o43vXda0pVwTmoPYBuZ#9vMlkPSIs`7I`h&IfsE_8Rlp@3_|@@`nS)YO`>#~~qQ
zFb1{O(O7-KN`2YZAOlycf!va%u9IsRi^^v-`xolHo4X9H+a!LYStyiqzsr&`AXZM-
zH;b?EnV@`{yFWv5ww9>4+YbV~RO><i<-+Bj3me+-eXQxqAF+lxsdW23nec2R=hn(~
zf&Dv5RR^=A3I-U`bAy96-GO2zyC8sbkX=33ZcyBE_Rd1SVBl*tmK#HE2NfFxG}a~$
z7`8`RO=5;Y{*OS@a=Ib%rV@EdFW}tVY~2*Y6z2zkUv5x=C-nyI!g{&YO!%KB{wh=2
zT=3977(__Uw2;Wt1~OqSW4KGLWnb_vW4&r6_@l(HFs#DAxdV77#;x$uei-TVtfO^v
zjJ?8=CPnDx7#1OKfAC8&N{L}HDh8g~fz4p+7#fu`(uS|0A2B*usWIgfaWkcaZW}{`
z8bc&#yO@SVY8h$dwA#nC1$q&Z`lYi)pAyr#3pB)&$!?*hM<H>yg4QD@8~tZ?Px#ju
zfEK_DpeKR$09F!c4&W~U8RYj41U7UK#sQ-NEFmxzz(WKI0c;x#U>Shad;rA&o(AA6
z0l*CPJ`7;{P=}HKIDmg;DMfle;l80&vM37n_}J$rL9-K}B@M%PBmEfSPldAH=Mgq>
z1mwR0;5>nM0o*eZE!<gfPtobi&4iRju~CyD<!ksK9fj0f1YnG&xMGkSfad)Tfg6d}
zS$MUkS0r*`lX%5J#U@iQqpJlkF8%nD1t?wMO#u)-2C;hpG$YUrKn{RRUJvEZRH@5_
zW8ELSfojZy|6(v?PXX{80L8jevlfx{f!OD5*7&iSH5Y)9$;-r^*ETC7>#EqV$oeGw
zr;&9ZfcwZAcuq@X&*p;qXeMK48m*IOa*n>fbbeS8yA~MJ^Qq?4t6MUf68&$|F_kl>
zBeA_8Mf5*qEA_i5^-Llvm}ZU32I~{C#biAXfA=^j#eQ!f08gRj3hGlN=Zm#}Q{)UE
z>zUXmD1kY@9s!Nsyxq%}4L$J0%NtycWB(vm3@rIL<1qo82hg@Mr@uBRTFPBoip!SL
zBDU*PE#<l`rT%zGsm$r6l)j)q67L1up(RDwk~+rDprrnw%>`R_4w=X=?2l>oIGg>}
z*xfe!ahv@z**l-mtnD;w9J0y(1q!KH%ceH81>GL|IR(*L&N~sl3+uqQS_ZaY%47A2
zl{(NI98w2*lGW(KJJBZV#-U>5a&v5UD*UGkOJ1TDrAD1{1f^a_l@}Eu2E{C8D`F;L
zQIj$Jj68pQ0`k0_=G1vEr7Jx*8{bi<WB4b-y(QAd{xK0#Fy`}muafPuHGd@LE6Qd*
zXHL@jycR&)%AArz*^`;BK(9_p3WpO0qT(<CQUblS^k&0QWtBhMB~}L6iw-9FGHV2O
zbygC{+55k9wl+N1f;bV+f0EY*y0eknsLgRK8wGel%y!6?j2lI*1D0;MXsjo6l#xaU
zBQQ6}if0u;9gzr((dlI7e654v43?2MBZ!c<J_rev1|julh-t85!9j0IP)@i12j!AB
z8>f1G6vgZSqgjy#Hva#n3lNo<sHmLHVIyZ(WkVA3l7f&x>mcNTe?&DPi1OS&C}TB+
zN__A?lyLfP#Pw5fIFDOX7!LVkD-Mgx%#2;9Y~cUfkRQ6R?^L+FEsSoSK(|}KD>BQq
zsFS8Doo2~3aCh~Agl#$jI=#E*)5-IXhvT2g*FwJ5@U?}nU3jH`j}q`E!e)^>iy^Zp
zC4>Gx1~qei3~UbYF}T_9h5#Q0m;<p6G0LyfjG??dzA{n<`JSVbixJs1thQOh!&gAv
zGR?ah>E>gWT%Ti)$cBe=L^f>-Mr3k{#c;WrB6ccpx!PuUIEO0t5|`TuM}%`=+GrYv
zF8;oVVU+Ms1g<_;jFuSdP6yrD2lO!#elGCTcuwTT>M3#Qg7gG0Ml?`FePNg&f<6Lc
zMga(EndF`-o~bh+ZC(f9(**wvc%XH6WdKh1{ymG?i`BPc?#fXU3^g5@kGhqoIhl)f
zW=la(Ujz_<8+`&V2Z`#g7^E=(eMMz~T%Gtmh=1;X=KpPem{NfJ@!Y?NhpO%t{vcH=
zIH_vKAkK6D2g!qi`2YIfB<HzrS30PsJiQbqzEWZP<zm(@GcoNh2jOK9)W@b(LbwYA
zSt)%}M;F%_d9gZt2l!-xbO#u209+|$kPNbUzSChUR!WgzHXmpu26J&$EeCsE4N3`H
zY&OZl#QB=N5fCOaJcs|mX|H!`7Ws-}<T-*<JBW9xW@?`=Bqvx04$X!3?|^ii+J6FI
z(kuYq0=N#q`zwHhvtg3V&KM4ZIg6w$GG;MY2L1iy63FX7BmW)vy)gii=b#6ylA~<i
zK(#*Xh46IaSnhGHP8npFFIqB=V`MUp8-T#5!5ap{%0?Wgk||nJEmK55`^k6Ni#&$h
z-Ms-}R1G%bc$HQ7T&!Zr2SZbK0T%+7d6N~_5;8*WVqPQiZjh5ES0lOkmDb1s!Lw6G
zN5ipO!vP!S2L5xe)i-*mlx22-iZOAb{$7L>_5T2XQF`<cB<)){yJ%iREb4BhZ{@IK
zQnij1#H4G(1m;BzZaDyXRSrP9v-9Eqod|HtLB?xx;7qQu{a)@;=9RYiboGmzP;<-S
z$6tjX)=L_Q&{>WZuvo6v_J=Urdid0*H@auZp{#^LZ7qc04%-F5JDk8|7&x>u-kpaQ
z=tvddUZFp^0Op&F#Lq57RpId`v!$HMxe7wwfu71bQ?n5?y%cP#QF7Blke}vL5<ad7
z;f=1CZ-L-W@PKei2sm<Qn5P}QDEb@lWHOtpa2kPUGWgBE9Xaz*Znwh!;6fODEr14#
z04xMB7eEHtynBGX2h4j2K=fh&&jT1k;1vK@0c4bd(f2MeE-`v90a&#JnLkQLr_aG*
zWrtNz_WG*!l8Guu*x#T?yQxEG8Rn}F-YNM7Li41k!s;z$moO2Z5*6MHct)HL^Em#?
z$-Ly?0bj<91B=MRPvs{JTuV)xFckF9#2lX>kX-F&e(qqNsRON-9fzTVV;Pj))Jxf>
z;ykWeITdZWl8iR>jeufdVXgynvvuK6537S{-CNf)0<(H6j#Sjs4#I&=Cx5F{8=h5~
zs%vq`ECY*HsPjk#F3~b;S}Y(Ppo~=P+jMM`naDb-VlM+xYQ}W{c+yKjtcT>ZyK@q(
zr%pbkEk_ainI%Et8-TZy-!v%vL*RkXyc=oxIyfy3b)1qlG!Ub0!sM8U1xZD6jJyjv
zA-&+AcQptx0#03GX`?I&qHW}ukA+BH0+eUuwa`oqADFF?iBM=%MF=DBIjx~EC1_*t
z7~bj|Or8!pa-P*w*?|VDB`i}0CK-B#VsA8>(cC^Nz2|8*JZ8!0B9#6XAWdBXqjm;x
z6hPMw0K%^Gy)zj0=ECP!Fn9+5XtfeGs!Id(PFn2u$OkJl^ft)M>I?s@iFjoX!)q2;
zGf4K%1$F?KcNu^m0H6yRufyy1Q7Q+U$6nZ`#0#BM`YN@zf|-w5^7KLoegLEytDyEl
z0Otuj10Ws4vh33U?gP+u3xKfeeD4f~y>G)OZVlE`J_ZnB)f>yU1vADn9aU{X4WrPG
zXaJZcqKyO?(dz^lQRrIiw__CYYFk-^pK(=+$McGg=Piuqk!2Cq%6z2(N>_xnpaQ{R
zxXtQRn5`ld3rx|WxiMe|G*q2RKNKyTnd+66Y~;<=95P>65ri0nc*pWt?K8ls(rK1#
zS_z9j3{oegCi`&!+X=i5;12@t11MPsi+&D(`_7NS4ZF_w&S2R4J$zmOqxU+1yEkC(
z#=mrAG1{g*7NMh$x(S6L9<RT^f<ZwylzaMbrT-qh+HHh?XWtzv>+P_s$nzF?F5<PB
zJhD<XN%KvH9LH}lN5Cet^k2Xsv-H~c*sLcsYbjZOi7B^PJ>U@5e6n`_rBcixixIPz
zG55r45qZ+jLPR_Gd+&nRgYfb$2k;R9PkKM4ICrKYPxTIs&I7c!ot^=d8qo|QYT)JC
z#F)od;+apLEb`>wHI+P)=8c-q@FO9A#Owu|r1?5HBq8-T+pHHgYYJJf$DFfSGr=LO
z!^zs&)&HN?{*5uuVa!YMS|&VAD)H1?0-i(Uc^<FWEq0VWHD3XvG-7>V6YUm(L!#VM
z!Ma?t7L)atn5j1F%QkDwy|&bkHS005{uQ&`W=#QyNDWl5#t%@5`JSx5#k_2@&a_#d
zC2Qw_n$6CUE8z2g&Gh_?*T)s&7HhtQ?hxmQjbEzM(`&1ac?JNLF)wJ=T(Vw|$+lVV
zwOKEcwR6b8e_DGK`22~@5pzqtjBU2Krkbya;zDBA+u{nqA!%Mr*3LsKi914Z{V8rF
zUJq7?TdDcVC@w6v+!pt-EzZ2pj`@^kEhp<=F;UBOnv=mHF^{cabq-RAiMtJ~f5f!2
zS=ZRCZ&k47Y1T}#hQ$uGS%0!w(@U71b(+o2n5E$JuV;F;<28spQVkAkzR48lj4iXp
z6@f#P+*QH)y=E;{tRLE}r)}1#?ToqA;D2V!-;DVc#{4c`t;i!W_t1Q2DK0X$*>bx`
zfJ0)QQNg-Uvl_PxYag5SUYqqIS<_QMo&cKvPsSF}0>xm59osc6qJSczWAC*^B!fd@
z^Hs1m8ln<VtXNOjtmACfM=MxIY1U(8HDbTBS>Lu<<9FH$?A5H_lQkr^_6nWcTfiX-
zET~|;qFEDi!0L$YY_mRKvwlg|KpWl0PPvK<1rG-=m;vOC)BbXu!qH%4oo>j4@_sPV
zUAGKEv0D^DE(BBTRzWE9bww4#uC;<R(j{MzCBcYYCxl{`dO_@REyw{~)C951ogjXl
zkAm3cLXdBQDRv$T#m*%`?0gW!wlooA=tgEubvaR;lCR1@XBe7~Su%4q4uZ+m1J&if
zLFS+~@^gghu@k^!=C_ewAJmY`+s!<6t!zz&1={c~6-Q0^5Nh@tCflInW4U3^?4K&X
ze5f7EUx=E0Q{|@*b>%?1IVAO=8VFZUKFeBI9=e5-J4XZgwrl35Cbk2$q5PMKOAV>=
z2c!gbd2N2bU(-OH8EXtxDUmw&nod?OOIG*T&8sl%;wPyr`5e{zju!ZMSD^S4B;8;O
z#GWJDWYDrk;MKM=hrbZMsQ6QKNS_Xw35%uvfVFu?fzl~gj$&-rY<2AjaLd=OL<rx)
z*J{2N;MKM=U&ZkYgzM58QGTff*`rNIkJzkERIoC^-(3_m2Jw>nB5jWWAu4{e<nZ07
zil2cLS&FLoJAi!vx?TeicAf8?!LXNegZlSlv{DVg1_BKM)P4YC^kSIR+X7fmVBQV@
zJiG8Yfw%Ez4a<`Fn%JrKn)z!G??KQ$2UGR~0Q&C+uo=MJ05Z-}+B3jT0qeG_zG3vz
zLP){2``M4dFM1Cq`FCi-va2FK-ROaxHfu3(_P6A`_Sigc9{@eU>dP0O{qua|1Sp#)
z>h&3})T?EycZYd$jaKgvf{A)R5ukdt9%TE|REObo_XjX@9KC-3JdD>EBWJAYEX?|{
zc}CtXntA<I809vNc&_MB!jAbjCdr*=YGRRA<>Fej=!H<$y9}=kMBUbAxl^-vH-K^+
z6mJQDe*@@3n?I-}p@7Td7-5RN>pi3s)SUnmGyy={gPJ{Bv-@fLF0^}Pif#L11j~C&
z2h+Ak`TIrtbTySE?_Owi6ujOe04@ROoH;_-yHv+j7iG}*F{m`1?;8Ph)=bo_H)&SK
z4s+`|oi(){)+w1ufGODuAR`6YFD2(WU{Z1xY9XZ9+FN^}{W49^+Dl<LtNqX-$>Z2%
zzGcVQ6@jEMOd-G+HvupLV{{m1=?`F*!f+#7^Pbjp$^Tb_m@6?FZGX~4%ns!7oz&K7
z8#PiHt+h=#qYWlnr)X-lraFqv<*eDPVNcmw|88sD@DXV3X{N*I6&oJ!L*XrB;pK6k
zUd#<8ZV>;`P_Eg-E#+yJq^?H{?Lo?hylgLky9o3I5VjAENOJ<$`Nk2a8?bjE;LpI|
z9SxwxejE~-2Ee-jufxEGuLRJ$Ndlr7rPAD6#fZaNRVEc9y3U|2Ie@4-0Qdqx+sd4B
zxp23GNT!iq&;!d&P}RF1a$kd=_bC9?9|dp{z%&4zPwSYlcqY$jMB_aN>RC`d?`i6T
zSJgm+W@&rRXr&wmAM*Gvft|}}fsiqZat!Q$K@i6#a+5RH!93N1sH9ZvAx8Z!?SW`F
zL(X+-R|=rKjA=-G<yOd!mrZ5n_ehI6sunN13e_(G;$;J0lI&TkCA$lgK4c&TtKS3E
zkzIqbF{-X?*K^B1*y>48wRft4#Nn2$ehIRvt-1QML2~pkDB_mO4BQf+xqJIiM9?Oh
zJBQrz897x5ZvIi(N)s4i+CPB4-kKr*rTAVa{)2F_8HN^<x7f?)Gvu!qeGXy4m;X*i
z2>vAb_QSyEr3%gk;r+z(Q9rDi@^_1Aj{%pT6(~ICap1Kv>(KNAz}v_k%9&A20Tv+C
z7RuRC+(H?1#NP2VM-;Ty|298OwqVW`@kOAgEk(9i3a|SFa5)dC@VAI}!e~R&t3Cys
z>#EjWQMAh;;*u$aQT%?F@(jMeNyZdLRcuAtH3<CkqPVqbEa>Vh!2GBTsN3*atdy~$
zg^yQ-s+_u9h$_Da^<WJAUjjq+AOP#11CR?K@_7KA0W1cPL4NOaU_S!$76BM~6u@c#
zj{xv(0bs5FW4>>f0Qef1+0!uIf_QHkd|JH#=H~#+2GIGERsx-#JiW>G3aH1)_AY=w
z0r)Qg2xQ!;6yBDEJ^veZqll&BKtE03W|ssAkVcT_g7_7XpTJjY2JXY`YBT&H`vbU~
zjJxW1K<Jd_lJ97N30gCLOPa32sP%GO&_53{*J(N<U2DrMf;R7K0tZ4TguqXN>h?fx
zlI$g7c+da5u)%D_xN$#k0#{q{NaT4JgE6(k^YaOcp%})rc1AVWgzP$>h-Tv$GUqh_
z{Q!8vbikn9IO)d_VlCL!wQNhIRICSc+8qTDwNy&w<HUIfsI^S+^S}eOC#xvAZZrh~
zXi#<L$D=91cbO@Y5jZkdh2je8J_%)CMY{mjNgt=E+`4_~A5{4mAy$EnLe?Ln#b6~a
z$p`XvsAi~ev72=c|Hcf&@eE~J2Io02BXCVKvz#<m%=|tV2-g<m-qpU!Ux(KF({-eX
zTp~@?{8V*~mZREM+0Bl<u8g^|s(p1RCVzi$C|zzQXgZVfj-s=P2u=!>{WM6-4_b`c
zXgdv7?5eYwNl8R|hZ0|r6m3VbpH52N(xCE`*K?A}0v5GEiAMMVyN^gx7a|&-Q<}of
zW;eQ(LMLKe-Wmm^svNQ~SKMoN9#uo-KQr=sKSfl(_p7RY?<c<ibjc0U>MXQN1SIhY
zk>!%htmTh^)#Q(Xs(+~w$|jY&ZEFg%^fd8uCv&rwh*<5Yts{Zm9dCo6x(fbxJHYiM
zOmlbp=0K7K;ooB9XEwJAsy5tahF+<PjYG33@Ry<B^$W4tSa`@MDl0E^8!KmXx5yn(
zAxh9O8pSW9*^A7QbL3|DR_vwVjYqT89}uO9pCznG5=_HluGz|8{)RX^=x>O#B{ixe
zohx$HpAqj8{^shq`25fZWcJrSV=$tBP}t7u3fcnM#m6jpYA3oy9()G};n?Ho*5oL`
zgOYEPiOXM8ACybiFB6x)u0A9R4R{fFw~h$^kl6nWaMkbal`}i7PoUqEuhNf*a?<Zf
z=dSPvK~I&u-WO{3Q|)M<{bHX3Cqe$WJ;Waf<sTl|B&W%bUJpw2?o()>js!q>RHEMo
zJd<7hw^LMU{+{jP_o0opqg{Lj{<oY)yZAhSiv$h<xcy}SdjR}IU@L%^UIDNcz_?cd
zECdkq8hSX2@}2`$2FzOyV94tLz5(zifb?S2mFN=iT!&A{8z6<Dq&z^t1>h8b^zXrQ
z^*-=4gipISp)4!PM>CbOxp`1FHM9f_+2`QD2MpOS1E_Wez;gg{2$TU>PGC2H=Lu{D
z5PlXqQi8V}*l1whD*#pj=<J)VB0vR|r!!UfH>k%z^%Q8T{tyr`&zxtrPENu-`bHpO
zmI}$9V-P~I$}fO_ruOIeokH<Pn~RHlIU@z#(?iqkW}*;hGVuKs{cdJGs1W#Inv%-~
z=B$!yAMch;`jj)@KEY8gp*$zFnHWYIMo1$c8b-r2UklV*TXj@m6LLl|4buuK{)~pX
z1;AZzAwS~q0k1prYz};UZ^IaO&bXnNEj&FJZ10loHn7bDTY52k_Rwb>d=lP4xA=t)
zNCk>Pfu;Vbgr~_r^cOoBZ4<Qd?KKPUAPDRWfu375<+98M6uS}FI#ub%0m#oPnvj`t
zE}lyPh9^?1!EpvsZ_QT+AY`kfoZV1^i}_LxGG9e29;YQ9Lz1kwL;uC9avuKcp+t5y
z6oP)|0E7d0j==9Ajd&NpH30u6@EL%?@1gWjg0~?Uj|1zRJ6&m-DN$jW7=pbipiVvS
zz#JqFwbt7S=mDUCH-pO4IWPuyUHS}3DaLG`Fl`idU|O9?LDxhYp7dM@9lZmCnj-^|
znD?Z~Y4$$k@6hr`7hwem3?g4TLzLSxDMzZmMc?=oQH(L9IQQ3?IGCSLWhh|eJ))IR
zL&8?NsbLjaphP>I1&A`pf2)piCZaL|Z)*w@aonaztUPdpQWv85-qSflrDM@JQ|Xza
z75+>j%I8@#S71cjD`e)&O6i&9bo+<R#P}z(o>H1YaATsbAkx3r(FpGsY#Sum$g8b$
zP1srmA%ip<M^;AQ7EPgmnKlI~8G$uH#woTb66Uoa$|J#)yibBC*n)W!MAtMFlEjCH
zA{&p(J;P>$QhP{oT<$_t!-eCr*-6b!HGB%q90G9`*J%1A{9#+b=I+t#@K49_gc=$%
z{vOeoql)MgCcW4nuDKtjzaB`_QEIZ&093gEfPYKdLg01)4L`u5LsI}@*ZJP*?T7a>
z@br%Wka+^y=W4;l?3!|-A}BSa6bIqJmHitS8h;4j3V<a9$^o1ua1KDdkFd~?GB-;!
z!gn2cym6&yvOvl6YYJQIz!Hsc#C;tcsPSfsk+)xaO9914U}!OtDli#`AS8==OIp4G
zCdq7c5dafD2tWoy_?av(lk_mWI(@B^#QUI85V=JRnt9r4Z>|==8?7zd+?jE_c!5ik
z{n3mgBfDq95c}2tAU8Z<XXJkMKgfbKAu_{~rlO$+BVjezJ1GB#bjw`%QT1;|)^bb1
zY9Lk?nP*{?Hm*1P4+~GTDu~4W#87w~iDZQM3m88MSTBkWZu#fsiAY|L=}v&Dt&@?w
z5!1aJiLy?qXu9{i0nbINuKk;hqv-7&;BhwcLrBH|Q2w0#mkRbGwfI{oZu!%t5p}#C
z*-*0YMNrpFM3i_o6I@NIGE(#3@J))y5f5slN_LZ=OMw)uO7Kk*sJVMvM+9gQbU{$d
zszV^nFbWEhXUB9A=u$D%tGNf$+_fN?eX_Q~k(YlDAm1Upcm&b^JOKYoc;&x?SM?%Q
z2r~>M$@dX_%)b7w;P`$b9Pk+_a0dIM;rMD1&h;n5NzVoUgS#NAH7OlQ$@BSzA)}PC
z`T~~ewb6|=?#x{(qH>z9Uu4!1_+{<oYdc;U^!6VI<bQ*&3wZf1<AwdwKhVkTY!+rQ
z<wj$9V@uI)usC2=?2OLHM4tNNfcWasC*W&Jr@uc9jz5#H+wn>-1zRVC^A84wNEvE8
zsk8W6jF;SevTnYL3e`X!t4`E$gv#R0Ct1ApM7?<1NfvK9X<IpfkGGtdd2OH9f+Wu%
z%6EzWeSN&)gd4hzZrc%O`~nqSLSLAsRaDk#_+>rA*Fn58=<R<SP}`RlDMn0j<net1
zUzq({Iuxg#_J>%)JrP_qid(FLykshxS@Oe!`UpNa`04Ct)O<A^@W>BM*M1Cq!X1#%
zQ6yXeu7>-!%8yMCe1h?~EcRu}Ur9d$-g%vl<{PcTW<-)Ee@4v_A+^g9NOq+5;1z_%
zaNug~s;B%4RR;a(Y!`aU?@+gr|0t5A@iV{!hjb**6krsN2-rknvcSe@0UFAWG@0}7
zWJQ+Q|KHl5^KQTPR}*TPFiRQDtG`6qN&3V-8lj}=6_OZF;R5_dMpG$|&0%F(Mqsn%
z;7wpJ|0BG_C<6fgUu1CeBrXCu4bKrBg3ZK@Cf4R2%(_fIBQb^@-)=dhZmxL9Ze(|d
z-T2Y#?lAcotIRt0$l>;+#yt^ekK8w<8r+A%IJ<VQ><|Bk!;Yir;!Jz5aAR(n5AVkX
zQB&q4VMr=&6T~^!C*<O&=IW=wXN3o(p$SmX8YgO%>!i5QT=OwYzIqrxsF4ZhIMEaT
z2bJH(juTDIA*$8BQ$o9C0d#^ym?~+QD3O?hQY96WD(;!;CqD|_9=2z>$~id=Z7fyD
zWLBkFVK*b@tn-O@ah=TQ#<Ks8W+@}f-C<dcVa2REe8uwRz$=3^UmHMZ`8vVzbtfFi
zD5rlP!uh_Tbb9$F(8=xGewm6G6-u7nh}k~}G@~2;7+j{w39MHygk`zmm*wZHBVVog
zs*P6$8GL;JnFIYp;izZCWym#KtT6E&v=^sV<v#Bg?<E+<P1B}N1&N*GO?Qr*2$211
z%Sr7SKtO(8H(O3{z?c66H(PS^`Az%;Z?@z)k&&|1`DO|qwW%E#QW(rg+=}R}DQaN0
z1Cgo^1yj_(?8G1;vRpKpNH&JS_-hEfXU82DwG;cY9U3855}5-Zu_cTMnVAImewt!L
z2$e~?!hUXKNLW>SL@-+Z@2d*N7`Y_LJ-GlpV?~(z&szYGQ?UFydc1;VwfxQy`HEmM
ze<z51_Xfr_QFw0VZw#mmmBVk?Zv*9i6=HW6zz+x)y6_*Hzy^^i@N!5KW<HBRjbwn~
zkcLy)!=e5HEhow?VRR47M4-?JuEF!?rdC))OV~sItT<WPKZqXC30$j{=%{_R=+!}@
zSBq%3Bx<cN;t%OVaa~xk`W>{Se7(Ss_fj{=`#}9hVkzV)^**p@Y*p(&vZU7gk;m3W
z`BSPgq=J*>haVq{0CzR!{U;Wa;BL#hU9MoMx0fvb2U`88yH$wMcm&&v!*S-$idYXz
zAu-y&FKLwh`o;=XLHzMjHqb0Ie#%~#TJ7MvRGmxcc=(CeTH|1GUQ7J*7{OV(P7!xO
zinUhuk^f0N<_3Q6r@((qtDq-*23*#)*2&)TJ3q(g8(G&{=NOFyIMzGcNHM<K!D8%K
zAE!<`trvYi0JrM)HaJ*IhJA@1X&)QRjS_qFuYjNORNxK12Htcu@Ownud&H%TZ*s7V
zXMYQPDNDv?p|1y?`W?&t7LkXkX<?d_>w5+N@(TEiDSxZrtFA(yX~PU_n}|CJR0`L9
zA}v*#*X@oMp(#JMrrnnc;C{z8B<z##5EB1#+3jE(Q2QE=kxSEg*2=tF<w?If9BtRN
zu5DL%CR^<LRw^Wyb>|gFvx7*(EocVzK|uD+0AjuekPM&;f!Y8bA`lDUDgg_C=LZ14
zLE35n85HI10`Kr&utJjyU?YIh%M)(IRt6TcT{TAbD!e7K7XV0Pj{}g%_5z^9>>U6k
zvW);38IC2dQhM_zGcrPuPtTdsY_3)$UTAB*?KsF-mO_iaphfl^084%aFabdHZ<wI<
z)a<<s^>~Xx>G=mnB9k?R>j9e~1@S~o!|i8s9NX|L4<dsUGR?qlXpWf?@3&x=Qzw?k
z`T?HPA<t7>q7>ti8m%)&8~STQ9M2|XvI$<YPVp5n0i&#Tk0Svu!T&sjWIqd_-CqD6
z1#r*bus7Mf?*O|k#4>!J0KmVq3ccR~cmqD(Ujd|t0kF`tEy34#ZxsMNodD_rh>QTx
z1VFDy1WyGJVKpC{Eyl<^iWZ_otCP!WF(o9j4C;Ide~QZf5WuM@0A~Oc##zXIuzCLl
zEDvLYjI+e}U)Ohl1wPQCIOMwWXs{K+))y7>M2Dx2F0Fdp#iS@BQK9sd0a$f<3?j3j
z=grlic@BV+05S^zL>DW|m4VGF3mJhPDtjgTORGb}c>t1X0GI-xNj#Jzn|Bkim|Bo@
zKY&62nWNAh+`Cap%0#znMMpG-q^!m8msj>IK<|S!gJkdBz<#X_<J||qTK`j__aOk8
zbwHmCy6>=f7tQk?1+X37-d6#<L*P9C_38rn6hJQm-vL-b;5vZM0R*gjlqy^ZOg|(>
zld&b%yWYP`)=fD!mE9L=uC5jar(v)>L<gn4`>CL6w~<_g8JNFGN#;txtbdXhAoSas
z{7eBBLTz%<JR|ULO`zCEZ34HiV2F;dS9LclvCP7EZSqe#8?h*c3mLG-sk!EovG_)f
zP$G|t1yv77^c)D1D5T2LST@RF>mCT}J%EgCRnNkbMv$IbBASkXZvO^PU_8C?xfV|*
z`~6nymEz^h^rInXnCb7sKkIe8GU)659MA~J&PW&p><3`mfO-D}aG6nlqAkujx<o0(
zR~bDID>`@rBXlVx&ow)-6?{hEd%F}P6Y8O`R~Q2;<XC;@ea(Y;UPk6U({w@Qzo^>Y
zU^YClI+<@_MF|ojtV{W-QX|ckj(zOI@9FUmB)ir_#ZR{>OEB<ZCG~$3Fr$)yK>Zym
zJm*HA-_T0cWUj``F)uSk&5h>cR;S@Q1kVvgp~VYI^n4~7pJNNTY`jwm)>A0EG)o%_
zp=u5Vc_<GB$e~q`q-LnoEshuK)<=c<N@p{pniw1vEo*op?o&~aT%m=Kj7$#ULN{nS
z<Xd-H@lT?WsR#c&$j&HZv1kfxW&;$9GyuuC-piW_;B^AG0~neBpdWy(i2z0bxGM>*
z$7BGk8p8_#WKM65)=0;cG8mM<tXqyCrbF<b(Fm>B9soxPa0DNo3}7vQTmlOLYz2TT
z5C8>qdQi#bvFe8`u_aY^Yf0S+P*M>AN_vU_C7F#ODUhahVP{x^;INFN5dM9G{2veU
zw{_=&=7kD>6aa1;)3=BQ-q(RS$Njfr(mATyh_5tV+6ccc>C6}R6P5EO@P1Hx(ovD6
zf|LjO_tE}Tyi}WoanA@Ahdpg<pAKm{<Ieja2njr<`*Bhp3X193ApaMFV%nr@BKgk;
z@xP;s{D-4qWRxPBRPO-*tT%+RdGdUsIVnLK9tC_dip5}rQ{PB7$XI_AGRu>8uPUMZ
zMh$lCOkh7@Z!|@>Q3w<rhBFLBgtLfaTJsim5qZaYg2j3RXhsuMnKv{8e+YG-Qk5A6
z!vv){@5>;>$op5&_$Uyrdw!06zPTZwqCp5*&+$)Q7v1|ap@ESaiOj(Y*HaZ4Zg~FG
zSxRk?KGDQT9Eq}Ob(KpD%=ut%#K|u_IId5U8xgw7jRr|_8-h=6Lr`;1zXamqNOw6k
z@0NMq?cr=OjKsO9I98EUrsdO~wx?W0&Krv{Ma~<GF$<lX#i%$II*-@0r)7(sveiLm
zmP<sKy91}uONHMpH#lhcvo!cGb8`CS?uusJS}r_lDt6x4+})`kJd0I8*{QbPd8H~V
z#ZdTfaPqrIb9XNfke!N2ZtN>n@XPJtf4{)8*7Jaq6BjlA+~t%cqluan09Q@1ORjEm
zQ`oBFF-yLE)?VtV8BQzMOFi-7w1YXMjV$TJi!IH;ZN&Dq#P(+37Ri-5;k1U?S6xO}
zSK{HOGPmSSJ;|F)P91;Mk(aUwY#N^b40_|9@Xzw{)gG@5l6(UJq24a=jRt^qn<;b#
zb@@CIyXs3-ZMaFPZ&<y;v&<xf{ux9(nJg?XXr{A_r(<|yq%i9-_-8%D*L{55jaLTg
zz83(Q1AVX2$@QOy<NJ*8Am24ORKx!}fZ^dNEg1>OWq%wXe?7jM(ys`9zP5mHUq}|6
ze!d(!{eAtF=LkB3yYY_OS-X__arqE^#wkBZQZL@tFoxdpbX(OJ-=20W=1el*9G>+8
z{M73_q1X6&jIW3Ix(}}mvid&*<iCcO?{~b+{EQ;_`kYNfr|NX_I(OQmWOvdLJ`5ZA
z#*^0DKMM|a^iz}@puaU<>BoS+0VaPoFkcV6%t1!m0S_uMW3?FHAQE5@KJC5f7}tC!
z3xh=uDaJivie{F4`aISW_}2z-JX{xZ7&J{C&Y*Pw{$2t;iZlhj#wB>TiQN{>EFScB
zd>_^lA{Mr=@Mi-p)Nbh>eGU~AC-)u8!+CPQ_h5*zd7@Rkq-_IR_FT|zZHZoSB7hM9
z3{UjKN=N&ihy@6eZWLg`2UU}CI^N-w)6tpL+hB1)Gv|Wts1hCqmh9H>Urw2B0Pg_E
zAl2IuShrRf9drY*0syx9uhYSq7CxgG1y!#hs%KL54VtI808!Kk&tnu+JLG1qb`t=G
zXLlvFr$Joa(gP|ja=a(~7$h7-@YJ!lL)6RRldG|0mo4xd+^g8w2(T|w8<o`ntPpZK
zKl6yT2@pQ#AVvLW=lSqb;0076FI0<>*xE1dfJm0g(VdioDmW}Ik6H52QDnPh^U_#m
z^C}2X#bBvitN1r@$@ZnO%=YOi$aY=>>sT%lza|blt%#-Rwzsy7E@Lpy$kh>5SMeB*
z)v?)Y;qPw4fe(P?1ZDvE8h~erX1CMLWqbQ~XEP}x@$v{HVnqc10A#vfKqrufo&X-y
zIZ6IWvLd1k<Mt#e!Yd+Jgp)+?l@ZiCX%Gdhl%+mdf&|QOH?pqhSRKJ1A-Uz)(i(}x
z{mB6EuZ=h?u}=c0<3gmwe()HiN$eLQ8M}0aAX0*g{X*o8*guG5>?+0&A{nDw4oiI=
z#Y}h0k*mv5JaXlh16N;0@eiPG{yxm{m24+<@Aut+f1@JW{}(^tuNBV`^wu^kN4&m`
zlAfn7<y?uP;_hC^d&gDTckP}r5b$@xlafZBKciFLWI6dgT9$W@B9TmVvyA}Ujo5HB
zkM2?r@I)3_4KEJ>ZV`QgJV!eMZYi*=gF0HN&FhcR|K?~+SCRP{fK$|F_t;wiw~nS2
zn!BHF3uH<3awMIo9MyU?TD0Ed1xekwi=lWa=+sSaL#S%Fm>JRtykmPd#Kon35X7rK
zqn8}F%YipiV6k}T$gvzqh{d}^(&9;C<*t!jKu?nN`XcXVSV?a;f!!UuLvU^+Qen97
zVOkW-`&JCc(8zm3;g4q6a14uNgXiAEv=3Ksm2AKxB7bki1P;#xvLuq}br%Q0chb;H
z<qJ9DaIxrwIUj-=F513v4$JV9mU$UIs@OegvDjgB<#^hniE*W>4Po6}gGOR8v-Y5>
zJzHNys(2Tu_E2T{pwuKK^q|xRRhAzOs!5MZO;Tm~QK>zu#vD>LhUX<53Z_Db)e^fa
z3%&|Y=DjDj|CT!{{N3Zz06!MNvXFAUJ>Z)ojiK#(0Vs2_5PYwjhXY{XW0vfB6{94n
zgk?@vLX4865h!!A5ionVk!GOG$%=?GkkSwwa?+k=uQt*Y9FkF*eFpN7Q=NfS&B0^N
z8_mJvqCqB2-sVxH1<&^d&}?$VZzs{sw}CaY8uL|$uUNhueEos|8RYbL0_yM1S6{vg
z__`A>-)y|_{c8!GVfn>yjKeC1Otzt(GKEYYis-(JIC=t7*@kAZ{mf$9ss7G&kLEi@
zzN(Se$+s&JuPuD7=4%078Kmo@i@Y>O{_ORs4jVTNVG|?Uo%}ChNv|BX)}bt@06`4v
zj-2}6!jc{oR{p^?T!&>M_&AzJ9{n%j+g9cclGSY@5?1XorN?CI@pr_3Ogm{o;V>AX
zg-_}XZKISh9OEOBPr(9}tejqk(4`=xrm!(ODJ8-jA|m!3QIW^nB2GC+{|6DG=sC?>
zPDNjG{zpYg3sy9f9rTPRR3!YNh2w2!kJHfcC-`T5#n(rCo#pE!Ur*tcK~BGce$p3>
z7w+Dx1xHHNd@ZYhvWg?BQ&y$)in6XJRh<0yh2#GJY*o^Nl{GTiHT!kQV+?uT`Rpr*
zVHEtc2JqE`uWY{B;gvxq-&8;{!I%%g9PC>~XNZ3@9RCA+9pvj7ynLtevaq|(|2DCY
z@xn0w8#;Y`zX+D^IEHrcS*3k`B#>Rl72<ONiLi3@0(^SG2n-8fhL~jdWBfJWmm<Ki
z`96;TnDTTJpmc%1HvnG&UYM2KNqDwU&d$$d*Yko-voR8Bo*3N(QnM0{<5it6CtrVn
zE$e%}KF2GAoc<Od_&ea0QAV^2(OkX;;pH2H7w^tYPZ?zx$6tca4EUhMSV$+=zZQ<V
z!C>vtEP#eF8H|nxB0mRj@M-G8Bz&xWQL*SI)No9S45OB7K{L9LW31+=EutW3LZqSs
z@9l32t)5XLn%N8`(HkgY6lhsf`I^ty0KD2(=Jl_FuUy1BL`$h*OF0u6q${F2>&72j
zG*bhcX<qcxFGKc?BjRn7w7Td!<nb*%MyqH6V|4*=YO14d^!0xVkTd3mFI2M1$><I&
zuQ$$^SLV=X%+pI@>Lp<H--BrVrFcoT8GcL&Jj<N;H2Oc*angdTjhrFR(S;P_4|yCf
zM5{C8l?nD4awBv9acru8O2uc4MtpT5ex&kG!#{%_{!@T_XYfLyxj+X)z4S~_a?yXL
zRvU~k4b-S$P-?CG8`xk;%Y9F0i7JyRyTyNQ0!Rx^i!_R#=ztZCVrE1kBCOob$V}lo
zol)qhRl5IhR^~I>-^xMN3Tbys?NVwgew=)L9a9)J9gwlWZK;^Ds40Pr1{M=n(*hX}
z{6<_&4P-<xAq}{i9>|#BQ{d_!qAO)oa7SAUSCC=c=2$HnyiWW=mkPXTJ4;U^*2uU)
zI@ZZ2l<mrByZfA{U&CaPo$?Sc%MT_O5n$)M2Y~9J$*XONx!~Pe0)Oc#3ytzGUVNCs
zzjU~Q$<<8!X_qUuM&OLL3I}(8Aub7kTRb_9QhT5{iM0Pl$qxkmxx(y8(UCCR|1k{i
z5cDEV`C^M>I($+^Zq$3z&W(J@jhB%;l^gkz8y(x*xsflqF@w0|MuFtUH^e133M4m@
zI@q~UAi1#xxEiGm6KkuS87|sHrz2;&u&gNjF5r?I!%wQ*C}(a=cLv_jxp4{%k{f>#
zU~VMbV&?{VZ{)^&EukVelyNQG*J&>&+nFI%V2$Rlu1cxl80Xx_SlQKj5r<5IR}$br
z?gapzZ90fO31*Jj_jpPsf3J<r!S7`V;|c+@5@kZl1`m12*BmJ!{Q0=vS?uYpMKk38
zIh2uj6RhUwtv1B$LB6W#L2sFJBsFLE-rG8i1iHWQ0q!eb<J|>A0r#`E(SI7-l!1ze
z8=D;Y0ypRUV6!z0ES#`th!YkCazX{9)Z#1(&xoxlXuG<}DzSCO-n`X~1An!7tJ{su
zTiv)s+){RI`MFy|?bz~jHmr7R`ETslx{VTz#G*WC)=^53xe(&jjHsg&U$wT-QHriw
zPv|JcRLz1qNs&~=F*9h=kR`&BM^2h*I27zY(Fu`g_#GC}Y$xYCM&kJaKni7tmU)7)
zOVd>t!ikKMJU>Jxd2;2-0$~&buGRaj5+_jfNVTJ}+F3iBM#|qXWg*-#T5Uy?A6Jf1
z`wwMx-Z5Ei8I&JTPLYj)&?tlTJ4eYIRv|A(<R$Z$K#rawFPTTyY#3V`9l3gI;~V`U
zpl=xG(wMbg>;bGri1}27s1}kSS(kUTl2ouj+#JFJ;oflz*i+Q5GjD6atp#rG-pge6
z6DBD6IO904%4WZ}>_nfJvgv-F<?(`iw4r1T$!#}kf0w%tr{*78(NM9uve6Y`ms5?7
ztCp<!x1lQ6#J|}sh{OFI%kxhbXO&#0U@U(Nxw*SqXCMyA9j3bdGn{h&ARD2+*R`)%
z3@IqdCFegvBPsd(gM<0}GwOeb`2Y}tMR|V)aBkcJ&I&f%V>gmNIyi}q?`Y{i@BSn)
zSnIFMldV>cpB*eKv7Ia<Rl3Aq9OY<&utRr#zcKwF&utxi3AGweCR^&>rxX%52DGZy
z_;=7mrNh4%0<v2IcpN|msopNY;%>#VX&!)q1O@|mlE7F1@tKy9UIfP1-^RdWCVad_
zc+G;hcNKsWq?dtynDou?kwNEy*OUTI(FsbFTG<?uHqJtectjIJzEjN>TS3FKPW$TH
z%N@=HG=U~cO5hcp8h%Ip3eljc3tNA7UKsWc1%A~uhWcC4@aws}@Y5>(28bdMuaTR8
zG=eD*-t1%qnrQD^;oVJnt9CcSTGu;UDelR6SqUOjMH3rg{h~JpfGd+t=v`V?IV|Bw
zwDz5Y!LPvIkMw3=0`L@p_W*3m2Jjkys|1b#DDeU~0^rup$P`NO{tE0kFxdgNOUo`A
zi!zo|gQ8zez$T<F2=)SiIRqXDFt96ty#Njp*a4uv55PtMuLHo>L0v|sB6TexM<ocq
zhtmGs8P+Apf4WXQZ!{eo<bQ|GD)P^(@RuG7*<u88Uspz(2xn6T-SF%?tNiVoP-P9c
z_f%AnC$t7#4fQx0TeaRrLKlEGshefAt<2zE4az1^yjuV~MPL^I({CAhFKc1^BAWM8
z5Q5BNKQl)s>lh5`NU_?UM?@XqpNzoSEdX31kN{w2cL3D^%)bp;Lw;{(V8-o;E*HQs
z0RBM$ykqcs7npB40PMh;r)K3krnqs4sk8G#CW%9ZgdE7_dd~#{94ZX#fr{~{X4gXn
zim4bYge@>Ky~&A40vAU<)10{!+|9Z0JqYGF^h{64;{wt6TmY+WfD1+8Xn``wuSY*c
z^8<0OWQn;s`soc3EDv%Oxf)#F_!&LNLx$(V8#mbhcUFj_mi4v#I(DvhcN#P{HT6Or
z(R4HcYPt%5x|yqTxC)Iu?SnM_rwYCF$eEg=H94mZ#94$Y=CmXS*Vs!%v+6-J)7YQw
zECOY6l#ruiD5hoGTJK$ez8m0wfaas8cL%V$d!Yn80-${W?Vm9o?H>~6eG)!J@Cn@f
zsxsBr=q`4Hg2*GR;zZ@CMwUk223;LkPH}V&VZYMBQXtT=C#3!Rm|dNNe+E6g<$!AS
zM#NVDEC-NLK<|G8YuE=xFBCm7)?4NWl6C#$|D&5g1`MD^wD!+GIE3tlwl%M#uBoB|
zl;AjHr}itR5{E+eP>E#tXVAl&0w^1?c|8Eu5a<Tr8vt#8*8vCW?DqBsC7~}0b}wCW
zwxH)_K1hp?Yn8RF*|5K$^bElk3A7+<gD4mNLD?BZ`9V=oT5$#@$Ug#^#!RRG^&tO7
z%3oc}5m>H`9p3@xpoM}wDrj1fM>q^iRqhXBn`E;kBv-I;!WDQnD8KKiU`qNY(;God
zPuomIwg187S+9*qn;;Dl^YAkx^}}Ig564=mZ>j*tm_3=+#t)GnufV@A44pww@4LX(
z0P|h~@G1b`w*Xk|eZLA&G(X+A(=bkd0Ok-3fU4gC<~RWD3Dg6y7(jY1cpf2727I2O
zPbqxn)2ADJ!uug-GtVe(c(aHuW~hDjwXZs@Zg0`iXPJ?~^0x>URV*o8(CMjdmztK4
z-4U{3)`6N9-3Yt25w9IXV49AA`z3kWkObXY%4bzo+<WmnXsKqE{V}a{m1DT9{}2u(
zQ`L-sFNkyef9GstcnX3zE9;@<wL@a0pF5zH>8TUzK;Mr+qx5srkmk0P8Kj@v3X1e|
z&k<lh7uuiwTu{pLehNZRQaHf>Kr40@x#sX#(-BeDB=~30!+RH?rV!&@4&ZG9>j6X#
z0I(gvIsl!gyrputp;mV!M0g(o^>0v(yyrD}z;~nvLUfzU%|~m%31eVDWdx$Ne*ye=
zYyWBRpQ~F1p5}eA!k_Jf^DDy>qP3?qEy);L#f7ANf~MF=cw4E4>AXB<$@GiZ-XNoG
zVQ4haGJ48j`;)`qm_#(~HUuvx<Fi2Tkg3;aD@>H-L1?rGYLT3G3<M7|6L-NwAs+Z;
z&+#v;v~?=dY{QUhu*l{-vn@aA-2+ME7E;A<ljHef%~_>F$EP7yeYSE6huKG6xf!Xj
zTw~mtR0OYXqI?>qI{2xI;6)#E6^4nZVKNmRp|+YJ#G9NTtOPD692~XGZ3wlW$@*1`
z;RT~NK>&@ZmW`M>HQ!NoB-Qsns2zf+BP&xq1A?gkkZL5h$VZD4;mCjzX4EH`{>nuz
z5e|XntVx8NHA#}oULxcqM^X%IW<|=m4fpikfTIP*T+fOT4tK8s@QoE%K4>RGG^1+n
zo;nni#tz&>X1EXE0l104%$5c43onHx<d#p&(T1xk;P!4tve!iQHYV$|+!_J|k6E(e
zQ*CT;(AZ~SOmz(B5flYv&tN^9vmP<IIuRHG+y!e|`vecm2mW$|;EdrAaXE&g=$-=L
zVwQbkqHDn0-0lVcev|7OIEIr}wHnZaCX49Bp~zdY+@mH>=~NpAT&!0n(LGFDtaeBe
z)NwfQ6N3=`u#~1IBY?+Hy(fhKGVt*~QoX0m!SxN}&Pg+H7RKQiz;j?sdxRBZpJ`yZ
zJ9rLZ`Ak5NAIy&~q1ieD|EVJ}e%lM+Hv-!M^d1FZJ%BO*8RYjK2ey4QnwB>J{7K+E
zfV45_n?3`8^Ar_dZ@}IVvb{gRzZeYOKLK0>5NP?H(tz#7cjYX|YKaU#Jqn^Y5x9cl
z$v>~cu=Pg~m1S0B)iXK(d)age01|(Xly@<R61Y7m^bo~{F{BZgr~Ti8)E&w{!m3h`
zE%rg=l{Sl~JJ6}zNTcD|926c}MOeS<`Q-l$+rCm*G`pEPC#Za2ibi<G%#B=QJ(PVm
z_KLDzMdYzso^{|5xIeD_;IE+8>ab!Q9hPmv{&$tp*jn|ekcs(8Wwo39*ChXrU(X`R
zb_vqQ2HT&_Md6t#<+Dr+`$de#3fJRvyTZ+s3Ri6`Du~G%KT9gyeZ(7f6r2^#H4b<L
z>9d8tjd&B%XG;mcZ9H(PkaGlo5qKM^kaI)>$9kiU)W11W|9I?8s^?tc#<4e58|UiU
zSgRdRlv;%nSNffHZJQ^uCIN59W2V-83H=mtT;;St+TmL!*mZ58)U`m=`^v(N(F(ow
znaVW|J?v$D{S|<#(3qXXA+Kuc5X`Hub%;Xb)g9WOg~5aYng1-Jle9nYS!tsEWo{R=
zs%&_c1#ux{XrVF9;2$&5)Ad4!r^*RBB`%45B+W>f4v}E0d^1ZjF59bK7fr5u?L%VK
zs@KP2s)UKa&tPWn_(UXZ0xo|Ma$J&zEp-x1DW3{HRlO$gz|TR+x}elo|KRI+L0N7g
zdfy*(x>#llv_CuV8qkP#P;*&1Hz9L@DVm4nx@85Ak+)C#)3(OAvnfzDNfzkNYQoZr
zGJ3}sNbCpggku<de}=MZ$uCLHYL1%>eBwaR8_5~N*NG3iS#S<RdQU;(Crle{I2y~6
z;77pIT6O`wiNxrhieYv!+Q1*6U)rs0K<FTZg&=sEeV`I=-vA_^379k-dD0|~N?Jon
zq@N>`-U%4GI1`ec35`>etz){CO$xJ$#$`*QklT3}y#!))c-qyk!c%Zw7ws=&ya}7B
z&^?X<?b%sGu<kxjyU5b#CRzG?73!*y$rf3<tT_z>)+ss|2ZDJkHA183Z3{w-v0t=D
z9sZo=Ez|xhD<WF?B}RFS$hyq4vFVW8Q_jYI!9IB(Q90WBC9Pe5I#B5|zZ#7$^KPQj
zC4Noe<_wGhWq0|v>|hIk=1OyMg{{kCq8vY3g1!MXa9OKEBTa-Ny0Up9KUDd`Mwoso
zUr-H=abpW0!6R)%rsk>ze?DeOo3HE^ucNehHD{u<NNPGs)#*uGbhuSol@-KAMTH+H
zE=^dbG-20)djdKdwk=Rbja^xzd#fQV2DH6Y{qCn$Kjcqm<5Hucs9zK<&=P7WJ)!8;
z3Prn%qP|(SqPK~nMZ`tX+eOi*iHo8N|B<*fy*Uy?^Vz^f@gAc12;iQ{|98cqe?K;j
zO7$}seOvuRaFLc#r$Y79U)whBFRCA6)Y7XA5Y@jSF1^Y?QN7U|;L@uo`XJ)ct0?*=
z;*vClzX@D*BZG7|VyJFJk<qJoHfg1{eER>HBR3M(ABE@DG$d@4B&<}+z`#%*v*h46
zcEUzW!ouf5F-h1MNmwRvN!VCP*c{@LFhxI1ToR_}-x8OEDLnZuySp4G8dP+b<Nw)R
zDsFU_o+tl*rgOqAXb`MB9LIEcRhd{ps-ahF!wHYo&%rS`HUvtk=`RxrYzTZP60`x1
zA7B$~2;ANY*gzThV?$u|kvFh@Y6g%Dc@vj`d9rCtn%)(S+2V9~MN~A0F2)$nwxb6C
znJmN^lg^F+=hMT5({4juoq(o3+!~Y|$9y3b>E_kd1MSD;Sgb2K{@^??!s_q~8yv%!
za<U0Nx9qty6kunxEpZPLoO-}*7*#KuYr(;OJcmFIl`y7egn)EjNW4T``>sd%4jV6j
z2n<2{nX}x57aKsK=g<!mAO3W1+6S0IP+k-AiQwIcGKWSmrl;rQlCRVJ9?N^xbL7M9
z)b=QPVUtDpAo^|tXAXD4D!J3&gWakuV}hns1e)<Sh6tg33gHpvj7Pjvy@>!vOOJmq
z+4ur&2OJj_n{gH^KB0LBB?LZL7}LD<m8NfzT{LAJO4FI$W4T?HorOxLBsPO|LdLA&
zFl^PYOzWx+YfNo78a@}qay)CGEF(spz8|_(;pRbuzl~GLp3dm2Wiej<&Mim*6=rcG
zkXw_?|Dgm~Qjup5hsgcWNEmOrS4z!z4^4e&fJT{q9{N=|K?C!Ka~<VO2I4kEgZG$=
zXAVUe(~l2<v7RU815zqpuwXenT+EK?O~Rp4XEO0qT8`wayhNqhAw40Z$b2;y!xY5J
zZ(%uPHfB7U0Mo1?*VKWCD7Kr7Rrrl7XCDL`Q-5g)$+cwm&5r+u$&EQ>D9}|Mj_Dpm
zUOkOvgT3Jm4i&}R5)`{?cS|8s#xSm;s)iV+d!bsHucK6(Q$}H!1Ea@%lm#h(b;tPB
z5>%Wy;C7rt6*4Smczzfh(>cZg#}U5K2`40cgm{LH6VK3LP{;8)Bv?01K%kJ2(6JLS
zpLK?AK~xZdFot6bgKU}(Fx0t`qRp@=2=3Sl|B%}k!6$6`1fxU9(zZxsc#CNGE~hjj
z+>8ReLL`TuBfOHZGd!L=s|ZJjPhbL96OIetLU;|~>fs-ee=Xr!;ZDNq2-gdLpFDRH
zP6*#Z{|(fvY51F%l!t7j3MtSt1Fllm8M;BGWdPKT_--UjIMZZsYYBKFqaZ?iM1FDu
zjw%@i|2e{FM6X~dk5mfV>{*b&$1I72En?1fso)rl9w3%G0}z7hJV;#b(&=cnM2H`O
zS4q*iM+5Wu1B`K<QMb)ZiL+@T>Sxuan(Gy$*@*U2r7ogHfhOG0qPRi}#W4T^lonk?
zi(SM;i>{)@HQ-f>DrvC@LX;MM(ZW5CTFlm5m#KxTl(yI{GRiceu`YsU$=k?;Y9CY2
z-6mnPPxWbp*CM1js9MX>aP~-8b6~Yw;(<LV+L^toPseXTA2Kg6P`~O}Q~|<VGW%Db
z2oVZFXBw4H>19HTdW+mIi-a0u4f7Qxd2mhsVN~L*Im$3!6MB5&81TMp?tx6Kq0g$-
zj<K%{{qSRD!&(;Q*0au*YuwLt##*;sQh4o})P03j>t*^cwrYK;`GygnZ~gLx=1ZiU
zxmK+J{nuDG*?g_&|D<*KYaQ-U(%XmTf2;9K;*&ye|54+`<ewUP=?8_^IR<OgoIDgi
zOZ{CEAHRSB{!m8h9krCn`BRzYNe2B(!AA)HZRQ}^Q9lsIrfFC$>Lg)P;CLsK=5UC)
z`$U<<EC-8jR6Myt9IW+G98j2{j<tYm44VPNhB-cmBy7r^8FdcrmKh}yqDC=Hw2I|C
zb&OH5^rL^Qqb0(df%s2JsUj3JFTRkpIHf_qx+xQ}%_$VyC^E>DVEv?{sWHPa6D=xW
z=Eh%OkR&Svg%am-XVs9h-N+L0xpm4RqDDUMuWDyaAb+p;KPXFMc~MQ6NQI#@DY&SN
zoCH=r+Yxz9h904kBw;lyAr)-Y&76cEVSqX6ZAxDq%DC#3!c*d2C%Bof;?`JS6}Q50
zQNZ`$t`er>yCT{ueg&IaSB2q6zq&krAc|rSC4#E7$Emarsgp8UORF9vO~JM_g(3C=
z@UFFEUlT(8RqP5jwYCZ~>K23jIh(z)Bu}v`*k)H4(gyZ#ZT8e4=?b>l6=qav|C!2$
z-*nnqhBIyGTg;&$d*CPejFw?o2s==-SDl0@NGWQ>BoU3|6v2ak@QBYE1%}f)@9P><
zF;IfH<mtsAt0>skLt#dh@@q<u&03FxcF=c&f-2a|SJ|mBqfQE9l32b9VpXu&OR*}9
zwg>M^=m6rkp$wZ3NE*x`@t3LkgBpwal?Ce|!Rqxul{~B4lX3)xe>%d~9}oZf`FPc#
zZ-ZHYAU<W9VJruk20APP8dAXWud*arm?X&q+6@5-m8n`7l!desN}DssFpr5iBa!k-
z|E1&=gTXuyB&!a6?C@2(>2|NHj`nNFidw;>2E<ZE-D6<CiA~deOtME6t{H?o+V$uK
zVx1J07r%wrtqSX7RJrdPrHDtz;D@Z5;|#NzQnt!ZR~3D%rY|9#mHe1ga#fBMY!?WH
z8FeRPh_RLIOnkV+Xe7-1Uddah<%z5pgR))0cD5@Fyq4*B5&dka^AkvP?txFzM!eX_
zHM$ExO@*^z6FfxWHGn6R{<meg11vGSLfP1r|D@DN1kA@Q;b<WiedeyvwZQK{A08te
zuj1cDT)N)fp={%?0gq+pyC;;LZ^nF}?0)x1GM5u&2dvO{fHwX^$H*Z^6E2uFQQ!KS
zU;>Txk|wfHlGg+qvauf8MAjSnVT7iJ_2-~msPhAPm*edm1|6HKc@SyFQy8s<7+>}V
zNey^&MjL9t`?E@DO(@N0{~C-z^+=WD-jH**!WZYDIquaXS%(_%f{lYf&`|0OhZ+or
zI??iC=t>_wqE&-sU>qJh95Or(cZNEJ#~IEMWT@nrGa|%nbOa$IJ3>3th#J%w0Ztaf
z$HKhDh@Pym=*bfSiPtm$X`scx=QM#>2%}r&7U*U+XW%%U#yWucm?Z(EHV%cfIXM#+
zSVmQ3RZH?N0OG2x1Jr|vE?}*Obu`qY>dmx&8~7VlFfTF8_6(HrKO%UR5kRJpAAn58
z)}FC_#|YAOfOH5tpdvuF_Nj(NcgEBGAMxySBc85|Cs+ID0On(s%z{Z7kC1bU5D!da
zcBN_F2UdgDv_q9mM~H4U-)F%1H#JB6DF6&ui{#pufDK=08Fh+uRMGI@Q@2oi&~yV3
zD{MlQje1*x2-UZ1L@Wdwjcba?a;bZ%reH)Rk6H3Qbw?%0rCE+4QrBM1^CLW-S8>oD
z^`F%Ky<slc$V{mwm7)(KXv>n)pAj6>OnTT1<MhBdn|ANd2pTSeaS)pz{eUpb2QuJ#
zAg)(*=qZRI6XA675F2ZsQT=^QS6S~t8)1%T;BxJcbjo9v9A&JKJ$@%V9@nw*{HalG
zF(Ud&2VffSR}o1Xoxfy>fHf+OsyL|6{6>|VlMvsu4Pc1VY&C@$z9lTA4Y*KiP8$o)
zsf?ty=GqHdm<W^tT)(mQr)BI6G#YYU$2xB^IZR#xb;Wu38mN5j8gf0zx-3MRKY?6|
zBZ;dNL}@eS-<8CHco_}3<Y8Tqa7>Z}(c!oZ#BkJ3g`=rdxJI0;hu&>chXkevQc&VT
zjEDPHv|V@Twkt)a=5}GjMhdjdy6w^pmZhfNAwQw6nhm%_Q#lN-rGRhfwAP>#dJE<Y
zoz_NU^_N&!egZAwC(y9hcQPo60{0Fd4*#UT;Xf8!;kYeAVLO32%co<bD@ft_`Ixfa
z#F*cOzY!5P!}e@O&#p`1X+&a^3A*U3c<Dwn(s`Xel<rXNr;%KpX2`gs!VC+v8H%(S
zu22-7YUn$4Al)ceG}zLL|Fb35Cen5bnS$2XT8o7kBcxh5z;y(56CdgfbFLz)8uk#?
zKV&NgHsiWS2)W4tleT8t6Yd81epnUL1K0Us0~E(N6G;GqYaNWR8s-wh&erHc!fFZ<
z=WKy;5f(2<EhmSqVYLKFaF&s+wjfQN;h{k42$JFq5UDFj2WMAk9#&6~OlLh5pRfjk
zbaQ?MEyEfLlIz?`(Fua|bD|G6!jjDC(6hklLCFqFHs=Bv<K)%tVU0!W$xha`ux5fx
zca9~}!W;=Xvz>DpPl^=WBIglm(AxBavdH-xBW+_ALE2(D+7Z^yWH*oFW>rAB)tn5r
zVrMav(9K)~<X-0%B7Q+iojZth7vy2*9wN61Qs&%G<aTpC!aU_{fkq*$hv;_9nN8ht
z&CQ7CB#IqV_ju$5=vXW4874An4604ovjmN($0+7GCf6CY7TFVajCmA?6+SQg!ko;?
zXlA`Eh};E$zRXkceGotleXAL<ZU*RMGDMj3DIirCF3foXU|h(;_AC<=UNyv7uQ9Z8
zEyeiAa5aPmrfV7WbGVMe;FhZ@yhB_|0f)Noq&Z#PAtKyWgoHU=3*i&tY6kvD*Wd7u
za_s|uG{i<UkBx!Am9TwLk<+yq?n1b`;4Xq&26r*s=ix4a`zqX}aL>bC26r{w<#6wX
zy8`YWxGUivhPw*x3vgG%eI4!^xEJ8Ag?sPK*r*0~Y<GOzgUbv3i{T!IyB_Wfa5unx
z9qvZB7vSCl_Y1h2;QkBlX1Lu_3}Xx2zHsk_I|A-jxZ6PA26sH<-v{?0;3aS$hr1o_
zakx9+z6p0H+z;WF!sUMg?uYv`+y~%xhrC^I`@!7}m)B+Pfopcfq8i-Sy|@+)ZYQ5%
zJPh|m<k()gty8fB6Yl6deA+B>R_oF$%h(S*GYdl)xJz@eF9&Xm0fzA?+`WVG$rSDt
z_#c8>qYpMF!<~g<_ZZwIu-oHs*TX#mcL&@j;O>L_B;2RqJ_Yv_+^6Bb4fh$igCPG|
zxTE1d2X`vm=iyF7`i{b#2mA%NE8rf3yAkejx}d)ZcLeNr0&XerlW-5fJq7m}xToR1
z1otJl=it5!_Y&M!;C=`9Rk&W*>ovG}a9@X;5BCkY-*&=LS-8KzJp<Rg71K(%(Qw~_
z8xQwwxJhu|f!h-9Ik+9*z6;k2_dU1`A@4lg=5XJK+aB%(xPNrPBpmKb$e$14rXzno
zg8Mx3=OSEB2gCRn?l9!fCvYDch`|ZmBG~^D+$ONYr*L;8Up|BTCHy~!`$0aA`oX=3
zc)ox;1$ul5_w&x!0}l6L$om@ZZAkw&aIbg6>I2-gp11@S?#*zo!u_>3#<p-@g}iHU
zzeTvBqG(q>^j!$o0KN!rb^+^Ov}-xySpxUdcC3HVuGHbIf6=baaF@gF19t`7=(enX
z(XMY${#Fr3Iam!h6?R?&cO}xl7Vft_SpTA3*D+JQ8}1zFRSfr)eyo4dE?&j70q#3P
zS^uJ4mpP+#jk<-+P7ZAAa7}{*%QXmah-(3~40VkM9Ojyfcev}hUWVaxZ2}zO>IXQ|
zRf-fux!!=Cqg}1i(E_@XvoZg0Ek#L>bqzwjsN#AF^5a~$A?;ON*9IX%*L2vUnkxsj
zpt|d6*t~}86Qro7Yv%~Vh<CMvb!)kvgO0UbDX5WkT#vz?bzSQas-A1s5DbQ0S$H>a
z@n;+jT^}Oe1lMZlljwR7mPm4WaxueoHG|cXU8j*Ew`&wE*Vxq)`Q60zduz-KT}=_=
zO|EBQ;byKoQI49sUO;+VxPC{Tw{+zo##XLZkd~WWIVdeDu3s{-k;AnX>1yLzhP0%*
zP9WFPTo1y=ZC#J0;Z9>$E5y~_^(L&`!Sy6km+neLT(`J#P~S3K*IVJUp6fKic64z_
z(aE&}vE1q^giVeauFnz8al_U14%AV@^)?hcVYn^>J88Jq_eTXaTwlWirw!L^B={x6
zb?Y$HPQzs($*&l$KEPfzT;t)qX1Er@dEIbrf%AspIsoTQ!*v4A8N+n}&RN6t9+LZ(
z;kpXvZNn7;bH8J_>cTl^xZ1#Z*Kj$Z_j`tGQ3i`~oa+dpUkLYO7<LidmB{wRaCe|u
zErDAV!_%d3=Rn(KaNk4l<#5Nr)GOfDf}E9bzY4Gz$GIYr@YVE(@z%iYgX+5$?g;p=
zgX=@e?uPp$<QKyojd<6?y$bmo;FdzpM!2Cc(mikwqhM}=8v*)exP?f?7P!Mu9PWkN
z02bZ~_Y&}JaPLNOxDRf9;3aVLk@ef*_P~1d4!8ki@J_g!k&aThU&H@?xPJnF0B#Kw
z>|JnQ>&R{d{>ZaEaPI-%gK+;wdLDw?2}R^#xEE1)_QHMG!)^q2gueUWK8pO@4|f3g
z4#2$^#ql8A_DFY8QHbj#_~<4f-i2^aqkz%vgF?Ls?kw1EG2A0a-x9cU5YJM$b&$2o
z;7)?vqN3`q&Y&-Z`xEqD1a}Ag7sG8Zg5j#WMoPHqu9j#nii+yF>L4E$!rg-kxd`rt
zEb`ZL{Ry|ID8V%iRbnCB+9OF%a5aOy7Q<~1|0TrXzZC8+=(!B;mnbjG;r<)NzNjeK
z^=Dg#Pj<bDs<H^~>}-Zlb``^20=F)jx214vp};PKdo%339PSy|Zw1_B<oimv4<r9p
z!MzD~SPi!y?70SR8T45Tw?5)8Dr)L_2jyZR+*eTf7Qro-_?o(wpxiD2z7Y0Z3bz;Z
zEGlZ@3Preua7%iVzlF;T&_Bhs0`^%5cL(%e1h*Qh{bIO9DU_4qdIa*9!fgn<ErXkj
z{9F!q(g^CE;`$ZoSqV1@<$D#}hfyz9!~Ie8PH~NfK5K!0jPUE={tMymhFb^asu=Ef
zu<v?AR{e+@ZFVNCU|2l$S|hC~aXA1R=6nR+HOG%e+dk*81MkpSG_J!jDZh(ot@sgR
z@js4*glo4A0ez8xA5;gpcnQMR*$9!f4^hC{^}uVV)dRRrz^CbZHzS6iQCJ4vNf;o+
zKg#%P)!s{%XDO(53Bl(WuvR=~f-<hIeIg#7$Ej59QKY{p`rV27<Oy=d--)@TK(+Uf
ze3FvXBg5?)2q?qtHb&hGiC`FOQvb^HK(l0^3%y1p3}s?}1~>{a+pIT>BJULZ6!7{f
zQ29PRh0L4*T2053Rnfx`ZkP$;@8C*k`zs1Qp7xefq~UF#>|ACUiG2Zt{kXCe@*55X
zoVeUFl8O+xR~7h7fzK}ZG%N(*UIAb^fWZJ7P0=E^L(8v_q-1UvtztA<t^FT^e>7y!
ze<t2MF_tXXQW%XM);wpyldO3P5y8<QnT<aT5>#2pJR~FO7_{7qv^Km4I&FeZNybdW
z7)hU<@cEcNneb^&pGV*`Z6y+L1i)til8Qn4D-PZ2arh*@ikF2SBPYHqK+%GR<p2V!
z5aJsEhY9=ypz3PNXv!%{hu@S*%OS=*&3!00HGp?6=#7j2t!Q5`eY6YIl|aWdAz>B*
zooQzW+Rs2={)a$~Ch1rl)v%8U?6f1KHCmzl>%)Jc_%jwzBdn{_vL%yYY$hm~mkk#!
zFdC(5`OL7bI><cJXf#Iqr$f|X6$Qf?jphasUb6|5)aJTMUH~D!){+*8YLM4BS5qf~
z%ET{#HjQ>^Sw--yiTu!3X*@(T)8DpKqsBUMo8XzNnOS&{xU%LdaYo}<9kNV^MENlq
zMeC5K;kiVIl)`6ac1$)JAJJOasv+x)#<%Knc1a0}ur6u?(u&Q#)paY17@of&wfS0<
zS+h32yaNtF+1GI6Uo`WtTBm7LS{cBuqczY<)l|g-N5>nT)gf3DTItdPgEhJs<lj~M
zL)*qxf@_X8Zi`856J|^XTZA?H>tUj2OSTxTxJfK@&;MiZP2jVtuC?)V&Q9L!Oe7=_
zW(b5ZNfJOrAPFF%k^~ehL*4`hgd_x+^Ck>Jf&r}^)C8xtYQU-;6wtPI5U8cYtw6Q4
z6KF?!FAg1UKZ|y<?e+gWdw9=&6VUe7-v9UgzAwtj+57Bq?X{k@_S);5&@)gx2h5rL
z3Eq}uclBDidd23Zx>)gwwT&y9yb1Inrkz$^3Cit6&di%cPhUH3IJk+tnMk+p#2fi=
z0zG}{cPQTl*?c1VgDV|y6?xDnrv8<=yuf`x7sG_FW0=WL1$;)foyePsgj{dJ?R<1l
zRU;d!T-D-*-sEXe4e7fGqU5)UyfK~8xtaE|8Z}o`4^a*MA_j4#z2=jxRJJ$y3!MLN
z*eBV_^jihRkUY`nAjn60NO~rl8i8NesUeY@)FW^5fHeT`-E4*IqQ;?~T<A@>8*@mz
zIN<oW{(6j44uJr@yf5L(N?d(iNp*5DW2RE)syY+DK>~W;!8OVI9rV39>N$yK8QV0y
z0~(S(JO2kD2m_H+ER#OIF|kZGR!MvKY@E}%0-Q`ZQ$UAda2vYt0y+!>E(DHXB61FX
zYxkeX@^djL<^B`dJ}em|=>8LZ{abji+<ziZCA9lb^iv7#{uBLGLc9OO0F}`0KQT}x
zwEIsCQVH$;6N6PkyZ^*cmC)`#F-#@2`%mPngm(Xl5q=fMsoj5qs>Zti#3(gt?fw(v
zR6@J|#CU%_rl8$_VuC*f3GMz96Md|KasP=){t~pN-G5?=-++X6|B0FYHWbtDKQUK%
zBenYv5zu4>?fw&$DxuwfqDm#S`%ldCvAD+lC$3au)9yd9z~}dAjQdX*_n$b-Nh<fB
zIKo@){u4(zUG4r8$GApx{|!W5M1B~l46Y}Komqk#=5kF{?oOMVOQxbD7|gLZ3BUBA
zY%hXH(j#oY7eOTH6THoMA6lV<P&Jt1W%bGj;|zQbIjO>n&1NTF_NS2az5?t_^1gsA
zfnn+IgUQI!FOhWS=MR>>lYTH6S&8hOBw<f_$@BR@A5=!n(STgR2lagL?o6+u`jW>k
zWNCd!s`x+ow!4s{_&@n}-loVT$tGp;AdGwt4v;XZq|AxKeMtBp`hi7)v|s>!C8Z_x
zC&Q#g2I5zC+N;dWPfO>oV_w=~=I-*-zQ`)5^EmSTw4dP`q-{pUq_hdRN=xr__Bj=O
zWWcKS1Zlw4NRm9n%v7#f`r=9AEaQvk$PhROVT3RKbGVmT#uv{-c9!wQGtocmPq@Mt
z&qRKf@x?PSCd>HZnV67eeDO?7%`(1tCT3+BUpy0Yvy3mEi3M37#TCAICaSZHFMa_=
zwLHuC;uj;aI?MRtIqHpB#uv{-EX(-f??Ym1)^^MnzIZP8t}Nq=r_yQ9GQRkwXl-{E
z1ES%J$NN#<ty#tw{|OZ9$TGh8&mi%UEaQu3Vt<zL#WV4#EaQu3;)yKdiyw=`m$Hm6
zo?|<fWqk2?4+X-Qos_Z|e>cqQ{Ut1JN;HNNz2D&NwPP?GI37~2$wa~28^Ag#i`amd
z+r<0pxNb>az;ExTEMpUWvQaSdWMAXfC%tmDTc5Z1Y-utcA0_2vu6FCQxoj}RFytl4
z%h93Y8B##;40HP<p>lC{sdIBZ`Mu$Iw8H0TgO76nYdFXxxewRm4<NVioP4akc#x-1
zc^mn5+C#O-_HqkXf)yVoRb=j8(2973MY8j@tn|buo<eq?JO;jrPriZd{uVRT00b~Z
z4XdBm_nY}(Ab;H~WaXYfGyVoP<K^CT4emGIj{BtCpQDVwiTN3ME1R*!+x#%@v%O#+
zADm=!{aQGL$vz8-24wWdFedvH9B)7>+ub4VME1ZxsC(WHs$%Vq!F(B&N0uywnX@%D
zO6I9i=6J~;#r+UA+gUgZrO=MLqW=AbSd5{qcr>gDm&jYZ?#sU!*Hn>j;BNS1rrKAa
zrbqB?%*z+fRxOO6?OGO3Tph?qNARsiTN4)Fu+hNR>?AJnMq}Fk4ARdZ|NeF~I1;Cv
zK_OS=-?3d7iBnFUy8FWjep#>uZnjhyi0TV=C8V>!pI#sJN&{AWf=+g{jpp1QHmyI8
zD#1m6MIU20nYp(KZ!Gi1ah8Am>m{n|ZZo`~3eR3O4fItdFudKbgE(WB;?a1n<oMT3
z<)35J677Q&e0{&jr~8FJPzXi6OoGA2;|ooq5Q$544g4*yR?vtQ$8Rx@*<jRZFz0RE
z;9|Bh!qc=S@gLEJQbjCI^X?1qSmFYVukgd_XKeLr&s+WW#Oet9($x=v3dN)+zRiyx
zMe$D?f-T=liZd2ZQG6AMHI{jb;*Xd)o{QoW3_(MRGe})gJpT?-{38y5w&M{gjtx=K
zqb6Tb{EH@`DE>W@AjLnYYlzM#+emR#96$EIG-XNgZ#fN4awu+QcfntD(dRk4*|$hD
zyJ`$<Ec2AqoNHE9reZj&sjN&sdS1=yR<oiU!~#6xtU%hLkC}Wmt52E)XEpq&NpM!G
z^hi#K%i$Gz+i>)OR!UZ`LnPA06g1f(yrNGU;;u!Vq6RbX4<RvrlaqMf^uH5@-ZJ^B
z#u7sjCcFt0urHa%%h6#lQ!Vu@bTpP}z0{`4xrnmfJPV03A7ZVD@;Dmt#(&flAW`b@
zh|}BxqC9Hy^-`OJTIy#_f<$@1)M!zJX-V?NU*{0{^Y$s)8*UhyvW1_*CouX3^jU&{
zilBmk^eV<vf{==!lBpq`NFk^qs9J~O*QgYpsnq>QO+03n8-!FpQ&DLW!~27)xE3#?
zOwqrYGW*%-g+J|9Lzm{CMfb++Md^QcOM68fM$8li?l#Xp!<Lfdt>{bz?@gvPD<7d&
zolI+1euB5@F_b!lG8cJMXvo6)Kg=2r;c_uw7|Obg^yXJ1&4m?I(woNjlTsR#mH2xW
z;sss)1;3JshtnTNiy0pti`>%dahp1fw_FX~9#h^lzKE4_gU>`IAE}G#k6BX}=y^Pa
z`y|O$r*Q+Gc897!-qV9A<(oWdb4Vhx@YI>Uy{KMF`SMWu*J&D%#8Y|WO=lEh<~5HY
zBT0S~In((<Rp!-4RfdAKvw3*tJ$WtYr2`NjUad{|=Xaw4^E2cwtR;7-$>%WP6L+Y|
zaxp4JIK98aZg-9K$Zc?cX=6QdJ8v0_$aa*mo;*hdZI}&AD)YaIe`%$-#0~0X`F$kQ
zGm_F{KFE{#Hs&HTs~UOzk-A@iYj);Lb$yOk9T@RKN|t|XV65+yY}J*vzEk@851>tL
zeW&E9gtop@`l*DrzEk?Egtop@2B?I#zEcLOgtop@2C0O$zEcLPgtop@hN^_NzEg&&
zgtop@@>N1x-zg*fbgZMczEei}y^+w?cgiR=YHfX|j8h41eW#4~Z^jg~^_?<7Nx!zf
zQzohq7j1o~O!E7oHEn&TOz}q}p{?(fnJQdNTi+>j{rk|Gw!Tv;R6<+dDU~Xrt?!g7
zmC)9A$~?u)+WJnpQjJYp-zf|HBJ@M+TQ2@2RzO+bGKwYB*0;R&3%G^#Ew4F_$IAMa
ziz=9>tZ#W8*Uebpav7UY)_01rzEcj9UdsATIl^0QeWx5H<+Syka*WMo!#VOJ)J~RU
z9mQazfMPJ_ejm?NZn@3P)fTs0!+~itJLy3pxiYhp9$KIVNi#diF|(5%VG(6!Cw<}}
z6wzjO(kJglcHGQXJ$({6s{ejo@EV{f>EK-CXp1{o_rGwjEbd?fThtbJu#v;l7I(0T
z`P$+RHnXa+xPz0QMM7EJNt1mR5_!;Wu(*+=WNC{#*de$<QWkfxgSX1!4z$HxjkL13
zlO<bI17@BYaE=$5i~AuHu#Wx+_OQSxofwGAAOHScw7c_E0aEG);Qr86@#LgCk$iR}
z3Kp>7VI+s))ri8eC_4Kt9DMZ4$FniF;8_=v!?U-;=Z`Lj;mxR07Wx5lhan(dC5GP3
z69W_(cD?6caXlWdMh?u1jmWzYZLs7<R_j83J{rM(g`@fllNSLf{LM_xxd*ih)|$C|
z2CBRYmFeDYLjEUB{xit0)A>oQ-i0H*!fC;5)J9+ko)jK-5@0O0n=IM)D6WFtX+UYH
zAOC&<n{{*%9*r4+OXMwH_l=#5YpR$P(+!XNx58Pf_<y1Yj3?ZnDCfG}pwM?FAH~5z
zSQC!!p_pG%k}t-hqw&9KPziN^P(LU^K88qkOqLfR5#jBS_v5J;&BcA*%xFIKBYyn*
zXJ(ki6{9)7AA@dcadooqN6g}iF<ji^NMdotI1-^R^i=*RHhlrd@NZ0Vt;Kk*b+3;h
zITp(!N(jr%NDhAjYj~H0^~SBCxR`Q*bCFgoshG+ZpGKi#k~S(dvGQ+3iP9*ll#rJH
zj^`toH-SX%m#PbOBk;tx(Cove0nk|e1iR-$DVL<9TKWBWULZ~7%sg-a9vRLk9BlH7
zkzaU$NlZhcV1Y?ogTw>2Mm|<Zanxs>_UJCL?JdpFgCqwQyloO(dLNTg%WwBLJ(vIX
z#N{tY%G7Or7~~y{>XS$l63`nr#5{^KmECmpZ1u6kRv}en+uPD~+fR_<WhH}=)eJ(F
z;A=JBXK*v_Ml<$3m_8>*z3&Zw3B_N)P#}lmDlVb_fD&e%xE_fS+1SfKm_;p_<N$IC
zZ%NX9J&2~z#w-;0J?tE^!5+5p7ZfU@WQ&_MiyUh$qGXF(49B!7Cdo<G%^X90aoZcI
zhDjdoLZ{4AOmaL$7djV{Txl8znPf8?A(Nb>SEk^osZ1vMFdkvvNu96ZJCcRZnJ0=(
zUNi~CCcifcvdKwZC&D@f`JlV5T`*VbL9yL43GM#bECbmEn^?-ia5KsY*!GA|@eLIv
z3-}1LH-dR;niJB`Kh578)(oc^Wg}{uXv8ZRU@CJsO?afH`6o`Z%sf%ktTG8T%|?^p
zG(V&3L^@H&Op~<>zU#F6t%P<z???q^*nw%h3J%C$HwbgQe=MdRAhKUg|5-ErW1Rl}
z7g0)0{}wzS!8|qnt&#Ij|5EcToPISM;q<TkIH%ue3UK<H@hF`BPV+=f|HCGsrvIo(
zaQaW^Iz6VJ<8aT(gm&*YPxLAmt~JSHXv`~o(lCdTj)K1#z&?&=nSg4F9yQq22H>c{
z#_9YNd^0m5rw;YTwV5WU#8?5s;7#`P0m{iq58yuEpas7^&L98&Hk4E<UVMRC;1&=@
zYXOzagA;IgHY9#?AAt9=My$kFj419@i*&hZ5K!cauccwLrWWbIBUmKnsYUvjDReGT
zTy37Aef1OU{u?Hx7HQlkxJb8|0$ilN*fSbB6z((mYKab*gj%Anngo~VN?k*AKD^Tc
zc5bgw2J6EH3n~Zed?M*1IzMz_y(^j)e$P}_cz?-|u&v+Ow*GFsAGgp{C*E7E2ggGN
z;&?j$%S6QQQK>Hnh4Pb`{60lzFLZwXn+-_*fXS1eLh?pF{UMXjJqmE$z~m_dt~-l*
zb46b;E804of39R7SVN2BuUM<{fDy+cL$+DFQ04VH9Kx%W?sX6=%{;Zz!JzYt<A3Gp
zXCSZo33k6qc2Q`AM!bTv19btew2$_cI6l7vXp~}_RcqbPB-C1$ngrLnOxF>eXSmi$
zovd20&lF&zixV2%=PZ~(+%0|d2##Ss;x`qbght#$gdF6lIgamp{yDyB8VKk3EfR`z
z+<`{Cg2ARThx2m6a3-23YL1tfgqmZWNpOz&7!&A{ILGfejZW7E^y~`{8k%doxoCh%
zj@K*T6{!zXzOevFSQBmepC@;`NzQr_qa8QF6rT?Ltrp|;9eA??Uu%4czY*Yqcoajq
z6^1*qZ$b+{+uhqx?ldXKJVm*;dY_+iUo#DaluKqKq}*2?C*^)+DwA@<@JJ2lHFC$>
z=82+QR*vpNQSL&MAmwUw9UuXta-fgN9e0`nY&4e8=uZvbXvz)Wg*mJQMom%HN#Gj^
zYMt_LB$+VjU2PXrasMexkKuI^Bh~*9;tv!b{Sgxx!AwPs?CkSXBg61fh>E#vgw#0k
z1gYVf${hFwcm!%tI~4Xc`HB{WCZT9C%OpsPRk{Xf(PmMx&PW3r+~G7BF;JxGpr+Si
zTH4r->1Fwixn_EAV`L+ksixQ1|NPTCW?Bdr`>dVbg3n-jh3idaHH}u2P}8`}Bsh(6
z=$R8|?A81DnY)5F%u~){wt33@F%GoUg!zTHnS5t<_n5I|@5bzM{JB^HwRpE;U?Z5R
zW;bTQ`DgcJKm9D6-SZ?77jF*t;RXFoWsdSSGa6{>!XlHeW?gO)YSt@Eg0miu5n<MV
z05URFe8D%J2B+!A%rE?W!t@H4TX;h&g^SEHWo;Dx$cVbJ%y(g)n=t;VO4m$M4u~BX
z`&6ZDE>y0f|72Qeo5|X7`Z=VPy17WD?_oMd@tDFt{N@dM65m9`c3`^lUwjU!>9dUF
z&NFzF#V(bE)u}3fMWLxm!s=Ce*ylmM;rlVT8kC%(&}*@JLM)o9;A@E*>>QLFcic38
zEhumK#6&`B>>Br^k<_1oA}Ep6c^s$!>({X@yiz)?Qy-x-s+3Oa)KBm>6`IrAk5QC)
z<-PK;AD`$SKq_)KE;AhO@H0ry<n+B+e*i7gXWxfgnrAbqUGX;unRz*Fj+uPoT|$R<
z#${v;RZU;mnQmnU9p17*`R58)h!;91@GDY|fz77FJ4-pdXI+omOy%$<<LIVTw=?MQ
zmfGRHm5<bg!&JkX*{U0TNHxt?FJ(9y2S^4{Bc1siOPAu}&C-7F3f$6?)lbx8)!CdU
ze2gdvW~|0sdwokVlLXfjx-1X5Y4<3WaYpF<B^5;VmaV`zwb%PMBemCixk04AVpaK*
zaz8c=&TIF<IbORLKR{(Mv>L^erFo?@A}>eMymy)SCVoT$#k`dF^SO>}u`h)tyon!?
zs)UXdkzYX<elgp$BfK&|0zdx!S7EHF>Jv=GkV~%t+?jSpm7k2{XOT=@iE!xR`ACia
z0v;;2S_!K?&g4&6wqy~KuOgX#25jh0V%1?^M3QpgU&zJ!G?E$DfP?&Ft-~}5WqNzC
z$;U|2xySNnuvYSy@DT+s+rMNNS7vu3@-L}Dezy9I&Ly?z$Lk%#Nu7Vma+E+s>av{g
zvDBp;J^o(NvYZbvIfsqm4}LDooPbUW&`Hjd%%97#;IH2;%jsaULKpkevfRyec#XW0
z$uD3Ceg15gvR5i>d(`f$wk&<|;yAkKOAF&u_{F~o(ih)629W0^4b`){7&W|p{Y`2T
z68zD<uTJc}F|qeGOumTT`%g8sRqwWEe**gD#pxA7v>fxh1#+OtaEB(trwkc7bPt%W
zntiA4|4U}}d-c;}%QE+)k+En*li?ob|CMC;rZbR1c<zva^XFd^<al-}Dl~x#&1P*C
z6$bpsR3A(d;Ad;Ri_fr&Nl#&}zj3;VH}A|f-nN%_$TU8iBpz^^N!iAqMdRsPxT@bE
ztFK1md3&AV^xtn1m0VL$wFRa6-0v*(U)>qvF(=3?qYb#ssL<y_&Tz+o8_zLh4jx}V
z_4-UR9WF(Om*}$myAfVqr86wV+&zSWMAY{!22yO-qUfOYxOqFvlYbhC34NO-o-mb8
zgYWs{-`|*GW%t`$_77pkN?5;5Vf_YDTK@jR+69M^Oj(0!e<kUE#-tL~zcG2s5qw`j
z$<cpl2HM}2^AVErZ9WCFw+()Q$zA@^;hN1epWg!+$1ZTl&-oytUXgwqKVGJHGu~E$
zvKp#*Zm`ep`3EP5zR8k9R7uhKrMApjD0mi43{%2apdNf0Bgx!|2cO4-{M(>?{37+>
z=Xj8Rge?@SbZ`{uN0}~BJrp9{e^I_39i3)enI>GRSHYP>%p-DU|9efs3K-dVAwn~>
zWVd0-IbbX!$4SMG0qIfBSDn|Qv&@%}S&Mn<QC_1SbaGT`lnYh*$@nN2sZpNhD1UPP
zQ66+hnQLgBFv?Ig5{Bqy=HG%v=WxDGqHI;&y~XZkn`T0yKzicq2-@)HzgSaAPdi^4
z_J({JHCLIMR$?IGUZ0bO4{rk@`+);NXZ6jHKEH9;y+l7CGWJPzh+S*)6~V))Sdq!w
zX?j%nG2&PGn91#GCLQL%vls$@{QF6j0;Rcb_qoEeFyfKPg{lVADNiH)If{>d{%xc)
z7l24_VGQ|7GwoGPU-}gw-BYIhhtTS8%peJ9nIjxn&)kLTZ%FV0b>e+06mc7B>(=g9
zt-XeH<`XD)Ey`(%KA|YO<`@8}&}pv!g(mS7`m}&FV1~&Y%30#)<7j56TA0JC8GmWs
zrEVivn?%AIec#OH+i3Y18qlp9S?Kesc}k%9nR%)u1qj#wkLIa6s{RK}=4)oCJJ2Nm
z$S6$GZ-T@^eRGG4Hj3CYisr#68U^8<H#!2Zf-HgA<c*=-l@tVH8IPaznoocnMH9#y
z$5#%LPWw!dUq=ytym1WaPkLG9lI>Jk^N1F$`LqbvZWNc^8@IgxklHVq(8GD?+`=0g
zG1SRqZxTig)ho;eC<=AY$*GdM_yzpHNJ<flJGov<fU$UoSH{i1321<E%gfD5L<~TW
z>VlD$oiY@U&6i6OjX_TB@A&xAJK1>*$=`@(Qh0e7|K#<!2=>Pq;nXA%djT0~DwZKl
z#WJL+ScWte%aEpG8PaqtL;Acl*jfIRzo9}#BQ`$%ln>+9%c#Z#{3&<gR(hG-D)^W3
zft{`*IMV+8_h90^@M)e)DKfVm!&ft}W!1S%_WLTn)U(l0Xc02_!>{$syB#+>@ib?r
zc{*1;LnfNbs$vTZ*usk_<K;HnCITP}{-6N9R#cFUr+v9y@z=g&9z*`rkAMGI6zqk5
z)^f~QU&AO~H)Y7Z{Ly`EV;>vwJgXdQ>2GJf6<<g3c?EpJ^Kbo=wSYs~#bF=E^Sq_z
z`3<OGMl@?Mi|P>j6!tp{&-z`@OyBE2o%LswAPb*`{-w(G1{l6)VK$_<z=Mo@3}iM|
z8Mu_>jj4-s-b%DY&f92)@B_nnx%<F!47o{4_`vPCUJ6N;G_NDeaQO#AZjx_nM<o*<
z&s&DvupJv8Pb9D*H_ShYe`zzBiEPE6>4lgogV(F^JHrI8vznJN0gH{`^#^e;GfeP0
z6WJLic%6y<8GphR!Rt)qXPDr1CdOo#;B_V@WSHP}CZ=YX;B_WuWeoPwz);n|+>F;C
zGx(4UpDf7uD6R-zXQDczmBSg~{}|(3o?(L5e}Tm63=_Q0QE$vJ!Rt)KGEDIL2awpB
zVS?8QCc83B@Oli1_6!re{wiAAoneC4|A@q`876q0lGl-8g4g#U@sSJ@yw1e_3=_Q0
z#HTV$@H!JuWSHRfA|$?)VS?8=wqqHy0kim!%-_(@H@r*)uW!L!FCDzT4kdc&;Pu0}
z^|BDW{t-ORz5&~`ltpX+AKl{pbzHZ2@H(65olQbLne!sZif_`8UfDW$owr`L4qhka
zWVQ}oXLAgnc@%lc^1Dc-F2jWsP|U*IhmcUYnP^?*n(&#FH5^#ZoO~>@cyKwM=ISW*
zg=oUdX84SFxCpm0TSuw0NOtZPMyY=i*?n?#lzIcQ!|)mQzXds}r+!|}H}fgM>)`V7
zvKgfwY+y59Hlx&ojT}=__Rmo!*u?ydTt=w}oBOl4j#3X!vbjDcN}Ywok8$a%qSV=&
zm&a%r#LT2%UHUN;A=ts&{#9(YV*sPnhahcYX4smd2lLb@5i^sC`+;<1q<>3&-n2U?
z`1dmuW03l&*bvgE|2OdB@Jm3-Oymzyd+_0;)yI)Plw<HmaLU;6whiNO?=&bg;r)12
znExuWa{djca7>Rli`3|mvr!#Z*`JX}70Y8fIT99;_jywp2EF<TcK-z9&3_(`HlY!(
zaJ;F!0)r`>W)f?W7`4D8Zb70?GP;3b-#G{0PNe-Y>Lcdq7x8qwdCL4RIr($K{K8+E
z{1@1CPN5#+Z;_yYq3Kj%Ps8x7#xOb`Uu+EI?dUX|mpAGHr}}qnbsOB@v-+cn)yK?n
zs;i!DghbD(k0n+G2@6{dMM<zR&pWdseQ2qV)iJFUwy|?EAp@V_ZR$EaT7Wv^ybI_a
zL`>^aq#~E$GX8O7WPF%RP;@<RQ-|@EbT1~u6f@<On2=N^9^)f*i9av?4Duke6t84S
z;V3bYu=A1g94qjGXWz%Kh$>*bl5CMHp*r&>(BGJOneJINzYfp!Gtcks7xv0c7rh4c
z>h0&GWcP!ZjP%meXCMo6GPe?vnTNmUHa)#Gy@GaP7K)%#{$e^M*B8Cg)A`s(Qf9`>
zPDQcQQ63AW`F=$%AEysTx&#k0MqwbCNq$(f*BI0soC&N%chYv39dACF^?RG<lPhxB
zd`_55PtQ!xNM~lQ9WGcMK~>J+`l1WTF7i~X$#&5F!e*v|1^Xk(0k9J!2gD1jAq*@=
zn|wNYKt*o8n)IM#J!w=x2oDmbHXvcLlNg%rW7~rqRh?z?O<U=s2k4fDo0b%5N0`bg
zQDEw+#K?4?)F^a^!Zn=L|K8aH_+(T#q5$hUIvfU*W77Ra_%${h3UkK|@h9fK4^OJo
zqiUuXBzqHc`2?6S5sem2HtAy4XE!D3V4|E9XbyeDyon!Z_mMkMt@or4w&N4v{X1v(
zM?jK&fT)FHJWm+#Md4I5C8iYnGY5o(PAGhFNMa6esxuGtGffQ>H`CFf$C1Fd&$+P;
zJGU|xLe!X>58r-B<e3A?5UM>hY+7f`a)(u>Xnjet;_=z>Cs@sjT>b3Qc&1_(ojIr2
z3#Z0jE{m5!RbA$CjNiK=o^NU+?|(#U!SOPb%rq^;;5jYC8CHlhDa5^8am`8;*K9|y
zAeoNzhT=*Yw$j#3dW|3}vFe*B%6S$o`dOLo9~V<4lLMTtA;bfnUXUCV3Z4~WE4NC(
zhJ?>GI}UXPa~K5~-|P%wYIw*vP~`FTRh*EISrvrrZTlM;iYO%6G^VDCU3mx*qvJea
z8l#Mj35S;;7-NlKU=B*6!$C6%2ZJ54l4?iZ70HUMychFkFos<citGeOk|&1JK1r9j
zd-eb=@J7g08gd?zB>+QTWSiq0AmCQK6XrnSHUO!F+e`_RVG_a}f7(sN!}cl?u?4ao
zuY)Gadw|aj3u6#>ARgMCWufj83w5(KW?rgs17{<uNkiz%kTg8ZL0;}qRv~F9$XLXL
z+0G3|tr@MtK_s;*I8d=&X$Yzcr=v6G#aYAwnfV%(u5_PiXt|2evLMc*s6!08I$lum
znJ)UiFmrvc5Y?{f>odVsT*%u*SX$JtxBss(CM*D@SpZ7ENI@@*32M_!j)jBjrRSbS
zc*=HdjNTSCa$L~LO$4nz4st*S5SC`SCj_m$(8lQJqE!Dxlp0{cX<#Ba4GP<&g#nYq
zvJaC(;)NCS;M+G=Y-!#M3)dvHK=MOLhpW9iPmKsg3Q$Dw8W}Pyz{iM~LOxm!ar1?C
zL)=&a=!9y^qS)ACQ-T%@YzUK#1K$PVSQ7XiCWUR85(Cr1O%{j4<5QR!+TNHDYII{}
z7@#?)ok3QBrJ)-ptrA9Xk<$kxVhTr4kvn++#sA_E;HGN1pVnQZr(3WrwV;M*0gEFE
zW(9{aBg7mgXR6A?8Q$Pz%i<1<h;D|F1spREM+sQaQOkC@A)rcxaH9YrVcK&|LE<R}
zP%#7putpyO0xj-U;gc1;hzs+=hFN}onAG5NrJKPLSA`wSRK#3>ZLoK>o6B|`XmNl=
zvlufb8$)PeBG+kLS`^O&J#^M$bnPwaj%w9mK^MTH@p1<25OWeQsQ{6yR2#zFQnvz!
zf2~`b)?Ok8lH~t=3=B=L?%S!J2pGpMr7SWuAi^*sAohv_iF(*=V`Ub&w~Jpn;goYV
zi1s0f!uSfu6q;V~z7<Y!+ho9kI5i-I$bpHdILM+RanIHu?j^$D(D>+8^T0h-*pUFD
z9<fR>eUGgZTUJlFb&40m)(MEG_fMl-aM0>^v<rV@OhsjtjqM?t<17SRVDV|Z1`D-O
z!ah4hD`QB-&7=ftN*A+87DCU3?u-+Jc(OrHOpo|zq0A)1t&^fvLQT7MGDYpyiAe|$
ztt&$*CZ~6|MM^bXg*a#7Vuk~ciq~dZRHPuyvI&KBdKLA^XNMH#L@w0@@0^X!9TQ6<
z&1J3(YLUCVyA-mw5dDmBGZS`}QC{gT5LD=F7jP=wZYbAP@v3oT2rVvjq48%v@u!=$
z^<H9v>&JL^RM7IToh*>UIQMHrptnZJRF)%v5ZUZdWD`*#QGRo+71hTIa^JY9s>RQ9
znuT1`y}}VdjFfvNPESXa2e_g<Fl6t9ty%&nbH8RpoUCI#Eryeag0Y;Z!@Bb)phNpM
zhHL4g79J6@X@Rrb0b;OYa*^Gp8R;2iEAUyuMlE5aV{|bi;MVJcHZ)(4GeZS=bOvlD
z*U-}Z1%ru@UgSR0Pm1GN39MZb=VN2x^NUE{#1P;o@%Dd;MKwd7&ky*2K8v~wrZtJ>
zPo+E@e?m7il#T@pxnN_21G#*gA9AN*RKrChdaAAh(~{~i(ZCNm46Z>cKrpN7rl);4
zCTxXbMUR3}(M*z8jVLo2D!#A><`;z`LnRn@2bMTuMO$7y08>uJ=l`@qn4~r6g^s)`
zq=LrN@(Nw2Z>G3KV6v+{AtYpKs5KL$(0UGx?9w@i?hQFh&AiORvNW>_#zSZfWCd=H
zkB~ZYW+;8#w)XHL*rn8R4J+T$QfGuNL$wZCoG;aaK1a9fYNpF5zzHf(*SI1s=|<sE
z-F0&@R)lh2`S;1a)dfVIr0_7{|3d%2yTV$w6BQH%YH-Lv&_!TDCDU9zU1O*#a5{^k
zZe&S&6OEiDY~T}E*xAQZ%IuK<1fEGp<e7wxYt>d<PeJe<3B-oJ+h!Beu7zuy7DIRp
zb$YxNR%*H;B#d7jx<~W4<^6l~`9q0;4ayU^c7h|TN{A+ELvj-HIZC+YRsMyc%&^{M
z_c`obYiCc<BQU~yaY$QDSy&lX&_bJ5!Q%9Ayt*g_-`EM*zZ<cK%~Gy+2-vr~$eyqo
zGo48(j8aZRn7GcMRX$vYtO)Zq4dm<%Zn3s4R}RzUPTmYc14Ag}jtP5(28Pg*jhmwt
zacNiPD7Nv5!`3iS<(AU+b7;pJ8{vQEc%kPm_Ww?M)vP&LfcC0u280|zS<ZJ@P00y1
zyIL@5vl>|}urdlLaHPD@W>a*r<F(r$E3xLpaI`LFM2b7#1dg;;D>zoO=(u=Gj_$&V
zA=SnBIHwu5`UkAmP){KQ{D00qJugcdHK@?zA3pEu=eSMmSv4RLXVkgQlRj3}Do2aE
z(F<KIcBl1^o^pk&Z8cHiIai3&;K2|ayBVq7tx}`8jJ3qWFNb$|Y;8H4TB<wm;^0g3
zZk#j0mkz^@b}Qhl%V`dRGFEFQrJ%^s?x7YQQ&Aat0MqGlbmMemks3~qA91lU_ZT}=
zDha4RDby{LOslXAlJmgJ=yX1%V}_*QQzR1{GYPF;tcPvJ<alMYuvyzRE`88ru3pjr
z5AO_ls|;koAy+p8FhP^)@-stOoAvj}nq}1PHldZCh&`A|(NQAOMv0`xU4;t1(u{)u
z3`AF9x(olVtMR>y32|Hy=+KooSHSZU9UcG8vt`WHIXxd7Un<AlF(g6mLUHPLyrXRt
zTwxO$&QkE<h?qKCc6mY9NjzOP9VieBRRF+Q7k&rVML13}@Yqng#wF;B3mo|!-@~j7
z50<R~r%rSrZ`QuV4iK0C#x>{335Ut_%_vLI-G;e7Pt@b_je|kv04IzMF;F$lnGb4B
zH}c7+NS4Nz3ZzMp&+bRaj$ET&f^2nzP8{{Ph`>#u0}wb~W<SK9*=A@4Nw5ucp<|9F
zHw#{-Z?P2&<=5JV%wZXIifoT{m{I9~D$Ls|XZ84ap2B2IWj@PsNH$RBN;f0nbO(pX
zXa!(vP|F_ifS4M!-WO6yXI$fEkl+hVhN{AhMRC}QZ)F$97eyJj9PJX6^unVZ#{h}C
zg>4XyIoffz(zWq&%0gkI;SrC@;t`Jnq1s-)E?zCc)wV3mW+&%84054OSSM<d#mM9^
z_%0Iew^KAWN*8)lHM*v`Mnrldq-I!1&a{x+s~^;1c#30PzaTvvzpkOeC><k8h_Fip
z?p(`Y2qI<0zI{E~XnFeBsUOdZ`lGFQWZeMOI~Z<YsEjq{FlH{^3oueAEFvZ1W5^{6
zAJ3`PofB{}l5-kF;2M$0{&1D)02lan83_l!u7)48Qzkzo?3A^*XjF1RFuw4L2NNIz
zwy-O}<1q<G@Oj{ElNfH?ONPVlaJHNXAX3lQO4Y=~KD8>J<YwwDoF2KxpU!mmckggM
zsh2a^?V4k8Yjdt{3y2dHE{|H55kg7N?=n)`V|$tb;G;2+YFk0rXd?5yJBw>s(QzN{
z^b;1Qw^<m1KGr@boF$XF?o#)0)LLH+c2q`rVHJJE-OtUS`1g<Z?tl}{I4Cm^1-mfr
zQPdz8Zn{IrKNC~qqK>qvV*_*J6jn=NDQuP^!-a*+5MXe!Y~dx#!V3a*LvXQyejqWI
zl+iY7N1!%7E(%#gOj#y<2_HN=GPuC1{X#R`ZeaQw<WO}6bjOuM*IekwrGrkzcMJwc
z!a>)~^EH&N8RdT0K#*?{fo^x`Xmvj1aDxr#Q)()Ky{zSB*vkp7A$!@_KJ#?6HHf<J
zavZ!;7IWfRGxj;wl~m;DXH_x|B?K|<Zp?N_9XU_T?VJrkp6E6YqbsyRxSuiP=Wr1|
zV|kUDEn%W|bAzdv@R@L@b8&Zpm^vJ5`wrWfxNf(bn0UvI0EL^HxOEVkUM7pPp4nZL
z&K0#wJPRH03Hsbb?YahoamQnZ@vh$q4H-ahnV#gaXb6;4Xvn;XMk~8jO5A#+T0u<<
z89agd>6R}!;S7f}GxY;wl=X_!QH?vHiL68*%yufW(cU5N<QS1NT$>y6OP_F|$uE5q
z*(c9N5jg-!MH0fJvuZuz(Vnd%TG!p-XjRs2U)3EkIa60Z{Wn%5-fK_Nr6!UtEpgiM
zwduApi4E#$xUq^ZNBzqX->{`Z&+~<JCu#+2DjKcO!&o%V9%U?sIv_XH7X)&P^tjd0
z0`XTy{?9@D^Fkpp-$BjpVFDK9?Q0kmBS?XZ`H-ElE+|s~-($=VB~|anCJ~Yy|CP>7
zKzz-j7iqgC^j<lTjI$S)D!RhdIR3`La+;fUURiY^Q&<xt$(k7M1}V;=O6R2{@|tox
z!IBJjQE7IQl^(CC44w>A(Xci?%w!FfUdEPmt*2}Y%DvrLCtxa((s6$NUDjkb-0i2+
zv^e^QYesY(pb^<X`#|R*xM>g-nzC}Jr0i~C2p4&1e7Mfa!KX_tgjbMyF5vL^YM}yG
z3*iQd2#i)?71{U4x&y7=pC-OH7B0p)-W_|dHv%DPG*@T28I-+jy}a%u&ZRNJL5JIP
zT{EKhNGUFVgw}POTo8Z+{z$WnO94-J)OLnmTdsPhJ6KY`n-bST2JOxD%XYicPkNIR
za=I_!yG_-y{<+K*7%Of!-3&pzChnr2Oca6Ca5m)Ozl#7?TCET!cCKfct>@o6KF>JT
zgi}Wr>6hERej@jFUwCe1&BDWKPzw*U&81Js!HF#=EH&xiD1~=184{_Kq5TrZmeYQR
zUJkcph1_B|nY&us8`eK3J}^h*ZAfoVlKnHx;o7qCUe#jsAcupD-Pr>3x5EdQq&rE>
zCL^Q{UrUOU1)|{+CEmN4Go(W^$-7O@5p#E$dpIu6E$kW)(o9WlSiQ5Farf2ui^o=D
z;N4fN^s=qe>+SBVoijw*RPLLu@eY+j)LZG$Kip5#p}%$C4X}o}eJ>6QgDnn9+=bW|
zQ}9%6nq5ty-FS)b#r52*TeqB|3Y~IXWR)19BP^UCmV^)%6~LkntTlDG88fF9A*X8_
z%J2=(1|irun6@<%_|N*|XncXgOhk*(r9}=KIWaBWfR3&?he_QCHXGuB@AieO=>%}=
zp-&F|5o-6$*Bt1NP%ocowN2&Z?4CK)sof1joMPw`)ae=~O06>h#}wLq;l6;P7-B{U
z7>S|TJv<@qkp!DV*ow7Z5w@cH<q<^a`0p02l0bDFOt>TqgIBsM#tK6?@CN7H{k$Sk
zv=h3(*@YsxsficgER(SzzMo=vj>)Sqau_a%FsB0M0R~cdJ;m{&C|l%x4$W1@HSP!!
z`d^q1QZT${kuwFX;$j<3#159k`^Cvc$RpZ1iPA``32W=zbDmLjGs8HE@KuxqCx&xY
zp${ckc3Ds8Uml;B(v~c>B3{avf7iz|j7DAQR(gjMk5G+Tje5@S2`Ckkh+y4KdJVFv
z79Z0rKBl{voM8?0%*62}tQU6NE=y9Cf(H~3aPrv>6wn1?pSe0!X*XqA{B!yxamtZU
z6A+72+&Lu7pu1%ex?@~N1X%EVj)=H@<#u6@%X%1=acz1|HEP?k3rv$K)ThbDT6WcH
z!o<2k?7J9`MwktTr-u`FECkpG7L9x9^&^O7Im?=0Gi&aJ`9vl>=M3GkpJ$eO!xNf?
z@r8Y_H#VA_S)pdPW-xu{>g_G^FbrM|iJ{iSft^K3?WUtGrWA2rs4%UHg}Gow1e;KX
zA6P#-ctNW&?mpwXJao`0$<QTi0K7IHLd**TjTB=gaJCIJGFa}$z2Oj1MZIA&s<j?0
z2d#~)$DNhH^w#5Ul6aw2pY@HlXWZ8BVmeU~MWh;HiZqa4;A#Vy3Rc}R@D)W^w%B1O
z*U8>Pog&iJ(uw-Vjd)eO;W%J8_{ky1!a~r>JaoJ$>Lw7(zAaCQKy@c_h)L^kH}Voj
z4WXfgX5e+VW(!AI=4d}<KAh8@04em&#8?!@mP&B8cN6bR^z`6)57~zu8jm|!vfIe!
zxLWiwXIzSUmvb4+p~e+)FpIZgqLJr@IAP5UP(*9l@O3ZLBBUq0?qxA?9*F79cROIw
zbE1W#@?7As&JZviHj^PhMiMRV6sy6k56i-9nycq*z?9X7;UPa^;9Wk#;ch;h4TU<J
z3*EQ&EqD-$%BZiMi~V>`+<oi5-Gzd1?Q2d7p$Crr5KY3<PbK{tDr_)-B96rkmB2~e
zIW`@k8o-gAi!64#fl-HH^gX4<2GSe3uy4+oq{R~^vF_cyxnY0g+|e$7st@ZB9>ylJ
zxATe@>)^E+N*@a{EWjW!`#N7(0E>2idB&XU#lN?6E^x8PHQ7R&1{I6}prSkGIwfF%
zeMQv3qZ3TevG;rtK5>N-nsQ&O!R*T1q6r1dLlz+!aH`ksd^Y?tN4yQiKMAey1)I1|
znysP6fYLhvOd{A{X4S>zTFYPqL-S#--U>PJ!EsiGyr2UC?6*0<IvQRQBJ3@i^!PT1
z;!y3@y2>@RwQX{~Z*_3x>}&Gj>+}l7$S>iJ#Wep90#=AoJ^UaRccit#Qw=&PP)@TL
zmTo{pNpeP_O=QCf@QnCky&y=2U)kWnlUYxeu^|Sklin^K=4i7h*M&9*z|@gb2yOQD
zR4fvkwIA>xc*V!4wB7)s=|IdzeKc$kX2a2-8XWDWD>WA9#dR1r;gJHsNj1oDC{-{Y
z&YXC{`AmnkyDTm#f>~5j3FqY=jYx6x4e^{-kTsZ&j&qPfSoOW2o+!#!`{MI~?L(dc
zG69o92-htlep6#QXAbv>dlaBcsGue5&6r>z(en_jWCxcZscsZC<fyw5<bWa|2e19G
zav0<ZiV%vN_kOxTSa-~_4h+V78iu0y;*)iZ{wfP?u5!n$qss&x8vyAZ$JyNyxkTdx
zqByltda1Qe=Y(Ld%ok3D!Ig;LRAn)aE3BnA*KHM1oEmg0^+32jCT<e}o8b;1L=(M8
zJplcxaQR5K1tDlLc{N%$s>BJ{q?`2`OBeRM(1l56;2Rvazl5b-Y-nt>=MpE0-l{Ec
z&?ypiD9k363xr(6#i`ZfGUQ*{LnB=4n10uVGKZ!2mRWxod>dAe7*lXX$dHz2%#-Vl
zIFPx}{Yo7Wv?`pX71FwJMxIw65)*&<!&yEBAgj|oGFW3=WO|w+YvRv(>a!aXC7CAY
zTF_5%u;;CFYbGqgdIifM#D;KmoYTfIsnyjcH-pV@cH6Y-s!3<M>LwO1=cumc_;BM2
zr^PL&72KA1R$NnU4YS;cxNY(FR7ua<9+u-^&TE2OTa|G24jXnpjsT#YVEyxWom{5T
zfR|=uN`W&^E8=*Z;TBF<mdvmY1<(4S44P$yIFTK;$AWGkPS3^-`{HcJj)6<f?Y@I_
zebJ(mWB{W{LjO6vp=N(qLI>Cc^q>aIK^98~JIt=NphiHv$wq@oeQ_bgI#7)X80Bs?
z?B%T~QD9Apk(PP!bxT*#B#`pFZ?xKw?KlViLwmGtCXZqeZCcnUEm{QD*ij-L8aq9a
zBEu|#vKV-(OPZ@hFTksp6`x>FSb$r{mR2kfR%SBCMdn;bXZ6vb$pz@^5E{MZadn95
z@a<>~1-}l#X@FH!1Fau>P&Zf}oPfkboTspM4BHXy(OCF#GKFSZ;;|_sCBvWsOqa52
zf(l$*DTtHA)PHxIHC(f#c;%k-OirX{#Gxm6KE+957Si%~swPnwJ))W6-FV6wk_$yW
z%;>naspRK9jDvRVZbU<q`Zy*Ak|Y?-)=cO3T$F{|Cy{^}>H3B%3@+-)<b;nnUu$0>
zatMct(*YY)?V*QIEo_1?+n^N#ghL$0RfNHJbIGXK=xfFeu|(xy{gg+L-NfI4Wup6A
zu*S-9u|s3k7^g=i)b4xm94cGmi-vKKx7&8IJ^C-w!65u>ote1a{gq6?$8QnCAE&D$
z6>to4T}<S@D+Cv!O83ZHElK!FZU~7w%W)36x-*Q+I;SA1fE|}N-$6~D^JCBNHOF?R
z+}{(h6AzI*-$bnM%pO97a%th*6_oS9x>Zo!zIvM|yZ<jlayFQ@8+s=QdG`=W3$boM
zJeo*&`Illh#;Pm(;;*&sT_?Q~+Vg&+!r3TvKf!keAG_7i1ar>usn;&F=8N-1TP@-j
z@$A-~-vhyPZYX|A*Ks1)m{8uQxgu;W?CEh!S7|OP$I^H?lf^b%#q+M*A9DNoLe3Mo
z-|~5QvPzAS;cARbt1;f?Gh(hA#(5P4c8eR#^1oexu*Pm8aRTRdH*o+}M&FS$@S=#t
zd?trmzP5){+FH`*B<E8|;V#vFj6rWcHSa?z;7-;@LFTPn+IP;ERkfnVF;%Fb=twrI
zh#IKaWpr{<i4`k2Yq&)Q^RoyiZokE%zNu=?R^0C~!G;WjgnMf91aFN|m>j~z&JdLL
zuxC|9?enb4>`6#Sgtl1C>wKd{OII0XuH4KpE_30lAdZ%W+lEpXo=G{<bcrisTAR-9
zDTu~%>?-JY_<;L4wJj&oJw(>kS?+mx_mgC8y-9bd-T0G%g$_g7ovE?N?cUTRGt7oA
zolA~$a{XOhyc-(6vuSmiGT-<G_qcV}+bof>dfYeXu)w*_Q!F62B3MGr`F))|N}k?M
zkcazOSnY2MV?Pou{6LFIgY2Ggu-%Vx`26IbVX(mwY(>H(`Hkm74nJ8rHQc7;G`<C)
zf3}C*JN{QPq&*cf4TQT>hof-TOl}K3uyHsa6K5=RM105RM7x`E=l-Nhyj;93R}1_z
ztYxX&!;9Z-V;eVhRK5+F2NTeH{*Of3m<2Mdm~9u|Wh)RmCuD$l_&nIj;h?@QO-O<G
z-@PDjg+AMUmTlZPdawq98A94y9gG(TxpoN~mG{KMl;}Ws7o8iYwSq`XYw(<+wX0a|
ziHQ<Z9QlUl8}_d*m=&_0^2B0wf15iLZZ?nYpOz<zLb&-eLX@!i(@z;DVw6niH$p>j
zDTMD@c02G*ST3IXS}lc@A8hf+O19w?E7?p^vK>u=-r!!)`$8+zR-@?v5mXr2UA6Jc
zGu?NC)QabP=UboVnqg`MG>!_$*%0d7@Uus8Q7wvdnu8L>n$t?+&m4UfZWU2MvEPs3
z#|^xtz&qdn3l`nS4=q9bUtC<Ww()weq`7HxN#pvJYnxZqm0aH#YtlJuH>_N-wq#{f
zNyEyOMU#uC6;EPmrb@O>ow97o<f7*FH>}^VWqr}w#`VoxiyGE9m*`@qt%Qa>Z&hP`
zeN)}0;??YX#rhR%w{5R0UWuW2v27dcnvjn_jnoudwW_Wj_xPhlvBq_ExWnJ5YKpCh
z#h*8>=RI;a*EQ5_#Vwk{z#2E`Ty}#y{GctHxpLh`{FO0XcI%3@n3}$CifwLO-=Hg^
zIGWM-Y;S#RtxnW!-n?P6F0W|9L2;<tnqqb9aIbz+g9)Q&sXOtE@I{)e7hB7wKX|pA
zS9OI*3&!{rbG;zRkI4Lp$T}>Z+u0$~tIJEvMMl|eyTzLJDv?#WSp26~EpBP+`k=_D
z7dKRj)aodni&&-jomVFAXscc>GCD-8THN86oe<TBkBEob4mZrd@5Kgrv&cdxrBz~6
zQ0U9N@~T5`$j4@^YL@fGpM5;(eC5R}cFmY8h7?Z_jk4=ao%&E~*Fm}E4f!H!U#M!!
z<Fa4H3{-xGl^aC{@<qmhV06D=O5goY-!5A^#dcZ0PW~y_k}KBp>EPoc{Y-Fi-+8My
zx5%2$uagf4Q*xgX8_w`ahAa~=w#u@#k5~O(3_tZ-(IgMA5g!cd#k0s2SICYv;@5t=
z_-$)2!T<eA@mlL~al3z3<jL44#8#OD8tgyP@Rgg}#FjFV(;;i(iQXNu_J!%7U{{+w
zASX@}zx0kDT2-19h=H=~%8iqvNAEgut=JM1sj^bU4*X8!oE4d}OwK%5RHBxm9e<)-
zq_!ioQZ&Vu$aP{{*QN4dvAuYEl^nJYWdb=;&S*jdhsCDqadN5nrY~c&qA%YpKGG^H
zRU=&yQ65b7<?!7HMaPcA;&l<j@7U9Fnb;O9f8eKLTjl3!TH2y}4^~ty*(<AXJ@y|p
z_wV`6mhG~tv{nuf+p6!}TU8SkTdKuoP-J*8*`NQo>;sxU_;ZokA-0vRJMtg$!daKk
z64@Pccj-NEPVYSVEsXMNv@P<^R*9DSy|T}Kv94NVmWiwm(7aw}&e)GuXNt$#I^+g1
zRu<2Vifa#FdAZ0xwNOkc6NlQW#c@v-i}ls-7c1IlZJZ^R*NZ7KUyPL1U|;d+ws!Hl
zSKM-Nt=M+BbFVz{((|I}l*m52PkbZj`hLsY=$1{jHL~GS6yCk($D~-KSY11LEse<P
zNX?$#x0SbSxwuC56-Rc0Irlt%(*=7(dhww{moK|_e?!H(U&%foOV!I2Eppk{<b<k<
zX!LZ&YH(Q>#3=ulazaD&d*X2{viNRrTzseX_@?sa=B=_t7Rr~!(KdPNSD&h?suJJy
zD#fNs@uV*gKljxSE}SKYY?!n4da<cYWOs?wGI1Q7^;`eI(OZtlx+Ag?0~C9BDd%O;
zt>SeKPArIRMC&)oH|16Gh`3I61qJ<O>y^{yuR<3EWnxpic+(F?;;&LA`G0tJUlV=@
zk#<~@Vz@*O<Dxi2Mwa5%7mH<w7<@|HgU;^^+C_T1Sl6|CEdM((cAv;C-VI8KMJO~{
z;(p-a38)pwVdA$t4~Xkx;)_8{<~p6Io+6K<P}0gE1z^4dKp1#Y!g+UiKM$^3qz8T_
zBD5<1&!fK4D&EQs>tl6WV;bTu7Gs<i?VVeosR4Vyeq05Fz>lJAKmk8WSm1|dv+W|+
z>HyrjI$%Yt$h57BZ?1P!2JzXegXU$|H#e@06*aD(p#a@W4R*~m*nX$)17NN`fR&vj
zxfp(=jEfNz=R{`UMnn!opdASG_4t(&kvH>K1us!vhCS1?r6M{^Y(I>4t~`!*rpk7)
zLRQZc>BnD`CEu5|;%2{V-nUQ7$CrS=U-!<6R9|e7UHKw427yqpQ-h{_a)B>DBR02J
zU3JB@@=GQHq(r}Vv8`C_*?H<jR187Ot7YXYrB%Vm0f4z`c~rb#K;AQetFf+m%`G!$
zUvtUDTMnW54$-?>Mr%b2BtI=C)>n$0vd6@icgEyE*-%uz_Oa&D^3yLbiOSkexo@`E
z-hN%fE72CYI(kSp$P&4Fjr<CS6Om^kvb^G2+y~2e5gWSHuihjUQq`hw3^mG8Lu3K&
zS`NQaDi=^zf)~zRzE4biw(X4g1_-gL{Vq`>V^_8=ZH%^vmpnj1s?3ppdJ2Pkx#!^6
zjp{0jo;zE)Xm9$mJ=%hf{75YF8TGp(A~L$FP~wj}<tY@oEjXa_Ih+niw|HY`JM!-c
zK+f%__M_zQca|aJLqVmwkKz8I0GJ>?k8zHcIZbb<28tt{c)qKZ&v&V^yIR@MO@XY8
zRxBzN{m!u4U+)Y?_{jcfkA7cO{oaS-=yx@W{!;aOuWIX;JK663ASfnBzO<7=|Ct|L
z=4<MxiDUA3c2}$9)Yr-5xupf0W=_9opPVpMY(KM4UL>~VgD>*+ctMCC2B-F3`im{k
zP8C~#q&wRmoYpM+Oq9dr5Lv)EiRM%IC0Jfm1T-d7@CUmCuMHCX&iHd~w6R$9URs?N
ze-sF;qy!uD5hwx(vGAjfO=TcL{B5ptt3gLwqktj<8>*VJMhO~?4X|U4IcNb2CC&j*
z$h824+Yq4Q7A2Z%sEcjbXbj!Dt&Oqz6^(2hxV3Tf2K1!NVWi>~tVT3#!I}=V)ry3*
zT2W?I<L0n3=h3vWjs`Fut!Qeh+ibdQUf&2f)w8Kz8E*)A+Ac<;^^I%mibyM6I}s>b
z>NYnuZdhMb7c-4FtuETsydh=^$7hOmRu*ARR^Fgn!ARHBcn1aQwyIr-&c~!T);S|z
zy<+pKqIfHuyMx&{Ru4Mn8I*oI**{oX9(}AFX4RkrqOSebs@lcP711wGtDQ(TKFSLo
z9<AxzvwxQud?vSacvQX|jPD~p?;n6fbjVK8>$pfe46E}dkyhVOx*JuJBF7`2Yk^I6
z^3gr=x)~ZqIwJB;Nqi4rvE+;KlKOx+$gId6Ou%T599OwN<28DyGdjIwVN~|%+`Xzq
zeAcg)vv%(<7eCu6+mEm}_7#YK_b6*>#}JhCE05kZq4bUYyIxrG`$beKB2piD9HqXz
zy&4^SJ-J=o69m4VTn#hhJG5W@$eD<kPh=`B3&!?&PGwa`MCx(zns-)F0aKDQo0Nqi
zzS4@K5qTie`Pn*l(J2;dOGiW$4u15;dbIz`q+;}S?~U!a|4q{IE5%)HGKQSr-l)(s
z`S@<}Xq)VMcGkiwSukz>$HguFVR3ic*=Sq2C_8)d8Mb_cBWe2pfL-R7?iLThW|J3o
zo|Nl4YZqOz;?-&M#h2S;b$Ok*4T$<TApc?+1DKaSx~JjO;yI7D=me;@t{cU+`r1u$
zUz4~@o<*BMM0VhpHo+n?2lrB4(`0c(<jOPRo;G>r^j)$@e9Z4?>J-_B?-9Map5SmI
z?UB3H?=z8oCr^mawI0CI$jTX=BJIE<56WDz@<1@EPqeN!7?Br@=(D>{)OE>8_%qW<
zN!08~q@j#dt7|Q<D|z9aFP1YqLWPXq0aTCps@EmnZiPl!PW_l6^19?6ar4e#l%HF7
z*XfEXkyb3WSH3xYM#+O$h}--#F`B79tc$zL7Y2p7Vpp52tU9`P(f(inkQdCqpwKY?
z$rQgZ$k3U`q9${9;9s=?8-}u5ri$K`)5Z3#&U>RTzr1hD;)4gH)XKf9#k!d2cOWR}
zBbH+G`a3@+?%?=-=O0KC;y0}_AM^NM*#D?;bVOb_x>q!xY2Jzd#O<Q}&>r#29bL_0
zuV{Z|k9cW^%x@O=F&o8&_{k2gj*v~?Z5A!<&B*z(QiVs+-V3t1^t33gmbs--@$H~G
zDM>uDEhwW(JOVM2eU{3*svcNfx=4-|n_!(}!OVw7%sDQ8v;+I&?YiRAq8dZ^@XoI0
zU_`F?ZBUI-9HKz}rypxB6?eAAaCabj%|5ZMJy_jG+!J(&@B1=`m3DMtbz9DISnqFZ
zN5A`=Y3>zKS=KDJw5#!Ls8$nz&Go`*v0hdm!I-xoFV@bxmg+aeb4h2==ErXAl6TyB
z-%QRr7(YNwUTrkmc)Nv{MPkVr^q6}V9d494FUo%6&q>AN{WsR*ch@`;4m*?^>rd<x
zYeCrc?JvlZmmeq>_a=9sgS*X4U*=5ZV9d7jM$-IONu>XOZa?$J&zr?fe*3=CB{iZW
ziRAb;3VeIx_UScZBSt)-9V_>NX3^!h-z_qZKP%D?oc!HA`wofB!*a&y(kj_m+I-c9
zZ6z)H_G2VIjFqRknNF);QrFyY6Xz0%(8P^IxMhi4!OMfZknJO)Yey_{IP%6b<x3{Q
z8&R=)(RJb{qHI;m>Lb{%cRenC5>$$ZcXq9VEt)SL+j&+DJA>(dthEbW{n|&~PXq3y
zuoY^2@x>Q@+Pp+jFGA}#nJk!6A8Al#i|EyUQr<3x$zp*0(>o4`7Xm`BAH|y1pAkO}
z6fTIr?mQ!M=uW`wYQ@t?eJ}tseQC#8@m~Vnz3<HH^850qB9)uKn|GcPy91Qo?^8Ot
zKBr!htHl1+4zan5CZ4zu|Nf&DmrY&bC*ENRdCPzT3%q+^H@vec^j;b}?j8@J)ykho
zeV^!9b4?j&UzjaTbyWJuH)aiu8SP|49_rVry_T-0wZAG6?!n?^nD6LeYvdq1G;+|}
znspm>hw*#UpwawsPaLvCD*$#^+}OcA8`pLTOBuHu^XaOjnSlXYYXY~4<_Rr?>_&r!
zoro&B<LPMA>N=5KEH>4PUXIZpi|iIn^-vf2eMSGX@`kZ{Zx$!L`ZvTE+OT6e;mNWi
z;!DsY!R5daXfUxfnCS0*`tjYR(RGVgzfBiO?qT_6)y-Gbmi%69!-gxZ1F$F3s%zx_
z@6Eb=nVcuK)Qgo}i%Ug$an1Cqiv9DdzBqHyh2XV7JnNkT9~QNrc;>{ns>IbY|NTog
zMxP}cD*YWy?XOreORHvIRxvq`m&LqL8hzz!oT2iRLq^goBO{MvyQMZga=3V=mC~Cm
zj`)0*OhYBPT)fd5i;6Q|`w1j{$fQU;d;4qRC*b?uXT<7iF{pYGtfFs=mp$mxjKi}0
zhb#!MrvB9;5B^Zx-gY)fh79C^)dKHt-v4j%;MJ{qC+`CcTW#HAoaYh)`WCFqf%k?}
z&&}bE2=rt-Z-ZgGQNBp6$9}p*j4Bq_9<P<nSnvXBfa{bEHG+G(6|((Wd9R@>jJ0~;
zwaBjI6?@^W!DwH^09_gIYF0mi`gt%KP%Q&q-ZiT2zVPTBufdZwY`GsyCw8-%Z4Z|1
z*P&%0X|jm_;Dy$vSh7X#Lzx=F?-Vq2gKDUMvAE%QjXcWjITo3gZBi^EC)P^EA2x^C
z5vi1#q-B@Tu6P};(p=a(XLH5qv$;VQIAayWH}Lqb$lr^U2}cS_-2bVQ39qr9OTQAl
z8FwLJG>O|oyC=khIICdbJvM^+xn>ojt6>$~T2{fW1BMQ(IABG1@|p~v`~dI-6@05m
zt-M)mJd9sog|qi+dLL6Ox5F?LTRU*~mCLRYP0ZSQ`G@3<Er5=W(J1$pTCP)({j%h-
zJ>LR<O!N2d7pbT2-amKV`!`&2a9-7?qg4%}>ahH^c*Z+WBc6tzcXFBN1+yxz176<)
zV1>I|xv_W>O7eyB-<2=A>f(DF#KE>ok$dJyDZL82Tj{)dGB_(vwVr)(?yTvzN1JQb
zuxHWxIMnC`{=zS}q1@?K`bs_xm97$%DpCJ=IBpJz-e67L+E<l#=4*aC3O%h%!-GED
zB5y6mT<2_l`cBb=ZCP0qn=;iy<(a)&KsqA(#RWj%MU~=$da+1r>n$u4M7kpIcm1su
z&4{mi2e6~4M8U7aOMFT7oj52t>2V)(UmK^{AHL@A;p_$bk$PmVf&?J<G(qk%853n?
zFf&CZ%;Jl2S1+!@-J~+H^sKCf1$WYC6JLOzhxgnfeE~DD`Cn|UjxH%bgmVlI3N~X*
z^zC^1@>#7PkCv9N#u-5QKG9be%MzSqL}k4!sVHA9t~h(;wI8dgL9aLOjYdVaEM6*i
z!*CayPpJ(><ZMLd%7<zmty<DtRoYxDmdFED%@4@j=o@cFgMz%v?@|c-OKg$@Z{j~7
zXaBrtozo%#b}Csrmq`5`=xhBc#sn}x9E#LR<C1`MTIo}_=5P=9@dLna7KLlNpeh6w
zRs_mZ8kg@d()gC}tC|UKexy3GwW?{;jZ0rqsSaEt5&2pEDqn&t_Mg<MLF7bDW3zY^
zyP&7#{?*O<H;Ri7^u3R#IY-*yYW<}r+y8KX&EBe}<|8=PJ0*VY5!KVr%xgM*RJ`xN
z{QD2d0vHW%ijTL|i=TU_k_LeiH=Jt5LC#!Rw)cbb#XZwoE)wsHi4u4~FBJ`E4}y(y
z4z^U3z%w@<r_p-2;)lty>*V;on``%Oo)CrqxVlY@tOQ4OES-q0(CO1Jh>q6c6T9Dh
zS>(c^_(-Q5aQdcOn{V2R?e^~S$ExmVs{LSTv&_9omfv&>m>7=1<{d|1{&t8Bu_GcI
z+p5;HolV#>m5E=p;u!N`?3v}7jdK=$d}D)X?ht*7#abw?GI?L~SF1#G*No{nYn<rI
zk3-JuWwfXqw#Zkp5rg-k3^$eK*cw*K)8cDr=g{xu{FAa#9+AVg+;sbtAKv|~>80YL
zGBK~Kd3sBE%cd6^n#6=yw6uBk*TmM?j*osOnAE5Ifqh7y5Wm||Dee&5Zwqnjjlo!+
z*a(>a>em+TBgA%I)E4d2yi+Q1KJU~fje;ij^Fl|D;08xD^P<YByPKG-;pHSR%4t%<
zJDOu+6EEBn3EE_0Ixq9Yi+=s%zqnaEhS~nmFBS)&9mNmeA$hD7o5!zuIB*)9dsDO&
zSbi82t7x9L=uVMYzdIP!yNc(Z{TD999&F1WMX#X1mnS;0C#e)K`PKMcEgvbV0HD{4
zV`xV1uBZaBuo$bw@&i@!%h4rO>%`Ws<!h$yub5XcPYf#iy=)E&a_@wDw_;C?SRnId
zOBHspYh*jJ#(*)g{f_~nC(#tfA$6q~bOsyIj@m_cPMZmWfBo9;FQ(&QLG_*3n(msn
zt7f|R4Ujf=Mpxkx_P|)P*kEhafBo8D=o*y|qQ=~L)Bhx2_yJEXn<_;nPGQUb{3x90
z7|1IS2C6n@>PIm-U^B=p^KlM(xUB<cl|L8tvZh@8cn2u>VgI<uszwcP7i=Tw$*itg
z(TuZHc=NjEO`k!#t9G8a?!X^wWeHpacXsYsI(2W$6Tt<!qSxUQwHs$V*0N;FVsR>n
ziGw@apJ^7~4`Piq(_e_biQV6ExZcm)6g@~ztrTky;Fu&I$ESx&o7YeV<owQHa&M7Y
zEx!eBKH7E`Ba20wTAErmwKPMm=8J;LW>JW(<=$V4b*I+Q!WJt|!E>;A?1iEe$HtiC
z+rcS#<&*>FSFL3Y;%>i7{HnG7ptuLF801u(7WeuG<o>EA^w1G~pc&lKE|wj~*>#W(
zLuwabKEUt4->7<z!QNZHVe>k;!&eeMEe>Ni|4q=hEdY(J9fjKv^j+xgX>#Y^X~285
z|9&1|iGIMLE^Tm+k~vV)wczaC(8wcc7cZ0T4U|v0k5|_&UZZk)*tIQU`*BnrEYG0!
zrSgn6Z0j+?!22ua|MwcU@AVoqHLfyIHI{zw^$KiR2}iuvlILCw>ds?#8S+o`|G2TG
zr39oZf@$T8Ya|aoi@49I4kq#FY7DKXT7+=y_)+=g+xE%__lU_@npa>Q7K<;!;ymG%
zp;$#RiroMeCC+*s;$9eP5VdWG#lSL=9uu`?qEI{DizCEre=n*u(n9UW{?y&`RI*4s
z(Z=4_V=I5gE1Rw|Xrg8YMgEZ`VnwwW(Jrn#1^;`Qs6KxB1mQlXF&NoL%stgq^@pV3
z*(Co9Nx@x7esDofQou=F5R7BPixe}gr|}pd+5`{kgKK;Q^|T`m+Zh?(1AvM95qEJ0
z*5>_fW$Z<bpdAli@#HC4yH#v2Yi_=Bbyex^2Ww<`DbEN$*w%sPe}UOhb9&E_A0g*2
z$~=ER;b@htF6ETr#e<QUtta{CR(AJ(Wl;ZFdDTAbgWhuH<`-Bt0(W>{8EbA9H=Oy-
zNr0d{ebbU!!2UC}vPwQ9nq_`dX?f`kF+d*vid;Q@1~;tNVK4B!Nb6dS7KHLUh_`vG
zcaSYxm9mtb%yRQv#7bGVq-M#Id3RLI`xT!?g0dX^PKr>ACQ14plIX@rS|a<Xd`V*&
zHWjZ2<y`USoidhRUeo-H%&i?3<U+chP^Rsne*o?5StD@cUlQPEy>HDioZ77f1e^y0
zEgb5t;`yW9Fg1#>jdoK&VSHTH-i0x1O=BL1nT@AoCF3@fQR^^MMZ>taxPuM(1loAq
z8`{(MFj|S94dUL}v~F3^Xbuk(&KTbrnqTiS*f7b@FMoNM7<pKh;E1fPwrX1KT<mtX
z!OL7NE1)+i8ZG4f44ebJId|_WYy)SEubDfeT-M3?Et|^`zJ(&2dAwamqgNE4eevjv
zOB4$#yG&Np1haF+wgYHV9DqU7*&LP8W%=b%9-{mZ(wN)a+yJw%uXqV3G7q#NvTa{e
z`2!zB>{)F2Q8A-q<B!%nC@=jLP@_Z6kp<DBhQ`&MdtSLy9>iJS0Ypy3;IN5xo-Rc*
zYr8%M3rqBY-Sjm!4fgf1ReR>Tdr!(c_tK!uPzOXAk*7quY(I#Rmn+X5_Np+=>&3dm
za2H}j-$h4FRq4Fx2y250^jp|;d)s0Fi%PNZfY{anw_ut4ZYk^qf?hxaH8?W=&PM!B
z!WohHa9bHds^+VB!j87eQpOKngst>s6!3q`h`A2=%HGZ;<xlOdE58kf%c1>9Jch&~
zac!j-b$oC6b$1_ZMhsL*bIn`~?XcX@`Q5!yx;?q+3FIxf3N;y@8Gb~m$%r~03S@l*
zr*u%Ma_ruQKZ!xGhhPc9P&|Vz?isPHQVd7rhitzYF)Gznh<>EO_G?hgpYg0e1O9`)
z(@xDiwq~kG$9B7HyVy{M4TM-56M4nr!UM9rsk20ki;2aRVqBS6jOZ?a>h}7rEn@g#
zvHYwUq!?%K4oTMeo<PLMYp1~`pV~o9|6>7#z!8f_cGO3p2_oWEA<Jq|;NBg?%wOQZ
zhMNT+=NApiLU>?DJMte8i1QO^zGx|%u(=+rr%%GT-$NVQl=iu3p4_r&rpf`pro|pq
zcm_H}cFWvh2b)ggnCY5pe*z<2#&S>djISBY9mDYvj$IHCDpu=cwHQ`ii&Kp}dFIC(
zeu?%1b=DF@2(>{IFPB`juxX1NF}J2%_B*jVS~K><$K{qKRaL9yk!S^umbo4QaQsw6
zo{fMc2PVpzM~V<OSpM8ZoNn`ES7f!zo0mjU<shpxoVHcOGHfnBbnWGcsguV~l?UT<
zOUvavxxF)bQ+bUX9V>_Hf@%>y7F;80?IUyvMk-{#{PLrGbSp1nI~u}i^e}ZGNwf~U
zdFRFK_tqA2LYWi1hprxo2O?O!)^Lmwx+rarONiJu;sb^r?i<(F(;1;3tXLUC_(MEt
zBOK`8Fagd4&oHh-X^7B85r<eb9pW$(_H+X+q5BP+>xx=dtZk+)P(P``6HgdKz18={
ztKM0d3a!NmBP+)5%Dqj^vKhPiW;sJVf$%5MD_?9b#;G?L`2)N6M(6Kd0zX9bspgu+
zE!@pDA3g}zLo`T*mK}`_0&h63J?z<VCW>}mp<3LR&sFq23M_OzOXpbJFi1uX2-@ph
zi|K47tR4f2t?E>_;gTe7E8_YPrIfe!v$J^P3A%0&8da7LyqZF}gP%xU_sK2t<dvdV
zY<r8SDVF<{Q|{B?g23xKuM}AR{MQ{5;@dBXaE#T_ipP%=XQL>$?s{Y4<C*1Lj5bbC
zu%SamXFFic63{2kv$~=^JHaX6`n7fIC+d#fGruiPWtY(LGN2lQ^-a8eJZuSF#qAdi
zH$iT;vM!=fTXb)Ui>U_4dFqo;)MZT4=9Md&9J#vI##H>p^F?vK3blapNDcPerJv}(
zu>`u|=N=<qKHk>#;34?4*ZgL>Jc``XQ(NG2`kZnPKi4YjukDO3L9t7?;rX?)`|ob6
zZb0JeUe_BnL1Eu3YS+WOzH3S6!JkZB`Yeim1W_J0MQf(laC6ECmEWNB7)ER0;T6@F
zBUR4ZORME1K9R+Dx;<9j-C52a7f`SL#ACSP!^+=X*#5%f-3nGcAjY$)gKf%D4V9%m
z%{cGL`z*>ngBTsOf_d0h8`$c<saB6*M>D5V{M0Mni;&b=Xr`9BxA1Hy6uhXYex-YF
z<&UAvHEiHTMTk$fRj>XSQlq+%e_i!L-eQ{daiT0;(%E@z>e3SkPAPV1#ca?@a)XJe
zBRzC<9btIx8*g>~dfyVhMbIhN;RfgbQ$KzJ4ww@p%2HV!{qhy_Yp!`H`szJ<vC}**
zO3&^U+Ze^v2R_x|HNog`MLK`7aH$-QYKs^o`sZ##IJOWYtLy5NAK1sHuaVq&;_Zha
zxS`L#W5)FS8Aqqjm?(Ok5nB()rkguUkKt@}-r~K}XN;eBGhP;Gzf=@=i1}wqMJa>9
ztHmeV&c21X`Z>{x^5|*k-wD(A%YsES_bii9(YyU#L_YmgPJB5kAEoyR@ksk{JY5D4
z8C*w$+QrAPaef6m*!Rg|G+xiQ5!Q(j^?Pr=g64^U9ahPZbFmf<!lv4lGhd1Bo-w@v
z(X}1oePyNCfp-MM0Qzr1FaqzBxb{#0E*!sC8!9gzGN_P9MGvmn%olX<6Nds|iYxRk
zFcFt$ePtGld!hht`z6ig6>?PP(LHllkN*!Cim~P<m@uylow4$*&ZE048jAiy?tsrZ
zUFKBO%&l2^Xx+y0ikdaEp9<12<Ikd%z`G6CbI<<0HCWUPH9V@>$LFOm)MzDuFX#Bu
zv01$F#9$u>M@7xi=*%nT|FAp|80i_53B1v$b?#CB%M}dNOQ>BGXsh}BxAh7L;V2Lt
z?h4>fR2ihtBru9rI8X$*M<GY8oKI<xo?9%^zX7B#a*#g%tA@~Hec88W`i#b3;w_v#
z8sE#gKfSaX0ac~-kolNM?|N9QphKtxr};uWjnFwDBoOo3P6RKaaHZN{D8$>RaMo9L
zy&qXld>32w;SoGt5m72T-l$y?Esd6fFR2zp`l*FW5mBy69)kZ1H$mipy5eMs*>F-h
znfIW@QL?NPxOWOFh1~}w{yyZ6mDT%}lygAKRAh)B)v=OEDvm=Ok8F|3?U{t*0W_FI
z_mV)QC{M3qd#0lW?C!9Qg0CL4$4vhcpXuG5yNQ5@mAC76N;%-YHPlaz02A@D6yBxE
ziP?Eg(dw>K;per7-;h^RVW9rrwraTs{rtd_XBDI_r_V0C9ghI>?Mga-fu#<-l=JfW
zdn=vivN+v{XT{=)HU{`sgO}#XbD5(KYdbbo+<Jl}yL~7aOt5iKKhEmp<Bo3{cKxd7
z%Lc@^%F19&A9dJ1S=I-2c_Ob;Y=EaBJ(%SO)AHsqrm6U5Zb-|-Q_vYaK6<LH>kqI=
zz|c4|$IU7H?s{6xguCOCN-^_{xCDW>Q?ZesTPddE+9fXvE*$WCF}fIWy2Zh)f#8#1
zE_TvvA{%#o75|)#9Ksg&O56uW<?bu!MWjh1zr08EIUCIDyL*W|T_YzI%3lSA{p87^
z%3A&^KrZl(;CgN_``0frNPMo9bC%0lL}#^%>YGf2iT8k-#IEyBq9-Do9INPxRy7*0
zew;PHQ;B=YkT1YB*4KwF<1B(~vPkx`vv}i)e7`Cf(_c}Us2O<QK<@tpl@ne&({km7
z#<~(Dm+01p$M_R1dS?UY+5?>A0z1j!{_vXd6DE?^uGqJBI1pUj-?#5)&b^|+I7Nf+
zoR<bY7wJ9by|`mKzW63;K~dy9J29Ir&g-KkIi9!VDD~g0m~r3LGgg)Fi;8~rGioau
zME%(d8G(Ypp&P|Ic+cANrp|&x_AopFB-@Xk#k&+L$k6O+UuLlDcR{DX+k0MWy|=XS
zyz8+s<4Y_>Ya2F(?)A7}#%)8x<gY(B3qu2w5A|=YxcO-YZv=QT?$F{bi|}ss^88uI
z;JbQwwOPdK;e8Hxbh<`u%~yjF&MgN2Y8LQ{Db)HE7`5mL`*hcSa{1lD4~A{I0k?4p
zQeqP~pd8q8cJ8ZJG_CGtWP=nS>UnnSaZCZ*xn`AXk|pXw#}2b%i$Rh%H-38-Z#?l0
z1igtZXXo$3JL38OA8~I2A7yne{!iwFcyKKw;L=6hx+qxy7a*AcVt~m^5(>f01au6^
zOfrzo%uEutATt5AizH!DTMeMr+M0l^b}>P#w_Ad1TMekyE(W)Hy)~${?Y;H)ea`z%
z5~%(@_y525-@hN6yvupd`kZHfp2P1dJuTzIqB-AV<<J<PF050!@CNWKFTit%T<x^w
zQI81WXUTnrnDTHqIbEE)YS8x!KaoOY<cgIdLpw!pjZr}$+X?ew*eQfMxC`^-JaG)+
z1yz}g6?r0rPPgSiTiP6?!WQGt798nU=l9LN3lT310h5q-LOk>q-eW@kVoJJ*&`w0@
z)%v1x|8|$ZU472%DYbG~O^xdfu3nV#?R#=vIS;(Qcm^IZs7q&jvn5vE+g|Pu;L5YU
z<HN-(*QcxhaEvt5$mEr`K18&((T3-JdB;P6b6xm&jLcj;vvhvxwE2tHN@!3@CxES!
z8Uz1#^Q(BM(hAec!#`3_IQoA3D8k@n-%{V(toshkDbm|8@)fFlBRi|QVRd#qK_~-{
z*2mRPHshIdD$b^P;{D4nUZ*vMyC2Z`<%8uYz0oP2+Hr7jx5`0cWtGmunYu?!fzQ+z
z)QX?tIhKB$prd0%G-KFU=bJ0h*sXaR@oBm^<?uZ9Un#zX+m+a{B)>|vbc^eRzDS0_
zyr~=8LW40iDUV`rrTAVr>Qd=>>c2LDt%g%Z^hQDkKHOBOGJLP;DIRA1os<p<cbvxa
z5Dt<Akc-NHmotPN^)PNUh}pLSU2&DsBd*Uzum4k}eKGD1Zq&kKKCa^2{A8oR(c>!b
zGCe~z6e4hMJvi6Kg4T%M-z96S8~o%5AO`+N9@W~XrVMmuW+woSESIX*eeaoJ5C$QC
zRZ!>Mvs*=@I58Uj^<jYC=~&0_e;3<~5{9ujyc21|$9boY=NXRU5@h>5@WOn0!1nuW
z%Gs{6M_LZ>pE@I|uCsl*#mYe_M4F^exPIh){xiD#J$&;2uJhyd2H8UMB<|64`;*6F
zk4i9{l@tWLBc0#-;(WP~&VL?D5pl^`OLy;yJ?TtiPM_q3)6v22$ItKoHi;S^pJ;|M
zih}9)=o;7r>i5Z>Uzp-;Ud0@Xk*HdoCC>P#s%jDIPGw(ClZ*`0e1<`pkAc?dc>Z5B
zo{y7v44E)PL%?rpAYjB+mX053k_LSu-5F18j+b6?UYgJ7SWZ%?WZdOd;gGXvifd5-
z!O!nrBj{vp6p<FM3-#xX;-P!15)u5(jp7?}t15Jrq*trEoZUy}<}b;=fBwFCg6##5
zyjcFUDjSL=K!4QHXRK)7QB?zKRu<k}h1aT+3$ccXxMP>WIST~x$4$c-`Re32Cga0{
zIwv<#R*hR{9ZroT&T#hV`HjV$>XZS3M^qCODv#_dh1lcD?_NSQKPX_0Pu;#bk1CJS
z?70JFrd_on3zwE*x1aWPO_<<{&<=HfO5E-8EK49bhs1U~*`=N*WR3VEG08L*N|cJb
zN8Ptx=cRidv;IweZ>{#b86liapZZkKt!KW6m)jywkv`9Q8uO|2j!V|a99%3vtvi*s
zLtUDsyoD+jrPgICz3_-sA{ET-II1tWCI1)B3(s6qQ}wW(p8pSG3NB7*o}2&f{1!dm
zno4Od?crSnj$ihpd8)Zko$V`Xap`kC<?W#M%T}OC%i@cDi`^pVr3hp@F@cM<FeR-c
z%@6Lsear51vt`209658pJU28s%_qK^&NPX8bAHYI-~m8NlaZHnzMd)%?vNiNKQ5B1
zQg!+eG;x}ml%>8@Xi5m8b&9saDGaOgVfhg!5@&7^*7~e;^&T$W#iehnR$uGv`QC%r
zG1naP;Qv0bU;7U^zmU<3LVGyZGh+~vT<j^hvS5ps^`DKOfnJixR{Kyf{|Bm>VU<17
z(zRaiH&)Oc(t<dSIt%2dQGOVw{4w2-X*xa2Uu`Xab%*+FcOpR$?s`f{9)f0>1*JtW
zQMq3ezo#Q|Dbzzr1!~0&uqtwKXzUSP>JsYzTuStSI=Zp&H3p#1SG!eQy@l)RZk4BV
z_6_EGYW(Um_y}dG&*Z79(5l6qoqm6(%IN4)=M4MrH+;QVZc~1_txME9aV8*(jWC4V
z?^AbejH<_!9!|tMJ3H0c9cs_U0rj%dBj~Zew^QY#H1Lc#FPnt9nsfmpPvA5eFLQay
zbH$cjf>qs_H|bVtM^BYj^dy0^>KZ)lPwmieVHy5nipt@qc#gkZ-A6#)FPz;tm#XFg
zTsDW*#d>&t={8uSHD!L4jef2BCNTU`XXYd^fLuekpL6!4Ro<(m_L=fi%1^5Pyk6#g
z%|kku3X~i%bPw_h{eu3DGY>j&3W@%l4($8?5}NRFICNB}ZSd#`eEg_9Gg`{1e8!>F
zkLTaVao6Js4QM&3I33TKj|xjr(J_92oAGRYl1sPg)t}$CQS+}-Bv|{>J;aNmUFt4V
zm7y)$)d=C7Z*GdKTb(}ji#DT-l-yKIKK}8(w42NH`Ny1dGxk5?fkW=m*Y)xy1&yNf
zOXoabE`|G4@|{XEFll5>Wq|&_^FTeD(i7{Q+pedtTxD>I^?gU0VTkP;Q@eT@hVfn}
z4n^s&OUp;K)fdwN*|RFmy|oi>bfXz1u4!`GHdMZd8@dODnc5>k(Gz_ybwNko|FfDu
z(lxHVwB1qxgi8J_mFgirW;3V#^VrhV=TVQ1{P}|q2w@rCKdzd8E^GQVeqz$p7x5L;
zL4#P8Yhb5d-(|HYMNRwT=WXD`3Jg!Ggia{Wmj$iR)6p`jOi0c|U-{T`yGHfKCZ9E5
z(ns{UXn^Gcg|N(B$`<+AuG~6nd@0jOqwh2CZ&7EAfMP=0Q<gZYo3tmGs3vJwRL#rc
zb7xG8BZ}Q0dquYWqNa-goT!TUq^T_kFC9V?C+d!xEkdff{uvHL<cad-0*}AL4gFD8
zY|&0!MMGrK!FQ+ZsQb0K`89W|(@dDqi$?YCbk2acJ+)(3X|EW@@JyUS=)V=^4k{!m
z8Gi61B>wWLzi&dUso8RiTH9^<Aa08o3%W@;h3ly4vNLCLT5S6k{ZsYgCbXraJv}>W
z_3|Utr$hd`=U!hDzICZEtoq<{uf_D94ReYYUAbhDtB6pGw~lxsF0p6+JMr2yuq$=I
zZSury(Be|MD>ZNTR%GB1QSc+`D;uJPuEZAC5wBj5e)!UKb@IrRL}ntlJ(lU(`|Ol{
zSN==hgSpks9?uH(9I1aiW!fJp-|xn*>cy+SPwrc$V_<G}f3t`-pWld+I;}i_P~^OL
ziYMa9?oz9fO4FfuQ!29~hDezOQV*9O@%QfUN*p+M4{5}P)AgI_e-Sqb2v}e8Z<Kg;
z*rLCs#tFj6Qy-@K<bm_TbS{bU@7J@U>ZA3fD~nHvs~a}tmC36cCh#hu*QB_fO8<*j
z{o8tC2!1jlOFg!ps(vydZ|?r->Sya^X%3R>;%DpiWWRcZ?|-@;7H$IGUg>{14L)Qz
z9XLA{%XNAQi$dxn3UShiYLIBJ;S`tiQ;>jLX9+p@+9#5Oq`-BY%rfSfk<<r`YVQ8$
zA_W>C<I)+x4^xt#*t#yBRW=YpZHR^`Kn9nwo3YY{UL?r@<4P)dxEx1Cl9v|Fx2O&Z
zpK;ElNjk%K^|gUydG5y3m)eT@qzja3N{Wq|;0)#A@hDN@dQ?|rp4%o(uE(elHzL?w
z=U5;Y4uu6RL(r4bIr1x74I698)o*rt;5vcZ-cwK(-JLMH-A>-5xT_yjr=X80d_?{<
z`_zJI27MCj;a67-c}d#<`@7DkR^e4R<Z=1Y4wRIt^60MVIr|n}qiW-xE_V(BeYvDx
zJk3YO3>2i-sb8HI%~&H1e51MuOh0se=+F{RMCaW2kjnCj>#9EwyL!ilU4&@~`E&l}
zNP=i7L2P2|kRX++LiHK?(}UTg8~b~fMD<RAle(sRWi`1*`ft-KEmU5ZwiT>b!Z!bz
zW5^TCCW@iiWHS-hM2RUEugWY{-lINWsLDg?^Lcm~;i!FU`WriT?&+GIeeGQIX~K%(
zA?s9soj8JCWKXTQSPZ8}7n>Vj&Y<)1Nj!NqJs!@ic6o~SnEC7aOK;2G>KJ<9o+_^&
zjPS$SVM_fveL$xZnAqH>&%ft^M5jKWP7#CWH){=B7xuhHt@my2KIC_Pk<&u(?(psA
zv!AEyj<rM#)vMP@n$ayRp-2O_b?&_hWyxfOC?Z-zm*3sJtFu_odZF4si*LKou^rs~
zIxgRC589^U+q@{mTH^=HTUE8l9qN{e(SwLz{b;L(5)oHt`Mc^Dj<|NIX?ik2vRSQj
z^o6~zzH!X?g>?S)OQR+l9}SagMmHp3OFJSi@70M&zS|#h`6GTqsqn^qYq7`U#ZV?L
zGv6f}h$lDO-LKPYKu^vY={vSkQ{N`t@yOO4F+cJ-87#VEi9NZVwdyHno_Y`#<0&|y
zD$y*{tkME9>VDB^ot))`p<O4!j?z{XnffvLFMj0Ic_9AIz!l5T1h$OO@OKFJc?Kpc
zq@Pt!<DFbw=utD`{BfxnJx)(XwJI4=>D>wBmmw3rx<F^SJuS0cTmQ`!+!J%Va*m4b
zYFfu2F{MY_$vSXq+*8(xvaRN*X#ev1J!S4rPi`kJCi^{iCj5V6{`!yt$PnjKbGp?M
zk*jm@5UF*myEhajZt(hZtzGoHR0GkgWKI{6ifC`*n3~ilA!1XB!oqvTrA{8$UzW{0
z<A~f<?or!g@b$xk`l`h)_dM#~Gk6a;dRlvxm;P)~Wyo-Osw_`U&+=GJTsxdLWF|=%
zjMOwi0;wXYkXQ!+A?wy^;@e_5i}XB|VbY8~*-*k;6WKsev$-rxbDn=T#mJ%>I!anP
zS6I)CJ)Dhj*Q;g_Wp-(Pdy{vMH1F+J&pL)Zo@~Bzs>j;2?-0C2)|OZcX+$E0JGBRc
zNPg9^PJO}Rd0}0gc-Vy$b+XQ*|3vH>wnkmpohGSAl=Fhg{7E$qRH>D6DXc~6*Jr8H
zzKAPVUly(=uCM)S@2;IBl`QF2am4&HbbMb85pnr7?Jq4Z@?P!b69Py`FJ&Oegi5F_
zs;K)eeba;TZm-Q!N|%+pYpbsIu3YZ%EXnqixn}6}#@&0|o@`HXX$$$Ubj@7vF`RlP
z@02`x-d_~XN5|PqPz6oAKw8T6QT9tb=V%wR*-D~{4*J#FgSYP^__KrNZvRa8nYuzv
zoF;iICKmdO9@80Jtvj0MN?6re-*46FK9(AdYsba04^+z#!YO<8%ULShN3ulq-MW#M
z#jfV;&Tyjm+U$l{Zg%bwrnv(>Zpq>zb%D-1CT?*1(Z_;flql?bHWnrlK-*eLUGTih
zQh_0NtaIz&);;3DaLAPWp(#1Iu`ou#np+cfE@5GAQP$#P+#z^{!Vhhf&Ge)x{Cx^b
zwX-CIU8-I0OQ_NjHA5i%v5g_uGNKg;q7k*yooe76p8kB}$We8gBz`$&J74@-iBeQT
zh-4S1=q>6WusqXTH+Q<uWqzX>PxiK{Q%BN4Ta<bV+rTteXXl~LE`(@GJi5MbT7G9&
z*LKgjwDJU#a6qaN?SL|=L=`C%<z`E>-|auRNB-j$Ef1dV!`yV~m9j<DLHRLPi{+|F
zepY~H3yEGJi=+0HA1;6TTvvnzyy-J~ns;uqz95!qJ`iC;-7@->pnTP~e$QUHaPE~K
z)hMjDlf)C&9f=z|KG)l;URyJg&Xbff`I#v{vy)d!=X0r+$d7=pl5Q*g*|j^Eh6mbo
z-xN<~t)8Q|?EBfQ-*QbCr!6XvRnD7}Q_auiI-Q<AaJo;wr#@@VaAj1_7gXZw_3HL8
zNsjCEWOY_wwhCiE8BlApu%bwm=@bE(?_WQB&aq$8<v1=4Q*M?-QB8%fc|EzF?EGGL
zLiULX`+6i1kx*K~`{VG-eVvKUZNw!XL(fB6C(;SgiDOeornsJ5R8DmMccgdxTt4sm
znWe<FcGV5&-LUR2Tz@UU_sl8s-(Q}|I<4_E&-HHh=<~16Kj1w7oRurFK4p=7L((4H
zvmumGMUaVS&>fp~$(qg13#O>Z00Fw-rQ6l>lSj6}x9?4O-HS@PN@gb#?b$AWzN+rf
z2hk>OaovF+GN5;;PYt2AlSBbIuGYo#u6y4V+eB6e7@5beRX5cV@_Xi@-14HeouI4_
zCWE!N`?cGz?-ZJrYUQX+dsVK@1GTeG5DRHNd};dggU*XG)T@(85o$hSls@&&<U;<2
z^!x`AXfKtwS(*f(C@$Zq)uBh1h^9{D+gkItBdwk+l_;FD=Mw-df0@T^5}9%8h>Ai{
zqLNc`VpMk#P2Q=VLw5&@4qbkKySkmcy>FaesBR;f(rJ2f_V3lNPme}C5BpcHEIZ7i
z-BzuKGVE4<(F)jrggQL0KB{Y~p`<1c@~P2pdCENPyS6?d)9TAobF=7%XNzaXv#NF4
z<!Z&yJH*H%r({9jLN2$bzss|=%R_REFQm9#WgfL!3m^F+xuDQZ6=F>&L_mv*57iIX
z3m0%`f_Sw4V0~eEXRhQEeR@Ku_!~PJgY1u#J!z6)?zEv>^^w7CV(EEdE9n5^Y{Zbd
zAT-$C3pDgVMDPi1(!R24RW{J8SGskxq-7o~(Z}==cQ*C^Wu0L;Zcg(td)rSL);II;
zmHNWY8_ID7OI6aAx_44YpPxYAGD1>6&z^+Z39oTlh?ID>glG?S>MoG)8j>`hR`_cS
zc6{*&IEV^=ir+Btll3E>#6j0Fu%KRWZuZqAo@<RBC30I&K4K<W2rjZ>n!30{tri-b
z@*P8sSnHOfnd&ofwR%`J_Z(&-koBZ=%FmAIrJn72#<kb_i8+~!06JHHUVc?YkNP_S
zK~U2?0{}kt;O2oBAcN{xjx58}I|T&0{MEe@`LBMOg3@;)AAE@S5UJtdRrFcmIWG5B
z=)`1IDR~gqhmO3K>)&6bKUh>;v(HPcH!PQPUW$4KHPrVuh19cTcPl44Nc#@At0&sx
z2Vkl0OQ8o3ZUP|fQeEnYPV$$(_aR%#^QL~lO^Rq*$RG@hG$&c=ALtNJ1<-ZOy`(fL
zloaIho242cM!6U}wM-cOkEfBsn?0=FcWB>H>GRESJ-Wns(bPrrbM_uXozm6oCl{3T
z9usO5Ln?XQ$!MN+lmrTeYDY>TfAdIvKCJ3`z+k4!YkR6Cf5NVmX)NB~93wAWvhT%x
zo$m7K-W+{inPFC)#JqRy`KFpQl&$(s8PeT*ny>fguOv2nh_K`itR>Nepqq0f5a-Gv
z=NG56?C#vs3m6=$8@L)}aISx?i`s9Vob{0>5zHo6iC>GqR>~%#kMjKPLpOL6>NIwV
zHX%jei%{B)xQH>CgJe*FYSwAr9j2mL)YCgT4<0*2YHN^{#6~||*Nxw_Qa_s<SDzhF
zmA)tzd1)0v;lNq}^Iv5Ui*!K!3Kh$NHXnaQOc@M=IhA^NDvrosO!qv|wNstmp@JRi
zp*BWEE@K%%ZQ=Iv{@h;5b)<)Gzj3!{h_5Z5>s6<RR7N4S99<*W{KhHh3j8<@cB>(W
z?@pfob&c5%Uz<X{bnrx87x})^Nyd`tQ6Um;8@e?nY8uL1rmpdQOZ5;_^Enz%RgZ_I
z??0K^ZLagUewF#^g7dklXtzG7gPz>l9ivx|JHL32Y8}Rl;bBj1SZ~mt-xSTM=hN3}
zq?+zCd$|6ieeEntF?UjF_nCljv4%t~_rbHupnhE=IvS<Ecc!%cjQQw$XIe>w?_DF+
zy=ds+J!>ppXDv?-PsyX~BQ=Fw?>ti?l#@+=g8*r{md3tuCh&h5M4;cDC{sH&`LHgq
z3?%#w4?oQN9aDQ)%T)F6;U2lYXKIL>{b3ApN<BBVgPWdkANZcz!&C8-PgS>uJGl9;
zsYAQp_2fRJ?j{wnhW%QjCUqNDL!tmF_V+beR498%y~X~!1d(ThK9`l$yU4lOBnFn0
zV$cMCRVYobIjoj-=&rfmu)Nr#_sX?gB8iYBK@XXR)JG}8j;E*}anb;dytT%3^uwv7
zOx~?C$&Mj>zM6rFZAb)er42*%%T;^TRo$wOoE*<?>bUDwBa34V5edPhz;f=;={x*o
z31L~^UTZvk|Cr8p=-eFLqi#qUN_PDGj3)8_NLgj2M^jmJJSN@;62$R%tuMoqY5Lre
z_KR<!TlfM|t^@tv#rYq=P1j(SoVN0?`*mDKGWE~_wMtA~B<Sq$-0$gJKvcNEcq}B;
z?rD!(EeN@g%RRb^+5RyTbzt!hufDx#@wGU5PEXOhNCHwnd?-<)Gv2$p*|chDB!n4E
zc~^e?I)^;odz=@NSi~@Rq-ilpQ&P+%>(5fii4)0QXsXU&1n+FX219dSO_hj=_csV=
zeKi#sV7MIe(=hTg#qL@uDBuUJ9bIeg60(i92G`SgmxSyGhKK_FDeH2;gsT54C2Fok
zBsr84zfMX{G@T?(hICM!V)zvmGXz((8Wr6*C6MA;se!X}UdEF1nG`*6qX1Tl$rOox
zy3t}JKb3WxI+>VL-vc#s@du=YGO>$fs$4C#r>f6MTWLlKev<w0B<tZs^KfF?8VXD-
z<>zFg=U-CS#MK2^${#AuB%ux!{45xvCwHDBp!RA|w$ttB#Am8=jj~x?6XL@ZDujq$
zV=im0aa?b85Hyq_K_k1Xx{GJ)8J^s0JKMdziA00vMxD`=zjo!5p!9*)ub-EVJe|Aa
zbq{F}3Oz-hC7uNhB{|J=F9T>WQ0@|l9!eSUKlH5n&$gZ>@KLC#eHYnf*x6IjB(2HY
z<qdj%oS%!)4W&zrL@XDyZ^u=4K(Eg(MsA4R2~Ql8<16wOV&%(k>fLMat&yHIS8fg&
z;1>Z^-Ar`|U!CD?38NBFhG?ie%aJliV%t54_<g$bQP@8Jt11e{&MWu01*N8NzzII!
zrw>uH#3S|{>QyU8MDq0{vYEOv;a4seSh!kTa4xp2!aaO>5)$2Ao25r$A<wGL_2lUK
z$6=G*bK5tF;RTfvzZ0S;$1WS;N~uz#$fs9FK{OqDJ83|>)i+4-@(0X2o;wd|7Xov>
z8K0fd;C@mU4D;oGDm}0f?(HfQf}?6jR7RhwWs!8KQw0n69IdHQXMspm4bDW}FJjRC
zO3FYHI+yI&oyYn+59>Xo*fFZfo=;)TJWWS?HE8cN6gHp=xa;)7gWAI=-ws2HNYZZ5
z=i6aPKelr!&R1u3WWz@a@_olD(KU6z+(?NoDN)`t*t)2AXSr_gLgZIx_vs8%;~Q4_
z+f4a4!V;Nw8|9zl>$j{|yQd1ddCR=o&8rs(?v=g_Td(gheHk{d@8I>=o35#Xt?7`+
z$8@6mS#DpmzWRnCg|C^fzF~c3zu9TNVxaOBgF}oRFzx-(`m)>f^pEDtZtF|?&2IB0
zy%r9fo|-SyY4i8imwTrQDgM3raxY)1@*(wwZd3OwR*AbziC4_L-euLz8&QXT!_@s+
zc*tDi`(;KV;@WNI4bv$7W$NS=ck=2k^Xe7yiO99?9yD$JHY~c)d#0M@`mOaHcaqWe
zx2Aq>C@LL)(G<Pc^y)>^t9z|py=e9KUemyfrUBk`55B(QFrOVUpWSCZJ7R`=pY_=h
z>$CgJXGct9ypbOBMtXdQc{6O@u$c0OWtKO4&70qwH%y+qVOr%)w|VnN^M(cK26K?Z
zl&nW+6@2`5@7!H}NB*kW^Fj8vaX^afJ#nT?H5cCuGjHbVsPvaB((HxfwnydoXRNAu
zdz7)X?&_rjPlux-!Nc}t-BKR(i+{#joqzC?+V^RP?;}5<gaqnAa#Pg{VI7K4^iRxs
zd;5M!P7~}^+@y=jQ&&l5=RNArL7jE?ms;|h%B$76;&6Z-=W$2JquBI1bj>lne=agp
zmMhbbI&8;glf~TO<C^djs(y#~xv3rc-;NzlI4_#CN2gz3G-vIdo%#r=Yc3=pR7ZC^
zFV0Y&P^QOxFZ=i%6sY6|)~nS;?DJ}$I-39-VQ@9BLLHmo-2DHS*8c41Kui0z%~JiJ
zNPEtKK>zlgk2*=%fJ~6m=giL7Dd=+=z9AzfDxZuMaj;eV(<3t$ubdNLUY@TRIHc2^
zS(AADGN*y0cXVB)r_L_U)|t<c+}i_(G9v7ekG$W1fSVm^8%peT-|3djkEGrjc`~!Q
zT9U7IU*Vj7<|_ZU_j;>h{hj)%Z$U$bi#VC)Y@eR-gbEID-75cY<=Ll()w``Dq!r-k
zke0&l9{mcQD3f&I`~98ES>ROB5TuI2D79FAel0(u`c4&<m8Fglr=8Snm>S`|#WwIV
z!AuAD>x0vqYjt(5YppzfUxW|6<IaBFo^ZGG27j&&kaX(-F&pOKm(Y%kT@-&E>Q(q<
z(4lvSC(`e^q5N2XxlYfFU8>K!(K#c7xXwY=B6>;7%lmaAGq%=hg~LK<M=eDgI0ApE
zJbIw`J4Lfwf$hf{qgVI$`*Raa>d(&*gU4fyFs@2Hc1GTu1OCi@Y`}d;Z3F6aJ%cJe
ziXNTSXQiS<;e-DFt4$2>l72Po&HkWTY7sT))GS>%cuZayro|Gxj19u5*IMPx3i&A_
z9F*aCGGnBA^yO>Zl~#Ilf9yqY>=VY*)GiDgCu-%Xzc{*|=-;j8cdJ)0d!j%?*o@@q
zlD5{rg>^>REf2*sxg(zJ&t2b8Cy9+-!DUw6h3H8_6rYa4Y2mzKxGk|*JP!N(0z7%v
zUFzIEVXw)Ayi7LJ96i)|sGkU;VNpC_#X1aof8hGwgZ^#!dU*8SZ_Y)U>)1;+iq3vg
zBAZiX$RRw?a_I0DeQoRsk@GQm(Krcy`qX*4?}-HLrSsx+b(3T&AbSDx7Y9a%$zgEB
zI2-q~^t~ttoVmv2enddR@-+|+%b9k+<gE)ORKbXT010)3lqH<~1h3>qkJ!y|UVhRv
z*N{8v+ZatAqjFH*GuWx*5HEDmZ)}25dWK|%M4tILGzM8>ot_+n-_FFdyPXs$*K}hM
zic6}{$?B4k9n%?){&8pX)#@i4&Lc+s$Iu;didf&3M03B(Gj(%pNc{!v;u#(O$V}V>
z+r_)$be1Fw1)%U?C~A7?(VI~{IoJEVil5S_t5p-LsoU>)z8~Iwz3%B(?|=<-#=3%)
zU1|n7NTtK!uB)4$4DUZUx7|7KECvx>()x?5SNRXP^{hM8UV^eEn+%Gb;gy>o(fb}P
zEhfBKoleE2>V32g+Yz}Zg4$0TQW1fjbhI2gI=fh{3~ieoPVCbQ-q%H5;ETn{?l$Ri
zo@jS|>CA9BN9HiS5(NlO^6aTr4{i4CEt-Q`PPa6xe{jszDMLrQ)L%*AcOxMde<i=&
zS5EaUae34STzcZ_LNK8gQN4ONoY*Sbf=5NwBFD9nt0%<CM=?ajYkJ??`jPewmVY;Y
z$BG;*IQbwJ+{a$Hq~*<o&h!rs>P!0(wqKjxT%)tu9E3aLw3tKg*bIff5-03#sr%m3
zNCKl*?m*9XYotTHw-HrljraPNoL<QzGeuM-g;-z)ws>khho<L0r1$mz(tp?NHPzxa
zFn_kb@V-^X)aAV3oTqfg^!%B74`;e^)Z6O>vCk8wP*m8~ch?tMDitupof8C2yutAt
zO5HXg@9+nxUNokzAV)idZgKB`KCtv0)zJgvf6RGF#x*TlTpY7Es8+_0po?Z3-k(~i
zp5K7iXR7Z2xC!Yj7e%w`+2C}gu&G1c>a!i{OC4~O!)lRl&?RVTy-{pDhF?Um=inZ7
zQ!8e!{JDE2lTIXl2-%Btf$FsQ{6#m-Ezh)!c}M#}mwjka`)(FAVx*nav=7W~8Zlnr
zWH988B#@{$dt$NJetb_RW6G}4J9(alh;G6s(r{T}xbjHtNR8Xi-r^Jn^C*FYcjC+c
z*pPhInF_ma%KgU%k&MzlvI}>mA`+SxZ*34!E$v$QiO7!_DoDK}*w19fNxMm|MA2_2
z<gp%zkekNFls`Ahk62gI?le#T-X@|2fd(mpldW3Rhi&F&o;=wsKSHOB4{Mr;>}j3@
zn&Snw#Ino$k%SRIJ0`@hP9y-%eV^`&_0Mg-R?j$`+uO<6CNEYEtNowu;CR4itKwmO
z&mhlE4n?kM%S}8`+FFe!+JALBD(BEmm4ky@x@M91Qw~);xLNw;lmLuAwU!0G2OTe%
zcv`R1JBdV8LOxS05f(Bs8&zp_rbp<k_0UNK$cA6q;k$C;lng!<zT5mMmbz0_rs#H4
z)p8jucQU!$`NBHZ-hQOL*p2dVnkvu3uONqXs-Qy-YD7&isP0MWdAe<<n$)Ap<J)0*
zNI<TZ<h|g%p}kri<-ir3k@Z$jCl>s|!>G7F)$#tyM?v$G3$AI~K{|#!wT3OKclgzF
z6Nk5;F}uTipBluqA)#(YKfCwd?FrqLxIgy9img9~(*bfZ3&eL2!{J(cB$4ZSSv_?Q
zJ^N7*XVr7!xY9n%)xbG<2_CT_F<bh(Xs!^S4bR;kNuY_^^~fOT;SZpg|3JZ9x()WE
z+xf+_^j@q2`vhw*eg8F%yKE4;wu8g^cDL~T`95+{;5RV@%h$dc4C&daUr!KaqO+O~
zZ1K-+_QO2jb9j*F8Pl7?x;dc_4uZKeQ;-|UnT2BgD=XDMHt|3unmMoY={B4PN7M(z
zgl}E3RY%CyBa5KW{e(~~%1WeY;dQV9%6eGdkV<E+y6LN1Vn2C8-dnNSX~vd=fja|9
ze0a-N%uDzyOy0-cWYj|xbaJALl*hS5>b3ldjV|*$*ODlApRO@)*8^aGl4RTJC06EJ
zVBnYO%P!EwPztJ6GA;UgofVVRS>4WsXF=LtusAdWEpP|7IsuHF!Y=g@#}~0^rs2e9
zKmyBk8lIL>_3d*;68$XG^VaHk{0HyR+3g8+N1OBV6uY*x{{198B!a4Uuddmu?tn>s
z#=(kiJ$qnqP`y`ea7c<euu)j!Nv!_QPDPs$m-K5laE9j%Ej@I*L+z9E>mFftX?SRB
zvHz<xIcM$pwjuR>*7P+_a1$14#!uDXHg>DqR5!efEI1;8x^!5*OkC34gaO>VS!SaM
zE<R(fw_Gjh!*&oi<mKCKqE{fIi{I3=68XJCeuS-c;*|3>^=4Y%18r|ykB^<DhO)RQ
zFYm468OpQOIkNk3;W57-$}heu-x4<HHwO|24s!cnt)m7X)qYZF^8x(=J_d)TH)pHw
zIJ;NPZvFKtk^-!~`XK07eY%j$BP96p89zOI&C&Lqw||NEP?6Y0NUU~x_aK&#EON$$
z+7qHv&Do<p&dbuB)2F`e|1MVc8wa;|_Oy5Dty>3k`)U3=>kyF9BBymolGM#Ai#gh_
zUdQ$OGd;>Xk{MeAktRj+P2^2O9C%IrLRRH!QonE{kI{$z0QW)F4%R`jFprZ@RSrRP
z8HuBNSG^~>&KB|A4J^tn&Ji3mYE(;4x$7ugP7g{fL`v1v2QePf=M$ftp}(hd+VO4)
zxwbo(ru*f<jS<|f`T_56Y|?pCeuD|LWO+&30+~p|2)e8P#F<gUUXa;CEh4Bt1Lypf
zdJX2(V?>?@O+L(@LK@YX^1k<^4o~?Zir>>JdWPSgBpMIv`jwON^wa2J3f<l^l;J%R
zE|15e99HWANc&V~6pY!aYI?-*57zco8^?JL^pXA;h1Zs~xt{&_`~Y1ozW4n%ma3IQ
z>Pt~o=Bs`|T}19uzNr~fc|KKu-gi!v#6Gyg4yn)iu$HKrkh(0YJUoJrInT#YQi2{*
z#1kgPy>q(<6Z2&81DX+4CB8w`I4r%zo5QE>6+!X$^a@6>8s-g;C;Xm#9Cf2+N7WKv
z^|wf#P4eby74Al0i4uF_BU<3o1L})W<&(?n2h^oe<&~1tqpFmWxOvTslEH|VS;W0W
zRTG|U!!UwT%zE+^@BQbv=}F$a#Lc%h`@--ozi@B_4@XP-ey^rRiH*6B<j^VvkJ_Wo
zLmez%e@;}OFSUq=+7C|}C@cD#x;MqxZqnm?$Gfk$`25aG&KfLwnIdRaI^;0r>p8RJ
zca3rNZ4Q(yGtyJ}F8?2bE^%MxoHX;>NgQAEG-iN1XB&3>Z$$BA<De!dX#Ft4KY`C#
zoI=c$O&osnTk4d7qOWfy`alhB2&va6kUEuV)YGcV@Rh<G-{HLk|FG|I7Qj|^$=}!I
z@i!0a(cd|e_bX{VS6qYMRYDbs6`B&-r|zEEtuqtqcg+4iz~FZvnNvbY`a3y^?d@iE
z!;XpIx_5ZpH4%o5q9a`2LeUY5Vndb_JHG-Q0!2O&i|cuvTdLJx+sM@R^HZWH*8JIS
zVH84=(;==qMeNa&!->R=Xk^_Um%6M2FN$Gj&eX3RQa_~qL(={ar2Qvp^C8-Nk~VX2
zjiJp>=7j{>)`25gWZpy-G+Aw1Kg1|?sOuma)^6QpKPE6&U+2s`OI-nTzmqrs(C|b(
zd>4A6me60&xr!AL=c`(ta!jf3u)wgSzPxASkovu%%kSV3rn;hZ=-*GFLpwR@`fWJZ
zomfgES-omn)Or4y{w?}E^g^>BDEFjrZ0Zo8e&2*b?;Yw00b;!q^yC*c4sW`a6xt-N
zyp!aj@4#nwq5gj-mbX^DfQ<rxKeGcB)=Ki2PaM|%pBVo$pPC#}&uomVdsH7smeC(h
z6-&U3?0raIaPUnvvqKGHpBJO_+QX`7;E>vfty}Mzp|<hiU+emG<RkTmlZS$jmM=lX
z?vKn<Hxmw}{sPLo`INke6Y8%F=tc(gR|dq%rRsqV9qOf2lgcGU&5ys{OA4(x$Kj1g
zAnZL8kTf^?5_f@(b~TDF^2h1S=+vH<U`FEVh4oSO&IFiwri{p73cX${TC2y?^?)<$
zOcIMf=jd)%M_S_Q8S-+f#(|ZTIaDXQ&mT{Y!+7fRexPnzk7(T=QFp|ka%n^A)>Kye
zw@#|KaH{IWUHg}azX~t3VNNX=A!V_S$F%1u6lpRs@7?nt>$pJ;Zy=j7(#r6LD1Y<#
zTL@yOYoY1RD>Dv!fQ2rh*M2?L&bC+y#tOwA7dmii7Crh|qxAaWGj!;Qk7AuX_-Uij
zh<BdB?!HdQ{mq-Yd)4>TqR8DNE#Esvk(X<GL``^aIxz&g`g<#X#QEC^F3US<Kz|OJ
zriN69?3M!?u_&uN{^qH7+lKb22R9C{{QAnxD-YdLz7;FVRsqt#P2d!;4PtiwPY}0g
z6^GNipZak^X9H-pqWnjd6IUN@7#S>+tn~X+F{<G-e?xhB7qY`&!jcQ;=p-KYZc+O-
z_UMCi%SCtTykv@i_~9;{c=Gn^@iSIm=R9=dK|>tFZD?iQh~(A4mE*H@Ip~+I-<i7y
zCrg)JCm+Jxbs_YDa8B(&`S~~>{e+JmkH~gV|JVrjfds#D*SbYBUv&Xy?DvHnEfvQz
zsqip-^^J2RAa;J+eDx}6UA{vym%{{geFr-@zE83>;gIin0te8Yv*&;0+P5cCbR8C;
zdKl<Kt&cXY$w?3kj-mkVdy2XrNft-m2@)gSzdp|O^Ap5Cb1P;*Zr&8}jY5TRv_60F
z+^s=(TcBxnVr!x$u^E@8T#kUuLlu!1;UZdlWNvwQXTqz`*RM%pqGu+E3q;>u*NU$!
zPV~y^!6(<n;TqKyh3J_ikJ4M~bjL0^QTNBV`tL*!eK+>$e!La;oE)F8{zTltu9M>t
zo<`O0kd^jrf(7}V6Ytn}utYuYhokLKf5NYI7qiFTcm3*i=JQoDU32PS;kH9pw=cn{
zo5<bcmw!;1saUELGdkT}q{Ti@zq;dA?P}NO@efta6H0d%%hr2BCtjd)PegQdkiPwd
z(>9PL2acjJ;<)D05a4mkM%i+Ari$!z7;5)R%D=pB0B=I|*HcE?U21atP8nZBiajiw
zcgkTrYwp6jMhA3opYFnBUgp8shy33A3GVB~id8xQCgq%qw;b_I^(>+8@0{wBVSY2h
zxc?A~tN-M%^zDSzAz2E|lVlh7q>Ol%w7X-7LUo4)9K~NZPc`-cFVY6wbGWy9>otjB
zuim%C<1VKQS?c@&a?g2dI7WR-k?L+6MmHDNIipK;tS#QIp5z1%-Tr59`PJSJN{f+$
z|3)y5xQ#!LdpE;+gDBY_tpnihb9U>sUxSJis<2O8DzSc(|A@gIA>^VCGK|9+2}drv
zt85M>iY~3t&4Yeb5>m5<)O)Rch-!VcdS1<buTFRO6GEEa+<f``i_c%;n&-?;mqe$>
z4r@-T_QJs4jPrtV*g>}gCycMhfDw5(74?X|D1irn$Jn+FJMWC9-TJjv?dsHFeOPwA
z^P;l`(P=)Q!XrDyUmvf1k{e(@IJ2YcP2JV`^J{eCUCw}r>+^Rv?|EP1Am^V}I=}Y^
z>@_|4HGSv^I)YjF(Jt>p1zCs+GRlcxYSxG*nO_;E%k%KRl1+~4Oc#Ej3vh4BQePlD
z)(9RH`UdmrDzFYGeRjynozL+9mutnj7D|?m1tMc^KH0JZpmq|!*UZhIb&SazQI&;w
zPcr2k0#cYW-8=V@{HA${Hcm?I-k9qTzkglzjybOFPv}*viX=h8>VcvviK9K)cUYtM
zD^wTBDPwmL{AC(IT$pj=1JD;aQ`WCu#O^xH<?^pu9BW^>q}?z2@PUm(XUEFS`3hMQ
z>57^E@-4F#&ClMUi~Q%h<fN)*Jk}@rW|I7Cn&&9J_29NYf)@e71s=TC{yn85o%bG2
z*<=^FJSN)x&nGzu&3TX*kbgz={>MdX5+-RK7H{HgJ|V<?EFVEK=!TdYiD3EEZ|w+{
zN1UAH71RD#_vy9v1ymjnmwK@Nz3L+5{yeoBhcIVhikj@JzD7O5Ng(^-;LNr)g2X8z
zaGoks{HZ3Y4>Ky*R0#4Z7`=diCf|B|D+-NCzfYZ22*Ju@5Bl_#*Lb{M6&u)kFPi5#
z9O|Nxr3SRl>Jy<<sj@!x!?Y~*we>7<3--Mz4CAvx6yHYC->$wrp%1GOC7o%OTf363
zOb`v7HlFDxYjJQu>A>$Kc}F<ipISxTG+FIBNy<%@dv(W2x^R#9!<<2H(2GWiK!}Qr
zujUluRXQb~7;>@{i)xOhE|lt0r8;BNhhOCK6w@F~1=nYortJ29m}1&<;Xa4hv$5w=
zb+nE6INbf5@#%iF)9_eQ!Kc)BH;B6BBy}WJ1c6i4eH*|@@3z5g!6W>9(~xr($&Yx0
zPoGHoCL+}ytoRb0EGiAu19LbES4o@6a?%mIoD3P|6Ti#^rwq$QzIvZzD#T=S^U0s2
zp_m30=TQ&~5^@KTCq3#93JYR4Y|JAn&#x~+vU3L0B|u|+h<q3PVaw%x<H}p|m*_#)
zAx^p(XzP3QUKQ=3OzymP#D6_QbP=>GDhF%*q*vNn(37pnK4mB^KjEC4j<_J6Fs#An
zWeuzuFvZP6Czo5sHwpDm|0Y=F33=)p>pRpjI6t)aKoN-LG_;teo`0H1sm!Y8RI@6l
z%Y#XX0b4e7%jo|^?&=Rzd<W*AsP^xiSz0~wauhaw>YJEdkhuN>xBa)<oR_6MLYT}W
z*sZ{u@r@m7TWa1m^&BBs-%Y~@29fN$X?dHkF;9BZFzBo+bY3z^9pI&vEz#soOm$u?
z!_->fLZ`vt%gD4ddy@Q7j~LpZE5D-WJ7=f!C{>Qs{yPVIb>R<xunIGPCUfrX9NhbJ
zj0%6?VCtevJULHO5`9ol+Nyi+UwMOiz}cgIw6Via?D2qr<sac-Ci!;ACLi8O(Ujft
zV?=tf`zhH3N;J)ucfV+=t*cD2$7T0DB1Z76NA!#xOhi=e1nU1?B)%QkbJtRD*QO4!
zIm{4U%0+Rwnp~`$M{{+o1`09U-mY%g2vdIp-2MIQhZ?9oMSX2T7W%6$mD{7f)5hEn
zZE{}01alH{)(-UHQHVa8P-)~w8u>#Tt=z|{pa)aqtb*q5i4D$`DQYKSns2X<UW)LT
z$4{L9N9@1d>(vv)M*V=Zb<dW~nA``l`u5h5U39YMbnJH=12S10<dg@~BDH+X|HIU_
zdsBz?^2U^I`GS)K^3?Zv@gaNqam;uRw+&sYexI7BdovAcIRwKxd?_B&M!kB5n0hPN
zAbw{-hTBD8ifC+(Lv<F^JLd_Mut$)cExc@R59zXn2gi!sYplH*mxTd2LR=v0xGE=@
z?d1HDR7nmbt7fjxNK=n;p5jyJNp6w_`cU}@?b1Cz<lQNl@{rYe^;Ho}-{;jUZNtv#
zr>Vyn^kZTi*aY+R6K9rssV&~j7bgjj<f#rNmc3gxayi0BkF^<}NE4_u3j6X1*nfJR
z?0l`hX92x>W}OUG_JZ1elJq&Lv=kl7N$NB5*-4^Tvo5eucc|C#=)!@)kb{%dzZpY{
zQ|)sSIxQ8z3d!1&Oq5>)-!yd;Ce5Rp4b7JmL7k3!K9S}h7mjNJQU7PBfVOg671daQ
zv?ruuAS87(l+_B5H3@CTVpa{2f8QqZmvEGcf8TV_pY``t;pMlaq=1eyvR>QgQrF}1
z)+ZLaqnr(iFB2}^DeAqp_%zqxxvwm}>uSQ~IPT3)LgK$pbM>EVrlXXJa5^sfxak<n
zR!)vUtN+rUoDb~&d@kioVX+Vf3rR?RM7ZF_4vx=oroc{Jz(|~qFEZI5&srtJn#Tg2
z|L1c(K7!f~B2H#sPqJ6ZfZ=h$#-mKvCnggb7n}^^W%_A{Add@9=FMmnvbnZbk?ZlN
zE`%ya50^eZd7Vt{4auo})5#&eL;*lX2Gmz@SQl#jd#veuK{tPb4&APN?jw4;d*xAq
zcwCa3pM6CAo>S_O<bP68hgHy3^P3V$OWr;=zZY4f=IirTVy({OjCVD8sCjyRU5vE9
z5~0?ySpwK@#24ZaL3s)E0eY}ZA9Lnr<Sz-k2ld&v>7x{T4z(raa5WJb{qN?)RXP3P
zOQFQ7YkBfZyd8Oe3t4)dYQ$*2;p7RHPa({rtxr|;B-He{3+r-1U+cdqzsel3^kV~l
zk^}qW!Q_7zC_bJ8|9_Br)lQFCNq-%V3s~C!+sUW@pZA?O{u7cnM&xXP(cL;end2yw
zvm=wh55Olw@EJ-nil0jgCv&=da(>3+v%QQZ*%~LKj3$90?te5apZW#XJCoV4PdxXa
z@ozSM!Fl7n-EWG3{}K*!sNy$El!wU+9o>giF?#4h^00s&lMwob6fv;eV9p>Ibj0_+
ze?n2)AMjx$146b_1b+#+NKG5z_cU|FO!Aue+|XsTc-fGB#=xNiCsgLTleUuWijInQ
zMgE_dW_W)SlYct={3WPtt{YI(M$9R~Vr7^<e9Y_o()gs0lHY%oo=n>R%;O)MGXWA1
zT2pa6Z7+Y7Y2Y(y7&4Din{2gC6%rTG1tY3ehH^$4sXWp+zDW=7DbteRnun*zaSxOE
zV35eC9mfp@k1Xx+j-E##c_^ukvyC~>E(IG;oO2%3^uqfVNrG?`e5RUNaL+h-Q%0RU
z#Gw*?k_~ipK92t(nJT-TpJQ9UW`yjVPoxC@ifsZQX0C;ZnamX@?ipTM)a`$1zl<i2
zw<v#w)#`Zo|AbA&E*VckWS1;Wxl*=^oHNkl%B|iC*E)<`j^s=pSK)QKj1L_tgp5d$
zmLNlE<<{>9NOhAXsT(GCue8kcAx^dGcxv_<yuo}cIW9F1o307&QdBX3LRCBu)Pne7
zbxF6!vwfSIT<8Zpc4C=Flb#!U6W`Ebpt}&?POIgA7_SyQb1o9*Qm4r|m#?r<iO(`#
zuD@|`FooP$9=LLh$Iug~zaPX!$IhwRYvP8#zggVP|K<o$dK<eEb?f<h+G3Mc2@wy-
z5pai%BMx<vB&6UT5s6<pep}pT2qZ?CFiQ_Nw_Kvn&Hqs|XWEi2O*P^n(7w;KDLBEL
zE0S<+PgV1|`=UfE`U-^^PnBF3r;P0A7kYRd2O;acUe_;qeWvt`uqH)Pz?xqdH*&YS
zW5;oWAV@^Jnw>MJEN+nu`l}+nogX%~>T2UzL|77}?_CEe?xdTzoF1l%=8j(dW$Ymh
z1KQ=4&0b`_bSFB$zo=Ntw6C;+fFzm6`91A!;f2%4M<!!FRkB63dnCSi)rjb|&mB0{
z?3{B#^XbaV!e#u^e9NHDl|h{*gNj6nN8^T2+XRDp2W_6d#}f-mTrEva<m6zJ$U_db
z>~s^guJ`D2Gt^h?q5jqyDv=MC+M$C%;v#|_4gDY|fQVcoZYJ`0Qcr(`R^D`U2tRSl
z=8@jVb#{bOe2m|^Qv%B6FcWc9>Cv@3STxK{zPR5L^C<QYRuHRZ2PiUmY>G*jD`yrc
z^(i3|5eX4GO|HCguAX$naogqY!Ob$@r;wI#Jm8qR_}6)eDIJgQ7pVV1bBLt@kbc(|
zN<ME++bNSld?|ht;j3qLs0-1Qeg+-%(>i}umwrO*XXp65cpj{h8AYKLJ=X5bnX-6m
zxS!9CnIk#3Vccwxo_y7`ux)eS;;jTOSwJaV`nWc?nVoSjy9dVz2O96U=<ZRfCGI1>
zZ|mWAwxWNNZ@QU=P7kG?B6~;6dp!Am8|Nvv3m9y@T$W}F?$l?sZR5ZgT_~Ml9w_x?
znVjr6M&YwW)JoOo@q3DeJ5B}GuJM@!{A;@3cV2jgb3O-h$F{t`f)D>;4x8VaB5_Aq
zcCYhx^~b30BU5va>GX4sctTak<nO>gmTfe--}O9YUNw{HmKC@nUZXE5+DwsMn?uLX
zf)F5k3}!#rW8mB!rREy>mklI<)Fre>sSg}OI{e<XCfR^>#s!&tczv6=w)g9WgRCRt
zOM`Y9^U;>g`k&YOmv|jeSFQ}|+v0xJuRa@BZZz)y1Qz#G?q;(@cN<`O*<tvGHMGH|
zM5E9mAbL#lD^v38X1$NKjYx9mOIVk&G0kROR_Q{3Mb<0%{H?Za$M}xUin3F1#T)!p
zX~d4C!9l|qnBklRt1h`FWHe@w`sfzL3C*9<10Oqk=PBH;QwF!_OKiAsPPYJK!0<F{
zx(Bz2hW!<@MEfug%4tT?{y)j=se>uvyYgV0Y|1}l>Nh+)jKoCe{U5`=eHw<+>3A7(
z^{-&&KQ6<+Fr4Nzu1X=A<9XiW68ziDD&3V2>gDX8(Q7&11s3&$le&_b3T@`~y3bxI
z4LDRbavFwolEmey)3Vf>EPRW*O$;~D^4)X%CR+tQ`2r~^$UxilbbsfnnuF@BfnWGL
z%lF>=l)Mm>&H_%;XZrnDuk32qtJHeZeEanIcRlL&USd>r>Wnx@j8j07<$6_Y1h+tS
zA(@zlFvR-GdlRY&vr&{&VJ2f0M9q$x)OW;-C!=^epGkI_Zk^NRFPp!MO#5}q@b}oG
zs^WSlUR#rOj(Hxip4P;5xjHYT^S6<1H8>Pg7x)scnNa58UN-vx=_*W@eQEmqc69~G
zt-5>Nt{MB$LQKq3Q-)Pxx4L`)&*0uYBEL>5>}}7qtSxUcVNS>G{QgV8!;xga{s|V6
zFAO(0%5eb!!f{=9zP+?Rb)?MqGPlb(&tYa!3t1!*TZlNsRi@{1ahEwQo^kC15SK(b
zRu-{I^(_+DmsX!iy!{mXuG2B~|5vWJZgqr%@RGdkxYPLlml)koOx$npsT26w@f@(s
zbmIl~On)||^R4aRnctdN|8EJyC|m*?=2jCUh4>c+0gX?_&yjN}IEobBOi_ZEI*s@C
zM3@TEl}>aUS!W`0qm^@iBJN=p7b?#H$}A&!K`BGRKbVt&R*i^T;vJj&gpWPu;6xw<
z7|4BGC(N0Ak!XOkH|sc&bA3<*Xh$I6T^J}TDK02ou*~mhZ3-GapCeRTQ5}dhR#XNZ
zD4*)9gAtHSV0G<U`Ovy-s9YOytgZ`JIaU-eT(Y2ealus_kVrDVKvQKT5UFem6H(0j
zdQKy(sE^c=0^3m~w^kt#Tr}7kO%@EeO9GLK=3pRLU*!l%t)^%0s|t!s-HY4{7nHh7
ziseN;FRH^;fvBToMd{KNrGXX2%a;}`qzvr`0!_g{Z9_eMr=OIe({(alslKI&v$g_q
zJcffZm1`x5UnF40OW$ZP*#)bJOiXEkw_xcKX2($#uBeWnXsBNu3xTt<gZ0(fm9+qa
z_1hF~$gY-5-wn}hIY(NKwvJ>+nkpTXH**%Kj5P%+8){>9G6JdFT~xqTRj^t5SrZO1
zzYVc^4nhhu+pAkw2P08O#p;HpsH3$xSm}t?gd>hnxG56NvHr|(NTNfEM;fS-&ev5m
ztqnFYtU!Gvw%V~e%rw+jtPR>T9uA?MP0n{+I1+(o1nPq=3`*d@UR*jObuDsx3+Q{e
zwu&j0vwDKbFPYL<a(R|6SX!{mK5CT;D(cq;q_zmkLOK66ST#*lm$C{?jFU+Wg#t4J
zl9NB;2-in~O)~GyP$<|Gtg=64MA5LE59{E-$yj5cAr@_nMIH4G(Lk`F))Ba}fnV!k
zAQD|y3sePbgHlmzEi1jQArzt^bVyBA%y)e#X2xlC%YycT1<O|~D<}f8%uodu81-sd
zVn^5jU?5P}P$lpqQ^B673N%KWk^m=g9&IvX;VaYmKy77R^7Zno+=~`5<$+K`Q;T$h
zk=eV!UZDs`y?$M?{IZ419TlXnTnE6`#Ol|wxb^hh>^ju60YE+suIF(ruwAh_SZl9~
zT`9}mSP_*Jm;tLZ$=X1f)*-lzpgP#vI6Bd?9&Djx2NsqTmlpV#3)%FMnex_x*yPyF
zey}Y7jzFwF7713(<h;1nsG}wr1OB4nN=NYeSh$%1wmMqP?ri{aSPItAf-N-0GM@tZ
z#S0ANhwB@7BD-~(`2lq}Rs;MYCa<A6903Fvw!O=XOO_Qa@Y=0ZvQMIp#l<V8Eu3~~
z)|{-F(=zL#vHGB^I#?fscjC69sj|k^I{Wg>%P*alSv@VYgfb9GS9N`C&K$F>7CI1g
z6QgB1KH9w%MFq>;3mpJrkY?zmS?jtWSS-Mu4Un=PvM&Whn0O1Z0C1=-9cGzwtUogt
zPB0X1wZWSTWOD{sw5lBI&kXC&OzY1q>(8aupUWJ92(`1-8FIu?S-~o^zhkwv_O2d-
zE~sRVBhna@oy2KsL3^LEob^EeTI#cwj?HQB5B7{~tJQ3%buyHOXiX3#Wk9dWQBgGt
zhSVYZS6nz~pwbaCdj+rxMAp?u&D4#p<LKU(1q}!g$TC;f8Q@smy3QcBXhTB)m<)m^
zng#nv)f5X=L|BT(Kt(0!QYePqnVjUs42O-e0u}X@H4TF8*qs(esR@s67PBZ7m21Ht
z7B-JiHYyWY6^tbJg`-t)h3Vntm(ut;!5^yygzJKJ=%15lBm&*yVO6CZzX8n}U2=<7
z@ybHP!AS6WFgXoPvxW|=FYtP$i!4A@uobLlHo$_bu3A>Ge7V`uk$}CXQHp`Z0u_<K
z>TrEU(>h1A8AL7+)*P)^&E~ha6I2HhAipz`yTiTcs)9uhgDGNlHkGml9sxfAd#i(_
zpS4iPYJ=}&+6;9B&(SF`Iul?~=7<6JB+5!60U4{=<BUP3yS~8@vez<X(<-qL+E5M-
z3rA{_TV<3|C#f_OQ^W);SX{8&p0MM9rYR;&S#`8#+(s1yY$k7EiPyWJ6yhYPqIMm~
ztx;&Ch5IbbWsQULzrmYH+*{u;2K9C)fogD&W1Yoqm`x%eDCjqdbnUGxgXbi1Cdr~B
zLZf7PWOXVVnwr=ZQhj}OazPfAEGt{E?5Y5?!r<+yifDyQcZFd_1PLxI^)D^3%y0tx
zkaudSk+lofvxbpaBW*{31w&PXb&XK~BFRVvxTxlvy1@Ddh_?`ad-0NNRVY?(4q2B|
z5yPQ%f#iK4VAT?+u>T4wf)y~_5_1$VB*TE4)g$mYNJaQM!OQ#+qG~v|8bAnkqaNwg
zcz-!Y+py^k-K!JUge6MyV=_FJ*7SI+DH+JRAdEuDZipEWq9xmf+JhB!Vto{_v{uKE
zNvkt9m{LJFQU$|wd>1WpX>beFxUPalqff$;(qL7^I_hs=f<m<oEpoOFja66-qp(m8
zvuTnr41)wW6b;u0LKfu!MqwO4q0j?aV*tU-3uKqBTUd{Qa}9xnfjXgU3~@Ecc61@D
z>!N~<4D^joq-=7~X0)<~uR-5t4lFJq+R&Ke;Ae)6rKTa)B!63EOdnH4gvq6j<K9^7
z60Q=uC$l1-TC+F9K)E~=_-<;fH4A7}VU<Ys<hVfqug%iUQTPyM20RcAvkSpsNi1n&
zYxiPkdO@JLBv7`*U0M)WzI4ID0tcL6Q-ciEp4_T1jFfOb@HjPcteqp&6b!-v^DC6K
zp^-^6&!Y{dpo2cKRn3u)W<6sOhnzPgEPn;7B=k!*1Z84DM}y&c918;$b6nlj0L8FC
z1&OC7SX&z~2TU-i#&yu3Agm&61WSHAZ^euOe50EddI01nkwuL4s~9&Xd*r1Ht_&3T
zmM$n>E}{)6Mo?U&B}{37dch`jk!sm3p~~6@q!#--Gf@Fc<YEzJVvg&ojXL4H0?bc!
zQ$?LML7XNOfG?0eH8UX9)<%NCwV;7@0S4OWDDhquSiG!c#nJ%St7t)Kpk%2Lx@;!W
ztb)um1WQCH2$eAKflx)b)-itK0u7CZeP6V!q{zq-$%+7sO17X>WL7K?Sh}pBwA3G1
zgaj!~ft-p9$^u?@alr|FSW@6!nyjYOl1`Gh-hxG?0f@qiqT=MEP<@>lsmLIJf<14L
zVjIW;0iy{sAYr;{A4VDoMum4{&j~>Xv%<jGqc>x241vaL11wREHKoFfFp;AI@W;*{
z>%81uUXbjZVGx)igWT9^d=Cr@(2vz?kzh+&oSCHi0_qha9ZM%1buo}pBOAj)wxE{^
zNW8F2%U3LAUY9QqT<Kj<><JVUEoF-BwUniy3Pa)9T5OGmrZ6<b232AC>|+(J%_I-3
z20&^;X9M9XW+lv4vbV8-nTXhMZw+wAEe<39K;D-vE(k1GzTCZh6p%tq4RuzvqX^Eb
z+uA*_gA7kF1zXSFrIvsP)K-oSYhg(d3JU`z%ah|0x?=C!B>05{nL9$E+8B(;C_a&s
zU=7H|nu5YgCWmVXuU!MUqp>zzNkJQx36Ihes2nAthBdb5iA`Sz{S^W_elQW)C<5sb
z1JWP2uf`|}yS=hT#N?)ELrhprYX=$WA`pVYm<?skQXmlG1XxDqE?(lk(p?%@vVujn
zrrTa*SzV|Qh{5b~1S|t?AV%S1pmW?BElCo$3$)ufR^&*)qsi<aSqjnjSi)CwuCH_#
zqbo|@jlurMY+JkIf?fjPGGxwCY67t}qJtw?$3(A=RWp48V4{=&>V)?J$0TX4%n%HD
zZ4fPqtwaIvk|;eYDg(Zg`Q{^Qehj`cI<88g10e1Siz9+W*?5t%w8KU+xbI{7Z&5ph
zo=64q)b+6-BqJu*Nwm;XBRVBZQDzsrOvt|>2O!#THNsR?Ei@|1ECy^$B+3;d1qT)`
zSU!drqD``1*50oRiUbFW6}n=$AV8yb^z;h5R82)~2((cJ1rU)15;YzXTTD|^&<vXm
zE8uRXNT^F=0B$nOzNrpWHVK3YX|Q3MWeQfHRkGJ?Ny##I`H4HOA-OlCa}`FkT3))$
zy);m|Y=N7pTpU=qED0mXGgZPeRyEXB7zG}Oqa@Lc1tPN6Yw8fzkkCXl5#l%c1eCxX
z>rDwmJ!UurD^<#DC3|cJW+7$soh37idJI;My(kR`TTq|8VQB<)MIDB=0`b&oiGzX{
zEv8e-HlVo@$)m0!vNq5H2^B4+nV>53QP?O6s*EHdP}+cGF5k_B>yVYVW}Ko%1OSI4
zC(sr+JRo`$S~W1rL$+iCGN-(;l(0Nw8w-6Ek>0Q`fSRx`VL;m2EA-5C$n?)l&P<2p
zpNZB&HiIRa214}=RT?pZ9~vpy*Va3Gf&}>mu9s?U)tu3R*(~7+jGl-A^vP0Jp`EK7
zL$H>>4p|eGlp|Ori0C+7*f{206vgHiPCG}~?HP_(W3&NT2=NjYYfRoT_}%J+!(z_@
z2GWIX5|sdoWGRv}b}7uEbkkz&Oe->XY<)`^1MFCeoPf>ln))Kv28!7Ix4FdCqGGV*
z2culJct@Jfaa1)>qX<W4Wu!a8>p4uT3_S>sB_px>Y#y@=sEVO+BKRB5uofiJ1aOY;
zu?#07LZ=aY-OJ(Q8jW}eWRI$pEJc`M>&NIaeK5iX1jyDH1l-FJCs_{s;Y4AzoLXxt
zL}aEct)e}J@Y-4jK_o(qYGX}}R$1oVQ5^#b3K*Jh@g<BpOJ@GgaG>ZG-3c#wlEV&e
z3|cx|ww-%<qsXEt4<c+5v>*;c8`-=F_?BwTpc2$uHn4*C>esa(j>sq0RzMrX4H}Lr
z*;1x6z&7(fYbJ0Fl*=Z913{1j*RoeESx5K@IYcuMtbnPOzDs{hA-S;dwi%M?2s30j
zBfD?O?P2$ZKA633h{ouItX>xlMgk&*nCh(=VWKQJ0}0T&1uteK)&%A_#@#S|YXuz}
zeLu@o(KM<7qK`)Ymo+k|%&4D?8paqOMn}HdjG5x7S({LjyO*~bD3cFG|0CGT!QvpW
z3ghWsZoM@VX|JiRDYE7^c)b~orSP$r&Azb~M8+kwqe}D-)Mr4~;2#UMSjrc(`DGW{
zx)`$!*$;unhKQx(uUiez(}G40$S~?c%zcm((FMw`wl=gVNOA0R7_~!V0~NATEtMAG
zvo?*Pgr?6hEmjxI>I&ZH)793u0BJaC`H0ehlr%gkD95}>;*1#<4K~#w@Q-#@_#v1l
zd!Htm^y5XnaTXP8cN)4Qq9(&O1|Hm9%@D0NbB?Rc!c**JW=@zL3p8piiWnHrZL~-o
z$hJ0A8buh_Mx83wC#e8<H%fg+OGP-^2=^5UHX8I)6%>Zc)}0viku>sH=o_*Md37{~
z8^J-MKs92DEsr>w!Dg5#s)U%)`+(F8N6{>DzO{8ka23?X<Ozn6QNi+$btr(=!ur5s
ztyusIi&6+aWQP3Al%GqJ<1<7YEwHr*&D{(Kd%Xz-UWK4Y8^c;$rZHdIPgqoj0T?8C
zN$3?&A%Xz<6OrdEYljR2pfIeyK!q8%uo!e>*4TiA(SmV+S%)uxaT4wo<0h)Rag92v
zVvRE$t1X=+42Cf<!Esd7Mp-sYkCCw9nq>VjOYlVS^4c)G18+nng$h(Ig%bu}g2W6L
z3EB__UG|41+ghBhloXqs{4vTzE_g5e&VScbi3>F>R=7G;A?&bG$J21Ix_Pu|Ad9&&
zI*Kre8nrRnNlSe~bF1l~v~Qryw9dj9n*hoZl-E*uC>*Rcq{&iBSVFJOHJip8g?XY@
zvmj#QNV4p7EL<OIkOr(J7wZXk)kZIBmZKusmkJBnF=@QFS$@7ljN&(H%@P(XG)WYJ
z{f{;@flUmrZj~M#u`T*r*qh2^{46~EYoso@0}}xVB3mTYh=JsI%-q?{OHV3mM3HKZ
zgIWaqgtL=%AB9Xyv&dGkCMaCr4AUnHihxlXSnTb`ycK@ad?gpu2p?($N+7qHJp+(5
z*)H{hd$^O`S2xoUhR{?*U?xFqEKv)*Zqf$54wC^JC}?S@(fP=Nhr~Wj6$XbGZH2L0
zOM5~Kgo}}D<54lnyon{3K0_hx-dSBh{0P_8K`5nFgBM|j#i`j;Q^Be*OG&~my4kwb
z#)NLnGZdq(fYE^%ZW~FdG90$JKSPp`0h<EGU26OYMCQR2ft_!=Pg_-hv$5(}oivlo
zHVVzQH9?}fv*scY70Vsn7o{e&4l%*v-zq}V8}rtp>oQWNte%Z5hUw%yJERCeBMTxD
z&c_uV>tZ<4Qc)|s*YWFO8iQT}6Zi}`T7<lc8CA5KraQ77tTp1f)uJp+OQrB3z<*^7
zn6EQ>O<6Td#R8IoSctAuo+X7cnMF{U1Dja|{8jR`^~reks6d*ngsiBAb&H%(R&b#7
z?-OefWB&<nsk0H_J@J!Fd0?P?R6RR33|Sc_X7r=vK+HE(C;}#&E0l;SVFMpu`DiJN
z$EgI9V68l%5L_YVdtkMqRj5M}-r06_gn^AhrGPijSVW7<G%~!*CG?{XY$2t`gZlW7
zEqJUCRK%j_=a5P8g0M{K;}n%>XxLcb9#Kcwow6{*!jh%_W$wjGN(26a1<S+&B)0TS
zl$&&D6j8}+ARSjYq!kcAvYaSEf!)S+O(-v93t}=C(1A@v6*0a8%@uI^0Fb!tn3_VL
z&`<0-(A+T@QCK2VossOv^)E9N5zUn)z-A)Aa)Vk?kdHuhD{~j9MAnwAMcbmfX>^!7
z*#btQ05v0wurLC<mcJwway|B;;rWtvBK)u|jMBlFe+@fNn?_EqH{89W-rN8>QUW~`
zS9DDHBH8GfwbhM+$0HRjHYcz|n0_P3i<tr`xV5r2hChkzr-43StO=%+g?R;tM89Ph
zFicbHOj;F_s%Y%S3E2Ov@d%(5sck?d2%Zrq5R1vT%h55+yT-yrx0y<DofxP1M6Xhf
zUQj5K)k&*OROn)MN_JVKC=^Y#RpM5I8xq4xYEDNhXq_qZWO|&e%dW+eg7DBVNDq~=
z=zp#8TQZiQd#jKv8kmuZVCy0yn_Foe&jh0znR#5})<-B#u=JbPGpr}J*-4Zfh->0!
z(Ii4d6JHyyRVuWpo>>OF0dRYgP)2I#$XZmzmD0E5bl|-)HVby=Y%wv}SD71-1Cs~l
zAEWIQu8cH_<x}1?iRf(0w#mtoK8X6E1+my}*6zfZB^H$t2pjd7Me33Og$QK{wf5&@
zA0#Wc*4+%-a=c1**BW`CGHh|@hFzD*F~f+8Z3m4rn~LrOv&RovzOoyzd@x4ArP0y4
z{&-L@TCOE#+ATN`O=PA#1wy0i#VQ*^1a1*27_u)sv*E{ig<aS1Yw~04-4;j9witaZ
zTiCvD2#F;V<2-X^_Kp-XyC5P@u+v9C7Ge_2w1^V#;Ic5;;&LI6&F-*v5qOpD!fKg`
zv;551=OIk*!bm_#*s6diQj$Oc1F*NB#lo7egm+068hv0G4&3pC+YZ<p!)gO7CajO>
zE38K4b4X3HUJJ>grocf8xQtvM1M`}a3}cB*FKkRDx*A?KfsjtzUzW5ivLo0$Tq(9u
zz5!vPv@(}Q8kGK`erb$^VGHaHXC9d%O+ons1Ph`8kBdxgUPxaJTV$rtLTyGjN2_qC
zqh-dBlt`@fRPd2u`t3T!wZP(zMAWf*BcqWTSPcvPNQW$<1m63n7LJ>8s|M3PRD)jH
zQ$9LZ23y<qUHe^A12iMD-t-MkT~!!_{&8cl)VQW@GvYu4nierEnF%v2h0X67AsY6x
z0mL@SYCzJ)ZiF)wkH#-A2o!kneGL?^z-W1;zZ5^2(J$;mNE&s5@eP?aJW6n^jH$+y
zkkKB`@tshLJq@29uvomYcc>;UKJmB?nmujRYrZlY>;wiW2$PBGk<EZUS$MT^qcvCs
z0IwWhV2phm&jebc<>;u5%prH9rG=dxSGCn$xOj^Ou~=1OqZv0AI5M*d496+8Cc6)>
zX-~rF^y9cxuq^Q96(zC&!hHw>2j*tu8*r7i#7ZYJ77zmCDGmd6C15$>9&E+^Xjj;#
z$BzO&EaGUDj#voOjM#=4gVRL0Z5|3(EMMxy=7*tW@v;R=mn=t3YkFY*=8QH18<6CD
zrFtQQtKk%lp2F^*HFGkVc1cSWX2G9njxWboXwUEUrnY2(K>b(|YhH{<4Gi0pA3&E6
z&BEPptRQ+Mu`P`UeDet3JPRR8?c;hj_NDceSw17N8hfBMH={i=OKSFpaBB!cNK{bd
zK(W{IxeBnTSGgCvOXmd27Mh(3b1521{ve=ZU=-|#PFH439C#s&c*2-x_*6#)M)8_7
z6^aixHau_OD)+L2g~nR~{e+NqGfUED*;NbtflD0`<A!LchDaz<TVVBCl(VLuvISR)
zNgEbLzOZg)jla2c{0%;#W5q5Xe{;q7o7v-U<_N0}%4biS#w`Mt?22OnF8n3StPf02
zV40*1b8UCaT+bX|=?uG+-TULZKLZb8wj#r<42w?GYE>#d-lre`1nh<Mj(!;}0u-97
z7#0I?s#%2OEE$)%fV<eN-trlNqAP84a<x$<nVy*yDJv-O1ZFHRW$I1ELYDCAz_HX3
zSXQt&aOHxlmMtx1Ba3^xEIDcjdx52cRy#>BxkA7Mf7Bo*Qqht~uTW-$8?fC0H#kr^
zN|pvzlrEYbz!~0Ma+T#BVA0M1!iWu8Hs~1E-_RWzHN;UM&teNPW3-|kfSii{0mok`
zzuo16g5s-iHCT;ng4w7deu_#2Z@M}|SLj2@(t_f^@)cL&RK)U%f0P+*L2=1)|8g@s
z$IqbI00R8t)(pzFB8u3#tD69QCe2iC7&o?&$W*X^V~}k-V&Z#qRl)Lt(s4^@k}%-w
z2pcbf1Eba9gU-^L{m6VbG>K7N=Ff5ps5ZpG^0BIDLOpE6GOKH{>6(HfH%qmpOG;KO
zFIYNmNXf;zOcrYlmJCJ(29x>_3&YA97mWo0j1EAak4AjR6|hzsSX5MMX@bl;i8)#3
z%8*qPejyTuaqqz9?PwHGAJ?xWuo@sjq%j{$zyherc7+fQO`I=AA(UQ-hx}N#1Z0a#
z@W@)Yg!z*##q?CHgNq#->FBNzj?Z{q3LsmqvVpP!(FQOxXlGk(SO$0u@-tO21R$qi
zDXd1)MT*aDH{}3sM2m5^xf0hp$Qu?WX}6*hhkw()%&&2Mp+g3xS%ajfxC=!a)&e&&
zv&EKMec&pBb#UbmEG?1QrBkdkoW8Jk0%E}NLT}0Pg20u_7A*7tR{y*sXPHGF@0J*t
ziFZYDV9cc!+eQ?)5{X<4Hr7rzdNkGmZ(Rv&G8Nl1gpZcDfWC+atmSVx)@*VO4Q!1k
z5SF%QwRG8RJ(+I!wt^z2Q^vOR_$eLT2C`-GJFu~%V1ZA@j!9Q>;V3Poo-KVFqGp4T
zC8~p(C6ep-3C6tvClX69BtuHB>B5o~#ie-hm{^Rm5?qxRxtA>mC$c@qmQ29Vz+%y|
z<)|ECb#O%dKjgg$m|az|_kB7EO_-ws7cpWC;DmAslZdD!3=)~n>2prgNxJ(00YsTX
z!W4vVa0GD(1~hop6R#8Ey&4BJdL3{;QMrf;3Mz=hMP3z+(-jBgty-&owRW$y8}RzQ
z&+~on*AHa>SM6H0s%q65_uBi&qgY)w$igMG2$d?uh8M_shj!(VOKEzH+Av2BPa@-E
z+Sr}xn?N!S>7c3gAA8!~sjFAWApinL4@~2UR53LA1sV@B1cW{6aNBBCYfi^y87O>=
zuf&tQ^fI)tcl5%hgiqM9)$%oeHbO0I%B0KQK+`TUj&pAFAw$O;vP90lP@}<rancbi
z3mvDt{1v<<UtyB4kr&dW7@B8$$<d2?M=Wd~(bIE+qHHpe*b5=A<m05Gq(jn?C&&wS
zX{V|!`xF^3&pK%}{i#00lkKy(GZ4FCnZL?>j~2jTtoRNGGsZJxBbN2cDh=&pj_t&w
zxuN*jA8Ip^)nQOUpRh`#%h4uj((Pj^eUi<@wQ6<3+&EdZmJJx$&64Aj;rO!+5K$|c
z!|EI$Jc$qWCFcQ76>*^>QL*%t;rXu~>@0>C3|lN`YGw7LaUD82f=f;Cdh5!8tl@>S
z%<6THZG<Lp)Iw<ivER~quGE86&>`I+iIovKta-A$E*9E|HcB1B#RVcbHLW-vhP&Z>
zcf215U+Je7whvjnI2`?wunQ9l8FSSKu{~*bf7p<|P#MI!zG2i`c+8>g(5*<w+l(S~
zYjHk0b$k!)LN&|cdFZg=#o^3xup-XrycBK0G8TAs%D6964vnt(c90^S)W}0|trJx_
z42E%6N!~ot{TnGWs?w3;#QKV$)}E|zbkvldFC3$`Azro-!?90&-mH&!luN^I;Zb2m
zVK&NRN6mP847n)<9Chq*hYjsRTv_K8e0W&<5P3gQ!gGn7hL!diyUC!Tk1{r0(hxqR
zt>=*sIZSE~R_PCPg{?1JsGhN>ik;b+dc<5`<x;wsH)TAOPz~<_$oZd>&ydbV;zSNO
zyhQe8Y-o^R8tQ4gKUUspla-?cy1t2}qqv;Xlzqdp))p>Wq!kxmgk3KCLt*Zu^Hw>r
zr7xbw@R9ZJd0JgIj7_Z~>1SnH9^9`zNZ7iek%z`|zMRMkJ&7LGjUATg9;Z!(s4$ha
zIjMGXdW2AR>18euJuT13be}l*%Vq}JzV(z{TiVkR@@zsH&&m^eaj#i2>hZuZ3aI@a
zlJbJ$@L@w5vArRE^C#|j=oCuXXm(+i5{9!BeuqelZZ}Sq2N^MBY+MK(Zs`4`v(?Jc
ziGrFfR>+~G1$K=s1Nn@Yi`$FjMdZ`N%0!fxhxwtGS7*st33=N$7!aKtT8E8j@t{zg
zT!iV8>;#zebe6AboS?BO{iFnh9Ep(!cB)exPDHc4!;LUdNio47cTr{B^_D9~Zo?LS
z+>w+0m{qzj6DrliUn@c8Tk55%FR}FysiNS`Y(SOHN1{QWUu*4#(+zftWVt?HvMQG+
zezK)vQwHW>5@2yW@TJ%y=^jE03!yCLuas^2mGS9jeC#EyUfyc7PEtd?vRu-w%QID*
z_>PM{lGi8AvTZG~5!bH?#u^ROeG=6c*W%2cEv*&W!djs%s}<U!TH$jVD<qty7nY-y
zG0x+PMrOfrmq2>EP{@=usjf`}mC>I#JVR%!DRgyOqS4$=GvdQq-NnOJTT}Z`J*Mw#
z$yE($Ffv^UPSO1g>x`rW)gY55o)4VTNy%s*y7f5rYuuf?LN`2R)updti7&%EF#L1$
zVhI=B>$To5&aUO~dRQNaKo0AZ*fmYf`@+MHvC2D5dc+v@fmt6sNG*nSj2uM_+bpry
z*Ns$p*)xW&=n}`r=E5NtrORe@f#?%@cU3_i<wUi+G94H7<9NiB@c`XCP+sdlbwpF6
zMM50HLYqG6loNClyeB7{Lc0-(Ix@${s?yM>G|x&YHtNZs6e=ZjfU*xLCnTf@-9HFc
z%JFM)dT>woXr1B4x9P(%beoC9wX!cTssUgVKdGWsY2mK2Lj%x9A5{*WBgCS7O0UyM
zdFH6C(R?anq4>69hpp`6B0*lamA%rioRE$#^&r0J38P8aNeQ>ZlBl|f%RADAi|RYr
zg^Tu4@rTNbNUiQ+?Xat+H9DpIvP$>YDphh?!iSZ}&|!x!9+6&jg+5f0GY+8x482C|
zreejMLKhR~loIt}z}M}=I4sFCBI(U4YaoeM89`;(^A5l!KGs(bb&t|*k#@zO%;rVY
z-cb_0$q4R*xLhTLYNSZva@tjvBs%w$Xg@?2=W)uQ8INlo-P2i(bc{0PlBOfk8d^ax
zFp1WVL|&O<-f8`?Ix`+2jc*!Ar>k4%^2TwP`KFN7<+H8~&X7%HYw)W=v$bBlx|9nB
zN!OUxg4wQuXsL@pS@COU#CkUL7~1lrtW~xE)Gj}MnL@jE+ZogV)Qwf$0}^r=U3E&S
zZJ)5Obh%+gE1MsO9jP0E$s=?E`-UAv7aulf^)n?5P<n_l?Bi-daagx5BQCd+#1}4X
z#zkT5Wh5Cx+mriLikG|l(&EB9k5lCAAN!0D>>31dE1^0gA6j_m;*l_WiUA$!UuK~z
zGxz8FELzNQ3uDm8Zes7)!=)=_tkN+;-_2Md?Iexs6|ITT(99Ur!w#WVh1HP8j@M8K
zr|>ja7{U%M?*N@4U-B>y1P>9t`i_ij3F&Ucq4NCe=n!Yo`Ed#w+F*=Ljibi$_>f2*
z>BL2D(j=}j!vmP`>fY4xGOal@q-91dfu$|&3_bA{glHJV$9eHNUT~hQ6vOH}9{mcn
zBR<VmS2_>v%A4&K-w|+oYrqAaG_UP?>Z&&I$_AN^0<<5S6jcn56FFHZ%FAi0Uu@`p
z_B|Z&59h$6;vsayAfTnmlh)YZNdt>JcVUQ&&a@dqP$M(va9Q%E03`}S)6q#;IKC(I
zpE&kwFRODRaiKR(jvG{;tb_+2Q>KUU@L*UDgyO<j=v$yG^c}uRSgw%cv9kP;cQoY%
zDg87;2$DMWWgc|c3y+mg8>tOpBBuYy+e}tJ)>(&1n9OQ*6;8cQoiXgCb*JCeiM^D~
zP{M9joRP!{iS%I9%i*$tDG!F^NmH1^Et2g_;XFKOBF}jAxsX3G(S%J-<DJ-H7@Kq#
zq3wn|{`5!l_|qRv#A#|&n~Dk{7f$ZSq1)DSD$n9Awm>>I>2Id&Gw7OJhD3db+jd4|
zsVV~$bK9v-IzV^gOjn&E%MsIXATMlMr#VOrbRVZf4#M8I5RaL%Ah!uY^QdlH-eZs@
zhdvZK@w7Nl#y+y@@6-`kXzP%nicKk|x@}eQ$kY~~Yr42R3nT5ShJM*5G@DXj-1@9;
zB%CFu>{$9wZ56T>mq*0<eT1r7X;VsHpBC>|zfe^bU>$aN0YKYa2wQFBsVPjcRaMJI
z<1_VTHF*v5jIfiFnwK73knuTA>npJ{WkxCcAFBA&XbX)bv}>LChV`m%q=m+(vuFA4
z($HdA*U0Kgda-;yBHNP<c^5?2!8*n*JVc(rS4yHQ-JeLyXO*%C*=gu@oo+AaLo$35
z7sHjMg3fGGoao{xe8Q+Q!;Slg+BC#NJa5nkQGC*&^gw6<aj=oTLdKc62-m0CTApT*
z?W%>nxQ#od>U9mDJu(Q>(73TJ6;iGKFl&?6C1;N0dr$IIPS%<_kBXl2V&ZtE-v`mh
z{Jvm|%d7ZN5#^m4@zU)c(-FtlxP4!BduY=Vf8yD&gwbaKwyP8#3zTC@jFQf=VXrP6
zMUZ}0gEjQEx}cLsvQ1gCYTJrWHe>>>XP>7|{42fJ)W8ej;M3G_dRy&cjU6_8!ZRLS
zBlJ$xSB^y1OHPRAw!-Jb;^TO!t`%Xd46~}>$KIhbhJ<lnlT#X1+&&I1b;>;+iH5C5
zc^qpIY=ezz)jq5xs-z{8v;<vU%A;DD(g)S`VV0j&*jxP`cGGmOqLr;-UEOvFp)8|Q
z4D-;P3zHD+6j$X*bR4gAX(oeUSWSmzS}1mkc~iUKq!oiph=#Ng5av=-{J^$UwQFuK
zKDsHdKeIB_3btJyUG>=`bd^HO4jX&Y3mmO4Z24Fp>M$4`K1?E?m0NX=epf56qN)43
z!3L`a;vp`8V$jB?p=pbsXV-GRUg9xq@yUj8imy;fVgF2~(}(L*a4q4u(Cm5(k8U1a
z+4s~~539?X`rS+GH?&=wJ&2UhVcHtz*rBk7k#osYXD9Li>zH;p5hNcI(WghUjVzmd
z`i!<}>M>z4+E@{HAJYudnws{J+Cv4q)0{c9bCqZNMY_h2lZ85F$u}6J5=XoiLtzzX
z#GNboKn0smVS8J`QA2m7tPy1XFD6cH#39JFR|xa*Fnv9t@+>N4kQLN^vOOB#`Al08
zx?>=d8Vw3Y{cw0ecSU3x6D(07S#Q@_+&M}<JY!$$vprLN(?#5(kFe!9raZ}#K3%?z
zA)8do^~s0L1G$D;iQ{FQh1=rT_RzxIyK>CLW>UVD>qe&4UiDf0)GhtA+Y{bcj!~)0
z-?Ms$9=<SyvGyd{NTSV*Rhvv<WL6S7IC(Mm0*h;zp2>49Ju0PxVr*2QNtI98LPsRq
zALq&&2=S{4;n{Iq;~CwbP&8KRK@Mr!`h-3lVvw^0GDd5ytdN(CWiKFxrB)4VpmaJz
z4%Ws=iuL{WkWe2Y$QKd9Tg`qtQ|vB+Dzq#mhvr1bEc-a_j*!V`C#nH66#01{S)A$U
z5Z>Ml=TmG{*Re@#icd!4cpt2gW)$SPA@-FsGfqD&=&PEfEVG*D=psX7EA-#m)T^CS
zc;iYsBHb9$b`%3HJ)Kf{Q~Gazx>=byG~^3cX;Q9%a%_8XXYsInfJvSl$k#0-%ws(2
zNGP!`=XCT72>R?z6%zmJMPeyjLnvtI=nEjy?7~@=;DM}_=^!efb>ZL~A69i|R8+K@
z4x;1pyy##*b3pU<C+-@xQXBCUMtY<X9i-2+rnE{wo#Bs4<Pf_Y@3MxVZk#gqEL;>C
zOfXv>n^kvuy#JN&?=9>e)#>TpxPJUXxA)TKZ}H4czM&+$iQ1FE6h5sZkMQLcTKQm$
z%zv#_goZ2KPFO31X`UZgi~De)#cPkkjzy&rxO!r#erzjjI))M7W=7L1W^2>94nHCs
zAd>mK4#2Y47UMuh4ecvzH6|uWHE~#5yWn`PDQwKi1DWtff%K%I*H9m40n$FUJ0uel
z4$L*edbuqd;YVm8VOW!(kFjf2Fm*m9BdEN9B2OzMaE1Sz_)4H`mB`nsw3`cK!70+4
zoOOQeD5kU(T_07S%7%&2F~=S@G$iLD&tEQYsmp;W>4{@&SkygSjzvi?7J{_0bTaz_
zSvO?EK%}E_@0i10D9>(bXJJT?&jY7EAge2R1}Tqj^dYAm6w*ekZ&=6r4q+j?ZP5~6
zN{3Txhw68?WOtvf!|Hl8j`Z@$fiU9BmP3e!Fmni9jSPCyv#3_b$rE_CFM8RbBA-F%
z6C4SM;P#NIva3<q(@?lil&a9SFcjJbhC<oC(C#Z8rjt+zpOz3U?NCwGk~mw6+hg|q
z+%Rzu-#!+<#VC#An0ng>S$VTTpZDqmBHIUyw?h1e!7t8+<O?%ljiX0V!``qp78?P=
z+}#2x4Oi8Jh595@pRUC1Lix0u&K^V)Z8y=>saq}Ld9n9oIU^HX=}($;6{t;4nn8RR
zY!japJI5_Pv~xs5gEF4t(mOT+=}auFqO=9+3spL$k*CXg;;-sX%@P}X6sB8wI!y?(
zruYb?^4w4!236Ey6FDwQ!&yS_TBC1+$x?zX1bx;jr^OB(A-g`5k>{zhxg)E?*rDlY
zC!aAmt#_uhrD%bC^iw~@tsR&?4pEQlXE~y4R4Hk8)*Dt@mp%ot8G4vb#Y2a>=NlGL
zacfn5Fr`zdu3NP8iE%D7nY5;xvP^rnj^9%2`(V;b2(?gw`e0uxQbRWyDC^H~8Y6UX
z@t{Dee72jdHpARuO2qhLJlZQC(9v*H_R`OtMMuTc?b;P;Us8$m@cognu&fYO$#4u?
zLpJEAswd$r0!4{9+R4ZzkMYBM`nvCO)`>5bFHcpD3kOe;E6j9~Fz@`rM*}q`^j<bX
zNG~Tn@hY7VhTEyv)6TmsQwrI$&~q(1u1X;2L@G|_HJJ5{ZJpD{U6~NpArb-#L7<Z^
zoqg%9jeL<pB<Km3Sn0B35GR|`b%>KgH750$zwM{>AB$8s>nITRpkA`z0C^*$)*(|Z
z*IG)a2XrD-<M9w>TDUcFox4Vd=<5jK@cS{+p|)ktrlte~m7PhAZjs3W-0C^P*pJa=
zqz_<MPH)RTp?)Yj7;OV@JXb6x>$XkoiRH|?1`^w4ab|B8*_t#h6XgN9Ei}@A64i|}
zH?3)TQB78+)xxK=xP8>)sUp&mPJ1^YHiQbfI(w^-W1m}a$3d$g?<-&53nvWac~#gX
zj7?W}lcd>5N1;o*#u?hZ=s+Dh-Js=^-X(vko4SQc4C%AY^av_yLL&;{RtW?qbxeg>
z5L--#u4l^ABYh;U=Xrx}ga?OzBpUR5mUdckIU9qda7L~B>m9dmEpMC-<Z|Q8Ag5NJ
zair=ypjPg4;t3BO?8?q$VfWC*@<{!#vIFjglUlOp5g+eY170>BrcOPDV3A`@LI{3(
zLFR|jXSa{kj{t<tim5N%$P6U*F;mX}#|L53Grc%|_dy>h>7uM+A-zp_11813_axa`
zB!-~P>ZSysJrnS;T4nKFZeN&%1&W4_M3ru;%O;l`!_(8LVHv4Ubz+m3@0H0X=A`?L
zLq4NL(TNWYE$-+OIq6@mtBi*wrH4+&5aOYI>lvJ|1rzrFVl?Zi7uio2diB|I=$GS$
zg|LMq94a%@fn5MwI_vk+l&f;WX(%VO8|R*KhRg#m?45dQ?+pDu_ldG&B>L+Y;NoHC
zc=kFa!&?UWof`c*b3D~7zbc_$!C7fvYm}wl`C)k?$8{ou47uT3+Tk0!J(Yc-E+Om_
z3HpV1J04A;vS8FX%vrj^wFlkdEM36zig53IJ+3ToM2m^?+KGIHTxOvsuRMKq=vDc0
zw|ti-eu_>@6dU7)Y{j&|pszTJJ>lbw@`9bd4CJNiD}DMk*>hLQi(jISTV_SbVaMpN
z7%R)AOFLITac};VPms&FCueTtyMHeh2g_^G;p4Vvog&MEb8)at+T=r8_JI*O&?pZ-
zdf_uaXEx5&na{b=1^Ov*ITP|yd4E-6|HU$b$ZJD(;9To1)}stA;bjl`Fq#;x2FgOl
zxMYGPAH|eeOxT3HKo;xz9fl(o%IZyibwc0xJL=d&<b}{c7t{QAw&XySBt@6K!vQ(l
zte3G-9yQ49JG^jiMD>V%0`L^&JUM>PBF>g{G?k6k@U5lrT}Y|naJ)?>D5pyO3BP`9
zMCFK(^vwcE=qo7;!oTs<v2cYq)8ntiNGR#oAL6UI`n5?TNYv>!dqh;2@rct-*3ay5
zK1aS4xLSrV{cM$fno>Na#|5SR>8JcE1l_o>uRV!UDlohuW75Kw*7B&qY4WbW)Utdz
zKfJmvKVK57Tzg(MNE8xd)DLRFs&nO#yab58?=8Q7+E^JSYT;T>c6c$@M70Ua^Aj5K
z!4|DR`2v5=6g71FRyvaS*6#t-C~EKZPL*Y5SM0UVlIQ@dUz(C{hT5mAf&-=R451ZH
z<;vT+^5Mkr;gPt|(oIB}H%JWV$G9}mWyL6jkY$w`BWG;wt~>&io4NxbW5fyaqXB2h
zBhRyCjTgQ-tuHJ{{#<y>8>20LJ|%n=BYaVD!QKbV<JTCZ2?WP!m>INkWhE(Z9yjFp
zVEAPTIg~5U>SQ}tc3&#L*QGy3);Ki$E5Dc4=mN*&7sd2XNWfQxUoMj$qibBbVS>bs
zMijp98r&iLcwNW}ylRUmEo6<b{P&4Q8fbKY6g|)w1yb<ljVte&7~J)7eF#aD(NdGq
zTocb;>JceNxHc^yDhxDQKnfSbZgro0(S6cFllv1X*Cb?}PK#4qiy`1SP8tVZV5FIi
ziGe-|R2*oG11s9z<k}{`jiW6pN>*T{25*{}PTM_PwGm(?-&dy1_Y@DdCBTZR>uOY8
zg4U=kUR*ap0;LBUOMn$U))jh`;nvArHcRCXqSZURIy+^V9m?DwzeufrG4JOrb=MT?
z%-N9#{UUFqrGN1zRu42rDED7XoREN&I~a7{bv7m6o>+k>11svxF||Z0a4#dlO8VuA
z6}ZrvJFKLa8C|3Tu^ZN8b3}POY%MlTuAP158u@4KY&^Ybv&cR5F4PC??iLNt_!lER
zI9Qhv>O0M0Q^i8Xt=lx(YiAFOIs;>C2i6Wk#<f#3L&ecqX2?gFQ>SKz+P1sWiK#Qz
z&KWVnd~@*BY)}tMcdt!8gi0knwsEE26@wP^*ADC@|F0e7-UUfQr52#RF5TUb<U^&V
zMZVq@`6^q>SZkG#>b`G~_7++<m5rc4OnD;8a}G9s`_!%FR-PI9bopuj)AgRYJW;0X
z7f~h&s~<ROgxy+nQl+rz$HZLVw4+@qw0^kH1&X;F3Jw2i&P?XEfmEb5^Et@Nx~e&(
zX+%=anh6rL9fXjk(FA4^L<!7!MVHDBO{45i(<r-Bjk1?br|eEO%3d}xjj}sEva-_*
zP`RrA_|Su&s6pwwDTMLn|I(pnz-A@#o3G(-pwR^442ih)6S#wj3&gwzcQ7G4C1Jpd
zuxsmtU0XCXgb}a<jWJ+F*rqyRn;wO*UX8E^>V!QotuWLO&2Y~V*2@bC_+%Sj#bcLD
z>}LsvSK*`Kf8QrAW3(7%A0aD=1AHnn24rLmd<<i!*+3;lOjl31Kv;lpw5k(Pn=U4?
zF4ZRx+XElgAD>L!bn(fSK<~gw0?j4dfR)JFbn$c=Q|v&aN1@~s(sa2nPFR2l60PpL
z7*VI%qAn0goZ&0ICh*K;=Y1EivIKgB%(*7a@F-rGHhM5TH;LO=1RFW`NOb^2n5+PR
zn6<4`-^5k3u6#iLnY&=;J{F>6em~cjYW_?$95z|vxxO%H0x4JQy2KmN9;N55se1UU
zme^5#+gkr57=R}lDaa$SF7f@V!EYwMO&61x>y5Alq%nrdAwkQOa;d~ittx~>BcyQ&
zY0R45r@aX_f!{JxD1gM)-UNqem0c&bqS5JJY8s!<XzbMoU*awwrz)S|-W?|{-{hpF
zz%lpPC~jPlNI*O{&{#?jMe|iH@XFQhopE}tuQ+KmZ`+zPSr<`WZ^}dA)YU*^7;l~G
z-Wtv&{TM53ku%U(Hehg;)&F4Q?8fTG+&<|YjXpclcb(CPLeX2w9ceg&bLAd79BDcr
zjWjh`%`=^n$RB8UAh4bg(sa4@GkXRbD@CulebOho$!*{oBZc-tg7u#e@0cKgGZ0D|
z6=%o7_MTffAc)DWPwcrBzp@JYq-)y*qKin}I7tFUwiN{~Y|LG-o0z=1F~6w2IaBY8
zqIoSow!)#cIltbRjgz@Cbs2NBhRqyonbBBKL^-~sqtPe_r%q>>9_ESOoeVP=9+^nF
z0%I1%XL>K!1<ta@IM`UBF6@)0%-NAH!A;S$*>ndD==P8`of_YDHCjM+7NmODPm(~F
z%|(ZOc9V*Qu%jt0H)ezz5YT#yaO29$q#|>*E4OmJL*dgY&0<{J^a^nlX_Oskw1KF(
zHF^(f2B_$|Ez0X%4M{T!8|EY%j3YOt<j5@&rE+^tGv`x`bSAl6A(euPF6V<Lh$^h>
zyBUif^qEL|I~$gm28fElg?4LZ<J`$UiQ{}2>jIfM$k0=cZ0$?UkMFc=jSot-hIc5`
z8qU?)vazZ$@7%`x^Q4DCyF)EoxVN$~UvBrIEpyF>fJyV=QuE<b^I`~Vn9K!9HV}1Z
zNPvPVPnNq6Tx|7~0%Dd4p-RM4Km>@eIbejz&VdNqbxsl#5qVd+Zfzi0pB%Cd?m7@9
z4C*EPv+JC}XFP47vE$>4j*;o#cYLDKzOR@BwwVOZwGl)@XrNDGU&j4L7s$j$rT{=D
zHsS?lD(p?vgixv0@UIHBhI6&HYMd)UG*=>M*QDN)OuemS43e7?LUI%00j~QHFey4*
zDq2L$U8WUI6I+02rx63j8}$)`u&t9;Km=&SfDtxb#GuH*F0KtEYm68Pj|Fo*SRNr_
zm~yl0KC`jKLwyoVzGVTF$1f}!(!BiI$&Xrsd@@E{JDKO?CX@Ir8}FF?Q2d*OmL~Q^
z6~WT5X`_^}VREJ=$QOut!Eea4lO3m=<tk%&yItieB5=Kv#)0p0QYRO5x7|V^5tOt1
z)L8C!DNW!eC$)gTb5b)GwBC&WhF#?;D)8G*Y65RF(yYes2D*JxcN%p@WA8qAQ_2kd
zgR@<EI(Ww|qe8NNn@+Q@xug#8ZX>B0oj$3bBu3z$r!bOAg%*DOh-JWF8K4o58A3wP
z7Os6UW`DL2)G7rPtIT;O@C7co3%p`0Jk<t%+DNfBNd5Y8&Ir6>`$*Ero*?nI9U?L2
zCiO0(238V3F{1Qnz>n=%5lP~?|5O!8>JXy_kt80N!b)n;_MHPOiNlQ;6^$jNe{VEb
z-C<Xq9D)Cr(-!o>4>@hGKKKddNL?;~S2%6&KKMeX?bUz0`Q#wGYPsN^(-!o>mpg6m
z{<qBd@7q-yPO>N>^1ayd$pHl5nNI4SW$=6_4Ff4qT6A8Xkn-YQS_;Zp2%IE%G_QD3
zk_x`lY!gy0=rVI7ajdQbf5Ps`t|ySdmOkQcyZbk<hz0$17TovPRi%ONH<~UbW<RuZ
zpY#lOS93FiGyo|Wt3Gcrt`he*a|mit=Ius$zgyb;h`}2Z3EvaqBA>v1fd#gZ4mC)u
z*G0r77P&;Bj(vZ#u`hQqt>UYeN7Mz9T}sV!?ev&Pd6`|M?j{Uw_Skr<raD&`%lUTI
zRs?>NOKM(a@R|x+t^oBqM<1BV-`0&)Hw_G~dSK?@{9R}Dp>A(?Yr=RZyEWHYnm{^3
z*}(!5(bC;qJ3#=@=>;MQx;@DZBuWAwVL|i<B2`X(2VyiV{rf!A6rH4x1y<DizpmR}
zY-X>rtF|%l8mBGjgZJGgx~#5Ye8l)a<N0K7*6_FODkr9Z_f^=y114VBdInGR68GwZ
z-<8<zHTatf8~82TMP+5GaJ|7>5()S%Bh75Aoa~cWW{W+^dXmAj?5ZvTf7RJqDU>3@
zvzNN%P2lB5(mmFFc3UAUXehW@_e=NLZPkWZgY(_>S6ME-x3As1+GyWPg#foVhe))q
zDdz9bwVOY-t86Uf`or>RXBqiQk!xhSTwm~9qh+pQBwADm9?u2C(l*u^js5yyLZzl7
zBHJ;RZ8O>P+kf{y$>Utj)>4BfBvP&e;didHEW5&BipXVoE+TZ$`{2TUST=Zcb_m!p
zkFZWI_%Yi?$}{XLjb=}S2PG2l`A+HqmpiHTuLeJ2R}FIT-Oknp{@6%i<BG&D5?{j%
z+0hMZJ=5TVMB3lrVRqF*hYg?QY)fBd@U@AAcfRJN)?EhgOC;c5jimCoF@Nshe(eHx
za#9O;pp$yQ7a2)~<u!7Sc_3*zQffMqYpRk^5nW_mJKqYTV5weU>Ya)PNKjDi(k6gZ
zyPRYK9+IjIc$AU0kZxw8F@I7vav_b`t*!i)?At&*JBi8-6dkZ@t~;~~#3)fK_vgb!
z<*&TF@&7iMqHTP4tMaE+svb<(NrAv>1RiBsQUs1q80pfAG;pfxapH{_tB<#F45k+A
zBI#l?=}mUk$sG6tZh4Cm2_GGn5uXCJT-6}{l_qMl#s!VNpVBA!W-p<8jlm6xlowFb
z?b2)A>($--g~8t^QeNGRw40ozSRcW{0Ia?Pr@^?`24LFEl<xm0v%5LAT1aMhm`VSK
zFTIL!<yl3pF1eU=*Hn3#YYDlo^RkL9NOJwNm8ta!KF(;;@d20nrb-idmXQW!WIsnb
zE7C7F`sPBNccIL&AiOclK>967Ht<#_wXo%Gx22fzJ)AASc1c4>`j|@^${PZbQm$p>
z`ibW%CK{KRzwnH#5lh>OxyRW>t`-9D*f#Q5Z=U$}?8f}6BVTJaZ7surJkb*dy-SgA
za*GQ`-DO4M=9*31jg~ukpnf@4vs&CR!GiB0TmH)wxICkpm!OeHX~)@qg?R9#23Z6O
zDKAq<d5J>G>-4K;Q4-WE1@%fny<8AMiL%l>a+dE>Gj7M&)&`&Kq$V(FG*)UfR%%r2
zS5VwDUG_NeU?(+!cvOa8;7a3?*H$L`B$8U=rCQ^qTE*<)MJ9Er>o5wW;29FQ`5)Qf
zk-dgTW@$e%%e4BXf(p+bYpN%fW?m5cZtqT30&jKF7?7PeIpxR33EOKmF^izPlAyeJ
z1mET?O<*dkF#XTQ%?4oHQ)VZR?YsJ&<~(ox7GSPt*?-pWq1WsnZJ3}Vsq7$?9ZFt;
zb}01LL$-w}Z54Q7+PS}B;xbE6C&HI2BBWf6nwHO?Lcy|sk$ZxXKe2RjmM_>KlURy%
zM#)l)?Kw-;A+y{eV?cZ$p$Sax7%Sb;E8S7FpNCUno~tkpq+FRE0$-Q7fNP8tdMgr1
z)$vl*cByL7B#tqu6fA?*4HJ3A<V-bfwqzNePRhl}HXx--$2f1gY^yxm7_gGfcF<Gi
zc4nBg*K{+Y{7HoPKYzp^q({o7@s($*J9&nj-3-WN7WgA0#h!=MubpuS_-7-{Xk2-!
zV>|Ox-)&ij21Uu!WZ=78ej9kLkyKWvPwJ+`2>j0}jHG6y<41PiFBJMzqo~*RG5kKe
z%7ly}Z%!nH;}+q{O|O~BEj9u4Ai@GX(`7e-=QybaJkLo@;G3P)LeI}85=uSjq$W^~
zPlvyno)aH*Ef>$KNaLH?jdL4U4d_!WipE9h4xaj9CW|y4OgYe*ic5D)gkN4^=o*)O
zPI#t<HaKEX);+4FXEZR!TrkgF(FLAnr1}6ZGj{4Sb{<8Et-6e@BI63v=aQr<@b-sQ
zwanP5%UG&fW^C1EELFY7^x;&UZh6_Mu%rBRSPOW9lbXQuoK(!_OF=cciawQG&vd~Z
z;C@c(jvG9~NyTIULI3P5LqP12HjN!g&=4@0M#J}*e45Ejf|e{VG+MgSNJ&sJ*LYmP
zQY?>4mZh$T0p1|!n>49K;B`)F0XI0Q4g9!~VhbX*x1C6nF${Qsk?NZodc509=m3!!
z2L@8NBu3yqUg$8eT4)*j6uQo3wSZVGvq>N&s~)XBDGHbV6<95_Y&T!A!cb8bTfl0@
zQd=_O&`0gtZ&-=HcQcEo^BueOY<FQXvHY{KY-cPp8|U4ZM^ocqyLpz&=>l(a(ireg
zBgK#)_4~vK{L>UhQV%A^T#-_b4tkI)hEtyLSd$62%vpe(P7RY_l>Kkx4@43uxJ_f`
zeK(#MijcF7eaL7K^5hDfVghe<<Ay0~QzGS}YF6y4jQcvz)kDw&i3CJo%~TaZud-aT
z8<UNBt7gk{S}1E=UJLlPf*H#CDR<_GnA`=(fU{=m@*xv4rB1NnVf{-^Vo(mF0C7(Y
z$6Q*?sTKLUMfiKFU8VB`KEvOCXam<7DT*icp2P_J&=f{ebEZG*ex#LuhU?Kf*4{_i
z=&#xIfS)(g%*NzopTtdxZwD)WwQDvEe7TXN?N9beT%P!H3nVO2|C`R$%j^3(EBgl5
zp*v#SyveX-W9BYTT@*6*p<U_{yLlm1_Pn%Do0E9IOjiTo+ueap;4D{a_{UZtHK93k
z>35lg-CViRTsc|6{yvjbv#5QR33`4~3AnAx9xJ10jN;I;CT@>3n@(`s+Q1YCH8nS!
zTRX=zNg>cKL!em2qS<piqPsv2JB!l5vnnTPyM0m@8C4j8_uGlH*uF?zm5%l0+Ap*6
zCtQ!#<+CHx?RJ%lLHt@TaTIuulZL-%g;Q)zhm1i>Jl8m~)1lvS;2p*l1_=^d`k}h<
z&lLq0`zxO`BW`qKhJnex=C7<EjuwmNz*Jl@VR)s<OvV)TP!o9nX`cSEU9|;)@AX<}
z0#8ed|IN&Oxu3r*+upBCLei;?gHyG%=a_^P7)5|m?!ya0mA^yKjK+ceTqULDqLh|L
zD^>OrcgoN~R&_%jQA0pfpV2r!7t}z~o}R6ZB(llelHmS%;v(h<_L?24T=vYy>}U0J
z>4BKb55&BLK+Fwz&^)l?-=$feYewTa{k%A(<)yvFO8LH*Hj4czs)}b{*Bdu44v4GD
zTt(oOxjN+fnK%7nxk@vAg0l>rPIF15mm9p?u62=tq;b#IM$%go>0Ji#UQHO}f}|ez
z=;xvWF&7qyc^&L$CBEqIQX<c#wVM}LSL5rghuG*tM;G`_C$)jM8);VKoLevMllqQR
z^?emmoH7=V0cY4b#+aSdOs8u0+#M+RVb`VutY$2ikep+Ffr*z1EAZn^8U=oGiV~za
zZ7D+|@UAJ0q|(V&HWb~CQjZRLkUK8VNF`ZC^gr7QM?l4<m$*%B;JHpJCNqcFt%qSj
z9Y4I==sMgcT354xT65IF;odv!DjEX+(@CSi9~dc4V@Qo19c75ufu|TLGRD%=zZCi&
zFQEhcnv>eV?>lJ-NXfAxNG)|e+Q5^Y)B#piE2HpZR@g=_v<dvWlZGjAnTsC=Qq0W8
z*^@=%_@s&Wu8V2{F-<n_kUrO?7gL;{nt%n)(%sMCbDY!!4mqia_Wxyq7CFlp@JJ^$
zfjuV`TQGk!K_@s%G3R@%-AYO?0aC#Ba>!A($rtQ4d!GFFl#Aor&fGoL1nfAKOI~Lc
zMtOxjMOZ{-fkg{lVIp7QYIlLJaZ(5PH6zuBHL@;E8G+Y0sST{kD&z20%dp2W2M1fE
zT>?LNETmE3|1wh4i`3>#7`wn94?!9QKIo(_u-A1i;OmSOOCWXVh%*Amj1(D3y*n{B
zvOg^Sqr0dB#5@_2uxX%8iEZGXM$!^HeNtaZjKG_xFp_GzvF*~Vc4<H{F~WdNZa@pT
z-fM3Rh)r{Jr*@V8v)7*S&2vng>(w>}q^`<L+`(*F*Z`kz=9ZbbGwwbb1HN<GOx(e5
zQWEgAPOOx&B<@^j9Fhr$-^)ySHIy8At&|*DkTtHcnxGnVbqD@=swLoDYfv*A7t4$C
zme}2iD<=DUTH@Jum9Z6gsFAb`@Q~9M^uZT8ZLdC<@X#ma;O{!$-hCosGi$Ya#Q4dE
zpJCUT4biV{iE$^2CCe>A)YL?a3e4+OX;j-<t4XDSKkc*yeeh46wpSngE2k~!gP%DZ
zV@KtImm5vg1OBqY1|B$$zF-VUKcmv}5TKpnYONmd`^?2sB3}POBIPYpb5arKrPli1
zR@CQ1b`@bj+N9<L(+Y(Rh~t&*D05b;;<Qr?)2!4?FcqYEsTiEBwAWZaN9)oE%N?$K
zmzk&E<R0Iv|8~Q-*;Q2jkwGd$RRPbkicxVp8GdG}EZ`B&ws(KR@S7{N+YNuOLfgRx
zlAZ0UR^&sEXqVUh%dLrD;Z3~>q;<&wNb2;RUZ>+<G<dg@n!wbE#>*-lr%LHq)fZs8
zQYn%erxt}oMZVa_%yHlfCpCdYykyLczS4}P?~^VHh|zMaY2$^MjX{B!n-qwT#;CxU
zn-z!{hRT7MD}9_byHUI9$DH&_Vx&*;X4wSNh(+EF7f#y!SKC#-w<I6<yI8&{*oSmg
z5&@*q2NC#V|5WF|bw&z&B(5{!7L6?)w4!qF)vUZuvRoIZQh*5DK|WV=;Z?J?Y;4+D
z=EDcie#UN3uRBAs$|S6DNiBz|E21Ac!TJzsC4|-49#%!ed9}$zC0U+0G}*xyNGFa1
zF_#~Rd4<2%N}#3H1oBPBLdz3xI&=faa}`7o3eZ?2BQV)qv>S>WFxlG2<ieGPbVMmF
zw+>kkc-@RReANC!XK_A|GHYE*p|@C}Tgm%G;gHnqXU*+Hywh&ZZd@=BPf%eGWu!Z~
zRpiA(+cz$5#1-3?dkySzWn=!9>u1b$pAm8OT+_++8h*5uoeRn*J6b*EfVaR$E#?q)
z)p)v1oL1Xa9=!u!Z=@NG$qPPa_)Cc`*9u8z8_QO5FwE-)BC=;U&at|Ia;ayVyg<HV
z6)P?;118jwGrYOsLSnSWZXrFAARWYVNlME_DJ_@vUeg?<9$hrR{h#j9LP=O2#_0pL
zs-au1*%gLmma%RtqmFd88qXKW7qMnT-_`CvMpv7AX@Bf2xy6sSp7uz)?kFGF(tiA?
z-JbNY`JQi6tESJknmBk<BITt`78A0)`c!S2L6!9~XUV}q)D!J0I}O0Sozw>IZ=|@q
zCv{R{%+*5t)19RQ+{a17Km^Vd?{-Nf>BEmKy@m8WUHT{xfvS9~Pb!Hoo|N2RGJfi^
zy1?&@Mz_f$N#J%biKOV8TvcSvT1v(a@TE>_1FN#i-63SHKPAf2_6Gi;(PTFkc+RPb
z4ZPZDG9&^os<44S;B2EnRI6*`uQyBH<rX!8zZk>r9`Lc_kVb)jaZ>NE2A|P`s|P&L
zNu$8!$2%8rrISX1^G<Xw;0v8J3cTA%J>dOL8U=oExyu6H<fJC>@h3ai>kVG-q$Y5!
zS6Yus+wsMo5xAd|n!v-I)Vt8&M-u7t2FJV>dwDI^^!oQLizWZcu3FLGGhhC~u6319
zR1(AC!*?Wp>=7~gGlTn?e2LTp4IY|Eiw(9DX~f`(iS%NFZ%CxI20xKVpEmgAMEbfx
zj1(odw<f)dH|^0~4L&Q8_BOaGkzQ@^t%>w*gP%#H_ge$_j5mbQuNb63h!Qk}{k<WK
zKG)z;iFB&La}()8gV!VyEois0xg45Eiw&+xq^k|~6Y1RsHzv{-4Bnhb-!%CBM7qb|
zU}}wzHTdL2+QZ;}iFBaB#fj85IF?AX?9V0A{1amQzTK|k)%O|va3X!&;HMG^_#-3D
zY+NMYg0RHA6KRj$Pn?!WD-2$hNY@yAS0Y_&@Qy^HH~C{C{ng+W-kXf>WbmLwT4=DB
zNG~zCDv>TQ`0_-0jlnAu>CFb$C(?Ti-ha};4gC`*(tq9J{nse)b|VFk-DQcNCBFYQ
z_@_jgX<c6G`h2|lvE2&Neq)K$(~Z*8z0!NS(KQCwCsNt@6+@U96^yI=^RS)RpS*32
z)3(0v;WK`(!9OMv!Ly6oJ&qT@l}L9OOs*Jb6!@hN4CAFE#&JaI^2bZ7$IC8%ykc;G
zxz*ae({ul;nIlWhw@lKI{$?r%B2~%EAQ1naB3|cy9mB7$_a0=7-sm(B#W9>n$+DS&
z#~2xfgnI}MAuY0zFpY>~rF+Ky9^GlJV)UCQNzh((EeWo8=gpIO2`8G9@vltFXfw&i
zW}b_Yl;Km)X0<a5mG)hu-DlUjGhE2}osG`&1>TL5eNun(;kyH*(8!n<8>xB0k(!&q
zAkN4=qj5k#=iwehdEF|VF`a>YM&sFq9ENYkY<0z#%`IqK=N|Gs-v;z(38}?C%y)nk
z5E=6#>K*Y76T^x^&I;eKXi;!QAKC?D2M2=mUBK5HN&3qR`Xrcc2p=6W5mnReA^kBX
zN?nj=t8>fl#{X2;stJ6dlZJsuI;nM(!M8f8Sll7#`OeY=l6z)j)ntE(-9Ihy<<YaR
z-9nMU#;V47va6i)eZ}~gh1Eq6_n4N|MJv77<E<B)(b%Ubi+LB_o4S|2==w@S{hML>
zkGg6=R@cgl;YI3r?@K#C3XP0;v5}e=TpzPcz?gN_xs1u#*L{-K1m5YSF7Syyeiozi
z-gb-bQhh;}P7hS)AM!oh@<&rhE%E|8KnjSAc@g!Vpb%upPD&nM=U7Rpn{Ux5Q#aqr
zb1{o};fV)_TXinx9urahB3~|td(2E{H1;icn4;d|WtC4-8PS-6&S>mk$l22d>wSFC
zZUSHEq@i3xa#e=<oaGS9eT7RYhQ$Z%)*PRt$OCa^hVQo-Vt7iP3um^w$R}r`K%a6n
zR?Y4+Q)AL0{m|?_GgPJ>fk?4wiZ%*lsuuW|kkAwZF;@@6m`>_6Eia&MWnSi6&_~7z
zZfdU-RX)(j-63<T+!;d3T_L3F%<ot)GaMj}5U$(}Ldu<h25nco30&r+?x?}nIjM=B
z?39TH=()s~4b2)o^9?e|m@Bo;iupIY>f>;>ZJuJn>kcKHYV-Rm?D}YUYTh|R%vmO8
z3*BmdXy@6x%NMwebgo_HbAj=(!R+VF?L(w^`3CBY`ezCswd^<8wZ;e7$qc-1iuNxy
zm=WeRVsP!_4M;Z%+}BBM;B%bR1s-UmxDQL}=)?#-W(p&zPGSVok4K55h)j8!06a0}
z1umabh$V^(7RrMq;C?P^7>I?!1;jj6t<xukg~ABLyvRrj3xyGgd6AJ6<_IIOYFW8Q
z{TNdpb0i}Wb7b!vh&jRq#FqcZ_4tRv34c)I|48MpFc+QYHQfbXU?erZJY-MCRi3c}
ztY$1L<r2&AA<x(a-r=Mn;8O=8O<ExEBqQk?8sN(k8}JP?V@_oQUt=^`D6g3y@$1bJ
zqbcB*OAPJq@;g9^7Fp{iNKm-M5D@W!&jlMe))ab)E4x=8{0gTn=!0M5G&v$?n4gf*
zQ5QUGRxCjKKk)mUws-#)!vk*n-u;sd|GYxW^`)k6vl}&i=Y4i-dv{qeQhnHNebKJ+
zq3sL$B<`3I1;`Im-!U<Gz}!BBAKQ(<P2xG`1m}i;r{u<cK@8Q68~g?YeBz=Y;3Urh
zVZ=P;IUwLd&jEp8@Eo~=cQqsTwW~N7c$SmeKwKlM?lbymHOI7)ZUMN1lbXPtoz%{C
z_=6SnH@ntN=W-s=6ZZL5B{fTYDt@zyWH6tHkalwG1cp(~sscF4Z&P(2vv3Z1@xuXT
zVIY#AhQv8}odmwz7ij!n7OJWU`2G~(z}I;l^?>hnQuBQVKblBD43=kMK<urzy_efA
zIk7w$*~{(umg$VwXEnBL%;=M%Xqobs;>SwyW4RA&=E`}AY7XVyWR4KmZ=4{Jl&GuU
zjT5;VA#<)sAm+y3Y{vg6RUD8)CEtb#Y^MVV#F}C^Ow<%xeh2VbW+i1v!$24fw5F{*
z-*WL=da_s?@E_Jgl=LI(C*%-L(fIvF?gMP2$<&nmJZnuO3=)mzJqCYc*SdN2a=Uj{
z$_6{;)(jWuH`jm+^uUX)n(8MYPqqxZddB864DOpqKsE=Y-4B^q#0$yz{ld)ZTo=@R
zvE@47t~EO=c`p56`s@RCn|;7j`g!ikEicr-MRvV9m5s(HOkXy+D5!1+3Lo6=lH0)V
z8A+D>lYJ8Ny|^}zIauH$fqFHLe5=WYRpSPHw29Xa0gR}+_~N@;Z*#S}z^kmS)JMvb
z?Cv3U6+MA`W-8c2VpZZZ_5JcrEBjrpLlbzdliJrA{FsxPKy(ou&b4AtzQ%nwnt;1p
zP?ubju4LD>Gmz)11Y4fFax0heS1WUeRM4voUYSVK<)R>sL$YCLU2Lv5k)KYYfnTus
zM1AF6Vs}5_vyL|KV@3*<OX7yam+Ss{EBlMCL-T6}Z%ZWL)20`6tKGWWS-QX<8mZox
zd+aX1qbZ#X@YfHUag*Ksn_VR%@S%szh!1u%AQ^#&Bof=f%M<BzgD*>@%MJcZBE8$-
z&52~FxXg2w4iHV`rS~)Y3+(<ub`|2ueH0r_#8djHc1|Lm-bcBs67h^a>V3e7vTOsQ
zu~t;Mh`rS^ygW5b;IExD2Hf4Frwe?ZkzyQ>VhSX+0KD7tjsfp=QWv<%Nn^m@JE`a(
z(0<ZY?Eq0(rUgJ$7UuxbH#&#Zjb360h{_@k_>;s1L}lRuCha@sYQLcUt6lpR5S3N0
zR-Y7F%cdm|l_Mjmj;q!JveJr-q|Ql<Kst}eNb2Uq2>iW~BBNVn0OJ@C<pX;_jFg{d
z0%D=c8ghGQd!a)>?3TPhjE;Fpp`|baskq2U>gQg_QXq8~8A)Mp%`Zw}Eau3|1;DCh
zBW@YG3nLK4wa}41DRdV`Ac{vuQs^#>KopORq>>pU)72T1DQPIceLY5(0I^Ko4FOV1
z@{7Dc%o8qb8gh@113N~V*;qZ$CpfQ7e1sv^inP+6;v~+m%)r^MeESIocX3h^xT}-e
z&oqc#GNbv6k^bgfP2fJRXB!iflZz?&0VaR|k)N$DeYFfhRJw3sJJl<s(g(}(I(@Ab
z_xYqZFj?38wwXW~HS3$Tk4jKp{CkRAOY-7pG|oFX&-Mw+cE4S9?-PvL+ceHQV(`3;
zlk)TBTWs2S?sOt3Zcs$5mS6E8{RI=fxzNu$SUyh(;d^#t3%enUQb?%aw`TMqq1E<N
zwNlBu&S1gfI_7SXxS!#gA!<<ds>w`ap`A$AN>ibo2#Kmp;Zi&yeuC9HZFI2l+vi>>
zIud+HgN{g|8@iiiAeZ~_Z67nHwEfR{n;HkAP2fWntP8}lITT$&u3B(B_R<>#A_>$J
zBY+o}a)FP;+g#%&u<v~G%$x*fNE5>d^sepInz?run^eL;>Ker^w_CarU1ykbg^hBk
zKV{3M6G?b|w!HH>(U>b=1c8D9dS`WG?mp$opLtd^aV16L;u@uKpl|_`9jj-6*P2k7
z`~Wdgz7Lb^eV6-S^$ajZN#4>2t1UzF#3e?dXvqeo=xwFJ%ER5TDKdMnxqaxUBw2tI
zo@YtrMYP09r7~siOn@*u77`FUYBnl!LE!;*+`d5|&8BiISEpgityAqPWdqmEip;W8
z3;d9gbgt3ulbYds^IhPelZJqs8!6@`b*M8I)BaMmPOh5nbWYYO*Ky?@aw|GO%2rJ}
zeNsu2VhWEYhq;qlKzyLGT3+a<z0ejA@sTmFhNqb1XL$)tASKO^?Kv=|>bCJD2})8%
zFr@~@yiiKOtI}5?>s~jY3G{l@G6#3vIDq4LRw3De6f4`hk$1YHF-UZt4gRe8Ky+R=
zN#Z7V%qS3D10M+tSAk%(35>ZWe1DtLrGEk<Q}SKwUcS>kGX%sDfse#I59}deMUQJI
zb3HCL1MhG{+d!U(ii4kGr7v_X+Q2a<HGwA?N#<Sy;Paez@#IB@-;}cEYMpE9pq?B+
z0KU#OT?)L`Ny9*lko6RBD=%&gxU-X*z$ZItxU_m0t7-f-9pt5^%v)WlrC&3cJh~M4
zOe;<*as4FHah51w`f6$JE4;A53+$De_Z~S{hg|!*3yLnOY2kIDhglbxKD;~*{GxHi
zzL(UeHjlc<gd|t06yHHSxnl46$QfH?{H&`w21JwCDUzaunmR4@8bbW_CSDg2U?fVV
zUNT7n@yeM0A?*FGYx~~}eln4ebZa63d15Xz1K^CoSc)t!H#f*fxrGb3tKHJJx|iX7
zJ!cEJsKR!v;Z9-$o>*Z!%kYJXZP;r5RF8lbaHWw{kK8+@_dP0J>#i6E;y9T<06&$u
zfcR26Hz2;0j6i&;`+Oz?UkVp6eU*F^c&8iP1kQJ(M}Y@9sR=y9NyEU!PHF;MMhZ_m
zN#I@SD}k#$>nQLwPHF<LchV@3U={b|wSk{s=T7b6!Cxd25Vy(4-Us?PY%?#gho-5(
zqNlpjq`t?ck0TX<HC;)bYYTaiz#cP_n-)^Jl^aX&{>bW6wgnn9Pd#Q);G5fr{9kr^
zyD7J2ZI6pFFUy}7w}Uz63GSd`dI}4UlQ_(!@bPwnvF=F{JRkKy?EuLpXXmdizl=#n
zxTI<1<=<f1e>+(L{Hv2Xz!~--<~T@9C+p^v5$FOMS03TGBCLEKfnq;&VJ)BwXk6KJ
zToG3O1Pj9W^tjC6fG(hM<?)Uy!iM_OnF+USv;wRC87VT(F|m8tRTfgfTPh`%ClmLy
zyU+HFZQub;Y6AHRybLCvvb%_{c_4eMvHaNub%9;`q;-95;}+%}Vh!+vc29}}e$+_y
zvbM6jyLiT7;IoVrIwcYt5}zTzJl4>1XDNEclkC=+i3Rv>Clz~Su)NP%3c)wntsgi`
z7dX>KN^uErGb2TpklHpeniRj>VCctom0fw@y-sQYXStwZAZ2KYoj$2lV)3%r&rIw#
zE~~Kl9^0&#<ulqYu<N8Y@Hityn@L@r7=dq@!bs}FiP1Fk3wr#)^bzL(DJGgt>KvEV
z0U|y!x@ZHtSq22?rdh67-9{Su@PUK?5K++`xv-knx`*j-P*R>;?@Odyb8=DaKcc}6
zR?KZ)To-t|k)k!Z5@p6tUB+@GxW~k9?Mt05kaJx!umX=WE}73iFhSxip0x-3#EwzH
zz?bVvk+VHt2S~p97<qwpnak~}Uz-P?Z8RBtHX8h%v+dRY=;NXmU$AT4hw3@`fUz=t
z#KiCU<Y4&ECgIIHM2W)neuFn8(zgs^kZ|R0*wM^S#kDE!v+kMp&$o~Hp6RmNxgd5A
z9%rn<=_FPdQ7RGmttuah6J34}c$txcJQ8n6d_Zgsd?fBle89>N7C$gSVx2{b=m-3_
zYVeRqjx1(*KR0hZAx(>cdpoI#p*U1#%1<#JlW&&*$6Wm;5Vy!v*V4#h0beS$1f`zj
zO0|Hy8cDX;FX)p<%C}18m;A%Z-|i+Z0a8=)TUMM&O2LLjd${`Jz&o7O1pd%1l4GbO
zewz6HVlXXShJaUlV{5H9_;V+X0~h(!wY~5$QOmRJDm^f*lx85c4ScS*h$iqvCk+8t
zJE;YHy_1#!-{hngaD$V&Kx$8R8-R~43itOaY64RfwtyEpR~MK%r&ifHjn{-PHBYk?
zRe_g#3vB{vsnXd3-{V{@AWc{1uE5laiy2@UUP}nCA9&cbfJBrum=s>blqe4*rerG%
zn8Irr@VgdX(t}+#k%vwomci2^cuw&O9|K<Oq@_S2Mq(34EXd|2Fong#wQpiU_9TGB
zf|w4x#KU4K@D)ZHY+TrQnLMN?P3JCW9e`J)+(7z!`NH^QpG1nZrFo<U#}R9EG17Yi
ziMi0*kRa+r6(CV3wgCw-;Q|t3;!R+RHjY|*Z$`Ayn@Ilvq+=2F*H7eKOCS;<skZ*-
zLkYE&{5YQbQFOzL$)afo9Aa7=4ZJyp_nNx!UNb>>CyO2~{>D5ud~i(aFUi#xm#vw=
z0P6mc!XO#C#Out!jm4PI%BxOhTY1F^iE7*0TW1T1{qnr*0eL^-o&g#+4O4o$vZjWJ
zy`*i?tu?K%B&drZnvnF5z~n~nML*&lYd7}<qa!~ODE$EtkLWoy^H<tRYXYC-+Y%!{
zCe5Mo;>4Huz}kFiG1fNoxpm0OL>teFA{h5>3!lK3M~m>~X3jG$uXAmixu}}m+4tF?
z@ev<9Mu6XP(lTJ0nfT^U$BNTc=NX14T!j|!k_sF6EzZ`NZ}m?=iG9}@>EG=-DBn6h
zTY6*COdEt1c&o9_Y+NweCy_#G<QQ`)p(R<F3ecg4thwLRHo93x@|qgBGHY_0jj;Na
z-IFZ=;NyI1HV&jy6)qqVCrt}T@adBwVlPeV#`8c^HsXxNEz*F5o@!efetshlJ>|<|
zk8$GIWF=x#U)d?=;$0RJ6fB0*2hQ{s-6?(FDf^VpbV@zhmFl9@Vha@MQwWcwXBRzF
zm~>H!@mDgIN)<g10r5T$^wF}uMyVT=lO1y0K_4Kbyc&dbu6YPeYPQyYWidv`NdKOP
zhmgwRhI40*nV<>ZKxiX~K$1CIDX3V6A8EBQX;%#={PYzoq%N?lQH-aQmit9%N19`X
z?W*rRflo17WhG54)x92tYP4g?2Helv?-($-xmQ;77!E^ykySdZmm4Hpd1c_kN^_fz
zrRwHK;*obh<`qplFKc)CtoeSsKX%tk_#0TT<Mx%*9#0!+?D)7s%x|o^AN0o90n+&m
zHYO%7ZtUDAjZ+63=L9-wdPb#B3O}Ac*@xc_kX{kdxd)b871B(kEzlZMR2OZ5T=d7&
zbj?&Z5~~rMqz~mGpltacKNftchg=i*0Vj1S2;sH$nTvX+Jc9h=vsTFePxxcw5vw&X
zHRe9|QRdDS++E84AH)(Sf6`5F{=v2zF}-G{L$3cpt(DRrRjtvTJ;A&GVuWZ|Z?vOb
z2W5)0LOx$ddT;Nois6l{^#0nBGC4^-S~*td`9hTB8EZp_oR2r9o)(q;AJiab{k^*9
z`5wLQ^vrY?vt_w8IXHWxd`8K-jbRI+bmy%`p&_R`Y+*AknAKQy(?rqdy?x8rj(4_4
zi&{hAXBtfg&3z5NIgx;WbkcZd>nQ9hyQ(no+l(f{-evH^i3EJWN#nrIHc_Z#yxZW&
zwoU?`Y9uWZ{ISIL34_~h=Q)8p7)f)2UzFH}4W5ulz!jC8;CCms_Zj?KA^~U3iE3z>
z;605dcJ62JutWl$RLKcmo!Blh`0t4X{Le~G@GleF9}VvABUJmD2KP&(7Z@Z&MOk9=
zJiDbfMeEYPzp)wF?|o+00TO^RtN{ltqI8r2@0OwrNKA$wf+ulh;sf%_zp_Z(F!4MK
zu#-}t0WUX_77JdV*nmWDD3%2AD;qq(zgX5#>=P{h2v^|)60KS+nAj9HAfc&j;KMz#
z#({)u(2fKFE8>8}tBL~?ox%nrIF${&w+GEQkbn)Pk|1P79I)vzczy%CGKm8c#WHCD
z62&46_{oYe@TMdTNMHxuNTm23Cw?#TC?EfwK{{2L-sZijglh`#hzQjM9)iO}<$;Ox
zItvTJL}mf2EjZrp{naS&14i1saZzLM-BvW_f6fT^*foqUB#0GRWIfqJqwOIwTt>t2
zYP<Um=jwjQ;5Y0V3LtT3;sf4mq!}_Z2LB<k0SPE&dyG{QQ6au8gJGDOzrw3@82B$v
zYQEbbK_TuW7JlGdJ*s_%*KrTHos*h78BD>^%<K3<tH`UoLVLgmoiqldXOZ}!y6F|<
zDaIBynr-I;Tobs9k)-cfKk-yc?2-6@i=ET~GDb?7z->IPnn3!aPyjvmYIj8sNTb+X
ze${iI-Og#u|Df^EM6|aD?__6+q}eVsxIU49pEHtnDf!>&=EIfl%O((CipJ|E@Mgt~
zbrU3ZP38jI-dZFx2|D08GDX~Hx0yG5<;0+lyx53Cus)PIovtV*QH)wh7E&&%rr(gC
z*b9HN?JE0Az{eX&jxEYekkpq_bZnd;@pTV{F7Rd}ZK>Z_8k9Fc#58EPIeYU?gM^DT
zAs{V59I$bMj`DsBfj}g2jaPINNQKKj)I06&dlT134BnhbK<2ce01~M$ZsvV);LEFL
z2Xh@x6R!f-nZc6prU?@7afft(73*)Rv;L+DtY70sECphpG<4uAZLTiQwSZU`R3VW}
zU0P%6O%v0Z%KS;&B$)Y*6tKo8KQHoGO%qtLb&cCf@P^DJXcQ7An4c7G=L*-&2Ft2x
zQZ?W4HqZlBG`nn)7^Fne?6OJ9{E}^*OV<Zv@e}xRzdgwcdx{s@1k$P`-wicQtVt8A
zD0f4h+isXB-PXZ_6(eq#z=(>*HxxC!z%<1-G8+QE!Mn^cAS*PfDd3--s|RFyEL=eP
zF^OGZ8n=4D9lf6&1JVVHEFc~dSyUeO3kmoqA9}`t74K{)yd#F^wYk6f=6R_$fsC|L
zo9ib?FxJYmXy7i^2lyw{Afz>D3rH6kWRhTb6`4T%AbcBqh{7o$Gj6FEyuL6vaONhz
z$V@#ZnG7T>wrI>;Zvz{o8EG)QXM)6LUYQ+WMag?Swkt~BQz%&}Y&uoXaaD(a=q2L>
zuu}A<x}rA~MN8(q$m6W2F)y+StjNEwPX2v`eDVK%MRUZ0^Sp#1V5Nl1yo8xHOo*_{
z>Pon*DB)t0e1%=NvQKNz+ikBs`w%H>TY0%*BL19bxKCjH+!|MYKkss;2+zIwcGG}8
z9-Y2{(-deNh)&9e9yIp4ncq#;G0_Fd#sXc>&wR9M=Ss0&{*Fg)kG0S?z6R;#xn5!1
zEUxsK3Yd)|X~Dq%@b+@{WS<1<FyRB<X?!XUj5g9C0$HThJ;|AN*_WH}0<&(BU1!TK
zwXP2b=R-Nh?rd&%=I0_<^?%tNHN-OSuZfiBdWGF$#i&+*+3*sd06$>ta=2@<PvS!^
zz6JcMkyIQQZNzuLw2CZ$8{kK_-216rXWNo_a6XjZ+Z|s_=f;uV#ej4wz&B2L2?0i~
zpEU3j&)5e3(n#S`bR>S4`1sV$KK|-J8+eeBLRJz-Bt8@3m)#6K#icj@+2Fp31bom*
zqeq!cjI4P`J8s<Pd9Lmmmg`}@i<#%Dd~`6+UAbjN_~p%pK9tJl3!ay|H;V3`Toj~l
zjFAmP>)s+;V<O*?L<9Rqsz11ozKfHZKpu=pC<9kG*D!FxNloCTP8tS&-bmp^AH&7v
zNYB>+e$h#zz%M(gnM>Hk2sb!O(fRVJd@QOMcf98s24azL0kNoNO}x7axX}d_=l<|*
zl2T}xv(&vRK=!wIN$s~8ygrc(`6bU4cFFR5f#_Kb+-ldY2O^L@26&pCevjcrYL&l1
z&;@>c3gaV}(4mBDtWceROp^G35#yU0q$obHl0X4jOasv+@IA6Bty~qI4Ag1T>gSp$
zXQ@alSEO!sLBIQMcls#O(Z8n8BNr;`S{97T61zw`!r!PG2A<=j7Vtez8otipC+w>7
z!C!Z_7VzkqM9lDO4gPx~ea7Io6Y2W~mv{sX=l;_oao}an)&joMNK(1$CP^fZ6<gqs
z&ST?v>_u+mI1o3<90JHUiDb?9a31^bBn-H7@&)h(P8vVNAkLJk1im?O0r9U)Oo87>
zT)3J~V2CW>w(i#P#~EClNI)t^!~?09|3h`OledL7@F*vZ0GAs{B4EuViI+NY)j<C;
zOQaUjrhacp^1f~Go<ssZ-z%;Syvj)<z>gS7CPM=?tz?8&a;Ni&!X%z(H5D?GsQj7$
zFg39eLV?Pbvy?#UJxC*w+T94ju$5PHo0@;RlSY7inIw3aa5z5k0SSx1M}ioUumRF`
zMPVQ<H)JJ|nsG61(v08hl{H3{rd-8<OxH+sh)(26fzT!p?snO2AOR81w~`<v!X%i)
z2_7G9AiYJ%OoE^hRp?m1n6d&1osg9TQ6gE1j(xnnw}Avq$eM>tAm%|M^74=ge0k6W
zdkGt2L^9_Q5;Es8A{$upykNmx@7u5OcxnTQ1LuW66$cIS5uL6gwe}vBOiar5E3t?u
zA?1RaR{tH3gC>w}MqUY_HtzCTTL#?5+qBr4dpSgUUgX^-gyBJ^qIo_c<+)Bb1?lHx
zqCj;}7d3N-Jl7VDNj}w)=dRq!%jOH4sr?KQj6|M1Y|G<LNO_0}31x{DA?3vp)r^c1
zZa~VAK^TbdDnXe-py*T3m)tcz%UNpY&*gYLie;(v(cH2;m#zfzY;~)HKU(F}@rc%p
z>$J@pL-Jg~kUU?lb>%c@l(t0ktSK+gRf(uPcjZ>@BRWlbN+}2%3E7&m^IS6;&+F&e
zl$Mu9e}`K{G!~{_qo~I`m;U^1o~`aDac{8xZySGKqznA8k>aY0)E5#Xkncs+ul^}v
z3(wdAe$YwdrT7lwf1kJ<+Ck*FG8?eeT)RqB<V#nmR`XZ{z4&6IOss($yu=<5{j|hZ
zpVViZu?5`4mFNLcCgvrTR4aynpIN0`>*9wgaYq+F44m(zZYjH1iTuiBU+1z%k-d`(
z8Z8AC5%*gY^jEve2mySr$<`Gom_lR#+Av9iDwe#!txXBd3r3remjwQ+Th^l6V_cEF
z`rxO#;jIM*S0@r5XM2s4nz^#N>_A&WPl5-%p6y<20Z~=--#D4KcXZ{Wjw&9^H_h~U
zqbWqmRV{Y*BFE5zA|+>D;DIKo?IsSFxr(?cbG6G{#o+dOE8|~NS-6bwl@%ed63MyJ
zxgg!3L=t+`ZCW<XHEZ2PUEuqjGz#2cBzazUt34cq^cm;w0@wKw_EF&boYVz=!%0OG
zDwXS?+`oHq<3KbK<!+i*xlXCvILd8wO*+7&+<5Nsm8QXaU6VE%Z0Ca7z@3Z~=EfwF
z^dc};n^f$TC_wrtE`4~N!6c}N%g-6h7d=-CNUlM7;IXRaXXVSRLuJ+pc}!G(m-<#K
z?YCZP7x<kmq9^M|!`IsD1lRj(1#RGGjTBr+;+u&Nc&CvnK|0sUTy0mGc>;OoD@Y}Q
zj>4B$`@tst<Ww;5Od|zRBrZyPPqEU+U5nOh48GQ``ijKG;!n~^kyftA1LoR4yNjEf
zTUk%^GMhkNOO@FY{yE6i7`@iuml7#2j$B(9%U0pD!g9`fu6)@K;x?YYP?!9h8H=1P
zJ7Vz4gF|*`DSNTPxW}^H=OuK3+xtWGHt?xNs*f>DGcPq{Cmp!G-IIz3&UMld@QFsM
z7eCMLp5+<4z$=|J3cS`yUEuGWGz$Eykz$FYPVgo0D3D*3jf|vTl^9KsU*;J?McJVT
zqN2*`^hs^94B{f-U!2qdQgX~oD(O+Qt5T0vogOXM<5ON}3-}u+4Fl0fCLlnRQPo;~
zQhaGu7=cOKqE|)RqrJo-AbwKuL$2-T6C;q4BO@samsK_pJ?dt1D8eTaWb+PKRb-?_
zk&!w@Mrs@~k}D$fwDL^LL1rPvPpb*hi^Xbx`7KAp;a2enuxi*)zfN5FO-aNNQ&P>q
zs<>9Ixbl0KrMPKYO`Ue-7uZU1bzKIsXzS9K1FOC)KX3UMYySL<qWE%8BayLYQ|DBx
zQ2eAbY9wuM*_CE&e#wo|Wi>MJwM=KQ22nzC5eD+oWEli^+UgqvVv3CWb8b8_mle|Q
zH0tN=8n#l%M>DJ4U*X|?+P>@p-)g?lI4*r(X6)2uEMua~*s9A|#^&{=4?hGVVFFy}
zyP@4h29I^pXzsFanxGdtOEC#P-fo@YEM4FlCl&R|Eq=E{24Emt>oqg4rM7Q-g72m`
zfhRku3%u7zGi08z)Ry3{v8&R)ZkYAH(sBp9%T{Gy^3_=}Y&|h!(FSoF>^6t5Yb0~*
z-f_Nq=mPJxDUR%~ZwPzwxmso3PEB6<(FfVbf8@Mg?yFptWxyMq)B~o^AT9&)%>db~
z|Al2}_@uN4+}26UfX^_Jj3?_SNgR~;fX6y%1UTZP9`L13Y61_L9qkv*fbVe9GT?`e
z6x1NGrB5__z)>eH1FmvX?;L|4a?&y&U!xQ?fdAoKBfz_z)B_R<@<8K}E7F62+LPA>
zfM4~B90yW+!Ueo9ag`N0URLDNnu@&EEAsVTA4`GPI%x#>aVK?vcQ|PTNL7ilKq^XV
z?b=BaKk?dK3Z(XAixWugi8NsPcIY@2nVetz%0%7*wS{{VbSIAC#N%D7G2q!w8Udc;
zq~`esuW-@`5F2FU3WyCd<0^G8wztr8o$J|to5A-a63zXNL;?~mGa4685)+4dm9>Gi
zR2j5^CnPQ)Emd>}KHrUQ(`c6^5)enukmqCImwF3o<A^nh1iacvniEX3lwk)*vlRV-
zU$dNHhCm{PNijI!>X(}n<sHTbn3kztq$;QfKYB}By}cp;TvrXWM=c0^wL5(nc#V@f
zzz;jA38XnnD*^K5e(?#A??CA0BKT`AtOKMW2iH-pG-Xv6OtY2g;4iJ#AF`{y0!qy9
z;FUPh*w65RPP=fD`lo`m2r%8U6hUQEnL=XACDm&&f4R!4gL>Osw$H*#ws|LwmZ^mn
z&2f%xRqz6l%!PpC54(#|X6%rWw-uzz16E~~bInp#3t7v2cV!G%l~qnZOIdEvK`yHe
z>^f-_IP9dNL7`N8dKLs9;Vexc1=OrGjyLY>JXaU^0VBofJ*h7zM&Qm{$Lg<N2T;O$
zJ!1!mOwHKolR~U)$N+iEMWfWj{IH^3r%wu19>&tET#puzl4V5QFiC>4Wx))*&9dr#
z1elUTUJ|HLw{d|#UhjGg0V!H!ZLHB_2t5!V`0}Rr8Iyav%Wvmu)vPgKd1`vyZ9jvD
zBogo#BWcI<GQ%iUb8-ch&|jK5@CUBtI4UGT#i}b8q|*<w{lwKAyRT5G=zYFq<=)}t
zk0L0QUn~r_HNnYCZ9e8Q+ZsWQZ}VJ(da~uAo%?xK=y{DUwo*sk!XEH=BgtoEC;KF*
zk(!#I;u1^I)#NO-y8@S6x$9k}HV#PcD@5nHbb}<%R(BSGQoff;ql)oijob5FdZr@J
zR(H-~p4H@eUZY*$1}C+FUo}$f{78K>F#_+L!bs}J&e#I-x@C<?sCI_u>HvRR5#Q;P
zdMGgh5g$9<Jk}1d3^#bjF>LxyBB4F9Y91yZWZa+iT%!oOEs;t=MVmv=7d+QE@Fpj9
zk$s1g#!J~ne}e4gmP`8+T!(FSn;68yq?gvAG_r5mn0e$=7X|kgdl3|e80imzNn#6$
z#Dxq*z)fCm8%VjrmDlOP+eFHkU8OkS=|+mtOX_8b5%_8+4FO*>CGT{Fp6nSrK#GYG
zNa~Wr2&|S+&fPHUD9_jeRx_3pH8P&&8Ha!<qpA({Nu84zfz=YqO?UJ--ZQp<FE-K^
z@<lj#3^QLIB0@rmZFM@d>wN=*b{{oxd`%U%Oe!K|RaxdLJ}!(SP&d4DNCFE7Rn3|W
zHTWoUW@F_*p9F<#<{>eWH0}$`B&sDTa~?{RMEuCa5QyA=FqGDq`@Ze<)dddvyR7m8
z5Q$^vL>*(ZA@vfYO8WwyKZP+jjA9Whh5?Zo4I_nEVFXr7DBB1n{Lu|-0g)+_$ZID_
zAXP#PNCAQGku4aivtX!S7BG|-5Zl}%moSo-AewEcv0x-GAn@h#5w^#6@s2QEHc4WC
zBT9_|Ut8rP@s`8~#NZ&WMw81Xb4{Lak#>k(rILZiIcXV?qDB5ClO!lywoQQ*JuaE7
z(c_Xrk0Y!wN)kPQlp}>cFhPQngb!FL^nr<*LLZpOjsKAaDAl2(F8CRykd(S^674EQ
ztgEwYU18V574grhi1l?vtgkC#eNhC;H9Q{1w=~Fy!(?mXA|t&iaRG7QjK;Y;fw5F_
z=B^Y{?ntWY2WFAJA5MYPn9`nZJ=3%7Iw<4O>=*3r4V7lEym=WnTV>s1*O`qi9`cOn
zST}DX!z#CY7~PVU!$?4dn#Fuxm-47DSF&UoBcLct0%~Jj#g=C=Ut->*Hf3pr;yATt
zwMDL%TkfqI69fC~c2Q$~-2<vsMG<3V5yd)|TyM18q6P3eCl!Z^FoVw`iu*ogRgyk2
zH(J(1;be00xq)cm#q}0a>f^okdtWk0jfnbXslB{v$#sVd8U_B@NrlmT9`EWjOat$7
z(lC%uAjBa)*PxWuLDmml)+n$ls~n?CSuJGog$7w)0jsjgsqGi7@Nc^kO<?-CUmJ)l
z+11Vs<Xeyrx}YxbpB@vLrC9>`4q&~rwy+G_c*Z7hM<=y`$f{9lo^kK#xw^nnC$)jg
zozw-MWTbjMOYt4V_gvN}5ScPn0#?PB^~^_MpX0Kcz%eHkTkZ$iEy}2I%L-$8nM>&c
zKjx%jGv+e8b)8*jG*<1DM?nqGyhp)fF_SoJ<k+K)#6u>oGUo!m$++r<6nN$tkIX`V
zWYgL%tE0@=s>@imvGrEc2D^%)z@IqDzh-ju!yb~k#WH-)Gd2wsm&ZCw7kHqP+Q7w5
zYSCG*bW$6*%1ClzXs7#53<*eU6SpD1JkAiTHK91ySeDzhW~sXVBL|0@8|<p?Gx)TR
z##=HR?ey^opJ-Rv3>)}lB<*2W;p!PYDUnthe03r%|BsmQRJ+z}tfAEPu2cv3H79j}
zeG^n4Sl_S=f4)8zs}BLdo0~Z@^Vl#!0&#Uu3lR2m7bd?xWB5V4iakI?O4R_9^zy{o
z{if<4-Nq*Hz9bw;JEXdxT2B5{v{6)eslnrumvJ~M)Hr^=Rr!Qnb-MWq!>4}?2QKJ?
zQA-^7Id|aM8zW;NlDOK4DiQqQDkBNvN*M_xqDX0Pwn*xkfuR(v#l%2tWPbzZ!z=7s
zCrxQvo6C-}tI{%2jYZ~+lkB>6W9^)wwF7Hs_SVi?yAxF0w0UFg_Tfe@h9-u;<vXc2
zOcWlE)ZCMin!7Dh^KuTdIy}Ma^`Zv#`o;<^&v&_*M?H)5OD6k7AR0w#UaOIsS68Iw
z^%bdk>7TLEe`?nm^6|KxEM}hS@kB40a_?g;;|q2b>EhKFe&XQ3f`mvt(B!o38mTq5
zh=f!^L_;QjwOv&|N;%F-Q(FE<AXdC8((x*dIcielKjE$MUyXiGvOquF1Ab)#dGEJo
zRHxsm#($n&x0T?&@}3C|?@<kJ=r6PT8s6bXZs@hf@MsLhBwAlIpEgLtj@0SO`LdNK
zT(?dPlKO^GWlGhcl=H3kP+I;+544}VXh9!*ppRq2bV_)%uA9iS4N7tH5%m70CWgGw
zb5+PcR8b|*TUYLS>$*Pdy?+;Yy^}h?Z#iigc)O9})ST1~pFTKfC~FPiPDZMq!++Yu
z+~g%Rf!}me8%QxSTmol#iEZF^PHN@udcb6E<t$C$_D*U8QN3p3G|#vX^juxwA}4i#
zYn(I;>>DY%h17PRb^if(GE!tDHI^8Gr%Yia^}56eym|^FsrM#E;Db{bNxk56u4C?A
zyt1F$+W}taq){M7t7V-&spCF__)*|njT9M4eIzjg@lIqUb)Z`|3dB2+k<=R!BM_q_
zBdJ~81*1T`5*c&H9B$UX$i2`6zRgMFxL^m@V;qPr5{kg(i3<bXlt@%7dev+_4qM4f
zU4tg@OeeKbYRui;rUtH0B$RrdYtTliD-sF+J=Xo#{wITbCsOV_^dxR{S&3F3H${~O
z{*)`<1isWY?Ul;+Q2r3tv<Dn@QX7a}QWe0foU4b4*rkerpY1mGfT?=g)0s_=Q8gQT
zlvWxvRvI*hK|NP>6nKJ@#xQ72A^`~~F&i5(LbU)VgGQ$_s8^{oFm)@7#Q)D!t?2qs
zR-;%i`=P+(h-qsU<JEuQ8b|!Uqp~rz#_C5||Cn~Qx6d}63MPvGfP}RyLV>Bj83X>!
z8+Mznhe#J$K$@<|0ut$!R!pSJ?k%tq^gx1NWIc+i-of;n>v}eUOPw@UW8nYcCQNNU
z#k-`j(wd?Lf5B?*%U**`;2lmH%iH}|?AC40(#%;tYyHg^z29j9Z+21_c(0R&fxmT9
z6PPM$I4^E5BOGQ|+0z0pandmGBqz0iCmTse`);4q>CV^%p68@OiA(I(o1LW#{0}D$
z13zn|SR$z}Ib#>d7G=#-xJ!(iVr1_X_!$>83Z#rUqaj5xk{6gt95pF^xz*5rx%e*d
zPfi*J$_wt{PpZS=l<n97OYtE-VFd2zd52A~U*_4ZXE;k2*mF`F_(~&1N0Z{6OKJ7M
zH%(#m(hMA6cloNdR0r@yc1yl*d_kYYQX>i<@JuJQfvY_0stfugE=hdTY4HkYDXNIl
zuwObv;H92x7>GZFD=!N{yrwEFz?Ckji_()$Dg+^T2Ln>ez^6K?4Sc$hVttW1ATa_D
zoWf{{;$r8ECH^`<3YX1s;L}|EFp!dCb0PJd#0W%>8W-+p+`D+LCW4-wNQV3}@AC%-
zyq{ggU%*#>Io^uS@f-%qj2$wb?6Sszzx`s8B_~!bb%K>3>kHt8l|nmxQj>`hSk<o6
z&$T<qR5;vKX#(Hrq+#H7PHF<b`=zL`G%4T@oYV%QpKt*uT-7EJRfQ|pbE%blm0fi<
zgbIg#0Tsr_49+sgiNhXi@Y#uUkipj{(t8c!@tTz!#cgA(vb%lX1kw=|h`F#p%q>D3
zIc2wO(?mbd8mW2S`^^h;%v{|*#Pk<eXn8)WW3~s6mbs^;mQ0~emv{3U4-U6<&+Zn(
z->uN{d=HwtcJ!zi26mk^dZNL%IH`>~M0`zDP}aT%q)`GNa?&u6-$;n<l+@aR$SLB1
zZ!=P4Bz03_1m5YSF7SI(@{-y*z5Wi|$w^({<Bb%{CDn4qVPMZmT_Eq?$GoJjcE(}g
zd!5t;zRyT8FR8yc<1ld6%;>AgNa~G76%PXc#YtV@{Z1+xw^dbx8KVpfK&n%Q1t4Xp
z5}iJ&t6h8tNQse=Lh|b#MvxMKlq8?Q08)&~YI&j9CV7F?Ld(bG6wY`iB>*W&PALPc
zg$~seI#gF^dGMM-cXdlgfHyd)4WwPDr6YY(&+|xc18EnLk<<qgBalWA8A<&tF#?JB
z$Vh50kHa>Q@Q#e6_=c!VAA!VjWF+;CBoRm~M@CY6cu=*0hZ!j{lDZ%<0;`ob;+1z_
zVgyzrru_1aRZxSN7-%d3zQ-$X6i9Wcc1yhS_IFp00;#UZNa|~e5lD4KMp8dbj6kX@
zGLm|lyLuEzbwx%}XD3D=)fE{@-Iy4GR99pqHOE~&3Z%LsBdM{(2&`7#60ba(o74gD
zmXsG*t<NRJglm&!*lt#=JsGlqbBv_gm7k6&Gj{4SmQ%bkW2-J>*;$nthw3tx9Zs2X
zq%LC_>}33tIZ0=E;H}(YOK1~ZaokzX(gmLTus$s_cIq;gJ}oo0>N1u-Ei(?)Wh{M4
z#`JaS5n$EE(x+s6ym>->3Z`fYXne`_5@Y{s@+ok$%_38MoR%3obs0;amKj@h8B3p*
z8HegJmOjN+vqzSrUEq`KUcHTF#!g+v(#A4lt1e?{W0`TNF5{!IailI|88<A<?X5a-
zP7`RyiG{@Pf;YA|1%(TU3xx~qxz01NyIsZcz!w^+-tlF|PF=>*@y|4|dwPjY;NDJZ
z0}pai6Np|l*08tI^;})x`9`X@rp(x>%UD`dW^C1EEW?P6sc~1e2|UqBZ6N!rQmH@;
zs&RwmZ%`qXN~H|h^an1V;u%tJa3#ioYo{=hTAvsV6_=!k$H?)XYaB?)T0@;asWpia
zNXe0r)cV9|sJJ9OT0nBCtg@1j0JkiMfXCQ9aX+eFo=BxqZDet!aW3^-!@%Q>w7Gm7
zMPIV)L!hMD>Y{K5%4?GpAntN05Kt~jfwDeHG2|E2#r`ej%P<ecze#Asv^+CIuh+T6
zQ3`oSBDr(}2wGt2LHUTWegT;@dz-S#11`>3DVWMY1f{Rf_$}#|=Nfu}U8N`>jZvPo
zQOcW~tCtrbTrSkW!FEMwY0U^a({2gLkYCmty2-B6nt@+;(h%?uPU-?@`4V9WxPz1E
ztt?xkvEI<fTu=+R(Md~yw>YT<OtOoq%qHVzaU?5jqxc0W-*&-;LtwerS%wgp$}V#K
z(zqY+TumUk<%>#o(=VuTm*;B1oyscCU6I`uNdKF?H;=QUsQUkJ5*UU(2(m=Lkc3r%
zKv)$tY%VNv_sk@BW<ZcdmM5&TBr{P^5LtpCiGbXQpwUMlBJu=92p|#^FbHUnEwV^(
z!GIzNO1`JM&-+wQRZWQcJiotwdA*=N=k(d@RCRUVzIWVq26%{`OJ9eO@>lEzaBGXe
z9+G1#(KJlgy-lkDJV03^N~aC9ArA6#z?HC0Y;GqDMqM7L0I}r6)Q=q)CmKOY1w77T
zssXw9<<)~a%L@X}R#v*qc-I}Z8z11RD^wh*XE)ZPC<4d+i;DG>V!Xi^uV(k~9)bI<
z&||DvPbtP88Iij82xPHHS2b3wrxat4hpDI8-XrkqIwR5^W5qg(On13H1OKY#ovnHs
z3J-~W6y^t1(e*F*73IlB3W!CSj=;LDvpvAc#;O2)2t8`m4!B!t?j`~8As<Z497v=y
z$&4ttUXKsx(S26&rbe@x);ab1^C*?!XNuP=wJz(ttW&<#?%sgzb#Fj(YEKniBNJIG
zI|q+!-P_UG2_7~QL&9#D!ZvE3pGlTd12He_&TA@#;l%nlPxHM)k1~;gcMfVfs3*K2
zaLo~Uc(UCAuA{8HU7<EG!3OZ%g9M@8;{}1|7^?;R!XRC!tGytwJxDODWn6-Kss#0R
zT!K0!Slyg9fh3*JGAQzv9W;=nb3v&0n#DSB8)G$rB%SL*UFijZ#S+8|4<(pygIfWT
zwDV9&l%PTh2s{^rB6it60*j%<w;D?|gg;s+W#HPDRu7q8<5}Ub{z(n2W+G*v4UufC
z<x9|)59{1xT<0EJwc+DvUAI6M1#n9Wi3zoW#L><x6vi7XuKd6cWsAupvl__ck;w`y
z#uY#19jo=D<s@g|=dHBSdX3iJCQ=4|#8^#W%~%b7Mf)gYm4Tl%R`hw@hxF8eCQ?3H
z;fbCVmT8Wj`k{$5fJ=>4`@O<7?73rYC_}fJRvoyOYUML@C`H`L&r!|j+BcJG!+Xh$
zHi3jR#*2^mtm;Y2?mVh<^tkcc%0*(s_1nn$r`1g$v8{}mF!G;iRKK<8%6MAc3dK&y
zlt=5SolK+w<e8~7Ch%M@1^m3STsh-j-A>OQY>G8t*;tK=LjSC}2IQ{_%7i&prOq_P
zCh#m{MV&x4O%rLhVnbFB1!xhh?7@JAxG_YqA_XkO9on9$?)@JhYyjV@n|vubaGbL8
z`a=1?xyGXn^Aek{WBy^QK@GTAS=pZ;g1~xuio^~oIM~AC?*S6AvsGzB;XyX37Px|&
zG$MW|UtSrAwW9Ur$ErmN@^TLFc|GMe$x9Wlu7Nrp_+1u!J$6_R!~CgQqL4E7KpYRM
zDN%@A7(^x)M^THTh`M{c#@u7EH-NWy<RRyc1NE?SWj+Dl7$g|x8GESX;T3b*2Ygjo
zdFMdkT%J4uaW2~~AaNv~PvP;;=CL=n-5VR?NwOt{A;NH9KOR8uFItF<X(|fBI=Ifk
z+ENRv7Kc^C7jB#;_yrq|8qoi7gfh@qCTf5?)ir)4_B#eby^I+q#2;q-p#>jRD;DW{
zXDiXv#L8vnC|a{F)KiGK5`leu(NYnr$xbNLN~V6jy8D41hnJ>>d6g0}ouSZrI(m$7
z;*G#qBpO0QcD7#V1Ag6DP2hKoRR-RutP!QD!`cu&rs$fFL;jqqlnuCrS+4-MG*%Cg
z@Z@KV*9vRGIs7LFAQY18U1;YBb$gn*kMiJe35;1SSC%ymc)PJ$K>iY8z8*q7?gfD_
z7^?x~&%H^Uz%K2E+#J-Om77Q?j<!y;cbLZ>Ao1l3DHI{fWfS<U>DGahEQlT;@#W^A
ze6-QjileO%?Sba832Z8Bcxmcd;M0wF%35IZaA8#1P^2PPdf-duqXIm{vT6d4EsQ~>
z4dt_nmZD45>}_Vgww>Cjn)%vi72fAr{4qjrJDSEAA~?CKk8FpgGG=HjV}||DpFF^v
z+^>fs|I{q-EcGK~TnOu(wA{DSL$%a5)njk1P%Y8*YiJEOv09daKI~d-C@SxT!JrH;
zO>C1TqvCjBx}lyFd*etkV-BTxn}y!M;me-&&RP|;mYP-t_<Lo^o6@7f-gq?Pb9BV{
zQ@FBn1NrkBGUC9yt;=~lZo%@$bi7Eky6&vn%yBUcWQxDjbZ5Hd)16g^d75)ABn7xd
z*KGwtO~-pDJ?X_zEzzDI)g;MC3JN3u*|5ikqV`;-137l}JTSQy0asZwXUUat<^aTw
z$`m=^o<+GZJ?xJ*`*k2D#s2Js{d&TF{3D;(A8+<6K<ww^1%*{vmw+UY9@yAJHS{1E
z%uQra4IN~1LsbZ)@)0iZDt%E&S{QhpvRtfPZ74EGESvAq!W^JS*MslU5hFggY=SYB
z>ebx?TheuyeZlHqyN3|1Rcd1bhtiw)+r^~HKtd3yuvlbsNFf{W=PiU@Ab)jO0tG(q
zrGTqjnagqPy%dY6Qib`88ZB4?ZeqrJwotgEu`0m-QkHbc`2!GVm|PD7O?;VLSez9^
zalD!81tzTD>7{@Rj8(r&Au%NG8i>H#u7!~&2KD_~JqFTM7~G}j<PTm9YeTGJLG=*~
z(_3!B-=iJ1q5;F@ooe2>1b;=XOO3xf5Qd*IampVPaoS-22Tsbs<wb)KKH&1o1WY|v
zJkP?8c%OQv&D^4=EWVwXbrJ-fCvqfyv&tv-ad_h@E!PAfuYI^>s?mlzQ8h#mc#5)e
zK`1_?6+z&+g9M>2@fLxX4-$mpx+@le*9{Vcy2)Dv-ZDrK>P{~R{K+6es9$(N;G=^C
zp`P)Az~=`EDiIyDiQQWlK)x(0(+&86m9nM7?Q8)LTq(uPRLWgUz+;pr>o1TfoEZ4S
zUJQ6Z!5Wx2#G0P9gHHJpjuQ@r6&g<%8mT4`P2Eu-vtnl!n*y}nt@N7mJ6-aD;qp<P
z`)%5WiOEiRB$AzMhi0gw4{+B=2Ay>j$XEg|@+{yb%F3r8)D>P(ksU@WVmyYICbYqa
z>p6L80C<eDvcCZVae|i%JvwuG)()c;;bwSgPjl%_)nik8My3|1si*ZQ#R2l$t@4-x
zSk^Zm^5Q_9ty~cV_74(-n&$<9-yb9h^;0jXaoJ&kqQ!cYN6)~In^qG@h%VrI8|pJ&
z5J-r*Ak=rgAdnDqK`0+^bf-?hzqNoXz(dV^FOU$O`HBTR-3tN<F&Bio*$V;*F&BjL
z0Y}e^<AAFKjFz(%e*@tq&2WDUq87W0HnC(p)oYOr-z!Y)lK30p-d7!8cbTEO24sh^
zddh1>H|IM=B0Z+AAQp+NoTpZZNxC$&a$zJAS(&9G^Ykba42WSj5_SzY7bqf?*seUH
zHg_JLYsu;l{HU_z&oGn@RLl#eA_kmP5HrsTo>1$kca*MK<-rFY*gKTtOM#!aC>p>$
z?Gx}GAg?3jNkiS|1%VGJD;I=%*bBaM9ChN@-LzUjJUjFCHq^ad5Qyho5X#39Jui>z
zQ6UbrWQ%&|Kp6jLw0^r<3{Aqi$Ft%9qSflFYUm~#kUroo#;O398><hvmbr`Cd5%h>
zEnWGHvi>El+W)8)FW<=eK(=?A`&yiBwDu6u_biX{g9=~wtVwF~ezP5|nJ*!2BGIZ5
zi}Zz~c!X-7<E?yGA)PHt0FeChCJ${LAK5DN?#x|gKH531gviKMa#tJaQFaW#Ze^t-
zLUD7Ia`%bgNoK4J#F!HcliNzgc`-$nSKwY|sWMR^?|dXyK@9DpqHco=KENzhL;r{A
zsi~$mz777SsYOfv%Be;3=5)3AIkQ{^UT&=NY=vL*tT5~adTM+9#8ie3_`I^xLx<w8
z%yu1kiP>rbuQ65w*e;ltA174`r-=u3&;GliqBy~V=nBh#$cyU3br^U{Q;Qahzp40}
zR)j9#TBcPVsc=)z3jJef6%}z!2Y$DyMNRjcf43x0|GSFIG?-QF)7u8{AY-+F2P-RY
zA*jh-5IAL!Ak<-AFf15x3^S2B@Z-j60`ctPsJEfIydV(IxgeB}Bf2<_R2$>WRxQ?w
z`UdF(ycR*#JuA$aFurag4dAuPO3&33_3Ra<SoxYl3?vr9c`EV~(`o?u5ZTRA{h(!p
z9`gvGHdC$$0!I%Lgxb;zhG`SWT^2_jxZGGZAfEFPgc@b$Yd}2bf>1t=XwV)}XXDIP
zv@9=Hk!LNg3h=MSimtHZ)!+y9=oTL^AFwB$#O$Zyhgdw_z)u@1S~6zpshdrt0es$A
zeZV)Bm5(aa+a}24OdGS<d_6YbN|~>>WAoAFGB#g{&G)3tR}$u<@e9qnk%;X#!$4E}
zk*{lwUbkBHhH8n=2kunqhfS;Yn8M$9mQ@>|pHXh4N4Nh{xUC+uuiioI<mIqnM?JN=
z9$jkS(WX|x()ONZ78H!oQ(Kux6)o>SYR|(|db(*ffG-)V5BM{Enwz&L)YHn9k2-*V
z9wZ3$S1%YwPaM~n(>jokMr2I`en$;$<gPCx=5+6ynG-yIhy2y>+f=}NjIJbjyx2Te
zfM2mVdw^FeOFpR|55C2V0rBestBhFm#6%6OGIU_kT?&C+X@OONmzl>FkYFURJ-|16
zF<>#U>WC#4Sas;Y;yYsvh=Gw0hJmxpV=s_k<Yl@AC5T(S9FWLdPj$7S{J=#wde>_h
z-?#ddfiul~4Txu1(1AC3DcsSaavKYL)uhTmA5?U)dQ5|%LkrD{+jneMJiDuW@DKA$
zM44*9Ei}%2PD1%O`hdIngn&K9YElU%^}jg9gLq4S(t50G9u5yZ3@aTTYL(W=IV1Hb
z3oDQhL8Umr*(#NX8roVz&(1PiQA2O4r?xhc8gPQK%D^ecssVe96>TySh7M5a6==;-
zkvq(A1NgGBn!s0$)c{Viw-=hg9%D6ty~;{gZoZnujlAyjH)VC3t*Dp}smL=HRBct2
z-q^Gnn<(7EST*4LjAd`~O!TaM6n@-THQ*t}ind1^=qY^2{N5`z6t>P`Dsrng47^s~
z(-lL&Zz?M<Ce&?S5cuOkf=~~5LExf6f>7J7oyRGzfjcNGcMa9_f<tBYeaoy4#Er96
zZ$rIk(ba*t$pxYK1Mu=32uK{cU>M3X8baGVOafBF{Cm%TR)MW8tw}(f=YpZ%VWsE`
z($m!G_2#sNv)et3q4|YpQIG8{h!)OCGx1g&?tbXYeYe5~j8z5>H+M~7MOpI1dCmY~
z-S6dqgg2se(y$ec-S1U39}*}kEMrGf)H3m@$>kb3jU($g?iX8R(b9gH7VdLazy|Ol
zW7U9{D$B*$XhXeQKQxvZ0Ng}bxggYiUJ&@eAVH`**R?qn_GcV$oq#X4fSW)<%nJ*(
zp~cYz5~A!!fIf)mx_^#(I^R5&v3<2?g`q#Irzp~p^=fMR{?B1Y8=F6?tu-x`GH_#M
z$+tc_KOI?$u81oka-v%NhB>QTqlSHvqPxiHDt)zS9gfyq8{eoQ7wD<SO{4*Q%UCtw
za%JUx2KDig);_>Pl$8rY{b)TC3<oQYqfQ)X<xLeTF42(wX3>^`|1egQP*<@~%fJJT
z)dUi+bSLmZF9rOSvC6<tSb|Mp)mUX92_<&8SE$W9&30vy8W=D`m9Pf$BdzEW#=|PI
z)C@OXQuvCoS_aKmw3pzIRhwx1T^qvNMS<*JfotljDJ%KHe&oU<!m{cDuQgLWz>+@N
z(zZ~lWVb^-z#9s;2K6@74{S@`1AKmvAk<jf$@Kt#sjS>J6uHSKV_`<nq$AHgffre3
zeZbZAGi&*cOyCyElDaMJhiKZzXWc-)@h*2pz^|*63%1gR+SwlOcLOIWEAs(CmEG@k
zMkVf}#K&3HyMg;yefxmt8mk+~ZL-7*WPrpYkO2}Y;Lp7+AOj}xFX@M1$V3&mlMQG$
z@K|H@0o%sv1}-#KACR$^V1d33qK{SMHn3m&K1I*DKRyhm)7{8b+fe>P>t5jc)(BI8
zG=x0u176^z=mLh+JrmT?<wF7&2>1hqsa9=69j#m^37$Sk5{gd%oFsTaA1vm{LGdWm
zNrL%uNiGR>kLo)~@Dqb<LM<yuf@$2`Ce#FL<6hdBcbl`Of}ne)Y(Tm<lY^jtMGi>+
zy0F2IS}*rLqmcHMD-e*!FHRG@s&-_a1{4nqoFtg$&n2Pge+dvs8)u0?Jf(h|Mev^n
z`G$I{APHthXt9|E!I1^A@N4wPsfdIJq)jEfNBbe@$l;}(tvl&G_u3-3Pdh>E0cpI<
z9t1t+?1AYfXAiv8+XFJrnLP*wTKobT)l3e80dzjV43&!o%&=t25R8Bm1XKCcyPK5X
z*WG^Roh!5Kn1Pg9T+SST;Cr_s2V^KRISBuy+ZvD|$>bnz($z!k0U44^4&o}Sdkx4i
zWpWS?c{w0Mm&rlA<>i13T_y*?;7NQyhAxwX-~pb<0U6Fr4q|hiEFuSFG&4DfrCtum
z2xoE-9lE;`dq6rMlVixk<1@CBU)niRYk}hM(xtj8dM%oQOOpGz2K+<YyflGp4$oC(
zF#{fFtmbruT&84K%;kwqh_Fu8&B^_?Z)pN~c|-p0)<7GA7Ik}Ujh`i5Siqxoxs~cH
z?S~k!<+uqv*W|<n1gm_e3_+`ildwgE#RO)t6&8@O&aC-T4@MN;75o7$^r}|M3Xm#G
z9~_})kJh7nHFa3~OeH9N#)P=Y?A7?KE;bc1fV|yQw|7s<z#e6Zwc%}u6TKY2Q}U{3
z0pIef!`cx1=(~6Yu47wNaRITuwM6Y=g;yA>47|>(4r@bv*UJI#@^Zu55cir~?Fof6
zT2{N)mHC!emOPa3tylx@s*}u(<3z>#>oGG3aj-IFBw74uXQxZI(Q1yzB1Eq_9++m6
zlG1N}p2u&u(R{_WBZW;0DS&-imv)9}tuE_G$0?;TV~4fF<W|#D?QXSsgk{|TlD#ZP
zBf<YpCH~#CDZymjM7y03m_OYiQ+Gi>#1#cWFzZ?-2th%eMes3&;)17IQOZCH;Z(uJ
zqJU`=CkHOJ44Bq&a$s7g*hUo5$$|gXKBA!4Xp_m_2zafr`X~sU;i3SOv3qL`OvX+w
zm1!!gmC1mwMD3-att#IV+G*Q1B*{xB&lu>C6U-cr2PpWM9%TXoKcy^bibwh(sLpC~
zGq}^1JB@0?Akj=3f_;pu1eo6%$pj(T-I!Sz)NKv7y}Nvs%q2XM%Pf%)$G!9_#I;@?
z{{#J1s1EekmKN8PvfY)om=U~JEVh8WVm!QbMhVO%M#O+zZAO$j$G0K;E~3RQ;>Wr)
ziz-X|63=33r};!`W8Fh^>rq%hwhdCAD+VCWwLL@&$POWsgP=#nUN{Mb#oY7Db_+<;
zX4V)CjyGscsg!iv486i$U{~7CquLNxdgkeEi2w1-R@Bc6)D?dY)y+3BgFUQdPb2&w
zPhpUG>LgM?21;^T($7$F6%{!k<KmpsqzsVbf!XDWDv<FJ7qb$BH6<}vvj*b9n!;f5
z>`7bzSz^S+(*Ae^rzA#j)&L{NaR=>2O5$cV_|w*@b>Iocs_<?U8M}gjKVe;215yxq
z)*9w6dk)ehCufZKd;LubkOyVbZ@?dWDIl$z_)v`$PquujKn7j3;uLqX6hCMwwtzmx
zYMf#;?Odfvv24M&u2e`~t`gvRUX1bM$iVpMqlfpibxB!dOG_E}aZ9EdM{aixdzt$(
z@IYfV3DQ@+OmG|*1QECr5JJg9sKg;ex$tn0n@E`h@{}g{7YfO5qW(tTU5nP4xq4@M
zhdmi61AkGtY2^kMzp0znP$n5$C?v5>sqdR55XJVY2C&@61}wy(AFlWsjMSU-@piM`
z0N!V;KHwdNkE-LZ*TuH#*g{d#oEt4Kv0eqenfBpzFYvNL43#z%4rJrzlgm+TzKZz^
z%zP90Wo5~4Nu1G!z)Swj5X$?EJ|o^=Yj>vAuna_7N-=)`;yMeY4CD=!Ob&wA4P;FN
z5=AB#=1v?8pnUKE#I?(*k*H(eP`18gIn{vkja3FdWULyVZm=Y4K=P7&faD_!ei#9-
zN>NJr;0n0F+_i8=Aw>#^582HOWt)`Nmc8zX@%Mf*liSwnL*T*b(Awh~PKTvD1-OYd
znEaGK#7-tx2ku^!3++Fp_NSU&>r90gdKQq1NR>lFFGhiu2^1}9tlOhGyPA3-S}_eI
zaJl`MC$}G)MoSd}`&p!QAW4YNd6CZrD*toSYXJXbtQznYW##=H=FMwF%S<uqh?2f#
zv6dd?gJa;j%1YZFsb@F!ioo}-P;s=L<%J*d2&}J^;?Cx=4&2pPRbbIp{OkM#@exz3
z0E>$8Z|M^%p4Tm%TH19>`R$6G$DJlmS~}aD*jp{HEdqtpuqW#2QJj|bX{uYK^tEVb
z3YmRXb~8C&S7!-v#7JP=VDS+XU&`nCU?*YE?61x~uE*@QdsG_|<B3^zm}(raM;Tb)
zDV`Pjo1v#>dJ*9FJPUZUvfL}pjYLM#G{igxWG@TEmh11hLt@2BN-^$`1sWpnFG(4I
z+uM6WJ;0rnm7Zj=tva@LG+VvEqOCZg*j5EwJDIIMVA0mf<XFWPipeW=979*A=L!-3
zoyy;7QMa*3Yd{>jmgp+9L>FH$2s`dCYU_PwD_RvN>Z#*RqygOA-f-##ZlSF77{<2h
z*cxrN`hZ1S@fgOoD%cujwpzfVt#}M$TUBfo72}`!I7*AMk$J2EQOvK3d&F186IAzN
zJxZ5c9bE#a>B)`FLA3S!zKYzVN14_@Vi42uE_}S2+|x`qfFDp+dK6>DdP*@KG8A_;
zj};&W<QIZ~#USD#J5+5vYPO=zMdWA|aW|IX1mOL>WoD)Ud_`I5BE*XIlww?jlHQW7
zu18rDfomu$?J-uYrxaJlV<n{+*LbAHvxN^8xTUe`z^zso{rdllw#KWiy)B3aa35pU
zf%_^eT~%y-&?^ElAoml%qOG{l6VwI<WF`VJu+p~5YU@dhs{wpLS?PpOJjoR6Kn!G?
zZHS_^I3=u|Xx1t~49NBeShN+l(=xSjhJU>i_*rG8Q$leqQ>+6qkfj7sv=*m?wSW4Q
zfEbXJfJIwFr?j3$Rs~`}MjTkQ6<<qcs*PD@s{y>qSasml%1T!ZTVL^tKnzG+z@n|V
zUUSsOcg$7;c%!lEz?+nnjtg6Jy&@0;5*M&&Yv{PXX|^gr49L|4ShN+7<2<$TwApF^
zC%!AcX2@g)eneU69I^GV*{TCEAUOhyw&EPIb)VU)03R||6<D+t=QvKIKEM*11oVn>
z7am<BQ6%Iw<x{Yo$6Z<))A_MY+b}V)o@_lUdSj*{;WZa~yJ#RC@&^*-ws1(l$gNpA
zGnaIqNQOqsYOK$)YXA>ZR(iNloMMV~AO>W(fJIyJaB+63*=hh!T44|~^z0YCBJhHL
zQL&y<j6<ENX20V-0!OY-$Jc-xC@Wn;Y`tl=>cFDn&_N(Ag$5QC<6e$ER#9BfqHh9=
zwi4^EMvVb^0~ENv*=hlcw&HuU(W>x1Q)~d=udH+lW5s$(F)m@OSV<|yC5#oTDaE*6
z<28|eeU8A77^@Ea=nB)u)<mxe#DMe!uxKl;1h)1zTNNM%<az)s+KP))RvW!$s{#C^
zvFgAhl$9P@Y_+^15Cf7UuxKmJ5nJ76s{+J;<OnR<8al_O*{T9DAX5QYv=#S+K1L`V
zpv$scEI*;J;#t6&vbHaswz$-B+5-7cj$>!=Z<u2h$oJ>JC!tz)7_De8J&u&$Y3!I<
z8gtq<9qx~ACax%lspLI+l)3|-QkEOTN*n5JF9=*yUpdJIq4u%&PAkB}2MIzQ=LLcM
z_G)es>H;sQLD=DBMK@V=W#Bwzx!<h(AI0~3F(COlG4M-X4EXzkHSk}(7?9F9YZPP?
z3%?B9URh3zA{|`dsbM>8tLG+qQ$W<6DJpxq7XwmDCkFna7XwmiCl>x&RmI86JwzZ8
zAH~jXqVTqMj`k=GwRM;e0f>4k1b*xEEmLa%pVn7x<o0LAKo~lD`wq{~$fN`o^v)kr
z?=JIK0bXdPT0nj~GVflfr@SC=s>Ui`Py=3QtQL@$6?1b?Kk$OUpDHUCgnHZrdw}Gc
z3l3GJw=LN!5XJ1?awt72DoZ7>p!Y_9sK<NLds~5efmBpJv!#spnp7X~ILojX*l(=9
zxL|#h<_VMP4TIuOgikbgJwTF5e9n#*BJQOWu+OE3T<-S9fv0LnQsKD+5I&opIGY}_
zDHJ(=v`G|4n#<<#3VmQr0{fMh0`hyT>$t!=CXACW{&$QW*)aw_zfdYe701{l#;2^}
zePP8PP@g{88d|?FEv}QMyq2EY&P1wcQ4hKNo4A7asq{gnRSrd#=&7ystvh)r3EW0m
zZu&IZP#^JvL)rR+xvK-wa<<~lO&mle6+|Tw1Un0hCAL*f*{UXNMfJnhSj)K!NI6_W
zT?t#!Z*F3XVC0*dz@n}0gspB%PQjnG!2hs9mx0)HcjNV)$I1W3Oc;0C;$a<Q%<yiS
zO+tiI{+D0NKt?d36^6&3f!^54HW~OHWp&6WzGs!TXhRdWT&Y59WmS3ItTljJ+v|EY
zAn$bMO$+6J_c8ijIp#aeRvn0T-n3BO){vpzX`xnti<ISTRoYO?y&#Z8<SRNrJm<Pl
zK8|P(kkbQZz6!*%vsJY?_<>YeLx7mi1&11x>E@veSX7MfljG33Q=xTRXbgtT7a$dI
zp>?;RcC!KO1{Oo<jy7eV(%3O8y$8gm^H4Vrm`gP2@oMWTJ-W>zn7;%q&z6BdP%-&+
zwt+STbx6EbaH8hMmx^T1F-KW1SlV6Z=?j5A&S(|dOQrYGqq}l{Oz{k}R0f`_tn5#+
zLJ-7=(%Hk>SF6PTcx9lEYzmMFB}JeQc1qY}1jgSdmb%A=qDlB3t-=X<?2w0+sarz+
z3M_JoQRT~}{IG87b3}fx^-g;mvjH5X-<)w>6u(0mE7nnbmwn}?1zf*itKNp<3sCZw
z8?fj!zS71{D>&udQCWC^xN!+o%;`oJT@zSz8b5FNv6co;vd6ebS<9?yHG^ipI!xiZ
z#;Ot02A&nRO>8LIPCcz|3qMo4h8o<^3`ct<el>ST6KMcXQC51WW5qg(C!4JnuxKkD
z!Pr&>TT{(e6Iiqr56t$efB_j8Aiu3E?`8sPX1)wO(pWX%iN=cRx0jycdw7Y34qu0x
zl`8OfW7UA(SG0ATq0)RMTT%nQ;tc`+qO5%Qphnr7@ipM4%1VzjPUo42I`CCvHG#NU
z)h!QWCqll*yf%SFuW?8GKutelE~3hRMNd7Y$Kj<tqRZi<flOj_R?*PbwGbmuqxICD
zCei>NYOETtqO81}Q2edi#CyT9`8wvyX1)o;pfg`@Lmgp)b)fecy<~HWN?%}FQO+~<
z)DKLg0X%v2e07pkfYX$f=L~hEeRCpOtT4Y&&3BaQmvvSy>pVdXou<c*QY+&_V;cEO
zRqpOU{!n#I2-peNRs6qUX;yH7X?d&~YQ3V~{;o%9D<FSnQ0}EetyMIpPAf|p=(VD!
z8ShqU|3@~<K(yq6!~B8J+bGpL$a@2#Cx6*^e5iJhrt~|XS|~DAEq>K3H-Kx|d+bf%
zddf<#F4&rBw(7uj%vK9nv=y%z*y6`rW#E7}nE4v8Xe+*oj8^BLupk=1nz3rYhO+V;
zp?DWx<_YkkL4r^%dy6}oCvhBg;;363O(350wE=3X3D$uZ8mkE;n2v1a9@znXt%=rw
zn_9e0;8<hTfj+Bf{lU<;%ywn5!Y4iJ0JT{*+ZA9#S<=Beaeb5iXKAmZmPt%@j^1>R
zaKNArIli&2XnZHAyGfQ~v=Setr}|B#0X#`RsglQ;z*Ci#w<45(;WAoZV)J#(qm{Q)
zScX`!l2VN4R;*Y>@mP)CeHk814%vfi2tsp$;lJ2^7xqze8O8VUr$?2xQaozK?;(WW
zSn+#K(w9}Qw3k+U{-_X-i663y-B|%Ao9!0v?)I!_6#mt-h~PzwpcO|Dy;E9M1KwTv
z5oO^+E^Vu;%`MG#`ACJh6{#ncg<Gen@0_lwM_~bdS)z+;ToxO?Pg}w@%Hj=0bBi(a
z+4b;aus*vc(5KSFF#1$_mTPw2U9>DPK)<vg%Rqd{EiGf#>5B>6!C0+B6&_)%GSJ7_
zx>e8K>!pA`^k^IMjJC2bOO5!v?WmZsRu5XdZ=PuJSgRK;?<-o8(Bhj&@|X-bN{c(9
zbml-CqGA>A#`+&UD_kD7(rWo~M@ug6?DNjG+-L!BvR>{5-mI*A$%T5=3j$voBnY+X
z$UMTtXHvv5$!yhu-!@hgi06E{hWeuy1mZatgz|AjtsTcvAr5{PR|X%5XJ@|BhVs9*
z+XKX7E*Or}0~+{CmOw2IHR{vDRr*9dx`%;a0!-Y4eNe@}XU_Tv{I8xB`;TT9hN#bo
z(y61{5d2=T{JPfYHiVC=1!P1sISAr$8?^e^(N@^UExs0zfzI?H2p)atVb*^wAOn->
zhvV`&_4ift8$GTZttR=wUztBZe%)8b0Qj^@yEbUFp)OjFX%USvwx(F*z5LeiQ=YZ2
z8mO3|-s2RW=~-cR6V<>qW~c{vpRp>yCydntB>wyf$aqMfPEY7^FE#ROGuDi?qB+^C
z(r21h1^9Jkb(BsoO)qWQhQ8lK%Q&D&a<2rWIA}wkV@0a~Nea<0v$ND80mudbFMd?Y
zKpeRz(xHdcQ|c4cI%y{!c9Z5mRMf2o;PosYd&_-iW0irsDl7Z60D>gsqa}hSVCNw$
z1D-ZgTkDrjDRoRQjghyzPO-PUI5|p%)|Iz|2MKUu#}!!#UGwVvgQ_Gm5jbM~Tv(n|
z09R2~J`<tFnP3C>rwvUv^oaR6??R*p_}|7V179^(&z>9P3K#3qZ71HHvwHL>Ea0b<
zHKH_qSR3LzF9-axvC6=i7JLuzGG%qhe3@1n(}wnWMzi*Ittgqu<s108B~><PHSDFV
z8(5ybz|qDk1IH;V>puueCG!b*pQ-i&pET9}VQmOXCE)^3wo-~5#22kdy%fn8BigZ1
z3|=*s)txlYHAA)7P%Z49KWkODwh~ruQfQ?tbzh;?ywa*#2F^291-Oyb;nKzZ5Y$cX
z?}5JYD!`YEs{d4C4Xc;fdr;H+wWV1JbJ|f8_^{<v20m-7)_e{8XO=)2NX!x|f!(OF
z2n%?dvC6;~jMW7G-dJTINs6s7MPZTcSer;K;CN$|fs{k;bf}1Lo9O;?15KYY$SwZj
zejGkoEc0wF@AZ1jBts7wGpzouLG|SiyDaMOU;uh-0GhyKja3F-WUNFvnm1~oKKEuA
z1mByu&<vH)y4@EMNapg1IC<Y_?bQXuon*bJKXmvzwfc%4-DL^<w)c2|n*FFA-DMVh
zjJYg_*3VW8R~M{<=P0j3-i2|S59sTZ-<k8}rz_!52{b})%+I5>bzLst<CK>zk5iTS
zobPeqxkWiDNB^X**`clVOY%$2a?Ku)3$|RA({E(&qd8I^*;V1g&w^-u*j{J+cs;Hu
zm!Ry2C8m}-#=!ibo?OG991|Am4wYfu$Xgxi_j*>QCh%orm4Rzn?OO3#(~8%JXiooG
zZLVpC%CT0|QCzbYt5%2XecTHU&|JROF7?Z|wN7FHU@uWMIXzG~9TsSrw)BP@<!59!
z1U%1JP2k1K%6CIhw|YU~kBrp_J+7svzF;CX40)|us5MNbr<+y}TDN&tsCB5GI#rJy
zd8@QhofGh(Nuxt*n|i5af$IHEk5V<@&Kpz68gMsbHGsP-D=#F}!6sM(9x_M}>N8#t
zc*Y<>s7t&caONOEs4Gmc0sNM+qS1I!^M1?nkJ`6WwKp~^Wei{MS>b@q(^HR|NCWtL
zW7U8!D=V)e)P|eb2n=QZDYI1v{=ryHAO@ZJdK=1{Z-(aYRU3aYTdi0tS{|NO>1RzV
zD&}ZS=?F`$0i30*yarIOdO_eWqw;WbL8wW}l@12B1_?r)<^_Rs1_?sl=>>t$4ibb~
z^*xMJ1GtZ}@))5SUJy8WkRa5FUJ!W7AVH|}yddzxL4x7PG5}{=UF$$fo_7h<Fsnix
zNXc_SsHztPQu167>OwCFq~y6E6jhg-e;_5#1)-?A2m&d2E(le&a@B#9JQsvI)(ZkD
zc`gX`IWGt-4nX`#_WQN)y*2<9O8qC#GN`p0UOIIT3Vn#xuL7jtP7FLn#oWWH`q(|F
z{xMz~$S64Nxb~H}$`$H)kY!&1QdegT+^u373PnEBYXd2^(*~bBSewdE_u4>4z-fcO
zG*~;F4-Chbwf1hm2xeU5RvdVhjmP*ln39PY@P`F4FfA-%KsqJ0Nj+Kvy3m@Uww<Oz
z^%Kv!W36Va6)pF-s}DL%ZVd_XHEWk<iAq}Go0}`dhbS_*<R+}J<_|~iTDYUvWFxyw
zJ^Kh+vAb66F1jrJZKd2LY=?2jhOA6J?o>_Q*-$MmKrN0a+P<8rHTs$#B^E%m6ZJ>y
zYSXI4T9L1rI@Ysn_#41)8><Gq!B`F8jmmNhXyWx^J^OR72wXHs5$X{y2z+diU|97f
zdiHs*2>k0xDgMzE>%gL7yw;aC&12})qwGz9bz{|lUB+qvyOotL*<pJ27_SJNVXPYP
zvx96wUE~FUUmheFR&kD=z0njKz&AI`g=O*rhi?w60UV*MbWYz_vv=yzEsfxxo68#T
z7se_Bf2}O}`yc~th^I}i_D6+()uZzO-p?{<&QN%hv3h{>l_k%o2ig!1dAYD;=jy48
z^yoZ-uQs(B@axLT5`g%YmmA8wk04rcLvNk(DaC|wr_1*QaXLrs%b9`vOz38$j@$eF
zkOJ>BRxfbj3P(A#<tl=)tISvraE`LFf<t`U%Y~utt)~vqqcaa~m|6{Zl(MpdL!98{
zhBEIXXoVsb)%I4RF<GP{FPftUaO?Nx_GIk_Zl|n#)<8`#!RYD43xRo81MI(HE?dA2
z)Y6F3w1GCnC^H`=I7d&tZXy-nKb7S|jo%RazMg%{6suwJ5P8%@8o<YmRR%6KRs;BZ
zW0is4T~sOD-R`v(D#VBE*?>=)R0D_)kqT2Ojm|k^^(a>W;LnWJ0zRy)e2}4D^Mb&C
z3=%Ab|MV=L<hBU7P)|u`0UuJ<h*JO5HUz$1B=t7bU%WQ(??r8hVt9$GqN)&+JV^x>
z730>4i&;f+kww-ABxsjH)lzuN3j&Ky;~xx(op#~$0khQuEIREnr>}cKV9{y(w&EtL
zfF~)@j>`HkvsJrA;SW6v|F3#hDfoA^o;uw`%1<j?;#t7wjTJrH{)V3Vj){~@;lC|%
z#s+$nJb;@iOa2D^KpSG5mkTXT)Kiz3Nd28fqPbp+tVFBN)hcq69_40o8}N_Jc~p%D
z^wcXR5;>1Wq7=rD$&=b$k8aflU#Gmp7w1DYS!U2W(zLpO#~P~)oNlZx;DE8pz{`x)
z71kbi`<qC)rVt;pJOYn5sV*Qs5{oF=%`&a1wDa`T>s|zS<=8w{xmyNar>uOPg}TEF
zhS_0$xtXs5(UOnq;-7bj^}5h&o3|byfw-``+E6%1yn-2<@5Ve@64tzdFrBwF4TPoU
zz^`gp?&WJRk%+CC0}wb!y`?=`jcjGc#<#&=vAmm@`k`lqk$y=}p|!gE>}d43&e2<0
zeQr>Z!l}^8u_|&xEDFmzkPk`*J0QH(-DfEIsnEelHN2r7rJz9SB*mK@4MbQd(W6cU
zy*ZIyulgZsdCw;<W?vZP{;GAj9#?liW53Pj@`+m;)~EE;n)#{xhZsUT3smS?J<4hW
zeA`$};BsZ<lMQOyak*95hyb@!RxSwjQ4?$cCmAc+R1@0M7DpZUPh-`91mir`+fdt>
z`5KU5azQBKk^L3WhZa3QiM66tEEb6_5Qk}SXIPLG;A6^iK~~yOfAxaEt+&i;FMs_f
zTE}Di)s+2e!hSVj|FE!kV*6bw`&|k9T?zZgg!Zr0bbn!KN1Kw@^wgGGhSU{DPt{GN
z0en_jd6$On$482F6rVE1X)^}eP|p~5`pkhgRMAPifj%U1V$t>KDai@=4P(`Sw;HPg
zTwtsk@G)aWo1FvoR8^0%xP7b*@mtgD4a-C1PnbwFgJ<fgIVMsD-ejyA(8m}J^D>og
zZIwqMs}yjZt#g)yJ$C?Ndu8SW3w5A!MH~3tqBg|Oyd3cFMY*sNMAx+F>OfrQiw)HN
z=AaJ5cP<F^6E6rPl3Z}8P{vs(72r6t)dUicvsGzB?PG!!;5Urb1QKGd3w4(XR)7SY
zczC^@MtQ77I~n*bWw|X0flV^wlYti~%ZU-gBVH^l4_5Cnhf{#Gj<bZ-cELIrFVb)E
zwfr!(ySXXu(f)*D>X7>Wd#pD;p*OxA=5to$Z_oBI>W@H&m-cKwAH}feO4u5ouqA(M
zIkFYU^(BpqdJiv6jQoW%iEm;f@(mlV$zcWX;440{&G7jO#NI<adCra6^_rltLT{yQ
za?V&i%1Q#<%UDg|-pX=Qq|t^t!V3bA93%)e)dU;BbBq<OwQ*>5Li?a;)qn((uOd*N
z^nyTw$pxW&9MRTjrrP+C*=hi1Zktz6MjCjjvhor^z32tQ5s1xKF^`tB6+ipAMdP`^
zY`0=}(SW0c4|fj_{*+m&0sl)`+0$o;Gre5wF{&TdAF}#2A5-WJHDg0jL;O><HZ%9t
z*$U@-7Lek}vKIeF0jB=F0K8UT9CmbLb4wIsS0cvv_I#P@ZND8&)&Ty}ST*3Ul$G}#
zROx-_)_@(#$_1ge_kzF)#%cf;8Y>!QqTR?ss{<c1RtrdcE{J*?YE?7e0uo;?2t|mp
zpaBU{Zg+q_+GrMx(~utaq5UU89I1id;S&g_IUX58S!jVih#EmKSneeXwMp(nj$0f=
zG)TK@x))g5<*O9_!dP7d@wR8-oNCJs{!)!=zU3Tka`#jN-d$x@<gOgME646CxVzfi
zMf?7pBHK-Dk1(xfY`cl=wwIc#(2r=e9JSTmwR-F*og`m-+q4b+W97?ZW#IkF${s62
z_{vuZ_f4-F_R)SC*a<#XV)XqU#d@ep(<3r|Kn%$*T8zZfJ!U)_(?xn}?f0{?G=RtN
zkh5gPUDhAQjov8Js{?0jkEuT3XO)#td#H*!kjpKws;pcP>Nqb5B)DAgoujJ|-B}i0
z3rIZ9R;3MfkU4Dui6<9?`ji(07Nd(lT8e8|CAy+wyhZqd7W*zMdihhD4pB=dJf*DX
zEz@Y!`_#Z$dUU%6aHpyD0@qQNd}=q)hB(>F;rwf!6^_UjdTI|7DgRU98dkq3PAWxg
z#W)|dBJ=<swsdxCgG=VH2S^6)ODbTWO;4DO6SK@TRu@Q^BJ*ZL3#<WTcx5WZKS++=
z4XP*KwvcBwP`7w%z)duzTo7usCE5VKHb@ZaA6^jX+s?TT6QlYUS}2tl6>ea*Dj!jJ
zq-TYOrfT)Bu@P?o`*+NR<%0*{Im&Xgt<i?M*$V>yXOJM&PrV@U=Ys@?itbw$T^%^X
zZ1n<(CtrY|Zt;RZ;>iV}7J5NoF}nCU9JM1PxeNi%GFwd`@#HHN)Qw&cNIbb9)ZJbX
zSd1=S(&Ff<M0cjyssV||Ij!2r-rxm+#FGm`-Q@*=#pvR7b8l5R)D+8KR`?Ci0^&v{
zYy6idZ`J0wTaRub0DJQ-GMs1Tqdn_IYT<Jx(udZqo<%S}^Q^FMF|?zK$g(hJpbfQ`
zDb|4(4HAU9)C3zqUsY!@^t(tCz^rs631C22q1KbCMSQZs2V!U)*?H~czMC~+-1PDC
z+uX6$=#z>iYV}Y{q6aNj30YZy6xFp={BkI^2<!hU!Wt3M?Q(YjEJhgjGZFf1o7iGr
z%fn1y(N;WjvGq5tplfI_10uhh6AmLHt6RY*udUE)MGwPbt@1{ZR=f*Pk-wO)25^({
zd0<jH;Cq#o4=&W6CfEReXpkUO%><*{twrkpO^c%r+|;z1Ks>uR>TM{TOH%>yoC`wv
zIHKKu!d5suu}Jj!-(ec^*Ddr0@LFZ%C4_p|3j&u65`_A*7X&`H6XO)EgT!%(Y1M&v
z&MO0jb15MZ&$%GfbKWBGg+jpfHq<bSt`778N98AAswImYkPuxQl{OSniXe~>b3rJa
ziy+X)5w+uH8uj)TefKU3dprwxq_VOfyn;B(%Y8xNjh^*Ag}?Hwu+QQcs>I-JS7Y1N
z*mm@8RBXEo+r%$-j=-ZV$S&YFjnxMvyAh=`2HH32`G>q5kd!mIU+ekDy<Av_WqNAz
z&h&W$_{m*!mTV{H4M3c!OnGbs{6bM~DEpmezYd&jtjWM{Dob3RKLByJGV?hC^^DgB
z_DryV&mVvw@LU^;*oT!S0}E-ye?y5fZE9XCz&nlA3na#Tl0coi3nlIao~Nu_5Q-q>
z7fOHxDH9Axyop~;BU;KT@4^8os#JJpvclCi@lsaN2KM<1&m4dtMwdjj4Mmvl7lO1w
zh&b~dHp+ooM!HX)2fUMryW%5GUhY9<@NYx4%z#M^fee_`5J>j_`PhYNCkBep7@hww
z2PzCNIV$hf+P%-3yt1pp4|x{Q4?-Vh+*><F7Chh~+VtXZ{y^CC88Zw`l!GxX5!hIb
zBK2H@-Z<7GZJwymM;cuv&xu5$7c>y@!`2AndqS;{^#6AL*k=-EqX)qp%x7d+&E!C1
zkCjQ9703_`xk!Z$5{-^|R%MA{s3khImWhVt-BjC(jNR~q=`Z<EhR`WU;)7=*LpyD$
z4@-yG^{)?zai<vupK8muv^CykQ=>dZr^FF<i6~=fhB=JZ!{4c)H}xn>Ch#~j)Fg7k
zlp8E;vmhs4AfX&bS&;Q}6kh9Dz<ZQ6Qhsn_!nl6<##F~H<Ia*FZ;9@`W4m2nQsv*8
z-LB^}{85&C^a@^VsB%SQsDjN-HMp95rE87l^0O*b<p<%3*mZ>{sGu1MyK*}<HbIZ_
z>ye%9?<#?(jQLKQa*aaoQPme#s5Mi|^SYI(0i3maE-bTW{s6=rWy<Ca_?@EMJKL{g
zf2-YcVfRuGco*e~&v^q7O?BV|!AE+h^9CR;C<uZHJhKQv=yDqcBn#&x{6~?Vvm#Z1
zJ88hOU;zm`U+ka`*Vsf5NZ7d`)a70fNZ7d`6p_oQ0!bpVe7+bBbhH?RB5vhju(q>2
zYhiWftL59RI@O;l{Do%$cQivil%~%z?x6@@_N+L!o}nUGVD8F5B9Y&=8fZg2;^jh9
z<h#0s*|)aB37!QcgTzkrT`Emi4A~%I1SoE(21b+yI@=JNSqu#zv1D=(1SV;BMhhq>
z|Kqx2h=%^pdpjQNXy=4eR)YV0RS2D?mVlGB@E7RO%?<E}ty#<T?<t-Yj_)Vc!hj8B
z`4cML?X@s)mS+*>w>&GfeTdpT+}j3DHmw?vV5NJ3XL~8!&GjrG%S>u(LQ!6@5W1Hs
z^mXdSA896@vSR2VGc@@%h3i>JlY!eStFv@wXa2i#J1WO}og90Op3=@!t%uD;1K7Jq
zUT*1fV4t$w!W=(Lk8Rbl)n&Gtz@n}ABe2+31zRn%)dMWriXVH&wyM~gY_?j!qOJIG
zd}zzH1jY_BW6?F^Fg<mdi8O!%AI!@v7wjd`s~6~f#`NmIB_CjTn!uNo<%Xx;hN`Ip
z*|Gv#%396+c4o)KP1`UCCb7LGl(vOZ0WLIF3;0V7MY3Af4?#rvbsY+ynP@n}@p_@T
zr~(Um@dxeb5u*GoCa|D);Xvr`D)ob~JYE2jnmjK7l9)^pvgx*J_r^ty7WX;o?nX;5
z+NC_Mr=B*E9^fl`(gL+@wcb9W8WB}3qFNkL)T!8hui5Sb?qICeaSCS{s|)BOXc56k
zi=YeGFjgxLD*D`Dspjq@=$omYNnAei1NsR1h+vAj>%-kqo&}^c65oiNto1!vk8%y!
zRSkT|3`Jx2rb;6!k2DhQ!yZKIeQG%WkQd6^s)V+3!O$FC@|ulR8A!zvj{x6R>ES+M
zpx26?F?}r_m6a$iTE9~5JP#-$k>UY~AQuchq{}cvtNCRct_E<Ey_iQ$;Ai&ES+XcC
z?1!j-C}-xEKd8m~7DOR#-oGdcwOqNGRfv%X6h)zqS8gT>@!}v+sAWY_h&PofD>?8p
zA1OM5nx)*#5yUlvM4@giib4#0v}iTQ{{K|{TB~{;h@v>29bNdop!L66kM24PUamYz
z?cF*eqxI;-z}qNKnj5&2va(m=A$Id}jNT{r%QFxUJLr%xgu)63PFUA#wSS;T7ssYr
zt?l(FV!kdpx?VH6rI01~P0O<Hc@5_udUV#o8)<y<fMQQ|bhtSzhvVrqx6lFGRgaDb
zK3I9Oyq&F(VRB+&{NK@lex}D&<xdPx7}tJT16Wf{tXewTu|sWogK>2pz$0y>Wd4OS
z%?UD8j7!$O5R8x$1T(QRK?o+669hA@GC>Fi(+Pr^L75-~6?cMQ=1(RF!TfQ8U}~KS
zhUL0Zi~NWlWsHEovHDLf?X+bZlHL_blKZSJ3*{#ilA=h30SoI@9n1BtGpfK*HoPZ0
zuaG1mTc@E?pkLhUmS7)jHIA$rM^+^=y382^A8ygs!#<X0U}0D^;`elsazg^1sEz2X
z(}!f}cthFRx-g}|EL=rf^s(~^rj4B(m^OBDV7l1Jff;Bg2WEtw9GE6{a^TPCSUWi|
zg?DmbTG+{fX<;V^UQwN9YRmdzuMzIe)}yt!6KX7{1SrdU7?-df)l>)}vBP21w<wGh
z_yk*g%Rp8n_q2pYV8C3`U<S;|ff+C-2WG&W9GD6?IWPm}<iHG=lLJ!^CkLi5P7cg~
zIXN%`=H$Rs&dG)U!mG1fd=d-y{Qj^evaZeV4-1en!)!BVm|DgR^T?QC&>3^6s2NES
zT968HK`O)r{fQ74^d~}G(4Po#L4P8|1^r=&tU60<yHp0U5J}W??25=BWz5jn3u@%|
z-Waf8Y+lOPyeP8&RwINXmj>VpgIKP5|GLM7=1L}xCYyPQ6<7#kwk5ty7aXbL?0$&9
z+bUEB77~qjtg+J--%Jq6|9>+fJG^jm<V6V^x-~K99HU1W*HGkhdg_v)MZ$q{iyrN9
zncfLXC(P}it;9F&_OJ{buh)l6F1#9K%y8+?nBh8~F<I1Uyo?FKy_*a2GkQ&9dC3IB
zB|Kw>Rk=$yF;D7Iwr0R*lr^GsviwYl5-)hUjX#_lo1jPe^bNS1va+wlK^)-afF~%+
z<p93l#;32oPwwF|J<5GP@LS4qn&9~+Rs-Iptn9W9;xR9Gt=^&Esz=EIc$?k4%df>j
z{KU(BR9AssTMa6}!)?_NRR}H;;vyVZmqa))=V)mzv#OPWS12p{BoE>iF9&?WSXJQD
zrYd6!F~uq#ZOd0QBc8P8?*UG*%~1=;&Nk~l<^y9bkJEtPu^^hjdB*Ai`sQek*HNTN
z#1@byk^5?(AM+NFEr=)rkJqhd7A*Tu=4-};SYS8TE#Q;J>H+@2SS=uX9PtWd?q?1l
ze7p37?INnFMSu+l+u+PxxCkU(+6l)v`=pd*k86>99x%JVV{E70=@5aPfWaj(GXuf(
z(WJw6CkXt>le#7S=IoQY>f~G~22!4}1E1BV$OWO^wh7-0+(ajGE(k>*h(+KFg9M>o
zv2~yUoS<W!TZG!zI-mg@7$gXFu@?m1J4g_U-jW!B^j7W~iuMvg;JbBU$_1f(tMvkD
zxm*y6Ar^~3t~|LQ6xSgU1kwSyU^x6WT}vk0no<T%^B2?wwl8CJq{kQZGbhP1V~*5R
z$tYuniDb+$=!_Z8n~WJoJxQZI-=c1^!hPD--X@T>%iT7GE0yEX!{jEbSG=?|<I!z~
zsfuElXyOUukwNgQm8RxzbCJSZI_c~Lj3YI-btUM_SJ`9BHI|PUmAwZ>2KVdiFijYw
z7HNiwnr4`;ognEC={Va77z}*mE38c<5DxRFwGdPF*ikw;`^#3){mOSgai0E5ZdgE4
z=0)h_DmB7}%<T!lFY7tEnf|JlmW_)O1N+TMBP?5Lhw-XfWgq8cz--WDJBU@r&WTau
zk81H94@}(?5Bb>But7<PaO&?ie;Q$>5b+!No(pw>=V~uk$WZGgHRv}xQ-Itw$kLSf
zf+LE<C*~&Ckl%yYb=;-%`sIa8c<<M9a@zsKXi+>j;Qzm^s(swl>p;{crWx^<E>T1(
zaaBKFOG0Vf4_T!C99t;YSsIY^PLm(#^l|3sevOiimo#y>bSC;5t>voSDep7(cgWv7
zjO=%6#NK{0wjX^^vN(#W7HdVHW#fZ&I1%`Z8V)-KnS6O2{QqN-Xj*Te^L2Z_VetAn
zLWE67euaecibL9dkJ?U6@(<~`kDAN}qQZwViDJ}Lz1PgdcPyby!VK!HVhNEisRu-c
zm*Rj!nS>cG5A1RBqC&BLB@}Ph%i=?JO|JnTQ<m%nW(+`Z>y!QEXb5h8<WCz6YeR4+
zBzxewvXvfY&xN_`uoK~(hn--j!{suwAMOG(CVL_3U?#%51UnJ7C51Ry_h0!+1Vu9P
z^c={irMV!Ni*xNWsTz><azQ9^6N^C7%mu?db8eWZsB;D4LZ1tUiHjh2N-P+;;4FQZ
z!WJ;+@*HZRo)vXqVQZUMtADNa`<));8UcJoS?kK0E8lYOlsEk+jGMM`$Cz*|w$>sZ
zYQ^jYw(XX+|1f((&&RCtQ!R%@(;Z_ws;1;8mp!N%=Ar^*grx81rk-`r?GFo?NrrXI
zn3VA+R>lgDGG=l^RbVF#FSXY3*#l4U^TcRG68zWFC3jjf*AAO5=Z1ZkB@(t>F8Y68
zu=2<A63*A7T)u$g56Vx;t^xRcW#vy-p%!^T;I9V>LOpJR4d4^TYK3DNhgK)Fv8v_n
zhrmSRVym~I78E4Ggp*4``ADLVcZsCWic|s4v-o>~xOV0%7RaMs5Qt}4TW1cqmndQQ
zP@;=Dp->6g8w1gnewsZ1;Y~#k?Jfz1-pv(ktzpsj0moY<$G5?s_hP_{l_hW2540gJ
z_i|L{SDqEdnwqq)Xt4jZAt+<%CuXS(d_Y;QKfrjA^2EPTMlEhMTRoWnrDp*#B?EW<
z5Chi}cJsRr%sIR3QPy|h(aLgrYFXdqn_TxQ=gH_yXqEw6WOeBV{zh4n@Qi_vsU>{L
z`{O{IWpWUB7CGP_)P%^r(GT&KGDQwZ!(?(p#ajsOjs7E|;L3^M-smSd?_u@j(RGX7
z{D6&H?LdXT4Wpg@i7IlDX+_`sLd08%X6F*se&4})-m;nk_b^ryxTmu6)f8%)2{wQ;
zjnxERI!G7lJ0{ow{?u5}JrU7%nn)dZV8ML74MjZi1`H6-`C1A!*INV<M=lt)1))$a
z`Sb%wUGn7=>XYW70>pVP2z8Yg1QJp%2z8?u1QuhiM2&{uqg0W<9uG~4hPtI5qk21=
z;~KHxSay$Lr8-rb^2k`AMc9cKl!*1y=Bo-M%n_y2W(*6xEmHXp9byd){G75}6&r1+
z+r1$0p+SOBOTFMwPIoeqIuJL`X+7bzo^o1m$4;YbJelrpPAfn%mbwCqaa0m<R8nzN
z5^+SU%;Q?|^(~Gn&af%hd=mP#mkO)6pPs6lNEvvRu`JHJja3HXL*`;=dyYzfQ;$6A
zg#M1V1|)byhcbzr{Bf&Lq_j-Up7n|Rlq|2ntq+A&1MZ}(yg{LUt0SM7TA2TunXd!K
zoB2K<2J=>g+TR50z~hY72fWExb>P1GCW3r;4V+`FI`CE<3XuYCrW-ryPT;-9>H}`5
z3yDYp#~7;*c%ZTBz=Nz_eZXF0)q%dMec`B4)j3wx3h-OTnhd0luBw$b6s43_1X9Xe
z5b6t7*b0yW%g@dLDR8a}Rkd<gfY%voGLW+8x=_1V#U}&%l;!rIU`8WXhGIY@LLdW@
z3qoya!&3n=Ori_?yh`P|P}eEfg#%_lb4e)1R7?UH-dr#oVdmftR{UN@3B|+{v_n+7
zW?EWoZ+?cJV%%im12Sl`$vl66QMkuuM-@orGdT+Ws*P3^NZ~U%>P<z(FL05TF_U{r
z3Cff)f2p&B)H9~fDM!}?nT;sPPL?!$%)-QRxB8MPz>t2?Vi7rrTfE$D3W-@%M{97~
z+7zw;_g9u{kT{3LMmrpej?$~GHHVi<L_Ag9!^Z)A20wHLKdf2kPu9TDm9RoD!U`P-
z>z!@aV%xRYb}hE8S$hxv(6L_C7L)Ss3MYD&m(S7nRf|TKr!a9utvI4q98vUS<pH(*
zq#os7v_m7=-bV!7Sy}Re*RVDOVYxTBiOaWWIgU$>_%s<#g2|=;gpaK9Hw_ZcnH&UR
zNNdMYRKh4S)v!Jp(}$I#IF9DuqXB8+@(`PI&Cq4y6ZJ=Rm13I9$TFi@m=hn=J*Qe#
zTf3TQUFhA1dHh<n(3Uy@$C;rjkW1GA@{=;B%p7+4D)}E3+_b+m=9E%L#2Y(<f5YT-
zf!c1HVWkb%k8YU8t4G{OFk!sAs>oyuu1uD`Hc=}*rP6=UBX?rZEbh|hEIusR!U|(R
z>ov7j`16gh{%+w_fcPj#hrSA@hVqFOc@c5Ouuwl^hMLTPNt%aycm}>gc~a=F=<5D`
zTjj^M!OVz6Ee=)-Sd?!;0|(4_`LhbyBP9%>b)0E6PgZz|XT7ZOEzbgu&|Z<Lv4O(P
zjnxE>QI`DR&#*Sc)?O~G-ZCx68v3EF+))5W8><PtPg!mo6#sfbY^#c`qGJ4$0Bfq*
zJ@n{?5d0&HLV?c!wXr5r2EN}|P2hNAP4Omjgs+dANcj+j-o1{9*A2BgODE|MNlXfq
z{TZ*F_PnmMQG8YCC^dDZ9#@m^2WIaO!MI*eM4Fr+1Jev+Sfm!#(&u9`S%76_<=bAU
z$zBk6>>$CRJp5Tb$#xQmP3NK7hH99HDzNAw?jUj)X^LGyY&s8J=HVDG2rPPt|L%9}
zp&Ji}n5`zT=(IcGv^(XrJGx*zs|8zXg)0MJQ`Yd(X(ha2G_m|3!hp#j1B-db5BX4J
z9AxZ(Ma6hXQ1n4{0gH-prDMgFtkzT=huJnB4dDKh@}8942=E|f<!c$#&-9UYV%viG
zIcB~N+|SI{fEaY<>uo4+KH4Q?{th$W1-zmVYF8U-u{rGmzNswv^RXWTzdkunJ@0?0
zVY&!9Nif0XlHnvKzH2SM?oec7b-$xURs~K_R<?(ps>FF-4)~>_+{CWjLzf<<_kb;B
zW%kZjVvd&sURRWRLy3_Zx!414psdW^9!g9$xiYZV<faa5pRdFmldA%+Gda0uSg6GB
zO|A@l+2q9Dcpa*b=~3bX9;~dqeo9<sa%JEwlM{OnD)EBJRe>*=oW!?-Hp2mW6u-ca
zD=YK+UrK!0<jTM+OiujHSK<jT2YjX|_m&cy=?$8!Tfi-pC2z+MYj-Pgq%kGvla%<9
z9wq2275>;*W#C=P%Iy6`i8b^?N>K%_qpU37_bG9R$(4Z>lau%^SK_-SR|U>9ISKhe
zC6<|78TeO|6MG|d5t?9&Q5m?qva&pCN}TTHfM*ruu2AAOF9-Z_Q7)X%O!*uAlm~vq
zrf!S1jde*jsKA>|svF26leojXOx@sPcxhK#?0%${94`#>3Dx^hK_(2!>4htz<ArNq
z%KnRLf3JdlY>m<R>-3IO%o@A0_BU6%td-J^VT!Rxbp1G8t+0|Nti&Rb6-I7F^<JQ!
zsDV7&BxTB(c-;ATq*X@iAGSV4n{0ff>U?vd_HX^0wO>;&37^)Z8?&1gudL6>8otxL
zPBE#iY!7@?eR6$Ej9x4fjou|{g{xn}N-Ppt`M=8l8@k-Pn*32Q%YoyCO@Civ92n=7
zt@)&X(dTmY$-W>_!B`}!;C|YT2kVi~{Gi!QtSRrv%PZdLFGFAi;lu}am#BSq9f@dT
zkto_n)XI}Vw9xETRv0Zt5Kct<zcF^h^m^s`Wq-vh>Y?3rKC+KWR45jSDl|>4d|r=?
zCp5dS6;=o%2q!AEqSYhS$*F3bSEx`pqaM}x*##!55sO6CV3B{Ph(hnX=v-uPneZNq
zMBdL<E9dHwv4Cbry27!*2*Qc6_=(zoFz^G-j&_B9FoJNxPls+s*VQBWK(ixWp&yJO
zoba=Q+AsD@I6`NrOkq#`&LYtWeN(O66l4U=o_vKFVFcksMh~q-Mt@fs_V<aNi$$W0
zcGKPYhxN!9L33BI!i+G2a3Z5#ZVYS=?-pGZuTmNAFcKNXB2h+<tCeSijG(zMSz$&P
zK{%1orkcr?dZcpD+}Eto4@MA9_~}#o#{_<$xi4CwAB-TJ@N=!&|L?#LH1}02^n($E
z6MjY?o=?0J^(fEffv+5ypOVkjXHSRN>Qgy0f0_lgn{q`Pc#yI(ZHVIsX+xb=6b;vb
zIKV0aZeU)UKmu~%RohU+BrOcYXX5$WzEMfac%%xF)Us)@^)lAUH<L@GxoldP=Enl3
z?xP93eqGPG7Y43Ze4`%aQ3jCUoLCr$<ArfJUignNHnq~$Fy$*2O>zRAWkL1cp>WSn
z<}Tz$4S0pI%D}HGOP)3iv>~qZa;qGXTiH;LV(kir4|x{w8D*_03Cb6EE<JyGN5`1U
zwVUY_F+pY&Mp!_fY;>m>CtG<&lYQRuuK@pMtZJM@g(Qero|Y5mRT{6bo{U1T#G&g)
zZ+<|3tDgU$$IjBJ`fX@9#KwEG(4AWN)k~KyotED-z}iMnq2k@;2&d#KD^6U}sDEOu
zW~`+TN4&?^HL>M-T*HOivGcg8@~2tgjVPv)og3o~<mgpZCwo$ZCiOx!LK9o6mt*uO
z-zmCldK>Bo%9YiJtWL9a&<R5Mri-4-yrwpm>rsMPFg+g{Sd^U4<ij8_fn4g#AE8WQ
zbz}<eu9Hk6nKAwHRZcH$+J@Dqr`EDl)8y;LaF5Wl>lDw*w=Yjp{&YRAY3IjIj5a5s
zD|yNn+Rwgr85RLOCSKx;=^s)5*c+ThXfTvcTw-I9sFgqQFZsMirCApek2rs>BG2g2
z4K|n+MwYuUn{{-h8KuWUo59*rPccoPclRnR8bet}G*K%8@FG#Iwo*qs=&?BM;q6=u
zCOz%9P!Zz)H}aXPCeHHSn3Q4ap=fIIg))iBw@5wx#(SKn%K$8zVyI;R6Ue0^31t$I
z%+M9=3${_H0M9!n&))69;?H?e-1?|oN>)YS`O3;SZ%}P72)t>KAXLZEW)WBnCH~}?
zP%7r33y5<UN>>{S|L#u|s1D9^L8u)qlrG?7%E|?y{^A9Jn-$8})rLA-x#AjFOfLR(
z`(hm!GLo%%oJNCyhg%%_aldci$Mw`QJq|BTXoHDPX7Uyq;0N?LytGUELy9LEZ`XF8
zVzL-s+N}*Hqr}3nh1Pq#9$njlKWyVy-cKP}J2CKCCf549!ngJ4#2BbutQ4&y6rO6S
zk8gu-_hKV7C0~ttoRPl&<m);o8lWM%k1--xX#rxTjq;}QwsV9B=GTx@E%s1Nd5CAw
z4VuGZJ-U}v!E~DpCid^P5vT!wVXQLH=UEG*NHoUkYQVc|KBX*gs2LlIt}7U#O<Yfa
zz42OTyx2MnhvS8VK?7q_b{=6D3X3>Tu<q&s(s;v5(?i>(qcr2w^w^pGslw9}zg%#Y
zO0a&({Uc@C!hDv2gfm=ztcK+N;KhJ6z7qpa&`BW<fPQH>sRS;2F`!>9PAY*<@?t<1
z3+FWax4y=>sl{3alG18&J9I{A%-CV%#VnRtGE%**Z(ggU#l#k=(CJK-e%rJfz=J=X
z3(J-Zc-RTBdVv2hRxfbl6HN;EA!WHa-)KWU>ji-W|AlTZ@D^h=fWI|XFL0@`dVrsv
zYPNFV{~xDaCvDuyV~|Dt5cAA>9f<Wz&RfnA_FuEIR)C*AHW!f%Fpyfh>QvfLlv4zO
zgp&(GQ34SJZmFr~f>1kJL0Ukv$OVT=<Cm636-Z0S>INimXRDe>qedDBYBh5~C}J0j
zKt?hbgd%nk1WqaBTWv#;Tw(=gfEabTJ^?AK4D4cSfce${T|lg7azj-Pqw)=SV8Q<U
zg#GS>{rUZ&{a@>d{KiJ648)Jjc3{Ef+=R<&!sXn^<xA>nnRf}Kx8+^l(k|mpmS-7o
zh`=rG`58Ecm=;7adGSPO3!>1*>YUof=2jV4R+jvV&B77{ohn1Ov>)OWUCA;@i1+If
zl}WO06+&OyPp>k`GD-Tf&?8HusCUrN>Utb5A9sVlXPNW?&pAGC0&(!hbckm?b4LHR
zngJP!<P1xX$tRNm$m*O~B)PBnjNh34EhSi<GmA`E${^pEq6kdU%p$~kw(OLFg<`!i
zo#}d*mjf2+_eQjXc#mG7Sby9O223d=ka<>@eYHMLFj0ef{nX$#UxRrzz@(FzBxV9k
z?VgyUEb~qV%%IAey{e}1F1y~Af$Q7FwFTVLSY;q-i7iH+>{6ME7<n?*!UDE6b=d*|
zX#$Y~KBH33e%uZ%I)k=wV&JuGlv_Z$!ij<D5QziGq;g_m{Ux?=iR{!R`-6Iv=k%Rz
zY@qLKg^Hte?rm;!unas{S+YjV9|l3ur7@P+bepc@lu1GqR+A;xY!oX~r%L3UF$tPx
z%a~!*lQpzY`KW<R3V9^*H(f8*@@;gk!s|T?NE?Y_JjzWb1hI+~WhK(YLzr)Ao4;!9
zUIT7<T%MFXik9C%gW6uX@-P6%>X!==CCgdPrN`^qsyX*Wr9MB13&kWzY(Wxx2r?lW
zd3ZZIv91U+j3tvK6r5&E#-G||%y6h<$8tpos~}DC#`M^+Fk{EUj2#Q}ogB-}U+7j?
zp;KXnE`=336jtc&7Hts<EZr2lYsT)HvAbsMF1nfCK^tv1Yq;_o3b)Z|BdZY+tfd_!
ztT689H15Ca(JeAypG$NZmKKY1sgcVW<}cbFrxvjTH1ad_=w!gx`2=H!Q8q-riD~s!
z6<+OGv7x@OEVrrjuS}~B{Ef0!%YNia-uer5zpVlY$|sD#aefOlJKAHhxG`#p>jWZq
z>iU;26i{9<YR}vB!t#XO8$`8ZZKwMZ>*0B-eXm*R0b+Q#{LS*PAXD`+dcPiJbp-Bo
zMlS5`ni_4WeUvMLz^exd4&~uN^H2vaJUJJZFH$b;hrp36Jd67wa3#Mi0>o=3_s&i$
z38xEFPUk0_RuWF*n<;9EC%JP1lAL6^B;|Bb!f7?(bWzlqvC}S`Qam?+U5Nqg3LWHv
zVJ&aefy1n<RKP-7i&JSWOr%u~y~+SCjMCabA8hTTEh3BBnF@dCS@$d4@02`fk$PF-
z-KQGs{io${;_1d(RbT(uUyq^)Jj7UK;Af0g`=Y`ZJ!@la|M%F;sEt<02#9&I?)Flb
zDWsD{Di6^A|0i1e7xlPG>GXL6ZK#)RN|k{WM;dKWKjk3|sq}(=0>Nv>^d58cF)e>X
zk22=Kf`|G2FX{mN(Z-|<EI6H;avDDwxI@#yle^Y{3tqovdEv?lf*;cHm$YW}(+q`J
zW<@ROv=c>{74_s_v>2CavRRE2ei!tgr_J|-c3xKF3EF=2UdE)g=&Ou*lQtJ^lrc{a
zx+P<V<3@-_Xo#zoPM6<zmS6pZaheTOH;{BpmXwy85%>32#0ZSdY`QgolwE$UGMA+U
z{aOM$0ps&}LM|jg%4M>Y>?JLooq+Kto6>b4<u%!`#C9Sqvz-V_Z6}5*cVU&Hc!ed2
zQY4lnGM1@Nu7y>K09U-&ti&=xTb!sPD$B_E18pc8K{i7`dLkDjCk9!zHgEK|NsAnE
zE@?0fIX4`GoJ)T6dCm>1pL2&QJ&|Tt)-X_+Ba2d#aZ!I5W+oX%nK8p4GiDfL#$1UI
z7xpJYoSzDDek#QI{fQ9g_a{P}-=7FE-m=gbg(@yhg}68s;^I_@i&G&kPKCHQ72@J(
z)g7ii>*rW6HQdD3p<W>Ckxbde^27GChlO1#A44(r2ioG%O9lN*>*caebBba-(|W@(
z-%3O3)}y<)fWKnlws1Y$LTH5}E4LU#^RjI=qNh`vtIa*kcKHjsuwG#cY&nc_ZI!O-
zQ63L;wjl^t9&}BOVwbuu$*u)tz&y7TVIFpZY$&Xq2%}>x2_*5dR#@ij_mz<Mb*_a`
z$~sGYXIW8eVPuJo*pXT(Z@V|P-HYvW&2}%43%uBl-9>G5j`juDIjL2CS%tyXPHu>R
zg^|c*LqBFDEI8h<kgaB+c5;bJXv(HgvuB`1GhTT@O&R1+FEQ?Dec$FyAMj3P4VRCI
zVoT9e1T6U(SOpf!u)va8ZbMoH7V?WfOL|$u!C2z?&c%^PPaJskxS*u_K)fdmZ=g%&
zc6xM+5bNL#x;1q?@K5btsgHZ5Lv`_RV&Lm-LFtRv%f5JVjA|an#d~_h_HB&=KEX^-
z$MB&)t9*IATYnV@4m-+qO8upd>GG<Bo+s{K>S%gRIFIX@P&1q}Z03kj<~2Jv7KX$!
zg7of|(W&yIX2aUhAG8vefuz(SFKswcXi{85Q*`IT^w0^DE9!)aG0KZ9ls;O`Ukan4
zeMrmpm`#%gkcxKXm*nUX)V%n%YH?~0ve0hl=oh(l0CKA?Yt6!bh)?=pfGoqA9K_eX
z9FSBqxy0RJ{KO)W#t^$b?n(<j=BMtE<3$r6^4WOyPxc7xg}9^(3;RE`Y29Lv&elhy
zSeUqG35$BrM#3U>|Jb6%M4x3(GNN4xak9OXnLtnsn6ToYY6Qi@7?ENyeVq0X#>bg@
zyb?AxK^6A8^HY5`*ZQn5Kr8tOBjIC7%EzLVk432_h@bc^)cNuodp1*{xPP%-U<Eiz
zo1n9FvaW$!DQ9<Uj|%WJkucRiN~ef7L$h2Toe2y7x<<9GcL*dp_mxGrfQ70AcBoec
z9;2)grBjEsAxHpwgnz6CnF)uHBOE$^Sy#Z-Y-cgP4fYeMLeK7Lt4JlZG)Je(qc&w4
zz$M120e`Qo{J}fa*=OcfWl8|gH&z4qMP=o>P|dSUcc{=Fv^Xlj-x{k4Bp7GD(uSI5
zaWsK=&IO@-9L=HPxYwLkfzKJM1;n#6U$r>;Eshot&$%F!k0V;T7^;Qlv<t|P$xB$k
z7fq@cSPZSpLi?PB)(a#U7g|>v%7+%+6g;NRo-n6noW1Q?VPQMe^WhdjU+gQoo};y{
zX;puwaH(ej*Vg`WU#r|pF^QzUYKe79Av=8_v8{Afu*HbWMGIK8RZUbl8hmUq!Ty)$
z+Dlrwu{IscRO=wm3J35Q)gr4Q6C6sB(hgbWp%j_S@^K@uSkm|lE`<8;)bE{wkZ*f;
z%2vL^{ZMe5aAs(2)^Y36Sbsh=Ht%ye=TCZ+og;9KbMjMC9pKu^ay{5+Lw(!?8^F7b
z)eC&cSPkH3&NUD399NyVMwp=*kVsryb&JcJuf4PR3g+LkN;EP10rOY^e#cl%;0?-h
zK~&mMx0_%YxQ3<O1g@>DTo>wSFBm59xJK!t?IGGNOe?xYMytbuYN6$e6;1x#RJv?h
zWd`-<o&|hFS@NNJ7<6fxp1a1Yy{53kqK+QQQFHIVg8$!{p=fJC)cdQ5yI}{TE^k%>
z83`vA#y#h}ob!MlWs(3Vo}ZtR$4$W9znZh;4(W}vAr4Tc$N^uvrXZI?|9@Qm#9Y>a
z1-&`byhe`Dd(!kOz=Ga_A@zP|dR5@aFXpCY%?JME!ki^3o<9xZL1l^@knA%#2=W&>
zU?H^ghYStp@+vtH*J6KOB95*^9P_5dadai(m^Wk`@40|_bOXQS>#^W$h-;PU=5%)(
zijZWl1SFtb5Q>;Y5P0{Mx#wIE>N({~5f+>capToRQK(0hn~6d^^R=QV)Jw|EL?Om#
z%jN+<ZR;C(!PyWDX)c<3@c*YxkJafTzXV$XQvms%ajE0dh0{9ZOXNCxD1;LS<ES9+
z{p9En9SO$3eIxA|<z0ADF5`GNC|;yTd4dRBba5^w<+ys<5+!C_QDFX1iJ$2)bE0_U
ztb!oKqsnwE4){ssiD%$yn!6L*Kr!{mqM;B+>&c7>(bDE{(ST{3Opu28@>PWpXDRU`
zJv#02+B+Z9ql5^Y;@j%#X@@C6&t+cdwdeGtGYH<?ciPp{AhuVg69n&C6g)_Yfg<w~
zCE9v)+F%+xizjU8j7jT$!1wdj(;zC!l(d0&7Udvl$JBM?x4O74wMDiJ9BJ2)3XtoG
z`&(RK7997{@7Wzt^tEKM<ZK95ms}L8&^b$@i<9$2H<3qXGj9$5|9^fd$6M<plB*gJ
z_oBCG8k4LrdlpSw=aO8R#?B-YoxNxpvCvYP<b`p6Et*Du6$V+nYZoxs5+#tOE3?SB
z7gAm{%_o~9QZD2-H<jPqRDN@(CGwk_%5UzpM1FHEze3z|rzPT^8^yguhl;C`yvqPA
zq_Q-X%2G>(HBHL3bQ;7ny0~p8e?4iuTz`vygG9CkMRNP>Pm=7kMH`*M*e^}hW~tSt
zuvjgf2En2w$p8yIvNTo0rB*}QB1;B>#t@6ZLampkYP~e7^&z@bDin6M6}B+*W?OcJ
zmYW@$)7f>Z&9XA^9A(Kz(W|r}aNAkB^!aI*uQGNOyT~#B{23-8gXzzNL*&ndJ?zgg
zQ5he9CLA7rChT*6CY;RvOgJ?DOgI<(nQ$Vr2r~<^Psk}9%Vfr6#K<mVk|K#^Os;iA
zo-xDL%9u12@n+00#Be7how_j9G7F=Y8Kr%(y>A&HDT=Y@tSM=Xj7d)vCg*dh$@!ec
zLNPLRi2HQQAy-OZVRAl~nw-z2CZ|NH3;6ST6pKLWn0cm{h1v96RGRnc6_!yI&6$=+
zL33uLSy#=Oc8#tBxdO{acyc`+yA5=q*z>1B&|C;Z7b2RUifDcm(aE~dJZQHfH6YF;
zy(MRJ{VjM{ayIQ;$a%@xVGH8n8oT)`1IbZ5#2@ydhtROn6ks8;`PP7i$o|FL{~vpA
z0$4?rb&Xa4A&5dyR7AvpfGC1dKv7XI-~f*IW-`Gf%mRuK85AKQaRdc5&N$w*?SQte
zaRle6pixnyqR@^JC$t^nj5fkMReP;dH@m6~*!}(Qd++bG&Dv+xp3Xi~Rpln3+n(lU
zVs}XS^H(#Rojav8`-cBDEasV#RBc#NwP6Die0&aZR~_cAI?P@0DW2|j#Q2(fxZ3h0
zTkN@c4MCCJ5Je7q63;QhvUP`jy2+zB8xJ(1$ksVvO&p32?%hPuw!j+2RuF$_qR3Xu
zDw${IPK@G0P~wrT%dKJ_#WSxETTx_d0az27;=Wg=DzbGpSffbs{U(ZRt@jlvw!bRX
zBU?LwH6AHm(?pT2TdiU?#h;rfvh}-F%%eE@>eSF|%?E4hNO4sYMYdL3#XO4JUX$vP
zt=++z&QQF%i6UD|d_{_Fa3d%q!`1;{jYo=0nkce$ldnkeB|HX;N4DOy568I_xqXNt
zceX3-dlGlqu(i~lOL-K3Xrjp05qRn~nN#d@Q)<!J+7GNzq&T^WB3n~^MT#{z(<F1Y
zp0Fof9>q;f6xnKFA4l^j-Uv!OvUR(!NRb=AC`!lte|uoh8D!6vI7R=K$-D&Naqr&<
z88UbyWJn(4yn8bT$4zBC!1qpli1xD(iTfb8xshfcG!GVOsr&sF?EXy-1bG$-yyNBh
z`8B$|jWg5Pzh{z7cHMl(M|a#%y4!}*oi>#2vY~W`Z$NbJ=jKIM26uD5b#gg<tLAe0
z_T1&TB6tJla=h{8G;q1*@{p;*On8zA%N7q4vl=M!BoRfnc$gSPitL*xvUfZ-gk_5-
z$A1rz{~jXA|HL7}=N*}5dKn4Jg~Y=|Shjecm>Erxhlwb%#q-1{QsiMGifr*bF^Uwq
zhDDL9m?wv@Z1M0g<`j8yh$34&Jd7emo*bgc77q`jNRb<eDC#ZbTWn=R@dB!)linw=
z>+%J2D|<jDIzY_yDT=H_y4jnrSYK|wF)$oTBYb6@$FaDJO?lK^KaV?1DQ;8Ek+go^
zOf-h!=F=nDI1QxxUYBwY+<bb9-{HP-3T|gSQcot2<a_w@aQESn98Vr49vSkAeEqzT
zH{a{$C2^O)W5+Y+fy;x(BYEKR#kNQCmG&tAG+saNDm3_N+tZ9HZ?=6{h*M0d_&WP4
z@pivF>&kvXgDcQPSQqxjVV!+!n&f|zV_g{w$rIT#=lux3hvAW&A6!Eo8B+3fWg#VB
zSH|x^@cRp%c}U6Em4%dioqc(jQu1|WEIC(^=Tld=C#uS$Q<fTAJUz{tq{y0!BBwcz
zPGQ;l??H+Kl+RyM9=7-hW~xh(&tIa*79YX>|N1n>C5zdEHOr?mVcFt?nW+UuE^blO
zJEE{WUb(!5<@)9^D=b?)Y0dah<VGNh+zEL23d<JHUt>;@TZSm=JwsT%X&@BNpKeVa
z*7UX^y4*K-Rtw7(k86__MegaM$Q_0!xUg*T5I5!&x%-Qv-u{K<X2jE8ShjfJ8>bYx
zYl))Xw)B~6KI*}(=wKYOhT`z@95fVbbDMn*&gqC#s0+|&F<YKihH5SY_t<6%<B@{P
zQBJuLXbig%Xq*?k5!gTMMxb$C$c;ebJU#8rZr?ah7r;$O&o56g<WOo1+y}VUtRJV0
z%W=YR9=M#I1zr?gR##Eq1Grpswf4TJp^NR2toAMb9ajCkYBW;rrs~6rSRYoz`aluA
zKp|DEpBGZa`al&ub6rM{)OGa8kV4ka(}najbtOGgm$C@wJ&$wq9S@2;+09T@+Pf(h
z)FbtD^2m_8#mcf^|BTOI{|p)IiXnqtF{JJaQ{!E=S)>#{vU@;r8w~zKK%>R=Gu*zr
zET&jwshry&@^;(&dMmE6eQ=LxC_N7h#aYnaZZX9=b&f(x$!qN+L&`L*wbL{k*_e{o
z&SREL%_Er{-&l$!o&dN5dZf<TBbhZ17>^7Y+uFdBK<XC2J=C*iqnUl7He@=RPU<-j
zwlT1doWjk`=9B#@R+h1fy!$XYSB5<>RE9k;RE9k;7@w#&?-M+qyiMTg?~(fO_sEcu
zsSJBys0@2x*qT)rva9$@kw>qWQq<JtBZ8dIZ21H6-v<VM&&J%;P~<mkq-bpMdp72`
zR#D_5f+(`Zrv&4XA|DY%k*)teFq9|%`@rBWUGC>HLH@6OVBkqngZm#-j>fViTaVgz
zOL-J|G>al{HaFwOLRhx^_Z)c?OL5YOB3u5t%%jNDM-=t@Dq;1}E^Npnt?80Jfkamy
zLBi@YNLYOc!9(x?)I<xJPlnZZf8s&k{t2s3B4K$~$fHQusI!P;W$x`bQ2&RX0_S4l
zaMqX`5Dvf;+zJ?~W8ewXe#F;*!i?+Q1@CW*&&Bjhw;xI<=FKec1ygQQc_;YCx2fD9
zjFuh?Lp7I_xksp*cMa0|tG(@xQ(R`LJc>--GiCbx%!4`FD6&VMo?ZeTsb{K3hTO>3
z*&iA>1S8>THrF@P{d<B1-w*Hfn4Zzn$r(y#VW>Y*T{G>?=L?twU#kks7I&OK^W91g
zg?MDocwZtcTf8;-zy2<T125&#V=t^8eqr?t5VpB#Xtd0p%1OX8M_9J}NnlT)l(9AD
z99y15V$K#1BeVJ_ru5R7hxF30A-yzgNG}bmd$}4b%YRgl^NIT&oSkOpr1+(!it_P#
zm<gI6%GG%oN{6ctgtHI$pIYBJ^gRJF%z+a09e5Qu7&`)2iVQ1T|IWJMYYFklBJd+s
z!m`CrRhcoQ$d6QsB3t}al~JU~k5q{wTl`d&QKZNMiDJmCFx!<b{ZS|nJ7bE<p3t44
zv@b(NIVyoe_l*GM0d^4cgU<7V&hxeNTzu^8O#AV(#P<+;+u4xNRt*0)q-1`Sxej8M
z&8UPK9cF!(Xh(mAmG3A{s}9yGaEs6am;5@84t904j>V)ev`NP|1(J?m58sdZ;Rm1)
z$J>GgGAe+!U&c7g_%GiP#SU=f{^l_K^%m;KGML?f-Sn4!Abtg`xR)3!y&oA$$NHd3
z819+oEalrFK2jTsBDY9$6H!^wysJ1}(Jmx`dAOnDM@)^%O}KyLx1K_*Zif{=f-0+$
zEq)5sEMJQJ2&yQu#ZRFcMT)#F6GhhhQVf@{e5T;{yM$$n-|{j}Df0c7D26<In9YL^
z6o=sDspwXq#cz)b%X??ODHK)@$TAdZTl=xw5{m4l8OYjs?BrB*(j(c&N%j+)CCvLc
zJP?^Buah>E&e%{)cdmaAS{wLSJhT1EW}8ou*_w&KTsa`-gMQ4EMK%;O<!2HM70fh0
zm}x#UWnn`;N60+=q(%pm8XZh(bTFyW!K6k9lNudNDzLGgkD@KG#fww)^DJhb9B6ZE
zJ`-bpHqexqB1>$h!}58@V;aQmbcj<-`SI4;d2Dbn+>?qO=e+Ue7aJU+)SpJ>5@_KJ
zNmAwud6OXPQH<$iy1|(>-%@dk97->$ULx;ciTngK-YNQZ%VFJEEOSCrWU<_>1|?+O
zj234B_W|Rc;(4}^ITXWc#_||v!O4=tO0bV1w+@`H8_`2|KqzxJFlkZrdtJm{`?IBp
zz4p6U#4d&<&oOpmQuaGkq&wuQ>FMus>}7==+#-tXxT~hewky`cy>?C5h3a?7F0Mt^
zd0=tT5w|0=DFka{w+`P?epE((Tx53FcNDm%XGXpwJ4gMl+1cSc%8AOTCu(F4lFITV
zTRc3?{GiB)qNvLttnPrYIy5Jaf56xsl5@rU4w2@q>}Ky<1q!cYxzk1ON?}uoc3iY6
z>(@^^M|%ocg>>{!+}cP<*z(=yQlxuP)Dglfx(9xU<1nDRrBW`mKj4wzZ$Ie1M2hQn
zJR9;^Dcmy1Zvf4GAjM6fS~_P|B-!AHk&K=mH7@$exN|W1n>!x1rrP_7Jc@k3C5qZz
z=AFXa2{fB8#rG^#OtHgK(KcEXOD$DQ@mx#gQM?Y6`+GL>l5E}PD^h&TQpFVCwNxI(
zNq=V^#T4gQDv#nyO9kFQvfB%6A9E?PuV(5|{M^@~c$iHpha$W0_Axif7As(ek|Mh=
zifsMld!)D#lqj-w>s{=84#j&wi6UFi`ic}+HBn^idtZ^_#wLnv^|;%HrnoOC3C-4D
zd_{_XYof^3N?(!UZ}&(L@yM1xn1P*_gL#u3rUXTfpm~`?@kd{aBFD;TQRG;epR}jQ
zfpYUogv{Xt=kVutB#S6=?8KI>9c<l;D0WY&dm_meN5v#akwXHHFyp8gMT#5}QDkd|
zt$Pv0^HK&Vk!0&~Uy&lmPCT-;%vYqy5fw$YR{4q)KW-A5t=50zY%8MJ1(bMX>vvy~
zV#kz8lt{9530PAeinlaTWXqpzfg6UAm_IMrd6dshfqSC4tD)ExbHV-7=fSy^&pE}7
z%~*26x3RldKE(`Bt~2g?kN9d7nS9uvTVH~#{|0R7%&e0tr~FH$6}F3kHP-_DVxQat
zk^_8_O>_Sw)AV!NKX7+RU))H|&P$Q*-SN(~0azko*<x5@uA_$BMzE&4BiYu@Sx)-q
zE=gTP@+sx<L`J2(`HseQaJAG9NjAlMK(#TyD0e_l^Ox;N+-G&;6j>_syLyf8%+9TQ
z=-7v#_``wbUMfn3g-ogGDX^02X~R)iirf{<PqC!8HVN<FRcqEG^>1w#@+eNfSCq{Q
z3yP(n+^Bg;wifw{6c;y9Y(8i%gPvi16;osw=_*?n`-&7(gXRV%Xt1XV2AyJk<x^xB
zH)z84^g>^eVrtOfFXPlfy-#8?Y#-|_XCH_KK1Fd9sCMR;5A5&Gy7a8BNs?oIeP%q<
zr_O<RflpCn+99*9J+voVt2jjtiMuILX55zU>Sp77-<Bdr$+e}-EIeC1OIRijiTjud
zw+!=djt(PmdjIEVIwP=H=G6?v)IOLyP4tYFF^UvfB$@xZO0j2!nFcg>^%M)AlS}4J
z&ytGf?Q&_?7Ir2FitRy34s7N6iWC`hOOs77Xe;Y0ha$tsD6@5vuShX9XmAY%E0oQk
z+go3wDKd;3G&{*wfv-q0HE4EVw+RL<V9;%>uY8IO;|49TLF2w6#nhk$TM)F6LEBhg
zMHEwm7TTcMz9PlcpoM{;voY~5w-Yc<v7Pl*LXknuzC&@4ucaqxJ$!!e`=(WYYZW*)
zsWKcYEu2^&YwB!)n?J~J3?f`^lgXnvX@zvg>{=8{LAj%BPEWMX@f9ha*F;elB^Wf9
zL1}1K{L+f%?Gm&*)#i{xk?G0eV{4ADNRcr`vH76c3`#?jZ1ol-TR^+hZ4Sj0nVzg4
zw#t1)ii|0W%_m#Ppl4WLB@`LP^;Kwxv%*)Tm>M*=ey+vbx!2C2IK`gUS5a?>**?Yi
z^L&aTBZi#rixB2Tp!>G#H^`g)6e#X)ooDN6wZtW+*1|a?$@E6!n#)DmZGr2Q0%$MH
zpV7_lWUa1f9UI=Wdvad{XA&uwn)6~-tF|^&^Hw=QtH9G%71H_<XijR1-BwBnvlNz>
zv$6dvLb~(I{04NiGJwXK;-R2CYc@`+Pqk)iE?7^MjmKV3RTbI)H<)&ANZPfbX`5e=
zj@)*#Y3EX8rY4u#ayFQ#+v(gSTg=o`Wg|81;O%}e?SxL-{i_IJ#ZK6)cePn3C^Avk
zm@?CJlTHMZb~VFt4&JFS=SS@f$)@;@rE(~;J1v~qohh?BrciaEBa&_V#@XYVQ)Va4
zuZ>$?-g?i@Y_p@DTQ*XAogL`4ryADn;Jp$%wCV+!b>=bmZHSq60CFhywN#uUGckq~
zXJew99grgDOUQeK4p@IIU)bNvpw5b5mYn3qvo4OIbP+=0Pe=T@K=(xq<x9btch7Ww
z3`*dt`3qH~XQBSQHH%yEdDb_d_5ICuCV!8Y<?0Y%$iAmb(83v<q$k$E<(MZ2!{u}p
zTu$d6^gklR|A-L(BSQR-2>2g{t{nw*&%P5NpJ%&WLh&L{EuHznzlx-NnQ{ePjn=Nx
z%?m2?w=>LNS-Kp~t8LuCF++d8%4l7&V=<(+*>TL_knUg|=g<Mi$jm@aAr8@&%~OWE
zz|N#xipSavikQLTI?lHuiif-?R6BQnY8@NavrAV0<d-iA>1SNTjGwffC|VEkC!b;`
z^6ZvSMDa#YO#%(arVzKAL*T_QdpO1RFhOxGC~S^>nD);|pM2C9u|n?V!V>)rC2~3X
z`yT$x2~Uxgan*EbTu#@<<yf3qcC$F!(FJhz^cO3@biFf|`QD0rJ(3ACJCD@qd8E$I
zBbngoNYEp7h8`J};z@Rp@+kTXA)h%jJ+nfYoWBtAnT5X)^7U2~vJ-BD*}lD<_3@)2
zvTo+&`6V#1<GL%sy#GfRFvD@xnnQ)6pZEW#7chIsRcpTYNAb@tV7mN2G`ARz1L7`H
z&gK7w`-M)|Td~adf5(22kEO{0lqV{^6t$Ll{i#((!O<kU?DHl=EVWb-#aWih(~iam
zt+dJzY_+*S^U;s5%9CvI8-C_bwov4DEQ&lix%CRm!;>4Ju-pT=`3lQZk~^cYdUF&u
zD*53^-mF53Ow)XrN#|%NCV1m2ap`{K3FiZIHWU-S8<z~#3uij};2NqgR&=>ds)Qnw
zGLv_CxlYR?nHaP1Nak^_&7*|koBpY`yj&;e8SDCbB+L5-y5o^8@PJ+n^vH>5l%|q*
zpz%;DsmkE64(zl!-*lG^r8{gWcGs_QzV3w4Vi)}9t-zfvGpMp7QB3hkJKf7GE0T;@
zXbW6S@gh*I99L2I@oc!6XCuTZ-e;*%6g%Ly)D*V1oH6Ivn4>6O<_~IZxemDoe!sW=
z;}mzX{%5Xtm^ht<yrer8E>5(r5)?UTZOq?1^WJvpp|ck_fLu!Uf?iPe0(;J7WiROY
zYcJ>;FmY!2e|~B)1J=vjMN=$9HO-dQSe|5y+o##0C^CCd)CCrn)#ZL5EGyXdHK~lS
zZ0!Kn<V5kQCW>sm;ww^ovxy>GpZSUuziOh$)@EOkB3H5Gs28%ZdMyj9N1dlU>(;_K
zAgQb7a=K<N$Gd;72AAW*8#8n{ouA9;>|Cz-+_FM)%L>UYD<rq9kleCDa?1+IE%=FS
z)~)HD$BJ;D2;bmn!(Aurn_ODQe1BV)hbnK|oo19)`5Kovy58xdhu0(Z_<AG<^MCPy
z_>=0P`DB^ypP_W`48^|ndsT{ND7{r0N>5!wapv+wHx$ov|JV$?oY)J`lQH{-AU+i0
zD4#k5;(0!$hxAUINB08V7h#m21ZVcc*C76oqDDE*_fByeOC>1oXsI|0(+_txZcLpQ
zQ|44Nx8NLzSM6(`;x{4k*4AioY<SigietmWEaY~c;hwWu7E=5ely^tKhM!g;(|Xya
zRjAW)-_A0xEPFd!7|g3smth5hud#Ur-W!|?hwQLhP0BypV55UmFK}0U1hh{Cx}GT0
zqnQgexV$Vyjj|sw@We!wl`u0mJKsa}tpdGcFkhu4*pt9s#vO(;&Aij(`r_gWdH4P?
z?&-d_w|jAlzkzD&nA<k<?U2@c4%S1}87qGP(5)WjjsC6>%p<V46VQIbS_O9EQ*fyU
znC_gDes!Arfk!el&T!^B1AESNTKCu!8anZD@G%YOCQkWAaAw%GnGR&0KN*wV^_Gn8
zut#cV4TwWaGdZ+f$jvdcJjZ4kzW`#=r*y0na0B$Py*+ZjtJ<7a$fl8igGv4!)ntgJ
zmMWq+%TmF206{CA4v&c&Qua*Bd_pvTqn6KyMR@8n6es*tQ10+j<`bh)qsZq*Q*MfU
zgfv<d{i7+cVml(v9yZ<qNy>dKHy}{(E$d+(d)NW4%pEi%`kl`EqfYy|2L@uxa>!;5
ze!%Q43mEw11XK456FdrQ(bKp69#j0yQiT-vdPAm8_?s>I`q>)hQlta3)G4O=3VvUm
zzJ9R25)|pc3=YLqU%~Hp{|i3$K=x+#WkT%XQ+iRva4FZS<XQ1eQ8wFr8pLgY;gyNQ
zM=NU>*q5o&!m0#bXJp{gbyg*h;vuV<Q8C3MKuJby?fsTjq&UD*c@!sFs+i(+mdc~p
z>22$aVt-5JQ9Nml)e^z~H`t+Ec8JNj+2<zNI?g7MOOg4Roxi$*4Q6P*??90mibJ-T
zq*0{Ed_~buR-|CciLjItAt@(9QeGO8aw06{L^7CiA}r<L^k>Rb?X=0JIM_~`B8r?S
zZuhg3Y_YKJ0|dr^S-L;W0E#IZEs9LhXi;Q=jaF23OKhqI6dBgdt02i%shto76d73*
z*<x^W%ur+=q8OD5N7vkeP~>cM4GTjCx-ev*YeELPP}fZy22(B!OF8%vKMpkWG=B!k
zq5Oia=%{xge&|yadtpA9#k8b?V?RHYWZ#*(7XyP(3-qjYFI+`-BM-ZTr+7UYuh^|)
zR4Z&52Le4kJwP3i7IQYcIx{}ePV2x8#AoPqhOa{LKuhJ*5qoRiFS5hzm!a65gKXw;
zitLopdIMKE-3+C>Qj4VgLCWDE`Mt|wQqS5vbAn0bFeyKSoEl{CsLeCy6Ns#E$ODV6
zuX}69Y_j|mnAI*Ad{>QfSGziMDE3TIqwH5X&>`2`5ah}pxg3l7A+EU`W%kYd5X`0|
z8?3&osLRiFQ-)!1bttpP=KDPCX}0bBXlBms$Y@bKKc%CTIb24K(}=_6#-z*+8#VTs
z{WX-%zB97sN;hxcnAYjG{v{N-OSX3Am>(JIkz|{xxp^?RzIMKpP-KcU*U99fHYWqO
zaY~&5U6O2aD=}-80aw`^<Lq~#jT`4q(AC~V#CL}{$ftA`BN6?NR|><i#%2w0w*0}e
zpzqCg7KCjLLEm;C@O|e;<?WYgRIp5=STPQhw>vVRU%OEh**~LKUBMoHg&KS0k7%&k
zo<}zP(vPCZA@KCr@W*2mMRwKG)1Bp1VQ1a<SnMsk=5p*AyWw)|1p~O8_D{dpV4&QY
z{UGE|?BL~SGp6OwozXfgvj}xkhSE8OEY(*q*BkvgPmw*28js+QE_??kv@~mq<G9IR
zK)QQzteORO_2f}}(Nd!+z68p>G097^^|4jVqnNc;0+~)zJQ|ePHlIf>^I#a)FxLkC
z*#^y}$VjGUODot&4I6x{40b=ku=m>lITTYfNrYsQU?xLs_j4$w<`KLnXCCD?Xf{RW
zW8Mi-OwA+P=JBSrEvC2@lv}#&BwO8VcEuEXSt^%eYQn(}PcvbrWbUIWre;@QvtwzD
zB1I078Lyhq@e2N^Sukv2SlGglu-PGDmxqQ8-bpjYO25RtQ89KR<mrXe=3#3Ur&w#L
z9EvQPS+`M(V-l=dJ7=2Xx<``j7p%7uiu9IlMm}Mlkb2mP47WpFLXku5D@SFp0Fm6y
zlk#&mdJ&`ko}xy%y^R~E_y@I%L%Yga<x$-2AKY7tD0TxSdkb4<_=*%un<xf)iC|aT
zpt%%xwZ8HxGK}m?Y@O~aQcMjRvIPZ#CK&Wpn@0{shH--?l57pIL31dMO6h4L$<}GU
zBE{6~f*X?qgA8jJXN1Fi>S&0^`V>V*HqU#<>w4dW{_SqfirJ&-K1Gp<?(VeRoMn2y
zf0y*ko>_bMNpp7Ial4mJ`rYZW=f+Rl2hM$(EwCQ*DBfzRIK{P~WG1ooiB-&__)`-_
z-7^Ng+#2Rmq)(YPY|*WG@kB8-LU7tJ!qqlHg5sN&%BRRMGHuvmB=Z)Q;-@LyN+j80
zDk0CR%!37Ve>*pPyk+w!qR7Z@9_B!T0)rb{ii|9ZZ25TvUKQO1Uw^kj;}q9esyOH<
z@U6p#q5X!n%Av@7%@$2ZUt6sNML)^F&Ezs@KW(jYD86W^1bzFC5_*0)?+DWdXx@EO
z9B!!`ibsNSiy8dp6Ad%0VV({b$E8YNh2nBc<x_kbl!RmJRjZgs@gJ57Jo+%=1y&`O
z;!~C?p~x6+#M~rX3}e<5ML%NT+ql7q2}XRvMl7bt7;eObjkwAxCMfz512ZicF`E$|
zvyO@=rbf)R5nr&1*%bYVfkncI<<_cz;zO3op_m%6z((}l2d4Mk@bRGa6}XjQxXYm8
z-bhfs%bJDsC0ox)T2)!AI7Q!4$S?%fQUe@(Zyn`P+yE+k;RFqH!wiFachE2qW*9t;
zgNE5*hQZr)8h&H@SU`~u+|T<{PVIN_Cfs>f#-anzY(5ls0u^4cpkZ#9VX$C9!$g>2
zuwX&M>@dS%!GeYbVTRGgX=jU5NRbZQN>ffPSn#<c6HW$NXL%G4`NK*F4RgZ`gOv^%
zCc+GZl@1zahZzPd9W*QmGYnQbXjm9#7_4dxrOWrLO0nn<s~R-S4KoZ@HE5U!GYnQW
zXqX*l7_4g0uprDZSk<6mVVGgCs@$J<fnat8iicY&pW;wU1&)ZIqg*;V*jg1)q$4@{
zX{)ilHB3-E%u<1KtTQg{2h1>k9bl%@!~4wB0p@pM1%Im=J2A;R&7*jkrSd6WVJX^y
zaO|@`t<Aj)#fz;~5k)!*?>wFJR>$1tQ@qsr3Uq!lE>!@V?|eP#^*PXtJjH)nDwpDS
zpu&#``ufy2q(}#*8x&K01y>z?t+T!o6zRY`aZpV46<mn)^`Z5ZO_2`Fn=Oi|zJhC$
zzTUIG3MkTn`R+2sRA0g6N?-r5z6vSQfqUFgPIVT&gwyTp$fMZFQaKcN0wn{<Ru^9p
zl7+UAcC{*;p;jdmQXi|5M{#dZ5{@ly10iqCg1&O;YoK+XLvc`w``jd3hxm$+EW{w4
z4m7i#;#5$QDq9!%iWC<#QDkeeuSk*WHGI*;V8ERsWz%4A*DyE9)_FEUE=2|xMYb5<
zc%+z`N^s2`4bLov85ag+rwv8-#1v{F9JFv|LGqyr;u4@KImKHol|%6kOC>1Y2`apd
zHMqLm8s<@~+e*XSFvDQA9);T%Y{bBdsK=$XRwa*OqowjG{$i<IiW@+M_nGcL_6;e1
zYpEQH^l7$WimC2{9dy#fNjlJs7{!j3%AvTErSd553@SW(WazZ9spe4}2}%svI^I{L
ztwuU9Q=THNU0=CLwtQc?Q9iobaPj^SNBC6pR*50dVN6r_D63AmknYTO<kQ(?n1#7g
zAy@W*F1I=3mSQa6280Dxg>K!Ca^a$%X5ew1TW>$8nk7%M+EO_WL;R|x2qB+C$%D!`
zYn4yY-*iUfq6NNup{n~EQOqwjHNO#sOp5VuEyOO}W>GW+;&kA)PRl2=hk0tr%fMY5
za_s|fABSAC$w9!c&T(Ex+mwjnE_P)UQQXT?af(-1Dv+=F_7qd_Yg?o<;G*8vI*L<d
zSn~?_NL(G|Yf)sGj21;!%=CsLGYNT}{613h!<F<$n1lUr6z{QANibXq!+eg~n+z!W
zHQ*hwErrgYg>zVvDbUR2tO11eDs%TU2+Z>o<mtZc(smrQ+ihRs6d$lu(M9M3=UT|O
z8(9qBDo(MVtw6~^5Lqwt@t}F27{gE$FSUkoihc$qobW7k$PfBGjivNC&>e%|>Us)c
zUh~6IthZDVMTQHjX0XS_!5$X}dtA)EJZIw-Q~aZNdFadowtoqV?7I2(_VW33f4_B~
zpvW-peY*at3b-Go-MeN%@1wMLFAMEHWTV@f4J%meEu3D=mz52fIKfd1o2R-%rN0gJ
zsLO%oeuLs&mddC2CMZ*zhWTtP`j@zn8wa*-0Bg1^ianfRUMx{$Yd^3iGQ|_qQWcv|
zIhQHlYf~<w$Sh6D)fH?oNx45^i+P%@f+CX?MYfoyx#OXjnsV^2PRC7iPTq|AJh)M+
zXQ*0;t9^>%I#A~4y6fjB*}8qRwWZkBRx_U>vo;Z!?POnTF2r9fbuz^)41*a$itMKG
zrHAEn)V@7B*1~)|l8Jtc^j%JW?TBkEgy~{cMRMWq(zPdm!m{-WSTg_=UkBCFnO&4*
zV;dAmth=Md!U(HtBCM`~usZiF<bHBW|Csr8NGPn&eNm$rP`tBs4p?(9N0C!h6gg2|
zMp$8kBN=#AbsRj;0J^!+Yyl=fSib*2AdaW^>+xrAk|8<|Xih3!pXIo;)~cLbghAkh
zH8Y7K$HmMyJt&6KBVs5WZW??q0lHnGr-T2XdtB`sY~k~{LRg)UXtesxS``JY0(XqG
zs<Bo%uR#38r-F_GV;OXm_!17dx0t7tprgR^&`Ma<0nHzwaO9;e879~US9<8euY>8Q
z)<rp7kYQ?V%wH97od;aRvDu8Zn@%3Zi!D`5@lsH7l(5yQg`6AalYbPC10{-VP4*Qj
z&Tpc~)>XbD#T88ybtTx1({0YV6fd+?4n-y|#|vA-ZO|NwOk5P%Vk#jIeZf2u%wvJg
zqlh9SyY3T7wvMuS6j5YkQDn={BQV{kBiK1MXq@6AOO-I<NE@*v=sWP>aW@<cwpMu@
z%}0GokI<8_S^;!_8HtsxSt2+C0t+YTDJ#TNcF<GcS^pL0V&mrqtpYDiwuLt5x_f(1
z*{?~0HK9kdD{wCRWeRkT&X2Jv6$c#^(~&;|_};*losO7U%Hs5sjMMiV8!k?<3{*>}
zG%d-7-<ddbsP;`M`uz(OuO8apS*tvXy<5sQ($YC=LpdAWw;_4O`f@gUw-M4^4tYto
zhJ!V?oa@Wk_%uCLm96L7rg&xJ+-*};+4>x;=ar2P+oh_qwI5hdm5q24RkjwTs<N^B
z_NiX&NJ3!cHrmSNQrsPtGaC}cy+Fy%#nySgBE^es)vu_U&jw2>)@-q+CJe>Yl!N!*
z!ITqBnd55)d%YcOdNT!FTdw=x28njGeTY-s*;3gQQ~X!XXM<%h{u|5Li2KGA*<nwQ
z4R+bQMx>aMZ(|_eLinY<dAy<BB1}p{T?LV@Lf)5XN9K3-HkP+e&+1lYK3c6^Ho2&s
zH@T?moBN;6my;>%^#`x*-HHowW?7OAR?OUASI)ORJOFD}ShkJ<YaU4`9%rd+iYM9i
zZk|%uxYd#-HXHX_<2Xg`59ZIvl_lA@+HMwZj%?in*31!#+%i0CHm2H5!L?><E?8qt
zkz0dj%?9U+R6>vAZ5YQ_fbQM+2F$WH=v~;u#-+%eIl50ber}8{td2?BckO05e{zxy
z-{Jh_6}Gc<XnuS6<iNYe3``5o2=``z@;!FST(O~i85%2q=3$6?Jo{`G@rJ<S3<k)u
z0eoMhwXcw$jbd6gHm&l~BpY<q(kYK6wKGGO270~`ZU*4oa~BU~t_yRNbJ<^NcamZ*
zc7`!poUA;{48_6VnPn(_QW=Va^O>EIf%^-cR2%oyZ9TB7U9a!sIJOr^e1!{U$x>{z
zR5ryQ?P+e7EE@-M9y1t;V{9Gb6j=uwUsuCk&^56abY<)XT_1ZvFN_m0jI-=;&T#HS
z&mIScEk@>g8WxlZu)(Wt>vpnXW&`a75)*L2RF~ppP~JNlHlEQANYq;gaf+NQHW>R~
zkNIIQ=>GqN4W}FW;r5kX=!`&N{a=oHb!;u&HMblT_XK6O#EK*v{?f3wCX?)(%9#q0
zl{enFT5hrvC-9`d3OQVbfVPt)Znw$hQoPG1XJ#!M8?^%x9c_wnitLCD#+A<Q*bBN-
z_JSURx6zM(rp&?NNNF-KYz#7SJ9;S4yeX!5PkRna3B_YO@Fc&Yv5bweAkBMoiWQcM
zFM!x!sS=7`S}Oksh`V)62`~hW4}m5C#r?ac=&^AuNO@vlYi_D48&`rfE-9`^)nnrW
zUytH$yQhTigT_#xgl6lcR8=-|o2cq>430-`a6F1a#-kx*Jc>9TEN@GvEG@}KO065p
zSnI`h0F34pXxwK9pok&|!t=-m2g01j4P|U_9ON;BEe?dI$_9tR+#gfqKzMp=a43u(
z#gtKLC<_~v++@h8G?aynO7IzHGFAttyn9nt9w?-+x@f|(M9foIChE@#*RP%vjK0{e
z(S!~X@==U_SiYPq?zey`AB5#*s`_CW8|<8`$aKHi!A|xM%h=cm(p4PONfZX}oTA9a
zQ6Sy>8_Lh7Dt?N_lwDG+U+N-_M|Vpl(fB@<44EV!mT^Y>>aXVy%R<Kf!!ljxV8yZm
z6*D)7x?U}vinKt%jGiu+r^kA+97c~~!dAxkn}Y_+W%O9AX(*PVbg5iQ70OU7(<62>
z8%>cb%F9hx&X@-4W^&t_x*clw_#BFyXXX}^ThSdEGSr5m_z)=X4uI3~d(1p@wo}}F
zM{7!PjHPlYvg{@R#p6(6<BKATZnP-+_0OTmaWGmG{UOOYw6o+h1=!L#vm%*>Dcucd
zVg`pUCpdIDobKFAO-#Lm8j1t_m>u98iX3306&&6it`Y7^MvEhU6pksADn;&<Mr&)P
z0LR;GHg#nj@sz`-u8hOWjm6VsgQIE^q1eu@6yuSN>Hc_9<cN9x*hm>GiX011j}2}=
zCN4#ef~Tj)!6P{mTwlhRB1gj0+k&z1^f($Uy+`Web4E|bUhIC8$rPq_*Cd%Iam9S6
zjpAxh=G|OHk_~P_MlZMk@`JNIKUl2%U<vYry$yVOk)y~A%=uVbp41VAWzapa)d|bi
zfnd#@EX70Yp<!;=+2Ejxwa!{tow%^N{+lrK`e0*r@3TL}O8*WRcJF;QhG67QvSo;O
zw#I-p&v+CkfbyR4*w_`(#aa(rc*f@<^3^~$yB{I%h9F@XXCYS1uC>6orFo0NRc{h7
zZ@=`i7nbXO7i{aoven;i_IVT!0Ob{c4X#SD*2_{@4lfs>upC})f5PfDC#)XyXK{P=
z70@jg`|}0vm%~cPO3cUk=6bJ4vUQ6+2;&s}opOFrvJ6KXm%Lc(eN0$Ra2_kd>JvrS
zu&Pxg_3<FOx)SWsW_#2pT46372@JVCy%#-g(!H(eh)$yx4!;Dt#piju*B`9H#aOjG
zuuUgx=O@#5l{I-3P*}E#z?!v5aSSMLYO=xjVtp90I0q=~t!Qyq6E<Y<Ojf$j4<Yvt
zQg$9@z6%lxn}mEW<a4@vC(j4<JMA#$y$X>dY_?SWoM@=GFxxr%!@d;|3}}93OTc?^
z(0j3d;0(F>2y;FMNtFTR8=Pod01Ww5O_(nx`k<{$L9j9f!Q2a;L!1|EyaI|WR_KAQ
zlQ7S@94SACLW)l#EzcDj{*V<06Dwp<nV|UzFN#d;k4DjVK04@pG@a9vd5qBWmR3`2
zVFEV<TE%<Op#9Xr-VYTxk7&Zr_nQez@kCrRH)#}4Y$2Sf<&r?wbhV4Mvp)-ZY?^SU
zuM}5-lJ_2LWgvi2q{x_}$RHYbut5_Pm)oF46dA_#l}NHR*aj`4I1-d7vc*(FzCp=+
z2HHHbDbmUmttzr;2U)uUiYayr19o3R|7&1t`5B2M+ncSwe2OfB`ypg@y%9BXxnCf&
z@a8U;B2x+b*mD<{(Y-PI5Y!hyvyo6_z!2w#Ledt7K;mb6+*L>UA-{+Jdx~*AlKQJn
zF0kVG6Jei6tDK6u&GzfZk?3USYQXVgXy55uapIm3Z8Zp&s2XyB#Gx|9ddZ`>S1aj-
zyH0|?ttM!gOT(RDXx=bW?405&H^~+w7)2D!!j;Hpsm&{HMf=hHoHU5rSSn6&cS|KG
zo@=QbiZ@#-PO-hsK8JaBwN#v<pL*c?Dl?FBrJp**3oMmyMVmn}d&7LqRz#8cnh~VP
ze2o^x9c`Y)Ox@2j@Z#bvME=NT5co9H!^rmun|GW)4=~(X1t#l9&}Q->i$AEsrEh1z
zzu<)fYBm~*zT?2>%b3>jetHi=<PW!m-1<z03JV#MaZn|Yaaq7ipfu~C@&zy?myNj8
z)(&Q1>&(KX5mqISVu_`4D2@ju>zJ)eeMO3YZKBB5BfcWVcbX`&^?|QQabpujJG2nk
zjbYX>mtw+FMHHF1+l|~LTetd(6dy|onww;+&R3+!#Kj|9pZSUuQ@auT4hg$)yfsWv
zWbS4@QDow7(1h*ATx*+8F*RuL_aGF)fP-u%5(n%a>nkw*==&mHg<`d(@*jivj!#j1
z&r)%UUsx(IPdTx!wJLFnNlWEWWd5cr%wUDpic@^qQaO5-nVVTX#q?1B!QCByoYveW
zQ|ttHCL@Zcfs)0<7JvN2C{mmWMe|Txnq;G_i8UG)f?@M?*w*e@yk|y|f$7*JO_4FE
zYTZNF4cHxMa;7-ZQrYx2*HUqc3}D^>;G%_-An~VojBkp*@4%j239BE0rZW`(1<F)0
zBgw`_kTM2rwYIlL{K;gfInG0n8i6J)iVW1({IvFL=a+%M^!u@2M%rda{s;YT>9Jq>
z_4;Mt;9lFNrFH9?q!AP9=Ne~hnXwr>nlbZ!?x33gw#-42W`2hQ>zp0tuS@9Q{<`;`
zEi1nm=k=&Zk{7;04_i7jN&}7qR#3J;Yu3Y?>uj)>W;7|<%-s&hx+bk7C2WtjF{QYt
zrE(|^0cD=OYAV>s!z_@w!PZ1OH*zShZlb6Xa5{tFPvg4}CzKcZsZhMcQgMn5Z8oJz
z2*r>g`xJd&U>%)Ikq*tvvFeH>TfX~~gYLQJ;LLH3f;1KAz8E_gSseomds)U2T8MkG
z-EePmbzAGYi4dj#7i?`01K$U3pDyN6{@#W6Pl4@_YX-0za8F=wpw4#?;vEY7pUUS5
z#6KCxTavD=r338$Yse!Hb(|AX&*u8C<E_Qv=pY`-W`Xsg9rNn0#v=>k5(5?hts@B9
zUk>BKUvu{NZl!)L>iQM%cOb|68a2K;-)hX?mB6=wrKlUnh4WL}k3$`10_OnrI7ZFq
z+c3_51O6TO4`2iEC!n*fWUw<(=d-Y#FpGejfJbxxQU?2NC&Yok!+@JJlp>m?*nVdN
z=L2uxwyez7fxoqbTzD9GN`(K8?M3errT-Gz4ZyE~4*c{19s-Q=U#|SGkMOtC7W!Mh
zqvX4&li*D|3H}whVHas{21?8SHw|{D{Ym@VVAlZr68JUHk0jD>;9DTSn~~Q85&5wn
z5A7`WheB^Sko{^MF~2q-&cZ)wkLm05L`OaX{sz>L!1_If>lk=9umQ+lH}X%kzX580
z_kn*2_$%=D2>s)>5f6318tiAUb6-;dGQeL9TneO}Qg=?r{&E5EJQV0^7D^ecg<enW
zAN_%2fVJ318Y1=++J6i``@?P!aES7!!aKjiZs#qGR|&m$fz0dci2Uw?9{0_M(SB(Q
z?K9xF09XRN0k{;%I_dt=emCfi1x^G`1=63kAB5}20-KB1aD2>jQFwyjSm3EZ?SE`s
z^wJW71-XKyz)1ztJ`?Duug76u3#<da3RLRO2jD*g{s{avLjUY+iGL38T;OFu?LPx~
zvmafM_kf7}v+~9Nc;HvSw3CI`{wpH%-igqE7jb_FrWK0c?Sb0=-J|6C{lJ%iZvnOb
zZAGG=EEfEHqTtU!t=|BBXAAXrhTbgT9N?uu?f=jci9ZaO11te*{Rv}5|1{t%;6=b^
zCd>8bf!e;y1i5}Xa0c)kpw@4Nx=a98PZIkFfLgx_>*;=sSG<?#7Xxd-cbFo)w#V^i
ze*1%b4Fbl1{5HmTv^7k{{c4|<a^*_gcU}#=6ZjA?4d+S$@Jrygz$pJWBhC}Rjlgs~
z$E^iM#T&eZ{`Xe?m~Tdey^hxfdV56ZU*Alf>YJ&Pu1_E6PY2EgMvX&*@~{2zdn&VW
zp%is42WtH?5Z3?;phr8czY^Eq2hKsg`Mjg`InFyNy{pmI`cvSS-?@DTdJPf!yMgZu
zi~+UXkImTkQTDlLPX|5#Yy?L6E64REz?*<cpzd!Wc*bEr8At1vV*Wh@<ZnLX%kn7w
z+0f_r>MllmG4K}Pt-z(g=KMEjzcc1*H(+nz2%ygQ6s)_^z}djL!1ICk0C}JLSR3t0
z+E*z3Mznd~tF7j?7G@0mRRN>?UjzM{fVTqg2HppJ2&m(&0<j6W4d#D)pw>SOd_J(M
znfaB0>(u)@+OGq(|DG84IFRor_)FuoeqZPf*+PBpYk$Xm`7+?YfI~Y<gz3O%@qAm0
zgYFIBGCa@ee2zn%OMs^WD<bOu0{B(H*MRLX?(KmcfjYn2kk4H}ozHmK@%`RyXfFk_
ze=nh*uK~XWYJc~^?qi^~)A}t@ryYU20{a5{0}lXddp_UXkLQ_pfVvJtk?%<01fU+b
z=KP<J=a2z-4>VZ47b-wo$1lTt(f*&pbLpqR<*<JTsPzl*ex?+7KCnXvttsuX;7ft$
z12;wJ^M33sxZ^on8L{54h2DKY>Rle8e>n7x295-t0-Oju16T@N2-HCSI$XF3xLhlu
zoxyzxSOYvA`~6HHzj3eKWI=yCupavq?@w#7&+uH*_Pn31g8g8`8yRulFuzx!9~Fo1
zZRm&n(eb%&79r1xz$&2D=kL2@znb&!pdQ-+cLnmkNBch(*GqttfV^)z8+ExjqCV8)
z{Te^T!@BBttW!Gt{RJ2`-iP2k&H?tp{yPk){a*^bTY=j_uM@BvkbboN5D-gv0pnf>
zBu)GaglB*gpm$+}{%VZ#81%ae_!jUR;07S$5PP6smjJ7Qyw6#Uc3MPz_5%M7@B?52
zuo1}jZxgVePXY4#KA)k@yoh6PPA7pG(2Md%J7O00_mRNkfjL0x5o^HL1NlC#OT_-&
z9{c=Wz+Zsr5&CglF9MDORsxv^@nZ1RK>Cf!hk6e~e?5?S(J%2h<XH)90B(rLe+<s2
z_kfi+cP@`Oe|81G8?Xl0FGDgY1)dFLUc?<BbOLq;UP%RoPdpIwnCF4-0@pt*e49rE
zlaC8}$|?V7`xXz1p0@7{KbgSvM@4Tka1O8<IOZ|AUJ7h3{xirs3-PBuB=&Qb3oZdJ
z2io}P*Vg(kMVy(yIlzU$LI0un>=(y}{i=Zf3xF2`Zvv)a{8;a(IymY}$2$}L<^k^m
zHUfVH{t9Hg0T}1M10MiB0gNw`ammDZ#DE1r=Bv_kbblFV5&T{Tyh_E{gm^m662w~$
z)bUuy64X=A&+RaOj*nO$OJVme@I&AyK(4P0<jeW4{hkux-_GMLTt~WpbDxlLxDYt<
zNok)1EC!AP_IgUL_XTDF2LVfg^ME>D4dOfqd;}PSf307Qb$!Is5|{5?&+a8{t)F;C
z_$9y^;D+afuU;Wo_`Kj);9Ot@@B*NtzD7m(zZCv!fQ+ZioeN=q32+^-@3S#awLfqG
za15{k7=wStt8XSA^_W*3`u_^B0oZwE%yGZE0=ol`1E!-MG2oxAAL|k|4qg%||74;*
z91o8B6}@69TE5r|;z;0RU^(zy;6fnpGpo_oa2ALPAkWcv(0(7d4){ATBTa-6z~h0r
zz(ydS7yg3#ewbUJpMlUn97w+jw4?l5M-bK^PFhPLt_JcsN9%XS^|OKe`wQi0YyGFe
z^G5_4sn<$0TLIewwLPC(_~GY#=*`+neSX@xs2TfW+^@e1+yJa?Et&EA@*B|B`922y
zr-2=zM|-W`xs5Pgf!_m9!2NnD@LQm^{~h}K;Cemq9})VC!9S(+qWt%O|NDXb{MmA}
zp8_@j`Mklrb-o8c?}{zdFTnH4G+-5Q3GhbXEkGS_Blu2u9_b653FP<B>(JKroj}Y6
zUJkrgE23Qu{44Nw;9Wos9kE{dmw5Pda?gO*`U}8U0j~ny9ihK?EA_9ze!$OZ#;{(m
z0P_0{kE6}?{S4ZxfUg5}{^P-)54;B$<uA&9ma=~YZLR+z);mA+{~FqF1J?n2VZCbm
zRahs7Vjk538-ZGX4fMNjq5gC{Up@|e8u%=*9?y}Dz$|<|E&<f>=fm#7KWWd;-(}$W
zbPS$1X99IR>i>d#sDE07{xtY~0Z6}m4z7mX(-HPZWk?1ifY$=kI|@GrSOL`eR)Sav
zycBpVuolSg3-Y|n$Nb{=+4%X`Rv7OZj5j||^a<K~VqbY9Vt?t(d53c%6aEGO`T4EV
z2><bB{73oYzN+(W&L8t>i+tJxy8@fD&%wN`1unt7el+5J$wA<c1fBsbjnE&3`EV+5
z3UC_mOyKK447Y{f!MDZy*$#MS#C&=j{0iU;z*m9o@d9Q?U{B!wz=6OaK${4JMj-F|
zGO?fYes40`mqhIU--FM`zCHoC7|8E4a^J58UyAu&4SX2*D3JU0^Jw$)j`e823FME6
zu0dP(kNNS(%Qqq49ufI1Rr&p=^I`ln#Np=^qVnPA3|2ya6|e#LCGaHl|397YD4bto
zfu{kN0d>9O*l&2ByB_TY5%;rif#-YZG~BoG`>dVN-WjOl@$>ZjJbWkYYr6uq{uAJN
zf4UOwI^a9Nme_Cj`A^;tYJUaTXU+v)2)qQy_rYBw_7n1has5!>5x_iP5m3jU4}K!f
z$2q_aIRAbFw#9kZ4%j*3{Cg7qo&mlBd>!~9ForlfpHtzN=kr{&Z;6N($A0(>a0T!M
zU<2?{>~}iex8T=fe>)gA)K$Q3cM^-Qch;8D9t1nuQ-4p`%>!Nl`-_2VBK(bjze|Dt
zQ2y`TN`KmZ`BvKZQ~hAxQT6D9@6+c1i-5YW-=My~t2*l{KNVqLqwF2zsqNo{{dQZZ
zpSg>8*bjIh@Ni%ZI15+>d<3ZDm+UIcc;F=9mB4*=lj}o)+P)fkgS*I;T3|Z#GlBFo
z3hl)a{=SC4?}0x@_+O7W+P}`P6ne9P=Kya6>O8f5<?h1#4fr5%IZ*3YfnNf=3HX-?
z{j6@{;X2@rz-plOKLUILm<K#HLVpeTcYyB!_uNB!mUf>^!To^4fwjQbfgb=Hfa`%@
z0lxz}>g(v<LYxLX8#os@a4)%D0GtS%415T<8u$_L6QBy`M8#Qzcu{d?z~5QGGGJ8P
zUnAnb+D9@PySLy(;B?>>z|Vm?|KFRjU($?y&wa$>>%a!!W}wqouD1YY0JDG-fKLH+
zeuE?Q>LT==eZ@mt;P$}1fkpl0`dFZjR|&n>fgb{$exjKUY!Bq0)}Dd(LSQve`@a-%
z9|1nTpJ>zqwSFD+hT{4{;L-^FDF=v$8sI~~Wx#-c@TU)yD^<X8gQR^9@FJkLA2dLi
zQ-QO92SxbP_L<P@3ET%b0C+3#4&Xh&^+4^f?SaDd0QLs%4b=LB!Dk;NSMq^{z{$XQ
zz-r*#K<#fH{JjVK6qp75fxv@+hX4-)GTuzIwf}nu3sVPd0QNsv_#wa*he*2-c*3F5
zE&^5nh4ue!&VLsCHRu1-2><PnAM>TZbK!Ro?3k~gnMku>Pdmnm>d(#4Uj=MV{}IH0
z2lyrMTi|BktwSWAg2M%$A1b&O*f31mwMPoR2mB{+Gce;QxqdeAb6_Lz{G;XibwFwP
z|8_(k3spW>{lA<~U*uDa`b+|z2AmJ{dm_?};J*Q0k2<aZ>iTK>?_oFM2)RN#j>qAu
z-rBwtb``+$ftSZbvjBBveYO1;(EkzmD{ybvYkl%Z<N8S8i4pq6h(8556<7|`{$GTj
zH-T$`zX2WfwHbUX_)7=w3v6ya_B~7-4gg*c+zjM63?D9f{jm;~t98*1<J1-NzE8yb
zXPoiye>Lzrpz5CU;xWRUHbQU?u=Pl-DeYSF$4Yy9V5j4xy&PBv)LyjxzFTSE1%CGh
z9s)cUcp>mIppJjaR_agNO8t!ECE@|V(}2@~vw>#=%YYXGF9u!)Tnc<1sQZ%({uJOi
zAmeKN{Z9}k8<-0$0geHl4lD&$0-pu00&4%&;QtD|19)$Qe*2TeLr35UU;$A3FQr~w
zuGA(3$7BoE0qb+5y&hPSEA2Oc9|48+|GlLd|Hr~#CGbL^j(6M^#=B3&I}&!Z_cIfz
z9{O(r-`h%iT`%T;Bl@A^wM9Ky-{$mL{~qwiez5-9|3BgXd*DyN-+@|x1jc;?#(gqS
z_p2KAjLUJ?{&vd~W-s90z!>lZU^Q?l@ByIq_eQ=jYk=<pKL%?34kruK8Q2Xt0I2oH
zgD(Z11zZ%N|2X*HfWM3qk7=i9&(a=HAQ%H411th+t8(xQftLesi_rfT{087=V5dUu
zS=xJn-w!w(SQ4Q>AN)e#<-pq_^p}Bu8u%vgn+W|qQNJwULBQjIx)-CtPXd+!uZz&H
z1OEzeHSmiF{k<`c{ec64BO}IlBKR|a^MKbz=r09d16%?8Fhc)3@V^3E7fD6B19g3}
z!A}6r0aiumlV5`CcL1M>(EkSf55Ql6?Td9L$P@hDzypDa2>lZ9X8>ma=S1jV4*qK3
zjlh}+{pY~H4EzW1#|Zt_CDM=fz^=f9fV$Ts!6$&Dfpa7D7lXeVcq{P92>sJXOT<#(
z9AG){T;R1ponPr#VXgz-3+yye_yd7+f!h9i=>G!T2;2<R`n|>pv;BC%(q{a3pCEd@
zfqjAff!crTQ-!Glz7O0495_j?zXjCxw7az#y9JZArL^xnO>pW|T%RVmJun6=0L}qk
z2>fWe=&uLDiw~!Zcp&g7;FiYo9f@?o8G_4z^}siQ0e$4fJbRUj#(qGpzvxV1ZUFuO
z96CezM&LCwrCl{kaHrXVy8^odvw#i2!Dory&%m?KmiAoWeZb5)!s~x^emb9cGyXq^
z|IS<Je+>G$82In{FGGG6!1ICM0GrFN6Y9_L__OtAKUi-aH>&=RH8b8EU;5YMr{}}g
z#-FR^6UQ+s-x|!{cYuv*-kyN@z<F4u=3yXz^q+O#T6?_?(h-k-hGJe8M$FGf@SA|G
z&yftL1FL}fb9LrT_0EFc1<FoaRl!dk@I&CjGSR#gSXD0VTY<Nqr#(qq`@0DGw122V
z^csP!E2TXt!r#NVe(<@X*9&?v;EBK}`|0z<?ggNO{^<TOPxkL7<VU|z{T&E@Cj%@0
z!~Uz`uPy4>5!eaX1<3rRxBkBkxSoOj3<B!@-5gQ>W%I??r@%(wkHBAn>8f5){;Dq!
ze=h-F1HJ*Ayg;s>0rYz!(##758!r;fgx*mR`c=^H2K{}3TWTMN{wcsQ%3kMp=*7Ye
z2j&4M08a-_1I_?m0=yh}!zJ3Yw6*^t=x?q6M%Zltrbonk1^m!O68~7>M4-;Ha<MRr
zfVDSDd&EszQ`$W*6I=_-xLn#jt`OXCrQp<S1v9S~JP25HgS5{BE=HUh;K#szH;Y~z
zcph*m@I&Aiz#g}V{@%cGz^i~y14YaKcL@4%EHE2*GO!5v81PA8Ew7^=V}KnIrwcFv
zWIldmk;eTG`!B`#%mkhbOy9!sYHoa3Z}wC7?;gba2-xE)(HL>H;8Gyx%bu7g`v9}l
z{Neog7v@PzjDLIJE<ny7ozGyzAAq=xz%iJwT7L}m9|S%L?7fBd4@c;+zdGKlRl;z5
z#=xF++86U_Kj4<ySHMqm_G2+G76LB?UIV-pcsr2m_*u+<oe%Z&zEFvJe+)al?~GCV
zz%Yy}_kqjN=DOlK*YUezKk5nG7kDJ_7~o8xw%_YIVYrWRANeAp{?{c%e{{9rqQ45>
z2$YupFZC*MeLXPqHqkj4SOgq@hwz^QeNQ6YUoE&1xbt76Jz4qx8ttw1|1kVM4SWl@
z0ho_?C5#JP2uzay59PB9>lM)-M}3u|j)&ha7fuA~x@O*~4AG>0)}OV9-MPSvfOi33
z1g;0_EE<tl=~B5;4{QLgyj%GA-vuWDR|2)a7O?9K{OummXtRa(2f*$?;32@nfI8lg
zyM#FfI0je>)cSASD@-Hs+WVxv6j%q`>we)&fy;pPz>J6FdM2<GSpTT-p8%!h|N9>N
ze+pa={3q}ypi?6@B@YVD2Kt^v8VJ2y;K{&IK;~bCysrXY3)KG3gWa{j>w$Lwwf=JO
zYk}_qKZwwO@B#7g0`Mi^8sIy?_klWI=EK7D0v-pf25S9T;1>cH0ha)81l|JF_B%Zy
z%oo5zACvYl;1jjdUImnv|8F<g^#Be89tHF@MS1}IYTz2+I}!TKtK)L9zXEtOkn>RI
zy&Cy{1swUf*uMZwdqUdXfv-Fz?GJ&v--kUb*Y&@nmkDz^@H`;%jmmEY@@g)h!L{OF
z=kqoAsn5vut<7%%@?`u*)a5<YqXGCi@Jrw~K-Mdv@_P?$=2wRNo(2B=Z|1w#lhWVk
zFiu+<|Jp5#-y44WY@vV2#{ah;?2ZIp2uuQfO_5H0T5xc!U=H%+xC-n4+Y)*`fqMb>
z0XphyTEx0p4ZafNei=}iJD)-CEbRAON3_%WheB^S@Mz#@;5gt!ptjF=PMH0G2LJ~F
zwSLPL!gK?62lfPN{U5<^0R9eavr;rW0C#>~+6^xV{s!FRWocIf4}C@2#{i|}|4aR0
z&_6-h`<fyR!F8>F5qPb?8}jT0><7#O4hJ3$JeH{X)u~QAfBBN&4l2)DwATZF0uHYi
z{WwtPr{kZ5_|E`W0N(&=`(2S&Z(x7mK;RJI7eJ1~Wf9}i4SMu<EZQdlCjzGfbw1~V
zuK_*`Tn;=QaW9I9|26bj=cu|mu)h&_H?SY-tm|GHQU5z%lpgGean<&^e+!`(m7msM
zyp{S#tP&4D137P^@_!TkKI%2Gdl<-m6u&O~M4-;E_p8F}1MCMJ0z3-%1MtuK8w~sF
zw$k6rTd6-6<E-<1ETaD>u9p6119O3&0IT1U>z&^gi~*~Gp8yYBBiHr6_bK}yq2DS(
zf7w68!%M*Rz@LEHKmW$t>@>N;-=jIMg|zwmM)`B&%fL@=Dc7e0rvv%(<j;53k)+Ld
zam3@#o!`((uGaz^ft!HaY$MnCdp!0-yMKG(W55%3koL*I<-nD|mw|5q({>X5OrW&<
ze|5eckq`52F2Cmdzr2O@yc6|pt}cG&B7L)!{&k(TKlb}()M0pA(O3hF?<nn2Ky5!0
z<8~JC9AKB$T2tD)gXiyo-x2ewU&Q>PUODUrY%6|N0iVS<zYgrTvs@nn{9zYqGmf<U
ze;2~<=RoFhOhi6^ZzHx30v`cB4ty543dp}N$G>}+k&b+TekLLf0v`h&1?0H2z`E!K
z<hY#LN$ffAA45GpK^?Y79mb<yS4Q;j9K_oQ)b=`G9j`h6_qP)dy|)*fg#2y<Rs){~
zJ_CFaI0*fC6Ig(LFzyX#N9|YqJtixWM;-8G;D^9<z|Vj?Z>M`M?LENr_n|PKQzGii
zpZ{n7o6DC!Pkjygdn52wpw5baukQ-fx1@t;{0?l9A?*y{!N8$FuA_CBKc55nd+xce
zaxfkRK#n8lS$E{u8_03f`Ti68Hh)f@<H~i*dCEFz`xuA?z=gm|ff~Ak=mYEv?5`D@
z(Hjz>zZ>`-!2N*-0v`r`h5a8*3%o5^1Ll3;beyket8?8NHlsHM@#X=e;$H{<{h-I+
zC$^>b{C#N6*<S?z{Jn)y`Ox2P&E%u~@%P&3`q1C&=;v=ZPcz_uN8nCCZO?ifhwFJj
z)<^5#@Y_(2s{WUtvr+ItU@fp7xElBm;Cf&mXPD<F3pf)v7kFZtT-Wh$L;SmdYk^&m
zPdDJ6D!(07{Hot2@AS=reSmEd-{yxrqVi!L_aYC*nT&X+0jC2Q_oz)0w;H${$UH_M
zAKm}H=+`+w*2{^g*KEY)_~`LCS>>@7ZPtZ(jETsHdDp>?daR=!U*?$=kuT@f_voLV
z7rGv$s5{4pzlZg2y<%F`Yu|^sEn3L@sst_pYNI;n{|anQpMD3z->ir@4@bl+Y$<tt
z4|Li}yB@f3TWL1}J8UQI{eW@cBH(Ah-M1G#-9N?~gLw0S=K-sL?*l&uehJk1MddSf
z3-h@Y{dy5dJN8HC->Q}LYXxw9I{JxvY5f@VZrehA`t99D{KkQ2BhFGF<Nmwjr1RZj
z8;RQ;I2d?7@Iv6lz#8N?0eO|8j(Xm-ZihOlfI1HQGZ20b0v-;epC90l<5Z9FR_>jL
zkf*LE^Va&Spr6)S@@)ld2OI#Tzf$x+%HPpg2k{Q#?;BudM`;fR#(;}~HNXboZo7+q
zA7Cy}=g)Y@A?{>g*Y;wc3G4-2qT=n}RrKP(xxg!db-)jR%x5U_IjNca`XMgsv7woI
zu>V_|7we_-()D6KgOFDda4c|4C#lC#I}26<>wxQlrMt-Wm%0en?<UB)J)-LNE81I|
zPdmihRmDH%KNSCL^!Fa%eZXbFb-?d-3a^Lm59>Gu^}HFl3Ahc$e|sRud&LgozYbVW
zL|r!kbv!+vM(iklIF5Rp=qGA^ahy1xqT-#JA#u`BpH{%_fJXw41Lgq#-S}rA?nS^W
zf!6|W0d54g#CmTBWIYyR{v6j?`jG=156swA_)N_27_bt!6sYT?^I)7G5btN;CLrT{
zfp}vg;&7emcw;e-xX*6wzN-DjaUaJ0miKupBkuS3T47f>;&bko+A-Q=fTsgz0+$0d
z^i31yR$xX8X?FvT1fB@g_I%IG_uJZD>z@WcX8>maD<k~h1)jej^%Xqd@%N%OqP-EQ
z<1L5%Hn`pnI5a|kb%g%z5&9#*UkF?T<nJkMF27SE>~99&oV~8gJIYSigMSC01n-xZ
z0v`ry{mI~O0rL9?8zc02{Y_lw-vL`2q0iTHl?Z$RknfMG&@RCIECsFx;<AN3A?*ds
z0uBNm0-OV+|69<$2Ur8-`=Kq3@ARK}&Ka}Djx#uGhTvpMQ>M+DIHT0*KW+M~iT#HT
z8`*Ex*hx<R$zx|ucKS~^XPPk-oHfJgKWW<R{%1{`F>}iFX-yiV&9xa5r;c?EAeBy?
z<@BF2ZHoDK*2FpH-&0M)T$?^&?5wd)|A~`FpE_gg852iOo?vX*a{7;-HGRfR6Hwr^
z@#doOIrfYx<4wTn#*O)>zvo;0jGJk+$4@`wjEU3C#R(I~&7L%R?2NI~CQWp`c+Dx(
zPMuD9?6`3=CZ5IC)G5;@Qa0tFICZ)SCbsZ|vj1st-}kvw!)_-nVy0!jK=6H|kfKZ3
zMR)$RG5@E1*A_9;GJnSfM5fpB|IyRheZS~_%Z2u_7BSOuoEV5Bu|8>s*ZL0I2N_-W
z6*uh{ZWA*t$61K)<M8)`yG^&BwC6fH!f<W~+OO>pGcCtii}%eP7|3IT{XfR=n>TNs
zPW$yc#yrjS_<qxSu%jF55p&J;O)2(uoy5Kl-w%nyo;70rpq=qXaDCHX=bd8SrOtTo
zUF)?(#}#SM{-0sERQt8CUkm#zd>_r#aqFz@&o-P}SA6@)N#7%8T1IaV4;;pkmY)aP
zGmMaGp9%X+*k{o(3|Pkuw9A!!yjRS-67MAnYi(tuO*?5h&iO`2jo+vDFz-^I-cnI~
zn~Lgo-jTQ%_N;#l_A%HGIFXuyv8GMu3e$Gu(|*=0i9c(WFg;O!nz8?ECzbt@a<N~6
zKPYfyjGBTRKeBfj!Hth)<~X(E<WjA~*Y(o&HOf8%_8D7fzf9R@!afuBI-YJnVeH*0
z!u<Qdz7OoH-OiaWYzKD!vR^CBwbcICJtO_Edq(=N<FQS2KMs>>Ul03w*!N*#ZW88;
zcEmRgmul~<MEzGv{3AUp{~zW}#{C$D>x*G3VSgm-YqO{+7;D;eJ}_-JzEX2&f4I_j
zb=@!G=P9yx0sowb_%&@(S>KNA&qkmxaxNb5iuC`$cLjM(>$Wh2=3L#$OJ&6GoJ31O
zt(y^H-yuUbo=>X(*uE?5b^U&*5&Nm9h1)Zay&~d|-c1U3*Gi6Tc>V`O*r$IaA26s{
z5FVdwM<X<iAXk=8c6WQni7`>31GRQ9Hyt5S+%QAz#~du}Jq@_ePMr5V7u@YFEPlZ~
zVn3_5*z;eN4(U*A>1Nv^7P!{ZWX$`N)Qc@mCb1T=RLYZEnq8mw6{#0nnq7tW3r+df
z4(|h+@@*WR?@jr1hv#-vzOBRaxGBG_J!hNp?Hrz;P5JE{o{LTS?H!(XP5Jf?&#|U_
z2Z!fVQ$EAtxzm(4vkUuiQ+@}B=R{L}M~C}=Q@)eKeZ48alf(VGDZjJBeYh#Vi(~iK
zlnX7*T?+Tj6xz%NzC}o7-TB(3DS=i?hu=MKdby?3wJBlscaPw^Mew*OQde6#nTnA;
zv4yjp^JA}AlWXpJZ{>Wqxd~|+ZiZ=2aJ=^M_~3XA_W0m<9c6eoZbt8zk^HYwMs)eO
z;@$gCm#<R%`G!w3<FXd#8Q1-l;2XemKdFWvXRnx%{I96~y3eg{f78|ceAMGJoV8C5
z^PL#!1&<H**FC@8{2O~U)&IiqVRili`dP^HYTVy#0$-mMGm_(+<^Ah8olM8W{B(1-
zHWRn<h?uA8o`de!An;YOnAbkV``2;Y_fB4(;3tAV9sHP~qJJHD_x+Ts?+g=uIrxjg
z*Mff%y!*Kecf1<axZDqZz2aYjpUUClpPyfN2Yl7h!e7uz0(@!susVE4{o_UdZBchN
zf-gNmcz6D}U)!{he$|6tEytv@qv75B)1Dva=^1nHt1tK#iXRAmq2dn*?<hXc<J&tM
zh7R-m^0{J~;oUmd6vRBf*!$OUE&!iVD7^ce=zd)Zp8NUsLOXYYFNOY4@DCZ@?bjIO
z(+B*E;4>Bfp2xR$Dvul{nsOWBd`kX!;obG`etiqRc9`(BC|sI3)YBZ}=Q!a<h`Q4W
zd<^>T^P~H<A9x4;CkX8fH+<N*k2Jhnw~Q$<Pjfu<PxkzDb{4)c&SN-^?&pDB{YvO_
z-&g?sTGXKqe(o@QSlqwCk25{yX_g~^`~K4NUn;!2Zr!g{;H%G!dF>wH-;MD9G5yaJ
z{Z*co<NN}?9(+$zclWEcSs!j(=d765J`#Lq@bNjq^F4Ae@U?S=m(elz+u$?i3ICMm
z&2fes-km>7P*2wFMDSILcmM8bSl!(Br*58O%EbSJ@P9h^%yQxRxO^V?Qt<rylncSf
zDn$Qv_*ratH_vL7&-LJI6kiQ~sp9|c@n+thD3y^Yj`JAwmn;3}z}G6?{rit$by#h9
zw+@+CiRa5PA3lrF{~G$WSBw7h=<l!KtF96LGc!NjueRG@9$p{w+ULRlZs0R+6utud
zK*PIrt5^9S0=`c1G5D#vN&K|Nd`lQUtiJ`GpIw{`wf~<A|BcFjDfsn@pAWu4@r%K~
z2OiyWs===XZ_4F;-D&u+JnuKWJ1#Xf(l2z&c@lgr`19cBCHT)+Kh9&gF5U+3DE@2m
zb)xTNilbKMG10Amy3%()e;$@+uL%AC!@K$O?~`{yp2vIs+dI{{!#rk3@Drh5{XooP
zHlqWT5&joJKlZff?+HJD_562sGFASMMEH3og0F*r{(Wuc|B>gvy;F<)cR<|VBK)MA
z^D3-vJ4Nu_BlvwH_(LN2BMtA?zw}k9j~Q<7D-OOAJnKIWe6`}w1YfKCRDiDsKeUDT
zuQI%Q&Q=vP9pAg4pZR*sQ~Xxc9ry1iht=n$2!3@0zb=CR!tib#vfh=r*COtZ;OoI>
zfZq(h0laB?U+v9&bp14fZ;gfB4ZQPy%+p&S>dpa%ck57HD0RT=b7v^@tDt`-{A3$G
ztPaJ{Z~RL9x0BZp&RO7{4Z`0GKNlN5&Dq7tRQuZ%;A7yq|11HY1)g>Ii^q3%VpvDU
zsrPj!`7g$KZQgf1ZTPVKUogB|w=vF8Pd`W8IP1XIg5L-Je*)i_Ci=TWe;e~$;`+&G
zA$)(#H}~%hyL=3PP~lYQyMM3P<!itvpr4?hHsXh`!%hKT37&aQ0N()qCitIE{dDm&
z75uf}8^QDYoOgh)-&XYh0)6-I&$@Y5wiA9xnp~&@U%Q>~{66@H)bAktM)>)Le1`C6
zz|UszjU9#O-@V+~JZHFZ<GTp|GW_ffKC`p%pMxI^K4VwmS?6r<mEfnM&SMSl&i_NE
z4D&qT+gHw9=r`^re!9W`0{ZVNd@t}<f{%gcI=Tt`81RMAzY}~d_yfQ{2Hx3S{EttQ
z3ojeqdoDnpnb2PY{nBot&*#n0!DsCOKhWO<z8XB|&#q>@x^;FkMW4@8gTRjg&vDEq
z-(B>3!v9&|tH3V;zW{t@kEZ!tL4EMEpkD(%V^7g<pC%Vxq@SL`^SOI9_*(EUz|S}I
z-%Io#0RKDqcyHm`Vm@qZO5oOEOdsLThkj@9jo?pClM9D{kMAS;Yr!86J_~;^<tF$a
z4Zgm==$``pIn>V*o^dY&UrQePw}X!#Ao~1yil@Lg4idf#;=TqxW3ce|p<f@-KlnXb
z%7q`nHykSZn@zpkuNLOP*{x5*F~YA%6TU0>nvudULfiwu$Bq~NGf{Vr0iSh(@SWkO
z5PbYZ;lDHYEAH2H@_E9q5!$JupM2r32Y;vG-SyH{t?OFo*F%4l*~i_lwe&Mu{2Yn=
z{|UZwtnj07Ahk0uBD^|G6uu4W))#!^WZ~bz!F(|I`cmQdMciTFopXeLBu(-u1YbK>
zc>X-#Z15T93;zQ2F9F|hf$%#ZpCtHrQur*yT?XD+DE!D>B<@Rwck9+y)$L>GSKcZ5
zw_{ws0iSiR@K1;v=U?C(!T)_nxv-ttVBNaaJ}3G;(uD6~csFhwae2Qw0Q%L>ivF(9
zkAZJoA^bjOoZPQm_^E}Tg+e=1z*n9&%wu>z<NjS;H=ois#m^BK-;1H|zz^Izw}RhZ
z)#q{esaYd_en#9?h7Y^nSOfix_e5X*b)3(@k5T+j^bfvwX9>{C+z5sFZy&+$9>MQx
zc=vf~4(^vQO`IVS`h0HU&yn!CW2EP&y_1RW$79%?aS?t_H@sVaeqM1_n)HkQ`ME{<
zzX<+g%6}4m>RZV8o?y;7_v?v>xbELY4y&8{_vYO?RI&~z#JULme|q}uoiQq(Rvp9r
zcZlG-NAUX?KFtY!UnXXFC*=DMi3omz=O_66pfe1=gQ<V!8!`hYxo*wZ1%}Tw_va4o
zw}o|_%b{QTO3b5X<H8N#vo;EU4fv(t$J7cx1N@_g?`Y~=``tK?!LU0kJ$)#pz#90e
zIxgn1-{IO<5&EW6p8sc*|D6o)_O}svVwyNTJw7EM#DgPv_xBT+{{mlQBlxpC-u-@}
z%+D6EyvXow9iCNr-UPl5JlEsh@Ke_-)+F}*(63j1RzN@YyXbRV+~1qv*1@@5__uLh
ztn>ILuD!-j^n>RhuIsi&@ch94&M@5peAYeU{}}MSJRXe{7#zVLPd^`vpZ#G|06tTV
z<D>{bm4<igyjIooGLJWh71nPi{NHSN%Ah>BCxWjvyeU!O>x~HhbHls&G$0>r=gtqF
zzPbNg6Z3qH#6)Rj9w@^6clG$~oa%Q({}5!*GeZBs2tENnRo!KNu7aOaBJ^h(-pzl5
znr|1uPkevLr?)As`*l@>pZg;C7d<}sefHPjKjUvP&+ixBzmD@B`1oDIKZXtEOT)W)
z{;Kl)+3?*BUy1#V>#O@tqF<%>!wv7w^H`<$UxUFI3BLLz;U^-W0*^-{1x|;4<r|{U
z{paim{fnU=`%v^p!q;sP`j1BNuSD<-5&UM4H}56z{@mPtcwal31s*mJ`*^&0F6bfi
z=OXC$2k&4Xpr0ebSAzc>^E?sZe**N!z<(M1p8-CjCgw3mg0C=qM{_?}St9vlg1^$^
z&1(C8oX2q7{|Y~)Z^b<RTg;#Pz*oLI)Z=*{@)Y=LoSQ4XtB&&)_{OE;2e*^X7u3H+
zc<zTA!8iOx_;l2vtvPz#`BsH-FM$7Dz}G%4`X_?#1HOKq@E3wV)bQ^7Pe*^5&j{#O
zZW4WS5_n%HdpsH`FdcrjgCCT~xy<mHDS8y|hJJ>s^V1RjS9|*H?dNBh=f@HHEzJ;y
z&BI+H_yZ&O<2~No|KR+h&qDB()iJM2T&Mp}W!D~S*;Urpj5fhU(~D6%twL{UDNW!G
z_c;$V;Y{z$z%=usy#yL!*6gz%=kDIU_u1W#`zRz1#ULaahd{8QqC*VCAe4bWNJWDK
z@j+C^v6$30QKqdnjZ$q|sDYyO_dV7*XYYG<jOULzXZ`lKzqQu4zW2V}^?;K+_qF73
zpVD9aTcLlG3Zhp0oaztEia#Gx+<d3UV^_C+oN=L<{P(kp_ihn-ckOE(^jDPs1=UYy
zch`W^`X5sN=H&c+r9bzi==o7M!Hv_;_a@-P=f;*C-U57PO5S)FIO+53pUV1OpW!aX
z-DKl$+kscW$*wQmBX;f9|6m9G=a?S-VO^)pZp>FZ=pXCApHn{Pl@HQ>{=C#d|I=_3
zwBKvr7kS>I^uM5Z@6{e7j?ZllzasdXm3|I5?f0_o*Xhq8#`l>Ex}H5s-%~!b>Nl=a
z{Jo6pVB#xP`m35pA)V&Ww&G`hAnQM+_=AdHd#cAst@wow{+|U-dUCN9Pao}|zoPsv
zKP~(-<^SCd`j<NJpZdk={^9k&S^rgT&i~)e^ymZJDthJm;d6=`%`2S0eVfC7B<pnc
zbyD$Jty6qmzsI-^CcerJ{KLxUTG8bHu;Z_JINT$D{z&m$<HB*pzYd(`-`ekADSqhX
zK2th5{FCxIuldZZ^7)?PSJl5=RQ$gf*TKZs&;63<{|n#lG3xZ^R^YGQdxLqW>Vv!G
ztx7-h1);xLFT9=Tp+A4v((`vK{Uw!uq4Xi+j_dgQ14@5U{V<07`Az&F{+C+v`GnG6
zx>@w$aW$~d5Ixran%4RsVfyiW?$@6){~OG{mcRXb<^MwKe4p;%^8=;7ta-w$PO$fN
zw4R?e`&xgGcRg_OKj*aG{HW63ta$!RkC9o$7l;q!aJglt$CUnp+Pg>teKy5s9uq!^
z@+lbC!Nk``93P$c6DrS#I_STs^z;8J{2x+Yk2*fF;6rtA-|XP?IB?q6qb>b;M)}PA
zjqq{#(tj#`?McD!(s^G|{L&MG|BK?+y?(l%xsh??Z_f(-%evn;0w;go)921_RX)GW
zION~b!&SxGb;|pgzur9YHDnxdr<H%czk~jQ($A<}yZZWJhksYr@8ZZK9elpofj_Q%
zE<7iE>|R;yGad9l22SVot=4(%fkSY)*~E6u4ITKK8An$86`A+rdeg6T(7#LR^H+u5
z<$D2eT90{2{G?nprcnAB^*_tX|3gaOQ+hpi^V>>)LG2|}`rl<-2NPdkbMzN`jDA(G
zUFo2I3iu5EKKW?NFFmh(ay?&{m%h@$=e4ub<$MQllEXRO7l!;<!4L8?XH{-4e>lpx
z&`kdOUZuaRe)x!9Oc|e~l;00Bj=20Iq5Nlk?(kcR&-{Lm2}2e1Cl$Z+L&2Rse?jq!
z-x2&<O8;kyU-(PGpZ^KNpTAT5;{OQ#NrBB%jO$?H>xUiq&)g#N$yHAl^`2S9Fa6^Y
zMrL(AZ&7?!-+!_^BR4E5epdOQO~jvL4*znG$6plKtT{gFw{ykMF|LD&uU}L8YhUUy
zdWT;7a0mUTI`Bt;bH1u|_dAu(HyB61rDYdSFdy_)R3G*!{j-Yax}HGs=Yf-+_cU)&
z*u1Fp=U+a;(D(El_q;*m|H2>i7~iu;?zkQ}>GKC$>$!#Lg=X^K702h_dJMm!e2yqS
zqj@sYQU088xUL6fK7Zb&_yyG~mp2B$sUOwuJAKsg(R>dcjXw`Fu7ioMFLmI5p?t1B
zA@XtY?lIu(Z(DKyS;ar1@_CKU@nQ%6>u#OyH*R7a{Yj0p_bHzh#m}l=f;-~RY6qY9
zbl|!2xukWg%X2=U__hD;G2f2~d-E~HFaC+(+lqg>ga4P6{<5C0)6YNdpuYl~<at@;
zc5bgs@DCmI{|<bb-+qzl@%Lb@_<P-LqR&?~FZ#N!|9ZxCF!A+<4*XyTep>loyWC?g
zZ&P0H>7c()>E~PeUn+i4aaX6jU-9#w5&lcc|AQU;e@E$OzajL2CL*6!{M;qM&nlnK
zD}GJqb$;wC9sIxDfj_H!&TCxzb>;u#4*DD4DCfTKxjs`md$}F>w7lg|2Y#AyoV)ss
zlREGFl>e;yy`NM(>)`Vnj?XJSrhH22Kc)E9LU8AQKCk@mXw`#{D*X!@PaXYVD?WQ(
z__)5rlgj66%b)y*<MVq$|2kdIs}5H^zfJw>&)+V3e)(RZKcf@h#Q5(2j&GK6WjgV-
zq<m&npO5Rcw<~^D^>AMCvx=Y7_ko?>D;Iv%;ZOG%xLaV80VjK(SGno(jq$xCv4eD&
z*|PGA%J@Z9R&^BZ_l>oyYiI7ZCr{k7W-UfX8>72cN0)-I2nTVAw|UqqwSF?p@D7YA
zkhQ_k4w7NtODw-<!+Q0$!8<haB&@<<|ACbQ3x+P(IM}Aql95++1a+G3xb+-6eUz7T
z{O%*Cj#)RN<+$JDS@@+MJd2lk$<6~Iwng)KMOcRSn|=|8QL<x;Fdr6py9WfYe;x#Q
zG0AoX(!9VsO014;RA+ugFCb~cS)KN=bADlmUaGS=h@;3hF5xvKfnBe&jn@5%*AElJ
zS4T56MmF)v%9f#5`0GtNxsrMnF66~%p*o3m%iu9B2wU=k0NWje+qtQV9lIVTxs!;E
z;sgiBcNHOT6$h1tTYSNce&AY-H?eGnIAf9<P7CiqiJ?i#!P>KTA6r|y*B*cO>D9Fp
zXHHwY|G?710aM}}y&`@f)Fs#iT4TyQ^y6s9ZhA=_jz(p*lZ0|4OU7Rh{S9bnFsv)%
zq|{&%53*s=<O@9<4D+fq<vLc$zwi$Zkaum<au5fG-o#>~VF4jpxoTEz90g%y2gR_?
z^;)_Az{0|knS>m95Eo;uvUp<*WQZ5Jcu8nwXR&WfEFjJXBS|wAv9|ZqB@=lNePFw8
zgKaov1eH5p+`i=%fgMAnt%Y9-1#bfP@tR8u6C(o^A;Usgi6dU3Dx~b11X3E62;b`l
ze7!--E6HFhILIuVhl=RW1rrZ>$sw7V<@fNAcG*6*xPgQ70%vVyQsX5+Wt^Mv{yN?)
zEgaI&*MY-eI^i}=jraBpqo@okll5zVBgE;tZ=8SXB_lz}P()EeLvaD`AHutThN-QF
zx{Y-&iFoZgUMSga`Sm<v<pR)qexNrZ8``DpbwO_vB9=y7#k2+}m-W}ZIJ03Ej7J8R
zQ@~hQP2g!JMhkAl{>WJvtU8C5`g8Ek{stIlHT<<Fey9uwn|9sHf+Q>q58MSJwnMxy
zDN2T078+T4gV1;hG$8XTC??DW=E_X5hv5KkM6zK~Kp`D5p`@lP&|ywD@*wTkF)317
zCshpZ07t2QbDG&NFC1JnDc+S-AvWOnQYh=zun79Y8b=zyH0SQG>HSZ>p;tE9a^2Dx
zwxZ@m*1H?3iYy7U1>8kU@s;-fUyE8kX!LDTb7AG<{%zK}xge&MY-6=Cy#6MB`)S^<
z$#M3*G9(eqC4-z!INbJ=n$?P^vEHZ%;l1Ry#u)3zEyNA!Emw4CLM|hso+`t|l|>U}
z?B;DYv|Di!_%M7}DNJgv+R16r1K2mr1HaaBZBASXkIHp?v1zganZnzG*6{rFQ`YJs
z?BY%cn_~}jwAfL%TOlH3gZ*(?c!-Yhj2@2O3JUpqSs6he=#ChkgOAfI2AI?Rw2&Z?
zAn1})55^a=@hK<6YBR(-OZ>p0%W$55j3;gD21hc?1RtZK<n<(^<1(qq!*BxzzY%7(
zU%)KjIuL_k9XYhE?o%L?=n^2vCUF{9rG@kMZ9Xh5jFKbIlxqfBUt$*FX~QJsH-X_U
zND>(l%qo;0<Hf=6k#p0fQI3T346ybPK{P8v#8Qg&ga?slDOS^U6V!Qv_=-*OaQAI3
z3d+ICx}X59c^NFd3gIfDI(7>YLWMI1>KrECgc}g-9G+~naz6<@P8qSLWH>;?gewTi
zqTwSqY=+g-Qp>3dy>fWv05ZEUBo_%GBL2~U4@rNLEiotyABzw?tD^Sx7LpRDXLtu&
zT}6j%*|({e<AjkCS-;wbB(P9nML||v9yGD4i>x7kHCb_H3$0681y^2*2`s8kctsH-
znp$WOT(Av&Ft7WK8;dZ76SiI@cP<I@WkZQZN@<WNU`biH&%P9HoYFiC|8M&n1+oyf
zM7e(f5u>G!dI5S$9HO{@_V`dU9E<3D1xYH=(u9@}j4WjfXRbytIlzJ>;bQxML?KOb
zaY&++*K%W@X;>h<@Dd;fRy|ApxKmP%yV>#k!+d8q3eSUl8>jF2NDf#FXlt60@48@k
zA#}zd!ufbRaMOG`B1_-HzSIi%b%Y6-$k+zS;P|bCCDLDHt9={hWsE%1mIcm-6?&|S
zt}gH(auyd6V5NSTvk9w5Lb^Q6RB43{SqFR%FH(7kR2Sz>K19Yj(o=<(rdrX#h2=%v
z3z?A*&*3!mU>k?Gqm7b|Qx+D%$-qqbjC77eyZ2!GJ5}gd9&Vl`^c1OPI4CLZs0z`S
za9f&}xIh7&x5?tyYsd#kUG&OUT&<G_K?WEpHM|r2G^Mtt&hfHEtQ*!q*O5Go{ec(?
z9~W|&=^~mxxI7U6OoU*+u2q@(Z|DcY62Dhc96B~dCOwtkfyKk%=lp(#s%t{16Dt9#
z$rRNXRLz226Qn!U)=_Wwr%!hn_3*Te;K1SKLlX=ZAr-KIjzyXRq+#mkJCN&^kF*5>
z=OG+A4;>-m93q(6M%s+1gfL2JW<emb9t=5$P!~;C#aSakk3mvWS~sShw#?;)<pY}h
z;r5NJ#!;t3xXlvPhgVfpppuSF-Q)87^2)S(IPc`UuvV9)$qqcsf&!B^<59AKG=*1*
zR1sIEu5f;787?BO$mT#Zkrd8FC8d37pSDf6zvJYYJCB^SXO17g=h&KEJ96jAW7HL4
z@5R1`Q~d@2WkqpkkKTLw$f*;nrpOc00%wIeM1Zu~(ECJ5uR*GbQsSrM97*y@6zU1*
z!Q|Kmo6fJHq$$a*FZO!xIC<jERlB%<asP^zCC)*Wei6eZNyXPBETI#m|0v8n#O*N6
ztDW)G8LEMl^vWM5N%O{ZgH)}Bg(=)Z3+tow-twEEMWWUBtzXuZZ6Zf@tAJ?6bry?+
zGi&%PqY{!*OFRf19`z4KX(lBk$S=93FD+Ga6oL?sTI(F$;MYjjQr@J)RCJBbjn_ww
z-rNCM)OyjxID00gM4|84X*HWANbIr!y%4r_&k*g9QDq6kK$(Gl0gjcnJkgk=me*aI
z_HIq+R>|AL2J^Zqn;a>byf4k0AQi6K$>0u<7BAedF;txg!xR}#^Cqn**gl$9tfkqJ
zt&-U^FJb?dt&-J7TuGBcJ2j$kQc-i!y~wLUJ&$7l|5(y63cQ^rS5YLX*%zdwN3RIt
zu{zRe*#WwWH_kTUD!3)YJt8j4TYTZFq!32`uWba>$Iw-)=dg${=&?X%NQ9c4sDGw%
zhwt`+=2cc6ilwQyjVzn$6trxzLA6eT%;1ol^y224ScEdYb%ttbY)W9=K4OuVwo24Z
zSX)!qpv4;bq9;L}iz`+rF%qM#RcW<gi*egl)Fm5q%2-+!o^PFMX*LtGaJF0OO`-B*
zW#GolRvcjal$4F+CLUDM`^C0H)wD)>q<Gsh-WLsTiv|gjQ`xC7*NygJODI5DOQiH=
zv$Mku^c=?SmNQeiT{>iXyQ-JCoRPiDkSzd7SNk})!-}wrS`-O7=jj1#$wKEn)Z6yN
z+9^Bkrmvk^rC$0PI|Erd9C4jyi>?VqssSx&o|Qdu1_BMRx4J|@W-)*dt`kXZkt;RH
zYlx@X<)D3PD<I*QA`lUEd=sUkV2P+R#wh5FWI#b<)JF0kWaMz%R8h~MaZo$jBVQyP
z4zAUjjJ5aC1hIl$J0CGdCb@%}ZJR5ttYvCKHQ>0)5_eT{Q{HGCpd*W53(tuFM5XLR
zq=r|Zf|<0~Qss%6P#?#wkYFu(NnXnyL?g8!3$7w+w*5Y*x^Mx_y|y~uCL*_w><P!R
z5w><0ms`xR#evd(dD7q}>{GjWOtpm8izblclcd~-J746BU_<N-(JM45!ZyrW%!ZZ@
zjh23_C>=StUD6mSNM^PdLBWmQk>jHd6}tcQ$R!#tixi8Mxd~yHUIPEqM41<Q+tgSO
zQR|r~*lmMIM_8$ww_@+8yIaSn2^8h9vVW}2s`*m^L>n5pFLg04=~{;bs0$S5t?Yw+
zLvwNncA}ZD6O5!KSxUnvVKo#P)N}&p2u0~fJ+;Z0MCVBAf&|nHOte*?KJU;Ve%wS!
zDtr(6D%Qd-^x4|DyC#pjG^lcGpG|?o>uBZLWkR=E8q>{PkF1qD9*fkTFVPgCcxQc7
zO_1a!8C^NlCbz+<m$~P+1WFNyGZE@|iKC{6AS%YBL<6unF^&!ocGU6fb4~Z`aFm!*
zUN7p6{1|7g{Z6!Q;1ZhrMk*}*7uTxQ{GNKP6Fpm~AGcbju%IbpR9BDzdUU&UZk~r4
zS_MKW9xuYcN>IYNr~M{7<wSX;t7#}R!G7?(2x@?bQ`|hZ<mI(IY;xeaijcl0IiPsS
zcZzthUKz-b&K)P@GNdL4dB)JhxVNkk8Bv0|V@(3-!((UR6xYHjW!px#ytu+6k|rBo
zy>wKmK|#G<dK%ay;-^y9MpIlg?g_KaCOIjAOB^|Qfma|oH>pOtkK;pLPoYqa1W|_i
z3dDxos&gJD3DNkFxGsH4m+V+-BB0+-=S4Ycb0Sf64YObt;@K%bOl*=_i-#`=*Hm57
zbB(cO!I-8fV&G%%B$+0g$p@bk;eqzZr_xSON4CvfBL3R|QdQ3Anw-a71eY_cP|b#V
z#d%limZF0;@^+F#@)0yWTsE;Xk}wJ1jvj+Gr-dlcA!%WBG*S}k-0D~d<PEix!3XG;
z79}29V0gaE58U+W8!KNj9B$OqMRJK0%eozMACMS`h3-o5VWW-s>@uuTyrDioX`mnM
z3sSVXOSCARThjyJOqu?o0V-s;K_S*Z?z}^V@z6(|A*2%LNK8@I(L8=(qAB$=Z!o|U
z4@&DKxo6!%MmRnJN$KeboY72FTXc9$*^lfd(<3kux=UFr6X3<{$}2RX<CYsG3;5Aw
zPOS=8{`PmbBS;s@yk%b@o&+JM86aTNA32aXkkU}E1bYtgXD%*6O-r}n`?!??V{fj+
zEfwYASXA1#V11p)D>X_t8ElJQPzAYLKO|4Zq;km3JMnh{^gqDi!;_57J+fnn(_t22
z^R{SOM#lViH-I2WelBY`y=d~;b_w6MDt(02B;-7}Y1t%(8m5bQ)JXEzI8H(*1%nD8
ziy<eqtN%oK23me(i%oXBl#4|jMM(|SpPoiLrDZp>JBftzWVtlwAxGf)r_Swfty8AO
zX^WAvaEe8Z7RZOHia^OGb-bl}SE5sn<~1gODstD|IUy-IIR~3a@#K$Xn(ITwLXY^l
y=gu4Blb1+Bbqf4+?4xChK7rxJrrAVZ+7jkOZESKr#0iEC%NVJeQ#Ag2EAzk9o>%(-

literal 0
HcmV?d00001

diff --git a/diffutils-3.0/diff.c b/diffutils-3.0/diff.c
new file mode 100644
index 0000000..d6e517b
--- /dev/null
+++ b/diffutils-3.0/diff.c
@@ -0,0 +1,1330 @@
+/* diff - compare files line by line
+
+   Copyright (C) 1988-1989, 1992-1994, 1996, 1998, 2001-2002, 2004, 2006-2007,
+   2009-2010 Free Software Foundation, Inc.
+
+   This file is part of GNU DIFF.
+
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+#define GDIFF_MAIN
+#include "diff.h"
+#include <assert.h>
+#include "paths.h"
+#include <c-stack.h>
+#include <dirname.h>
+#include <error.h>
+#include <exclude.h>
+#include <exitfail.h>
+#include <file-type.h>
+#include <fnmatch.h>
+#include <getopt.h>
+#include <hard-locale.h>
+#include <prepargs.h>
+#include <progname.h>
+#include <sh-quote.h>
+#include <stat-time.h>
+#include <timespec.h>
+#include <version-etc.h>
+#include <xalloc.h>
+#include <xfreopen.h>
+
+/* The official name of this program (e.g., no `g' prefix).  */
+#define PROGRAM_NAME "diff"
+
+#define AUTHORS \
+  proper_name ("Paul Eggert"), \
+  proper_name ("Mike Haertel"), \
+  proper_name ("David Hayes"), \
+  proper_name ("Richard Stallman"), \
+  proper_name ("Len Tower")
+
+#ifndef GUTTER_WIDTH_MINIMUM
+# define GUTTER_WIDTH_MINIMUM 3
+#endif
+
+struct regexp_list
+{
+  char *regexps;	/* chars representing disjunction of the regexps */
+  size_t len;		/* chars used in 'regexps' */
+  size_t size;		/* size malloc'ed for 'regexps'; 0 if not malloc'ed */
+  bool multiple_regexps;/* Does 'regexps' represent a disjunction?  */
+  struct re_pattern_buffer *buf;
+};
+
+static int compare_files (struct comparison const *, char const *, char const *);
+static void add_regexp (struct regexp_list *, char const *);
+static void summarize_regexp_list (struct regexp_list *);
+static void specify_style (enum output_style);
+static void specify_value (char const **, char const *, char const *);
+static void try_help (char const *, char const *) __attribute__((noreturn));
+static void check_stdout (void);
+static void usage (void);
+
+/* If comparing directories, compare their common subdirectories
+   recursively.  */
+static bool recursive;
+
+/* In context diffs, show previous lines that match these regexps.  */
+static struct regexp_list function_regexp_list;
+
+/* Ignore changes affecting only lines that match these regexps.  */
+static struct regexp_list ignore_regexp_list;
+
+#if O_BINARY
+/* Use binary I/O when reading and writing data (--binary).
+   On POSIX hosts, this has no effect.  */
+static bool binary;
+#else
+enum { binary = true };
+#endif
+
+/* When comparing directories, if a file appears only in one
+   directory, treat it as present but empty in the other (-N).
+   Then `patch' would create the file with appropriate contents.  */
+static bool new_file;
+
+/* When comparing directories, if a file appears only in the second
+   directory of the two, treat it as present but empty in the other
+   (--unidirectional-new-file).
+   Then `patch' would create the file with appropriate contents.  */
+static bool unidirectional_new_file;
+
+/* Report files compared that are the same (-s).
+   Normally nothing is output when that happens.  */
+static bool report_identical_files;
+
+static char const shortopts[] =
+"0123456789abBcC:dD:eEfF:hHiI:lL:nNpPqrsS:tTuU:vwW:x:X:y";
+
+/* Values for long options that do not have single-letter equivalents.  */
+enum
+{
+  BINARY_OPTION = CHAR_MAX + 1,
+  FROM_FILE_OPTION,
+  HELP_OPTION,
+  HORIZON_LINES_OPTION,
+  IGNORE_FILE_NAME_CASE_OPTION,
+  INHIBIT_HUNK_MERGE_OPTION,
+  LEFT_COLUMN_OPTION,
+  LINE_FORMAT_OPTION,
+  NO_IGNORE_FILE_NAME_CASE_OPTION,
+  NORMAL_OPTION,
+  SDIFF_MERGE_ASSIST_OPTION,
+  STRIP_TRAILING_CR_OPTION,
+  SUPPRESS_BLANK_EMPTY_OPTION,
+  SUPPRESS_COMMON_LINES_OPTION,
+  TABSIZE_OPTION,
+  TO_FILE_OPTION,
+
+  /* These options must be in sequence.  */
+  UNCHANGED_LINE_FORMAT_OPTION,
+  OLD_LINE_FORMAT_OPTION,
+  NEW_LINE_FORMAT_OPTION,
+
+  /* These options must be in sequence.  */
+  UNCHANGED_GROUP_FORMAT_OPTION,
+  OLD_GROUP_FORMAT_OPTION,
+  NEW_GROUP_FORMAT_OPTION,
+  CHANGED_GROUP_FORMAT_OPTION
+};
+
+static char const group_format_option[][sizeof "--unchanged-group-format"] =
+  {
+    "--unchanged-group-format",
+    "--old-group-format",
+    "--new-group-format",
+    "--changed-group-format"
+  };
+
+static char const line_format_option[][sizeof "--unchanged-line-format"] =
+  {
+    "--unchanged-line-format",
+    "--old-line-format",
+    "--new-line-format"
+  };
+
+static struct option const longopts[] =
+{
+  {"binary", 0, 0, BINARY_OPTION},
+  {"brief", 0, 0, 'q'},
+  {"changed-group-format", 1, 0, CHANGED_GROUP_FORMAT_OPTION},
+  {"context", 2, 0, 'C'},
+  {"ed", 0, 0, 'e'},
+  {"exclude", 1, 0, 'x'},
+  {"exclude-from", 1, 0, 'X'},
+  {"expand-tabs", 0, 0, 't'},
+  {"forward-ed", 0, 0, 'f'},
+  {"from-file", 1, 0, FROM_FILE_OPTION},
+  {"help", 0, 0, HELP_OPTION},
+  {"horizon-lines", 1, 0, HORIZON_LINES_OPTION},
+  {"ifdef", 1, 0, 'D'},
+  {"ignore-all-space", 0, 0, 'w'},
+  {"ignore-blank-lines", 0, 0, 'B'},
+  {"ignore-case", 0, 0, 'i'},
+  {"ignore-file-name-case", 0, 0, IGNORE_FILE_NAME_CASE_OPTION},
+  {"ignore-matching-lines", 1, 0, 'I'},
+  {"ignore-space-change", 0, 0, 'b'},
+  {"ignore-tab-expansion", 0, 0, 'E'},
+  {"inhibit-hunk-merge", 0, 0, INHIBIT_HUNK_MERGE_OPTION},
+  {"initial-tab", 0, 0, 'T'},
+  {"label", 1, 0, 'L'},
+  {"left-column", 0, 0, LEFT_COLUMN_OPTION},
+  {"line-format", 1, 0, LINE_FORMAT_OPTION},
+  {"minimal", 0, 0, 'd'},
+  {"new-file", 0, 0, 'N'},
+  {"new-group-format", 1, 0, NEW_GROUP_FORMAT_OPTION},
+  {"new-line-format", 1, 0, NEW_LINE_FORMAT_OPTION},
+  {"no-ignore-file-name-case", 0, 0, NO_IGNORE_FILE_NAME_CASE_OPTION},
+  {"normal", 0, 0, NORMAL_OPTION},
+  {"old-group-format", 1, 0, OLD_GROUP_FORMAT_OPTION},
+  {"old-line-format", 1, 0, OLD_LINE_FORMAT_OPTION},
+  {"paginate", 0, 0, 'l'},
+  {"rcs", 0, 0, 'n'},
+  {"recursive", 0, 0, 'r'},
+  {"report-identical-files", 0, 0, 's'},
+  {"sdiff-merge-assist", 0, 0, SDIFF_MERGE_ASSIST_OPTION},
+  {"show-c-function", 0, 0, 'p'},
+  {"show-function-line", 1, 0, 'F'},
+  {"side-by-side", 0, 0, 'y'},
+  {"speed-large-files", 0, 0, 'H'},
+  {"starting-file", 1, 0, 'S'},
+  {"strip-trailing-cr", 0, 0, STRIP_TRAILING_CR_OPTION},
+  {"suppress-blank-empty", 0, 0, SUPPRESS_BLANK_EMPTY_OPTION},
+  {"suppress-common-lines", 0, 0, SUPPRESS_COMMON_LINES_OPTION},
+  {"tabsize", 1, 0, TABSIZE_OPTION},
+  {"text", 0, 0, 'a'},
+  {"to-file", 1, 0, TO_FILE_OPTION},
+  {"unchanged-group-format", 1, 0, UNCHANGED_GROUP_FORMAT_OPTION},
+  {"unchanged-line-format", 1, 0, UNCHANGED_LINE_FORMAT_OPTION},
+  {"unidirectional-new-file", 0, 0, 'P'},
+  {"unified", 2, 0, 'U'},
+  {"version", 0, 0, 'v'},
+  {"width", 1, 0, 'W'},
+  {0, 0, 0, 0}
+};
+
+/* Return a string containing the command options with which diff was invoked.
+   Spaces appear between what were separate ARGV-elements.
+   There is a space at the beginning but none at the end.
+   If there were no options, the result is an empty string.
+
+   Arguments: OPTIONVEC, a vector containing separate ARGV-elements, and COUNT,
+   the length of that vector.  */
+
+static char *
+option_list (char **optionvec, int count)
+{
+  int i;
+  size_t size = 1;
+  char *result;
+  char *p;
+
+  for (i = 0; i < count; i++)
+    size += 1 + shell_quote_length (optionvec[i]);
+
+  p = result = xmalloc (size);
+
+  for (i = 0; i < count; i++)
+    {
+      *p++ = ' ';
+      p = shell_quote_copy (p, optionvec[i]);
+    }
+
+  *p = '\0';
+  return result;
+}
+
+
+/* Return an option value suitable for add_exclude.  */
+
+static int
+exclude_options (void)
+{
+  return EXCLUDE_WILDCARDS | (ignore_file_name_case ? FNM_CASEFOLD : 0);
+}
+
+int
+main (int argc, char **argv)
+{
+  int exit_status = EXIT_SUCCESS;
+  int c;
+  int i;
+  int prev = -1;
+  lin ocontext = -1;
+  bool explicit_context = false;
+  size_t width = 0;
+  bool show_c_function = false;
+  char const *from_file = NULL;
+  char const *to_file = NULL;
+  uintmax_t numval;
+  char *numend;
+
+  /* Do our initializations.  */
+  exit_failure = EXIT_TROUBLE;
+  initialize_main (&argc, &argv);
+  set_program_name (argv[0]);
+  setlocale (LC_ALL, "");
+  bindtextdomain (PACKAGE, LOCALEDIR);
+  textdomain (PACKAGE);
+  c_stack_action (0);
+  function_regexp_list.buf = &function_regexp;
+  ignore_regexp_list.buf = &ignore_regexp;
+  re_set_syntax (RE_SYNTAX_GREP | RE_NO_POSIX_BACKTRACKING);
+  excluded = new_exclude ();
+
+  /* Decode the options.  */
+
+  while ((c = getopt_long (argc, argv, shortopts, longopts, NULL)) != -1)
+    {
+      switch (c)
+	{
+	case 0:
+	  break;
+
+	case '0':
+	case '1':
+	case '2':
+	case '3':
+	case '4':
+	case '5':
+	case '6':
+	case '7':
+	case '8':
+	case '9':
+	  if (! ISDIGIT (prev))
+	    ocontext = c - '0';
+	  else if (LIN_MAX / 10 < ocontext
+		   || ((ocontext = 10 * ocontext + c - '0') < 0))
+	    ocontext = LIN_MAX;
+	  break;
+
+	case 'a':
+	  text = true;
+	  break;
+
+	case 'b':
+	  if (ignore_white_space < IGNORE_SPACE_CHANGE)
+	    ignore_white_space = IGNORE_SPACE_CHANGE;
+	  break;
+
+	case 'B':
+	  ignore_blank_lines = true;
+	  break;
+
+	case 'C':
+	case 'U':
+	  {
+	    if (optarg)
+	      {
+		numval = strtoumax (optarg, &numend, 10);
+		if (*numend)
+		  try_help ("invalid context length '%s'", optarg);
+		if (LIN_MAX < numval)
+		  numval = LIN_MAX;
+	      }
+	    else
+	      numval = 3;
+
+	    specify_style (c == 'U' ? OUTPUT_UNIFIED : OUTPUT_CONTEXT);
+	    if (context < numval)
+	      context = numval;
+	    explicit_context = true;
+	  }
+	  break;
+
+	case 'c':
+	  specify_style (OUTPUT_CONTEXT);
+	  if (context < 3)
+	    context = 3;
+	  break;
+
+	case 'd':
+	  minimal = true;
+	  break;
+
+	case 'D':
+	  specify_style (OUTPUT_IFDEF);
+	  {
+	    static char const C_ifdef_group_formats[] =
+	      "%%=%c#ifndef %s\n%%<#endif /* ! %s */\n%c#ifdef %s\n%%>#endif /* %s */\n%c#ifndef %s\n%%<#else /* %s */\n%%>#endif /* %s */\n";
+	    char *b = xmalloc (sizeof C_ifdef_group_formats
+			       + 7 * strlen (optarg) - 14 /* 7*"%s" */
+			       - 8 /* 5*"%%" + 3*"%c" */);
+	    sprintf (b, C_ifdef_group_formats,
+		     0,
+		     optarg, optarg, 0,
+		     optarg, optarg, 0,
+		     optarg, optarg, optarg);
+	    for (i = 0; i < sizeof group_format / sizeof group_format[0]; i++)
+	      {
+		specify_value (&group_format[i], b, "-D");
+		b += strlen (b) + 1;
+	      }
+	  }
+	  break;
+
+	case 'e':
+	  specify_style (OUTPUT_ED);
+	  break;
+
+	case 'E':
+	  if (ignore_white_space < IGNORE_TAB_EXPANSION)
+	    ignore_white_space = IGNORE_TAB_EXPANSION;
+	  break;
+
+	case 'f':
+	  specify_style (OUTPUT_FORWARD_ED);
+	  break;
+
+	case 'F':
+	  add_regexp (&function_regexp_list, optarg);
+	  break;
+
+	case 'h':
+	  /* Split the files into chunks for faster processing.
+	     Usually does not change the result.
+
+	     This currently has no effect.  */
+	  break;
+
+	case 'H':
+	  speed_large_files = true;
+	  break;
+
+	case 'i':
+	  ignore_case = true;
+	  break;
+
+	case 'I':
+	  add_regexp (&ignore_regexp_list, optarg);
+	  break;
+
+	case 'l':
+	  if (!pr_program[0])
+	    try_help ("pagination not supported on this host", NULL);
+	  paginate = true;
+#ifdef SIGCHLD
+	  /* Pagination requires forking and waiting, and
+	     System V fork+wait does not work if SIGCHLD is ignored.  */
+	  signal (SIGCHLD, SIG_DFL);
+#endif
+	  break;
+
+	case 'L':
+	  if (!file_label[0])
+	    file_label[0] = optarg;
+	  else if (!file_label[1])
+	    file_label[1] = optarg;
+	  else
+	    fatal ("too many file label options");
+	  break;
+
+	case 'n':
+	  specify_style (OUTPUT_RCS);
+	  break;
+
+	case 'N':
+	  new_file = true;
+	  break;
+
+	case 'p':
+	  show_c_function = true;
+	  add_regexp (&function_regexp_list, "^[[:alpha:]$_]");
+	  break;
+
+	case 'P':
+	  unidirectional_new_file = true;
+	  break;
+
+	case 'q':
+	  brief = true;
+	  break;
+
+	case 'r':
+	  recursive = true;
+	  break;
+
+	case 's':
+	  report_identical_files = true;
+	  break;
+
+	case 'S':
+	  specify_value (&starting_file, optarg, "-S");
+	  break;
+
+	case 't':
+	  expand_tabs = true;
+	  break;
+
+	case 'T':
+	  initial_tab = true;
+	  break;
+
+	case 'u':
+	  specify_style (OUTPUT_UNIFIED);
+	  if (context < 3)
+	    context = 3;
+	  break;
+
+	case 'v':
+	  version_etc (stdout, PROGRAM_NAME, PACKAGE_NAME, PACKAGE_VERSION,
+		       AUTHORS, (char *) NULL);
+	  check_stdout ();
+	  return EXIT_SUCCESS;
+
+	case 'w':
+	  ignore_white_space = IGNORE_ALL_SPACE;
+	  break;
+
+	case 'x':
+	  add_exclude (excluded, optarg, exclude_options ());
+	  break;
+
+	case 'X':
+	  if (add_exclude_file (add_exclude, excluded, optarg,
+				exclude_options (), '\n'))
+	    pfatal_with_name (optarg);
+	  break;
+
+	case 'y':
+	  specify_style (OUTPUT_SDIFF);
+	  break;
+
+	case 'W':
+	  numval = strtoumax (optarg, &numend, 10);
+	  if (! (0 < numval && numval <= SIZE_MAX) || *numend)
+	    try_help ("invalid width '%s'", optarg);
+	  if (width != numval)
+	    {
+	      if (width)
+		fatal ("conflicting width options");
+	      width = numval;
+	    }
+	  break;
+
+	case BINARY_OPTION:
+#if O_BINARY
+	  binary = true;
+	  if (! isatty (STDOUT_FILENO))
+	    xfreopen (NULL, "wb", stdout);
+#endif
+	  break;
+
+	case FROM_FILE_OPTION:
+	  specify_value (&from_file, optarg, "--from-file");
+	  break;
+
+	case HELP_OPTION:
+	  usage ();
+	  check_stdout ();
+	  return EXIT_SUCCESS;
+
+	case HORIZON_LINES_OPTION:
+	  numval = strtoumax (optarg, &numend, 10);
+	  if (*numend)
+	    try_help ("invalid horizon length '%s'", optarg);
+	  horizon_lines = MAX (horizon_lines, MIN (numval, LIN_MAX));
+	  break;
+
+	case IGNORE_FILE_NAME_CASE_OPTION:
+	  ignore_file_name_case = true;
+	  break;
+
+	case INHIBIT_HUNK_MERGE_OPTION:
+	  /* This option is obsolete, but accept it for backward
+             compatibility.  */
+	  break;
+
+	case LEFT_COLUMN_OPTION:
+	  left_column = true;
+	  break;
+
+	case LINE_FORMAT_OPTION:
+	  specify_style (OUTPUT_IFDEF);
+	  for (i = 0; i < sizeof line_format / sizeof line_format[0]; i++)
+	    specify_value (&line_format[i], optarg, "--line-format");
+	  break;
+
+	case NO_IGNORE_FILE_NAME_CASE_OPTION:
+	  ignore_file_name_case = false;
+	  break;
+
+	case NORMAL_OPTION:
+	  specify_style (OUTPUT_NORMAL);
+	  break;
+
+	case SDIFF_MERGE_ASSIST_OPTION:
+	  specify_style (OUTPUT_SDIFF);
+	  sdiff_merge_assist = true;
+	  break;
+
+	case STRIP_TRAILING_CR_OPTION:
+	  strip_trailing_cr = true;
+	  break;
+
+	case SUPPRESS_BLANK_EMPTY_OPTION:
+	  suppress_blank_empty = true;
+	  break;
+
+	case SUPPRESS_COMMON_LINES_OPTION:
+	  suppress_common_lines = true;
+	  break;
+
+	case TABSIZE_OPTION:
+	  numval = strtoumax (optarg, &numend, 10);
+	  if (! (0 < numval && numval <= SIZE_MAX) || *numend)
+	    try_help ("invalid tabsize '%s'", optarg);
+	  if (tabsize != numval)
+	    {
+	      if (tabsize)
+		fatal ("conflicting tabsize options");
+	      tabsize = numval;
+	    }
+	  break;
+
+	case TO_FILE_OPTION:
+	  specify_value (&to_file, optarg, "--to-file");
+	  break;
+
+	case UNCHANGED_LINE_FORMAT_OPTION:
+	case OLD_LINE_FORMAT_OPTION:
+	case NEW_LINE_FORMAT_OPTION:
+	  specify_style (OUTPUT_IFDEF);
+	  c -= UNCHANGED_LINE_FORMAT_OPTION;
+	  specify_value (&line_format[c], optarg, line_format_option[c]);
+	  break;
+
+	case UNCHANGED_GROUP_FORMAT_OPTION:
+	case OLD_GROUP_FORMAT_OPTION:
+	case NEW_GROUP_FORMAT_OPTION:
+	case CHANGED_GROUP_FORMAT_OPTION:
+	  specify_style (OUTPUT_IFDEF);
+	  c -= UNCHANGED_GROUP_FORMAT_OPTION;
+	  specify_value (&group_format[c], optarg, group_format_option[c]);
+	  break;
+
+	default:
+	  try_help (NULL, NULL);
+	}
+      prev = c;
+    }
+
+  if (output_style == OUTPUT_UNSPECIFIED)
+    {
+      if (show_c_function)
+	{
+	  specify_style (OUTPUT_CONTEXT);
+	  if (ocontext < 0)
+	    context = 3;
+	}
+      else
+	specify_style (OUTPUT_NORMAL);
+    }
+
+  if (output_style != OUTPUT_CONTEXT || hard_locale (LC_TIME))
+    {
+#if (defined STAT_TIMESPEC || defined STAT_TIMESPEC_NS \
+     || defined HAVE_STRUCT_STAT_ST_SPARE1)
+      time_format = "%Y-%m-%d %H:%M:%S.%N %z";
+#else
+      time_format = "%Y-%m-%d %H:%M:%S %z";
+#endif
+    }
+  else
+    {
+      /* See POSIX 1003.1-2001 for this format.  */
+      time_format = "%a %b %e %T %Y";
+    }
+
+  if (0 <= ocontext
+      && (output_style == OUTPUT_CONTEXT
+	  || output_style == OUTPUT_UNIFIED)
+      && (context < ocontext
+	  || (ocontext < context && ! explicit_context)))
+    context = ocontext;
+
+  if (! tabsize)
+    tabsize = 8;
+  if (! width)
+    width = 130;
+
+  {
+    /* Maximize first the half line width, and then the gutter width,
+       according to the following constraints:
+
+	1.  Two half lines plus a gutter must fit in a line.
+	2.  If the half line width is nonzero:
+	    a.  The gutter width is at least GUTTER_WIDTH_MINIMUM.
+	    b.  If tabs are not expanded to spaces,
+		a half line plus a gutter is an integral number of tabs,
+		so that tabs in the right column line up.  */
+
+    intmax_t t = expand_tabs ? 1 : tabsize;
+    intmax_t w = width;
+    intmax_t off = (w + t + GUTTER_WIDTH_MINIMUM) / (2 * t)  *  t;
+    sdiff_half_width = MAX (0, MIN (off - GUTTER_WIDTH_MINIMUM, w - off)),
+    sdiff_column2_offset = sdiff_half_width ? off : w;
+  }
+
+  /* Make the horizon at least as large as the context, so that
+     shift_boundaries has more freedom to shift the first and last hunks.  */
+  if (horizon_lines < context)
+    horizon_lines = context;
+
+  summarize_regexp_list (&function_regexp_list);
+  summarize_regexp_list (&ignore_regexp_list);
+
+  if (output_style == OUTPUT_IFDEF)
+    {
+      for (i = 0; i < sizeof line_format / sizeof line_format[0]; i++)
+	if (!line_format[i])
+	  line_format[i] = "%l\n";
+      if (!group_format[OLD])
+	group_format[OLD]
+	  = group_format[CHANGED] ? group_format[CHANGED] : "%<";
+      if (!group_format[NEW])
+	group_format[NEW]
+	  = group_format[CHANGED] ? group_format[CHANGED] : "%>";
+      if (!group_format[UNCHANGED])
+	group_format[UNCHANGED] = "%=";
+      if (!group_format[CHANGED])
+	group_format[CHANGED] = concat (group_format[OLD],
+					group_format[NEW], "");
+    }
+
+  no_diff_means_no_output =
+    (output_style == OUTPUT_IFDEF ?
+      (!*group_format[UNCHANGED]
+       || (STREQ (group_format[UNCHANGED], "%=")
+	   && !*line_format[UNCHANGED]))
+     : (output_style != OUTPUT_SDIFF) | suppress_common_lines);
+
+  files_can_be_treated_as_binary =
+    (brief & binary
+     & ~ (ignore_blank_lines | ignore_case | strip_trailing_cr
+	  | (ignore_regexp_list.regexps || ignore_white_space)));
+
+  switch_string = option_list (argv + 1, optind - 1);
+
+  if (from_file)
+    {
+      if (to_file)
+	fatal ("--from-file and --to-file both specified");
+      else
+	for (; optind < argc; optind++)
+	  {
+	    int status = compare_files (NULL, from_file, argv[optind]);
+	    if (exit_status < status)
+	      exit_status = status;
+	  }
+    }
+  else
+    {
+      if (to_file)
+	for (; optind < argc; optind++)
+	  {
+	    int status = compare_files (NULL, argv[optind], to_file);
+	    if (exit_status < status)
+	      exit_status = status;
+	  }
+      else
+	{
+	  if (argc - optind != 2)
+	    {
+	      if (argc - optind < 2)
+		try_help ("missing operand after '%s'", argv[argc - 1]);
+	      else
+		try_help ("extra operand '%s'", argv[optind + 2]);
+	    }
+
+	  exit_status = compare_files (NULL, argv[optind], argv[optind + 1]);
+	}
+    }
+
+  /* Print any messages that were saved up for last.  */
+  print_message_queue ();
+
+  check_stdout ();
+  exit (exit_status);
+  return exit_status;
+}
+
+/* Append to REGLIST the regexp PATTERN.  */
+
+static void
+add_regexp (struct regexp_list *reglist, char const *pattern)
+{
+  size_t patlen = strlen (pattern);
+  char const *m = re_compile_pattern (pattern, patlen, reglist->buf);
+
+  if (m != 0)
+    error (0, 0, "%s: %s", pattern, m);
+  else
+    {
+      char *regexps = reglist->regexps;
+      size_t len = reglist->len;
+      bool multiple_regexps = reglist->multiple_regexps = regexps != 0;
+      size_t newlen = reglist->len = len + 2 * multiple_regexps + patlen;
+      size_t size = reglist->size;
+
+      if (size <= newlen)
+	{
+	  if (!size)
+	    size = 1;
+
+	  do size *= 2;
+	  while (size <= newlen);
+
+	  reglist->size = size;
+	  reglist->regexps = regexps = xrealloc (regexps, size);
+	}
+      if (multiple_regexps)
+	{
+	  regexps[len++] = '\\';
+	  regexps[len++] = '|';
+	}
+      memcpy (regexps + len, pattern, patlen + 1);
+    }
+}
+
+/* Ensure that REGLIST represents the disjunction of its regexps.
+   This is done here, rather than earlier, to avoid O(N^2) behavior.  */
+
+static void
+summarize_regexp_list (struct regexp_list *reglist)
+{
+  if (reglist->regexps)
+    {
+      /* At least one regexp was specified.  Allocate a fastmap for it.  */
+      reglist->buf->fastmap = xmalloc (1 << CHAR_BIT);
+      if (reglist->multiple_regexps)
+	{
+	  /* Compile the disjunction of the regexps.
+	     (If just one regexp was specified, it is already compiled.)  */
+	  char const *m = re_compile_pattern (reglist->regexps, reglist->len,
+					      reglist->buf);
+	  if (m)
+	    error (EXIT_TROUBLE, 0, "%s: %s", reglist->regexps, m);
+	}
+    }
+}
+
+static void
+try_help (char const *reason_msgid, char const *operand)
+{
+  if (reason_msgid)
+    error (0, 0, _(reason_msgid), operand);
+  error (EXIT_TROUBLE, 0, _("Try '%s --help' for more information."),
+	 program_name);
+  abort ();
+}
+
+static void
+check_stdout (void)
+{
+  if (ferror (stdout))
+    fatal ("write failed");
+  else if (fclose (stdout) != 0)
+    pfatal_with_name (_("standard output"));
+}
+
+static char const * const option_help_msgid[] = {
+  N_("Compare files line by line."),
+  "",
+  N_("-i  --ignore-case  Ignore case differences in file contents."),
+  N_("--ignore-file-name-case  Ignore case when comparing file names."),
+  N_("--no-ignore-file-name-case  Consider case when comparing file names."),
+  N_("-E  --ignore-tab-expansion  Ignore changes due to tab expansion."),
+  N_("-b  --ignore-space-change  Ignore changes in the amount of white space."),
+  N_("-w  --ignore-all-space  Ignore all white space."),
+  N_("-B  --ignore-blank-lines  Ignore changes whose lines are all blank."),
+  N_("-I RE  --ignore-matching-lines=RE  Ignore changes whose lines all match RE."),
+  N_("--strip-trailing-cr  Strip trailing carriage return on input."),
+#if O_BINARY
+  N_("--binary  Read and write data in binary mode."),
+#endif
+  N_("-a  --text  Treat all files as text."),
+  "",
+  N_("-c  -C NUM  --context[=NUM]  Output NUM (default 3) lines of copied context.\n\
+-u  -U NUM  --unified[=NUM]  Output NUM (default 3) lines of unified context.\n\
+  --label LABEL  Use LABEL instead of file name.\n\
+  -p  --show-c-function  Show which C function each change is in.\n\
+  -F RE  --show-function-line=RE  Show the most recent line matching RE."),
+  N_("-q  --brief  Output only whether files differ."),
+  N_("-e  --ed  Output an ed script."),
+  N_("--normal  Output a normal diff."),
+  N_("-n  --rcs  Output an RCS format diff."),
+  N_("-y  --side-by-side  Output in two columns.\n\
+  -W NUM  --width=NUM  Output at most NUM (default 130) print columns.\n\
+  --left-column  Output only the left column of common lines.\n\
+  --suppress-common-lines  Do not output common lines."),
+  N_("-D NAME  --ifdef=NAME  Output merged file to show '#ifdef NAME' diffs."),
+  N_("--GTYPE-group-format=GFMT  Similar, but format GTYPE input groups with GFMT."),
+  N_("--line-format=LFMT  Similar, but format all input lines with LFMT."),
+  N_("--LTYPE-line-format=LFMT  Similar, but format LTYPE input lines with LFMT."),
+  N_("  LTYPE is 'old', 'new', or 'unchanged'.  GTYPE is LTYPE or 'changed'."),
+  N_("  GFMT may contain:\n\
+    %<  lines from FILE1\n\
+    %>  lines from FILE2\n\
+    %=  lines common to FILE1 and FILE2\n\
+    %[-][WIDTH][.[PREC]]{doxX}LETTER  printf-style spec for LETTER\n\
+      LETTERs are as follows for new group, lower case for old group:\n\
+        F  first line number\n\
+        L  last line number\n\
+        N  number of lines = L-F+1\n\
+        E  F-1\n\
+        M  L+1"),
+  N_("  LFMT may contain:\n\
+    %L  contents of line\n\
+    %l  contents of line, excluding any trailing newline\n\
+    %[-][WIDTH][.[PREC]]{doxX}n  printf-style spec for input line number"),
+  N_("  Either GFMT or LFMT may contain:\n\
+    %%  %\n\
+    %c'C'  the single character C\n\
+    %c'\\OOO'  the character with octal code OOO"),
+  "",
+  N_("-l  --paginate  Pass the output through 'pr' to paginate it."),
+  N_("-t  --expand-tabs  Expand tabs to spaces in output."),
+  N_("-T  --initial-tab  Make tabs line up by prepending a tab."),
+  N_("--tabsize=NUM  Tab stops are every NUM (default 8) print columns."),
+  N_("--suppress-blank-empty  Suppress space or tab before empty output lines."),
+  "",
+  N_("-r  --recursive  Recursively compare any subdirectories found."),
+  N_("-N  --new-file  Treat absent files as empty."),
+  N_("--unidirectional-new-file  Treat absent first files as empty."),
+  N_("-s  --report-identical-files  Report when two files are the same."),
+  N_("-x PAT  --exclude=PAT  Exclude files that match PAT."),
+  N_("-X FILE  --exclude-from=FILE  Exclude files that match any pattern in FILE."),
+  N_("-S FILE  --starting-file=FILE  Start with FILE when comparing directories."),
+  N_("--from-file=FILE1  Compare FILE1 to all operands.  FILE1 can be a directory."),
+  N_("--to-file=FILE2  Compare all operands to FILE2.  FILE2 can be a directory."),
+  "",
+  N_("--horizon-lines=NUM  Keep NUM lines of the common prefix and suffix."),
+  N_("-d  --minimal  Try hard to find a smaller set of changes."),
+  N_("--speed-large-files  Assume large files and many scattered small changes."),
+  "",
+  N_("-v  --version  Output version info."),
+  N_("--help  Output this help."),
+  "",
+  N_("FILES are 'FILE1 FILE2' or 'DIR1 DIR2' or 'DIR FILE...' or 'FILE... DIR'."),
+  N_("If --from-file or --to-file is given, there are no restrictions on FILES."),
+  N_("If a FILE is '-', read standard input."),
+  N_("Exit status is 0 if inputs are the same, 1 if different, 2 if trouble."),
+  0
+};
+
+static void
+usage (void)
+{
+  char const * const *p;
+
+  printf (_("Usage: %s [OPTION]... FILES\n"), program_name);
+
+  for (p = option_help_msgid;  *p;  p++)
+    {
+      if (!**p)
+	putchar ('\n');
+      else
+	{
+	  char const *msg = _(*p);
+	  char const *nl;
+	  while ((nl = strchr (msg, '\n')))
+	    {
+	      int msglen = nl + 1 - msg;
+	      printf ("  %.*s", msglen, msg);
+	      msg = nl + 1;
+	    }
+
+	  printf ("  %s\n" + 2 * (*msg != ' ' && *msg != '-'), msg);
+	}
+    }
+  emit_bug_reporting_address ();
+}
+
+/* Set VAR to VALUE, reporting an OPTION error if this is a
+   conflict.  */
+static void
+specify_value (char const **var, char const *value, char const *option)
+{
+  if (*var && strcmp (*var, value) != 0)
+    {
+      error (0, 0, _("conflicting %s option value '%s'"), option, value);
+      try_help (NULL, NULL);
+    }
+  *var = value;
+}
+
+/* Set the output style to STYLE, diagnosing conflicts.  */
+static void
+specify_style (enum output_style style)
+{
+  if (output_style != style)
+    {
+      if (output_style != OUTPUT_UNSPECIFIED)
+	try_help ("conflicting output style options", NULL);
+      output_style = style;
+    }
+}
+
+/* Set the last-modified time of *ST to be the current time.  */
+
+static void
+set_mtime_to_now (struct stat *st)
+{
+#ifdef STAT_TIMESPEC
+  gettime (&STAT_TIMESPEC (st, st_mtim));
+#else
+  struct timespec t;
+  gettime (&t);
+  st->st_mtime = t.tv_sec;
+# if defined STAT_TIMESPEC_NS
+  STAT_TIMESPEC_NS (st, st_mtim) = t.tv_nsec;
+# elif defined HAVE_STRUCT_STAT_ST_SPARE1
+  st->st_spare1 = t.tv_nsec / 1000;
+# endif
+#endif
+}
+
+/* Compare two files (or dirs) with parent comparison PARENT
+   and names NAME0 and NAME1.
+   (If PARENT is null, then the first name is just NAME0, etc.)
+   This is self-contained; it opens the files and closes them.
+
+   Value is EXIT_SUCCESS if files are the same, EXIT_FAILURE if
+   different, EXIT_TROUBLE if there is a problem opening them.  */
+
+static int
+compare_files (struct comparison const *parent,
+	       char const *name0,
+	       char const *name1)
+{
+  struct comparison cmp;
+#define DIR_P(f) (S_ISDIR (cmp.file[f].stat.st_mode) != 0)
+  register int f;
+  int status = EXIT_SUCCESS;
+  bool same_files;
+  char *free0;
+  char *free1;
+
+  /* If this is directory comparison, perhaps we have a file
+     that exists only in one of the directories.
+     If so, just print a message to that effect.  */
+
+  if (! ((name0 && name1)
+	 || (unidirectional_new_file && name1)
+	 || new_file))
+    {
+      char const *name = name0 ? name0 : name1;
+      char const *dir = parent->file[!name0].name;
+
+      /* See POSIX 1003.1-2001 for this format.  */
+      message ("Only in %s: %s\n", dir, name);
+
+      /* Return EXIT_FAILURE so that diff_dirs will return
+	 EXIT_FAILURE ("some files differ").  */
+      return EXIT_FAILURE;
+    }
+
+  memset (cmp.file, 0, sizeof cmp.file);
+  cmp.parent = parent;
+
+  /* cmp.file[f].desc markers */
+#define NONEXISTENT (-1) /* nonexistent file */
+#define UNOPENED (-2) /* unopened file (e.g. directory) */
+#define ERRNO_ENCODE(errno) (-3 - (errno)) /* encoded errno value */
+
+#define ERRNO_DECODE(desc) (-3 - (desc)) /* inverse of ERRNO_ENCODE */
+
+  cmp.file[0].desc = name0 ? UNOPENED : NONEXISTENT;
+  cmp.file[1].desc = name1 ? UNOPENED : NONEXISTENT;
+
+  /* Now record the full name of each file, including nonexistent ones.  */
+
+  if (!name0)
+    name0 = name1;
+  if (!name1)
+    name1 = name0;
+
+  if (!parent)
+    {
+      free0 = NULL;
+      free1 = NULL;
+      cmp.file[0].name = name0;
+      cmp.file[1].name = name1;
+    }
+  else
+    {
+      cmp.file[0].name = free0
+	= dir_file_pathname (parent->file[0].name, name0);
+      cmp.file[1].name = free1
+	= dir_file_pathname (parent->file[1].name, name1);
+    }
+
+  /* Stat the files.  */
+
+  for (f = 0; f < 2; f++)
+    {
+      if (cmp.file[f].desc != NONEXISTENT)
+	{
+	  if (f && file_name_cmp (cmp.file[f].name, cmp.file[0].name) == 0)
+	    {
+	      cmp.file[f].desc = cmp.file[0].desc;
+	      cmp.file[f].stat = cmp.file[0].stat;
+	    }
+	  else if (STREQ (cmp.file[f].name, "-"))
+	    {
+	      cmp.file[f].desc = STDIN_FILENO;
+	      if (O_BINARY && binary && ! isatty (STDIN_FILENO))
+		xfreopen (NULL, "rb", stdin);
+	      if (fstat (STDIN_FILENO, &cmp.file[f].stat) != 0)
+		cmp.file[f].desc = ERRNO_ENCODE (errno);
+	      else
+		{
+		  if (S_ISREG (cmp.file[f].stat.st_mode))
+		    {
+		      off_t pos = lseek (STDIN_FILENO, 0, SEEK_CUR);
+		      if (pos < 0)
+			cmp.file[f].desc = ERRNO_ENCODE (errno);
+		      else
+			cmp.file[f].stat.st_size =
+			  MAX (0, cmp.file[f].stat.st_size - pos);
+		    }
+
+		  /* POSIX 1003.1-2001 requires current time for
+		     stdin.  */
+		  set_mtime_to_now (&cmp.file[f].stat);
+		}
+	    }
+	  else if (stat (cmp.file[f].name, &cmp.file[f].stat) != 0)
+	    cmp.file[f].desc = ERRNO_ENCODE (errno);
+	}
+    }
+
+  /* Mark files as nonexistent as needed for -N and -P, if they are
+     inaccessible empty regular files (the kind of files that 'patch'
+     creates to indicate nonexistent backups), or if they are
+     top-level files that do not exist but their counterparts do
+     exist.  */
+  for (f = 0; f < 2; f++)
+    if ((new_file || (f == 0 && unidirectional_new_file))
+	&& (cmp.file[f].desc == UNOPENED
+	    ? (S_ISREG (cmp.file[f].stat.st_mode)
+	       && ! (cmp.file[f].stat.st_mode & (S_IRWXU | S_IRWXG | S_IRWXO))
+	       && cmp.file[f].stat.st_size == 0)
+	    : (cmp.file[f].desc == ERRNO_ENCODE (ENOENT)
+	       && ! parent
+	       && cmp.file[1 - f].desc == UNOPENED)))
+      cmp.file[f].desc = NONEXISTENT;
+
+  for (f = 0; f < 2; f++)
+    if (cmp.file[f].desc == NONEXISTENT)
+      {
+	memset (&cmp.file[f].stat, 0, sizeof cmp.file[f].stat);
+	cmp.file[f].stat.st_mode = cmp.file[1 - f].stat.st_mode;
+      }
+
+  for (f = 0; f < 2; f++)
+    {
+      int e = ERRNO_DECODE (cmp.file[f].desc);
+      if (0 <= e)
+	{
+	  errno = e;
+	  perror_with_name (cmp.file[f].name);
+	  status = EXIT_TROUBLE;
+	}
+    }
+
+  if (status == EXIT_SUCCESS && ! parent && DIR_P (0) != DIR_P (1))
+    {
+      /* If one is a directory, and it was specified in the command line,
+	 use the file in that dir with the other file's basename.  */
+
+      int fnm_arg = DIR_P (0);
+      int dir_arg = 1 - fnm_arg;
+      char const *fnm = cmp.file[fnm_arg].name;
+      char const *dir = cmp.file[dir_arg].name;
+      char const *filename = cmp.file[dir_arg].name = free0
+	= dir_file_pathname (dir, last_component (fnm));
+
+      if (STREQ (fnm, "-"))
+	fatal ("cannot compare '-' to a directory");
+
+      if (stat (filename, &cmp.file[dir_arg].stat) != 0)
+	{
+	  perror_with_name (filename);
+	  status = EXIT_TROUBLE;
+	}
+    }
+
+  if (status != EXIT_SUCCESS)
+    {
+      /* One of the files should exist but does not.  */
+    }
+  else if (cmp.file[0].desc == NONEXISTENT
+	   && cmp.file[1].desc == NONEXISTENT)
+    {
+      /* Neither file "exists", so there's nothing to compare.  */
+    }
+  else if ((same_files
+	    = (cmp.file[0].desc != NONEXISTENT
+	       && cmp.file[1].desc != NONEXISTENT
+	       && 0 < same_file (&cmp.file[0].stat, &cmp.file[1].stat)
+	       && same_file_attributes (&cmp.file[0].stat,
+					&cmp.file[1].stat)))
+	   && no_diff_means_no_output)
+    {
+      /* The two named files are actually the same physical file.
+	 We know they are identical without actually reading them.  */
+    }
+  else if (DIR_P (0) & DIR_P (1))
+    {
+      if (output_style == OUTPUT_IFDEF)
+	fatal ("-D option not supported with directories");
+
+      /* If both are directories, compare the files in them.  */
+
+      if (parent && !recursive)
+	{
+	  /* But don't compare dir contents one level down
+	     unless -r was specified.
+	     See POSIX 1003.1-2001 for this format.  */
+	  message ("Common subdirectories: %s and %s\n",
+		   cmp.file[0].name, cmp.file[1].name);
+	}
+      else
+	status = diff_dirs (&cmp, compare_files);
+    }
+  else if ((DIR_P (0) | DIR_P (1))
+	   || (parent
+	       && (! S_ISREG (cmp.file[0].stat.st_mode)
+		   || ! S_ISREG (cmp.file[1].stat.st_mode))))
+    {
+      if (cmp.file[0].desc == NONEXISTENT || cmp.file[1].desc == NONEXISTENT)
+	{
+	  /* We have a subdirectory that exists only in one directory.  */
+
+	  if ((DIR_P (0) | DIR_P (1))
+	      && recursive
+	      && (new_file
+		  || (unidirectional_new_file
+		      && cmp.file[0].desc == NONEXISTENT)))
+	    status = diff_dirs (&cmp, compare_files);
+	  else
+	    {
+	      char const *dir;
+
+	      /* PARENT must be non-NULL here.  */
+	      assert (parent);
+	      dir = parent->file[cmp.file[0].desc == NONEXISTENT].name;
+
+	      /* See POSIX 1003.1-2001 for this format.  */
+	      message ("Only in %s: %s\n", dir, name0);
+
+	      status = EXIT_FAILURE;
+	    }
+	}
+      else
+	{
+	  /* We have two files that are not to be compared.  */
+
+	  /* See POSIX 1003.1-2001 for this format.  */
+	  message5 ("File %s is a %s while file %s is a %s\n",
+		    file_label[0] ? file_label[0] : cmp.file[0].name,
+		    file_type (&cmp.file[0].stat),
+		    file_label[1] ? file_label[1] : cmp.file[1].name,
+		    file_type (&cmp.file[1].stat));
+
+	  /* This is a difference.  */
+	  status = EXIT_FAILURE;
+	}
+    }
+  else if (files_can_be_treated_as_binary
+	   && S_ISREG (cmp.file[0].stat.st_mode)
+	   && S_ISREG (cmp.file[1].stat.st_mode)
+	   && cmp.file[0].stat.st_size != cmp.file[1].stat.st_size)
+    {
+      message ("Files %s and %s differ\n",
+	       file_label[0] ? file_label[0] : cmp.file[0].name,
+	       file_label[1] ? file_label[1] : cmp.file[1].name);
+      status = EXIT_FAILURE;
+    }
+  else
+    {
+      /* Both exist and neither is a directory.  */
+
+      /* Open the files and record their descriptors.  */
+
+      int oflags = O_RDONLY | (binary ? O_BINARY : 0);
+
+      if (cmp.file[0].desc == UNOPENED)
+	if ((cmp.file[0].desc = open (cmp.file[0].name, oflags, 0)) < 0)
+	  {
+	    perror_with_name (cmp.file[0].name);
+	    status = EXIT_TROUBLE;
+	  }
+      if (cmp.file[1].desc == UNOPENED)
+	{
+	  if (same_files)
+	    cmp.file[1].desc = cmp.file[0].desc;
+	  else if ((cmp.file[1].desc = open (cmp.file[1].name, oflags, 0)) < 0)
+	    {
+	      perror_with_name (cmp.file[1].name);
+	      status = EXIT_TROUBLE;
+	    }
+	}
+
+      /* Compare the files, if no error was found.  */
+
+      if (status == EXIT_SUCCESS)
+	status = diff_2_files (&cmp);
+
+      /* Close the file descriptors.  */
+
+      if (0 <= cmp.file[0].desc && close (cmp.file[0].desc) != 0)
+	{
+	  perror_with_name (cmp.file[0].name);
+	  status = EXIT_TROUBLE;
+	}
+      if (0 <= cmp.file[1].desc && cmp.file[0].desc != cmp.file[1].desc
+	  && close (cmp.file[1].desc) != 0)
+	{
+	  perror_with_name (cmp.file[1].name);
+	  status = EXIT_TROUBLE;
+	}
+    }
+
+  /* Now the comparison has been done, if no error prevented it,
+     and STATUS is the value this function will return.  */
+
+  if (status == EXIT_SUCCESS)
+    {
+      if (report_identical_files && !DIR_P (0))
+	message ("Files %s and %s are identical\n",
+		 file_label[0] ? file_label[0] : cmp.file[0].name,
+		 file_label[1] ? file_label[1] : cmp.file[1].name);
+    }
+  else
+    {
+      /* Flush stdout so that the user sees differences immediately.
+	 This can hurt performance, unfortunately.  */
+      if (fflush (stdout) != 0)
+	pfatal_with_name (_("standard output"));
+    }
+
+  free (free0);
+  free (free1);
+
+  return status;
+}
diff --git a/diffutils-3.0/diff.h b/diffutils-3.0/diff.h
new file mode 100644
index 0000000..71b33f4
--- /dev/null
+++ b/diffutils-3.0/diff.h
@@ -0,0 +1,373 @@
+/* Shared definitions for GNU DIFF
+
+   Copyright (C) 1988-1989, 1991-1995, 1998, 2001-2002, 2004, 2009-2010 Free
+   Software Foundation, Inc.
+
+   This file is part of GNU DIFF.
+
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+#include "system.h"
+#include <regex.h>
+#include <stdio.h>
+#include <unlocked-io.h>
+
+/* What kind of changes a hunk contains.  */
+enum changes
+{
+  /* No changes: lines common to both files.  */
+  UNCHANGED,
+
+  /* Deletes only: lines taken from just the first file.  */
+  OLD,
+
+  /* Inserts only: lines taken from just the second file.  */
+  NEW,
+
+  /* Both deletes and inserts: a hunk containing both old and new lines.  */
+  CHANGED
+};
+
+/* Variables for command line options */
+
+#ifndef GDIFF_MAIN
+# define XTERN extern
+#else
+# define XTERN
+#endif
+
+enum output_style
+{
+  /* No output style specified.  */
+  OUTPUT_UNSPECIFIED,
+
+  /* Default output style.  */
+  OUTPUT_NORMAL,
+
+  /* Output the differences with lines of context before and after (-c).  */
+  OUTPUT_CONTEXT,
+
+  /* Output the differences in a unified context diff format (-u).  */
+  OUTPUT_UNIFIED,
+
+  /* Output the differences as commands suitable for `ed' (-e).  */
+  OUTPUT_ED,
+
+  /* Output the diff as a forward ed script (-f).  */
+  OUTPUT_FORWARD_ED,
+
+  /* Like -f, but output a count of changed lines in each "command" (-n).  */
+  OUTPUT_RCS,
+
+  /* Output merged #ifdef'd file (-D).  */
+  OUTPUT_IFDEF,
+
+  /* Output sdiff style (-y).  */
+  OUTPUT_SDIFF
+};
+
+/* True for output styles that are robust,
+   i.e. can handle a file that ends in a non-newline.  */
+#define ROBUST_OUTPUT_STYLE(S) ((S) != OUTPUT_ED && (S) != OUTPUT_FORWARD_ED)
+
+XTERN enum output_style output_style;
+
+/* Nonzero if output cannot be generated for identical files.  */
+XTERN bool no_diff_means_no_output;
+
+/* Number of lines of context to show in each set of diffs.
+   This is zero when context is not to be shown.  */
+XTERN lin context;
+
+/* Consider all files as text files (-a).
+   Don't interpret codes over 0177 as implying a "binary file".  */
+XTERN bool text;
+
+/* Number of lines to keep in identical prefix and suffix.  */
+XTERN lin horizon_lines;
+
+/* The significance of white space during comparisons.  */
+XTERN enum
+{
+  /* All white space is significant (the default).  */
+  IGNORE_NO_WHITE_SPACE,
+
+  /* Ignore changes due to tab expansion (-E).  */
+  IGNORE_TAB_EXPANSION,
+
+  /* Ignore changes in horizontal white space (-b).  */
+  IGNORE_SPACE_CHANGE,
+
+  /* Ignore all horizontal white space (-w).  */
+  IGNORE_ALL_SPACE
+} ignore_white_space;
+
+/* Ignore changes that affect only blank lines (-B).  */
+XTERN bool ignore_blank_lines;
+
+/* Files can be compared byte-by-byte, as if they were binary.
+   This depends on various options.  */
+XTERN bool files_can_be_treated_as_binary;
+
+/* Ignore differences in case of letters (-i).  */
+XTERN bool ignore_case;
+
+/* Ignore differences in case of letters in file names.  */
+XTERN bool ignore_file_name_case;
+
+/* File labels for `-c' output headers (--label).  */
+XTERN char *file_label[2];
+
+/* Regexp to identify function-header lines (-F).  */
+XTERN struct re_pattern_buffer function_regexp;
+
+/* Ignore changes that affect only lines matching this regexp (-I).  */
+XTERN struct re_pattern_buffer ignore_regexp;
+
+/* Say only whether files differ, not how (-q).  */
+XTERN bool brief;
+
+/* Expand tabs in the output so the text lines up properly
+   despite the characters added to the front of each line (-t).  */
+XTERN bool expand_tabs;
+
+/* Number of columns between tab stops.  */
+XTERN size_t tabsize;
+
+/* Use a tab in the output, rather than a space, before the text of an
+   input line, so as to keep the proper alignment in the input line
+   without changing the characters in it (-T).  */
+XTERN bool initial_tab;
+
+/* Do not output an initial space or tab before the text of an empty line.  */
+XTERN bool suppress_blank_empty;
+
+/* Remove trailing carriage returns from input.  */
+XTERN bool strip_trailing_cr;
+
+/* In directory comparison, specify file to start with (-S).
+   This is used for resuming an aborted comparison.
+   All file names less than this name are ignored.  */
+XTERN char const *starting_file;
+
+/* Pipe each file's output through pr (-l).  */
+XTERN bool paginate;
+
+/* Line group formats for unchanged, old, new, and changed groups.  */
+XTERN char const *group_format[CHANGED + 1];
+
+/* Line formats for unchanged, old, and new lines.  */
+XTERN char const *line_format[NEW + 1];
+
+/* If using OUTPUT_SDIFF print extra information to help the sdiff filter.  */
+XTERN bool sdiff_merge_assist;
+
+/* Tell OUTPUT_SDIFF to show only the left version of common lines.  */
+XTERN bool left_column;
+
+/* Tell OUTPUT_SDIFF to not show common lines.  */
+XTERN bool suppress_common_lines;
+
+/* The half line width and column 2 offset for OUTPUT_SDIFF.  */
+XTERN size_t sdiff_half_width;
+XTERN size_t sdiff_column2_offset;
+
+/* String containing all the command options diff received,
+   with spaces between and at the beginning but none at the end.
+   If there were no options given, this string is empty.  */
+XTERN char *switch_string;
+
+/* Use heuristics for better speed with large files with a small
+   density of changes.  */
+XTERN bool speed_large_files;
+
+/* Patterns that match file names to be excluded.  */
+XTERN struct exclude *excluded;
+
+/* Don't discard lines.  This makes things slower (sometimes much
+   slower) but will find a guaranteed minimal set of changes.  */
+XTERN bool minimal;
+
+/* The strftime format to use for time strings.  */
+XTERN char const *time_format;
+
+/* The result of comparison is an "edit script": a chain of `struct change'.
+   Each `struct change' represents one place where some lines are deleted
+   and some are inserted.
+
+   LINE0 and LINE1 are the first affected lines in the two files (origin 0).
+   DELETED is the number of lines deleted here from file 0.
+   INSERTED is the number of lines inserted here in file 1.
+
+   If DELETED is 0 then LINE0 is the number of the line before
+   which the insertion was done; vice versa for INSERTED and LINE1.  */
+
+struct change
+{
+  struct change *link;		/* Previous or next edit command  */
+  lin inserted;			/* # lines of file 1 changed here.  */
+  lin deleted;			/* # lines of file 0 changed here.  */
+  lin line0;			/* Line number of 1st deleted line.  */
+  lin line1;			/* Line number of 1st inserted line.  */
+  bool ignore;			/* Flag used in context.c.  */
+};
+
+/* Structures that describe the input files.  */
+
+/* Data on one input file being compared.  */
+
+struct file_data {
+    int             desc;	/* File descriptor  */
+    char const      *name;	/* File name  */
+    struct stat     stat;	/* File status */
+
+    /* Buffer in which text of file is read.  */
+    word *buffer;
+
+    /* Allocated size of buffer, in bytes.  Always a multiple of
+       sizeof *buffer.  */
+    size_t bufsize;
+
+    /* Number of valid bytes now in the buffer.  */
+    size_t buffered;
+
+    /* Array of pointers to lines in the file.  */
+    char const **linbuf;
+
+    /* linbuf_base <= buffered_lines <= valid_lines <= alloc_lines.
+       linebuf[linbuf_base ... buffered_lines - 1] are possibly differing.
+       linebuf[linbuf_base ... valid_lines - 1] contain valid data.
+       linebuf[linbuf_base ... alloc_lines - 1] are allocated.  */
+    lin linbuf_base, buffered_lines, valid_lines, alloc_lines;
+
+    /* Pointer to end of prefix of this file to ignore when hashing.  */
+    char const *prefix_end;
+
+    /* Count of lines in the prefix.
+       There are this many lines in the file before linbuf[0].  */
+    lin prefix_lines;
+
+    /* Pointer to start of suffix of this file to ignore when hashing.  */
+    char const *suffix_begin;
+
+    /* Vector, indexed by line number, containing an equivalence code for
+       each line.  It is this vector that is actually compared with that
+       of another file to generate differences.  */
+    lin *equivs;
+
+    /* Vector, like the previous one except that
+       the elements for discarded lines have been squeezed out.  */
+    lin *undiscarded;
+
+    /* Vector mapping virtual line numbers (not counting discarded lines)
+       to real ones (counting those lines).  Both are origin-0.  */
+    lin *realindexes;
+
+    /* Total number of nondiscarded lines.  */
+    lin nondiscarded_lines;
+
+    /* Vector, indexed by real origin-0 line number,
+       containing 1 for a line that is an insertion or a deletion.
+       The results of comparison are stored here.  */
+    char *changed;
+
+    /* 1 if file ends in a line with no final newline.  */
+    bool missing_newline;
+
+    /* 1 if at end of file.  */
+    bool eof;
+
+    /* 1 more than the maximum equivalence value used for this or its
+       sibling file.  */
+    lin equiv_max;
+};
+
+/* The file buffer, considered as an array of bytes rather than
+   as an array of words.  */
+#define FILE_BUFFER(f) ((char *) (f)->buffer)
+
+/* Data on two input files being compared.  */
+
+struct comparison
+  {
+    struct file_data file[2];
+    struct comparison const *parent;  /* parent, if a recursive comparison */
+  };
+
+/* Describe the two files currently being compared.  */
+
+XTERN struct file_data files[2];
+
+/* Stdio stream to output diffs to.  */
+
+XTERN FILE *outfile;
+
+/* Declare various functions.  */
+
+/* analyze.c */
+int diff_2_files (struct comparison *);
+
+/* context.c */
+void print_context_header (struct file_data[], bool);
+void print_context_script (struct change *, bool);
+
+/* dir.c */
+int diff_dirs (struct comparison const *, int (*) (struct comparison const *, char const *, char const *));
+
+/* ed.c */
+void print_ed_script (struct change *);
+void pr_forward_ed_script (struct change *);
+
+/* ifdef.c */
+void print_ifdef_script (struct change *);
+
+/* io.c */
+void file_block_read (struct file_data *, size_t);
+bool read_files (struct file_data[], bool);
+
+/* normal.c */
+void print_normal_script (struct change *);
+
+/* rcs.c */
+void print_rcs_script (struct change *);
+
+/* side.c */
+void print_sdiff_script (struct change *);
+
+/* util.c */
+extern char const change_letter[4];
+extern char const pr_program[];
+char *concat (char const *, char const *, char const *);
+char *dir_file_pathname (char const *, char const *);
+bool lines_differ (char const *, char const *);
+lin translate_line_number (struct file_data const *, lin);
+struct change *find_change (struct change *);
+struct change *find_reverse_change (struct change *);
+void *zalloc (size_t);
+enum changes analyze_hunk (struct change *, lin *, lin *, lin *, lin *);
+void begin_output (void);
+void debug_script (struct change *);
+void fatal (char const *) __attribute__((noreturn));
+void finish_output (void);
+void message (char const *, char const *, char const *);
+void message5 (char const *, char const *, char const *, char const *, char const *);
+void output_1_line (char const *, char const *, char const *, char const *);
+void perror_with_name (char const *);
+void pfatal_with_name (char const *) __attribute__((noreturn));
+void print_1_line (char const *, char const * const *);
+void print_message_queue (void);
+void print_number_range (char, struct file_data *, lin, lin);
+void print_script (struct change *, struct change * (*) (struct change *), void (*) (struct change *));
+void setup_output (char const *, char const *, bool);
+void translate_range (struct file_data const *, lin, lin, long int *, long int *);
diff --git a/diffutils-3.0/diff3 b/diffutils-3.0/diff3
new file mode 100755
index 0000000000000000000000000000000000000000..d80667a96403cd2525c8a4b6582201e782458d18
GIT binary patch
literal 238717
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
G;`<*vbQXvJ

literal 0
HcmV?d00001

diff --git a/diffutils-3.0/diff3.c b/diffutils-3.0/diff3.c
new file mode 100644
index 0000000..fbfb28b
--- /dev/null
+++ b/diffutils-3.0/diff3.c
@@ -0,0 +1,1747 @@
+/* diff3 - compare three files line by line
+
+   Copyright (C) 1988-1989, 1992-1996, 1998, 2001-2002, 2004, 2006, 2009-2010
+   Free Software Foundation, Inc.
+
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+#include "system.h"
+#include "paths.h"
+
+#include <stdio.h>
+#include <unlocked-io.h>
+
+#include <c-stack.h>
+#include <cmpbuf.h>
+#include <error.h>
+#include <exitfail.h>
+#include <file-type.h>
+#include <getopt.h>
+#include <inttostr.h>
+#include <progname.h>
+#include <sh-quote.h>
+#include <version-etc.h>
+#include <xalloc.h>
+#include <xfreopen.h>
+
+/* The official name of this program (e.g., no `g' prefix).  */
+#define PROGRAM_NAME "diff3"
+
+#define AUTHORS \
+  proper_name ("Randy Smith")
+
+/* Internal data structures and macros for the diff3 program; includes
+   data structures for both diff3 diffs and normal diffs.  */
+
+/* Different files within a three way diff.  */
+#define	FILE0	0
+#define	FILE1	1
+#define	FILE2	2
+
+/* A three way diff is built from two two-way diffs; the file which
+   the two two-way diffs share is:  */
+#define	FILEC	FILE2
+
+/* Different files within a two way diff.
+   FC is the common file, FO the other file.  */
+#define FO 0
+#define FC 1
+
+/* The ranges are indexed by */
+#define	RANGE_START	0
+#define	RANGE_END	1
+
+enum diff_type {
+  ERROR,			/* Should not be used */
+  ADD,				/* Two way diff add */
+  CHANGE,			/* Two way diff change */
+  DELETE,			/* Two way diff delete */
+  DIFF_ALL,			/* All three are different */
+  DIFF_1ST,			/* Only the first is different */
+  DIFF_2ND,			/* Only the second */
+  DIFF_3RD			/* Only the third */
+};
+
+/* Two way diff */
+struct diff_block {
+  lin ranges[2][2];		/* Ranges are inclusive */
+  char **lines[2];		/* The actual lines (may contain nulls) */
+  size_t *lengths[2];		/* Line lengths (including newlines, if any) */
+  struct diff_block *next;
+};
+
+/* Three way diff */
+
+struct diff3_block {
+  enum diff_type correspond;	/* Type of diff */
+  lin ranges[3][2];		/* Ranges are inclusive */
+  char **lines[3];		/* The actual lines (may contain nulls) */
+  size_t *lengths[3];		/* Line lengths (including newlines, if any) */
+  struct diff3_block *next;
+};
+
+/* Access the ranges on a diff block.  */
+#define	D_LOWLINE(diff, filenum)	\
+  ((diff)->ranges[filenum][RANGE_START])
+#define	D_HIGHLINE(diff, filenum)	\
+  ((diff)->ranges[filenum][RANGE_END])
+#define	D_NUMLINES(diff, filenum)	\
+  (D_HIGHLINE (diff, filenum) - D_LOWLINE (diff, filenum) + 1)
+
+/* Access the line numbers in a file in a diff by relative line
+   numbers (i.e. line number within the diff itself).  Note that these
+   are lvalues and can be used for assignment.  */
+#define	D_RELNUM(diff, filenum, linenum)	\
+  ((diff)->lines[filenum][linenum])
+#define	D_RELLEN(diff, filenum, linenum)	\
+  ((diff)->lengths[filenum][linenum])
+
+/* And get at them directly, when that should be necessary.  */
+#define	D_LINEARRAY(diff, filenum)	\
+  ((diff)->lines[filenum])
+#define	D_LENARRAY(diff, filenum)	\
+  ((diff)->lengths[filenum])
+
+/* Next block.  */
+#define	D_NEXT(diff)	((diff)->next)
+
+/* Access the type of a diff3 block.  */
+#define	D3_TYPE(diff)	((diff)->correspond)
+
+/* Line mappings based on diffs.  The first maps off the top of the
+   diff, the second off of the bottom.  */
+#define	D_HIGH_MAPLINE(diff, fromfile, tofile, linenum)	\
+  ((linenum)						\
+   - D_HIGHLINE ((diff), (fromfile))			\
+   + D_HIGHLINE ((diff), (tofile)))
+
+#define	D_LOW_MAPLINE(diff, fromfile, tofile, linenum)	\
+  ((linenum)						\
+   - D_LOWLINE ((diff), (fromfile))			\
+   + D_LOWLINE ((diff), (tofile)))
+
+/* Options variables for flags set on command line.  */
+
+/* If nonzero, treat all files as text files, never as binary.  */
+static bool text;
+
+/* Remove trailing carriage returns from input.  */
+static bool strip_trailing_cr;
+
+/* If nonzero, write out an ed script instead of the standard diff3 format.  */
+static bool edscript;
+
+/* If nonzero, in the case of overlapping diffs (type DIFF_ALL),
+   preserve the lines which would normally be deleted from
+   file 1 with a special flagging mechanism.  */
+static bool flagging;
+
+/* Use a tab to align output lines (-T).  */
+static bool initial_tab;
+
+/* If nonzero, do not output information for overlapping diffs.  */
+static bool simple_only;
+
+/* If nonzero, do not output information for non-overlapping diffs.  */
+static bool overlap_only;
+
+/* If nonzero, show information for DIFF_2ND diffs.  */
+static bool show_2nd;
+
+/* If nonzero, include `:wq' at the end of the script
+   to write out the file being edited.   */
+static bool finalwrite;
+
+/* If nonzero, output a merged file.  */
+static bool merge;
+
+static char *read_diff (char const *, char const *, char **);
+static char *scan_diff_line (char *, char **, size_t *, char *, char);
+static enum diff_type process_diff_control (char **, struct diff_block *);
+static bool compare_line_list (char * const[], size_t const[], char * const[], size_t const[], lin);
+static bool copy_stringlist (char * const[], size_t const[], char *[], size_t[], lin);
+static bool output_diff3_edscript (FILE *, struct diff3_block *, int const[3], int const[3], char const *, char const *, char const *);
+static bool output_diff3_merge (FILE *, FILE *, struct diff3_block *, int const[3], int const[3], char const *, char const *, char const *);
+static struct diff3_block *create_diff3_block (lin, lin, lin, lin, lin, lin);
+static struct diff3_block *make_3way_diff (struct diff_block *, struct diff_block *);
+static struct diff3_block *reverse_diff3_blocklist (struct diff3_block *);
+static struct diff3_block *using_to_diff3_block (struct diff_block *[2], struct diff_block *[2], int, int, struct diff3_block const *);
+static struct diff_block *process_diff (char const *, char const *, struct diff_block **);
+static void check_stdout (void);
+static void fatal (char const *) __attribute__((noreturn));
+static void output_diff3 (FILE *, struct diff3_block *, int const[3], int const[3]);
+static void perror_with_exit (char const *) __attribute__((noreturn));
+static void try_help (char const *, char const *) __attribute__((noreturn));
+static void usage (void);
+
+static char const *diff_program = DEFAULT_DIFF_PROGRAM;
+
+/* Values for long options that do not have single-letter equivalents.  */
+enum
+{
+  DIFF_PROGRAM_OPTION = CHAR_MAX + 1,
+  HELP_OPTION,
+  STRIP_TRAILING_CR_OPTION
+};
+
+static struct option const longopts[] =
+{
+  {"diff-program", 1, 0, DIFF_PROGRAM_OPTION},
+  {"easy-only", 0, 0, '3'},
+  {"ed", 0, 0, 'e'},
+  {"help", 0, 0, HELP_OPTION},
+  {"initial-tab", 0, 0, 'T'},
+  {"label", 1, 0, 'L'},
+  {"merge", 0, 0, 'm'},
+  {"overlap-only", 0, 0, 'x'},
+  {"show-all", 0, 0, 'A'},
+  {"show-overlap", 0, 0, 'E'},
+  {"strip-trailing-cr", 0, 0, STRIP_TRAILING_CR_OPTION},
+  {"text", 0, 0, 'a'},
+  {"version", 0, 0, 'v'},
+  {0, 0, 0, 0}
+};
+
+int
+main (int argc, char **argv)
+{
+  int c, i;
+  int common;
+  int mapping[3];
+  int rev_mapping[3];
+  int incompat = 0;
+  bool conflicts_found;
+  struct diff_block *thread0, *thread1, *last_block;
+  struct diff3_block *diff3;
+  int tag_count = 0;
+  char *tag_strings[3];
+  char *commonname;
+  char **file;
+  struct stat statb;
+
+  exit_failure = EXIT_TROUBLE;
+  initialize_main (&argc, &argv);
+  set_program_name (argv[0]);
+  setlocale (LC_ALL, "");
+  bindtextdomain (PACKAGE, LOCALEDIR);
+  textdomain (PACKAGE);
+  c_stack_action (0);
+
+  while ((c = getopt_long (argc, argv, "aeimvx3AEL:TX", longopts, 0)) != -1)
+    {
+      switch (c)
+	{
+	case 'a':
+	  text = true;
+	  break;
+	case 'A':
+	  show_2nd = true;
+	  flagging = true;
+	  incompat++;
+	  break;
+	case 'x':
+	  overlap_only = true;
+	  incompat++;
+	  break;
+	case '3':
+	  simple_only = true;
+	  incompat++;
+	  break;
+	case 'i':
+	  finalwrite = true;
+	  break;
+	case 'm':
+	  merge = true;
+	  break;
+	case 'X':
+	  overlap_only = true;
+	  /* Fall through.  */
+	case 'E':
+	  flagging = true;
+	  /* Fall through.  */
+	case 'e':
+	  incompat++;
+	  break;
+	case 'T':
+	  initial_tab = true;
+	  break;
+	case STRIP_TRAILING_CR_OPTION:
+	  strip_trailing_cr = true;
+	  break;
+	case 'v':
+	  version_etc (stdout, PROGRAM_NAME, PACKAGE_NAME, PACKAGE_VERSION,
+		       AUTHORS, (char *) NULL);
+	  check_stdout ();
+	  return EXIT_SUCCESS;
+	case DIFF_PROGRAM_OPTION:
+	  diff_program = optarg;
+	  break;
+	case HELP_OPTION:
+	  usage ();
+	  check_stdout ();
+	  return EXIT_SUCCESS;
+	case 'L':
+	  /* Handle up to three -L options.  */
+	  if (tag_count < 3)
+	    {
+	      tag_strings[tag_count++] = optarg;
+	      break;
+	    }
+	  try_help ("too many file label options", 0);
+	default:
+	  try_help (0, 0);
+	}
+    }
+
+  edscript = incompat & ~merge;  /* -AeExX3 without -m implies ed script.  */
+  show_2nd |= ~incompat & merge;  /* -m without -AeExX3 implies -A.  */
+  flagging |= ~incompat & merge;
+
+  if (incompat > 1  /* Ensure at most one of -AeExX3.  */
+      || finalwrite & merge /* -i -m would rewrite input file.  */
+      || (tag_count && ! flagging)) /* -L requires one of -AEX.  */
+    try_help ("incompatible options", 0);
+
+  if (argc - optind != 3)
+    {
+      if (argc - optind < 3)
+	try_help ("missing operand after '%s'", argv[argc - 1]);
+      else
+	try_help ("extra operand '%s'", argv[optind + 3]);
+    }
+
+  file = &argv[optind];
+
+  for (i = tag_count; i < 3; i++)
+    tag_strings[i] = file[i];
+
+  /* Always compare file1 to file2, even if file2 is "-".
+     This is needed for -mAeExX3.  Using the file0 as
+     the common file would produce wrong results, because if the
+     file0-file1 diffs didn't line up with the file0-file2 diffs
+     (which is entirely possible since we don't use diff's -n option),
+     diff3 might report phantom changes from file1 to file2.
+
+     Also, try to compare file0 to file1, because this is where
+     changes are expected to come from.  Diffing between these pairs
+     of files is more likely to avoid phantom changes from file0 to file1.
+
+     Historically, the default common file was file2, so some older
+     applications (e.g. Emacs ediff) used file2 as the ancestor.  So,
+     for compatibility, if this is a 3-way diff (not a merge or
+     edscript), prefer file2 as the common file.  */
+
+  common = 2 - (edscript | merge);
+
+  if (STREQ (file[common], "-"))
+    {
+      /* Sigh.  We've got standard input as the common file.  We can't
+	 call diff twice on stdin.  Use the other arg as the common
+	 file instead.  */
+      common = 3 - common;
+      if (STREQ (file[0], "-") || STREQ (file[common], "-"))
+	fatal ("'-' specified for more than one input file");
+    }
+
+  mapping[0] = 0;
+  mapping[1] = 3 - common;
+  mapping[2] = common;
+
+  for (i = 0; i < 3; i++)
+    rev_mapping[mapping[i]] = i;
+
+  for (i = 0; i < 3; i++)
+    if (strcmp (file[i], "-") != 0)
+      {
+	if (stat (file[i], &statb) < 0)
+	  perror_with_exit (file[i]);
+	else if (S_ISDIR (statb.st_mode))
+	  error (EXIT_TROUBLE, EISDIR, "%s", file[i]);
+      }
+
+#ifdef SIGCHLD
+  /* System V fork+wait does not work if SIGCHLD is ignored.  */
+  signal (SIGCHLD, SIG_DFL);
+#endif
+
+  /* Invoke diff twice on two pairs of input files, combine the two
+     diffs, and output them.  */
+
+  commonname = file[rev_mapping[FILEC]];
+  thread1 = process_diff (file[rev_mapping[FILE1]], commonname, &last_block);
+  thread0 = process_diff (file[rev_mapping[FILE0]], commonname, &last_block);
+  diff3 = make_3way_diff (thread0, thread1);
+  if (edscript)
+    conflicts_found
+      = output_diff3_edscript (stdout, diff3, mapping, rev_mapping,
+			       tag_strings[0], tag_strings[1], tag_strings[2]);
+  else if (merge)
+    {
+      xfreopen (file[rev_mapping[FILE0]], "r", stdin);
+      conflicts_found
+	= output_diff3_merge (stdin, stdout, diff3, mapping, rev_mapping,
+			      tag_strings[0], tag_strings[1], tag_strings[2]);
+      if (ferror (stdin))
+	fatal ("read failed");
+    }
+  else
+    {
+      output_diff3 (stdout, diff3, mapping, rev_mapping);
+      conflicts_found = false;
+    }
+
+  check_stdout ();
+  exit (conflicts_found);
+  return conflicts_found;
+}
+
+static void
+try_help (char const *reason_msgid, char const *operand)
+{
+  if (reason_msgid)
+    error (0, 0, _(reason_msgid), operand);
+  error (EXIT_TROUBLE, 0,
+	 _("Try '%s --help' for more information."), program_name);
+  abort ();
+}
+
+static void
+check_stdout (void)
+{
+  if (ferror (stdout))
+    fatal ("write failed");
+  else if (fclose (stdout) != 0)
+    perror_with_exit (_("standard output"));
+}
+
+static char const * const option_help_msgid[] = {
+  N_("-e  --ed  Output unmerged changes from OLDFILE to YOURFILE into MYFILE."),
+  N_("-E  --show-overlap  Output unmerged changes, bracketing conflicts."),
+  N_("-A  --show-all  Output all changes, bracketing conflicts."),
+  N_("-x  --overlap-only  Output overlapping changes."),
+  N_("-X  Output overlapping changes, bracketing them."),
+  N_("-3  --easy-only  Output unmerged nonoverlapping changes."),
+  "",
+  N_("-m  --merge  Output merged file instead of ed script (default -A)."),
+  N_("-L LABEL  --label=LABEL  Use LABEL instead of file name."),
+  N_("-i  Append 'w' and 'q' commands to ed scripts."),
+  N_("-a  --text  Treat all files as text."),
+  N_("--strip-trailing-cr  Strip trailing carriage return on input."),
+  N_("-T  --initial-tab  Make tabs line up by prepending a tab."),
+  N_("--diff-program=PROGRAM  Use PROGRAM to compare files."),
+  "",
+  N_("-v  --version  Output version info."),
+  N_("--help  Output this help."),
+  0
+};
+
+static void
+usage (void)
+{
+  char const * const *p;
+
+  printf (_("Usage: %s [OPTION]... MYFILE OLDFILE YOURFILE\n"),
+	  program_name);
+  printf ("%s\n\n", _("Compare three files line by line."));
+  for (p = option_help_msgid;  *p;  p++)
+    if (**p)
+      printf ("  %s\n", _(*p));
+    else
+      putchar ('\n');
+  printf ("\n%s\n%s\n",
+	  _("If a FILE is '-', read standard input."),
+	  _("Exit status is 0 if successful, 1 if conflicts, 2 if trouble."));
+  emit_bug_reporting_address ();
+}
+
+/* Combine the two diffs together into one.
+   Here is the algorithm:
+
+     File2 is shared in common between the two diffs.
+     Diff02 is the diff between 0 and 2.
+     Diff12 is the diff between 1 and 2.
+
+	1) Find the range for the first block in File2.
+	    a) Take the lowest of the two ranges (in File2) in the two
+	       current blocks (one from each diff) as being the low
+	       water mark.  Assign the upper end of this block as
+	       being the high water mark and move the current block up
+	       one.  Mark the block just moved over as to be used.
+	    b) Check the next block in the diff that the high water
+	       mark is *not* from.
+
+	       *If* the high water mark is above
+	       the low end of the range in that block,
+
+		   mark that block as to be used and move the current
+		   block up.  Set the high water mark to the max of
+		   the high end of this block and the current.  Repeat b.
+
+	 2) Find the corresponding ranges in File0 (from the blocks
+	    in diff02; line per line outside of diffs) and in File1.
+	    Create a diff3_block, reserving space as indicated by the ranges.
+
+	 3) Copy all of the pointers for file2 in.  At least for now,
+	    do memcmp's between corresponding strings in the two diffs.
+
+	 4) Copy all of the pointers for file0 and 1 in.  Get what is
+	    needed from file2 (when there isn't a diff block, it's
+	    identical to file2 within the range between diff blocks).
+
+	 5) If the diff blocks used came from only one of the two
+	    strings of diffs, then that file (i.e. the one other than
+	    the common file in that diff) is the odd person out.  If
+	    diff blocks are used from both sets, check to see if files
+	    0 and 1 match:
+
+		Same number of lines?  If so, do a set of memcmp's (if
+	    a memcmp matches; copy the pointer over; it'll be easier
+	    later during comparisons).  If they match, 0 & 1 are the
+	    same.  If not, all three different.
+
+     Then do it again, until the blocks are exhausted.  */
+
+
+/* Make a three way diff (chain of diff3_block's) from two two way
+   diffs (chains of diff_block's).  Assume that each of the two diffs
+   passed are onto the same file (i.e. that each of the diffs were
+   made "to" the same file).  Return a three way diff pointer with
+   numbering FILE0 = the other file in diff02, FILE1 = the other file
+   in diff12, and FILEC = the common file.  */
+
+static struct diff3_block *
+make_3way_diff (struct diff_block *thread0, struct diff_block *thread1)
+{
+  /* Work on the two diffs passed to it as threads.  Thread number 0
+     is diff02, thread number 1 is diff12.  USING is the base of the
+     list of blocks to be used to construct each block of the three
+     way diff; if no blocks from a particular thread are to be used,
+     that element of USING is 0.  LAST_USING contains the last
+     elements on each of the using lists.
+
+     HIGH_WATER_MARK is the highest line number in the common file
+     described in any of the diffs in either of the USING lists.
+     HIGH_WATER_THREAD names the thread.  Similarly BASE_WATER_MARK
+     and BASE_WATER_THREAD describe the lowest line number in the
+     common file described in any of the diffs in either of the USING
+     lists.  HIGH_WATER_DIFF is the diff from which the
+     HIGH_WATER_MARK was taken.
+
+     HIGH_WATER_DIFF should always be equal to
+     LAST_USING[HIGH_WATER_THREAD].  OTHER_DIFF is the next diff to
+     check for higher water, and should always be equal to
+     CURRENT[HIGH_WATER_THREAD ^ 1].  OTHER_THREAD is the thread in
+     which the OTHER_DIFF is, and hence should always be equal to
+     HIGH_WATER_THREAD ^ 1.
+
+     LAST_DIFF is the last diff block produced by this routine, for
+     line correspondence purposes between that diff and the one
+     currently being worked on.  It is ZERO_DIFF before any blocks
+     have been created.  */
+
+  struct diff_block *using[2];
+  struct diff_block *last_using[2];
+  struct diff_block *current[2];
+
+  lin high_water_mark;
+
+  int high_water_thread;
+  int base_water_thread;
+  int other_thread;
+
+  struct diff_block *high_water_diff;
+  struct diff_block *other_diff;
+
+  struct diff3_block *result;
+  struct diff3_block *tmpblock;
+  struct diff3_block **result_end;
+
+  struct diff3_block const *last_diff3;
+
+  static struct diff3_block const zero_diff3;
+
+  /* Initialization */
+  result = 0;
+  result_end = &result;
+  current[0] = thread0; current[1] = thread1;
+  last_diff3 = &zero_diff3;
+
+  /* Sniff up the threads until we reach the end */
+
+  while (current[0] || current[1])
+    {
+      using[0] = using[1] = last_using[0] = last_using[1] = 0;
+
+      /* Setup low and high water threads, diffs, and marks.  */
+      if (!current[0])
+	base_water_thread = 1;
+      else if (!current[1])
+	base_water_thread = 0;
+      else
+	base_water_thread =
+	  (D_LOWLINE (current[0], FC) > D_LOWLINE (current[1], FC));
+
+      high_water_thread = base_water_thread;
+
+      high_water_diff = current[high_water_thread];
+
+      high_water_mark = D_HIGHLINE (high_water_diff, FC);
+
+      /* Make the diff you just got info from into the using class */
+      using[high_water_thread]
+	= last_using[high_water_thread]
+	= high_water_diff;
+      current[high_water_thread] = high_water_diff->next;
+      last_using[high_water_thread]->next = 0;
+
+      /* And mark the other diff */
+      other_thread = high_water_thread ^ 0x1;
+      other_diff = current[other_thread];
+
+      /* Shuffle up the ladder, checking the other diff to see if it
+	 needs to be incorporated.  */
+      while (other_diff
+	     && D_LOWLINE (other_diff, FC) <= high_water_mark + 1)
+	{
+
+	  /* Incorporate this diff into the using list.  Note that
+	     this doesn't take it off the current list */
+	  if (using[other_thread])
+	    last_using[other_thread]->next = other_diff;
+	  else
+	    using[other_thread] = other_diff;
+	  last_using[other_thread] = other_diff;
+
+	  /* Take it off the current list.  Note that this following
+	     code assumes that other_diff enters it equal to
+	     current[high_water_thread ^ 0x1] */
+	  current[other_thread] = current[other_thread]->next;
+	  other_diff->next = 0;
+
+	  /* Set the high_water stuff
+	     If this comparison is equal, then this is the last pass
+	     through this loop; since diff blocks within a given
+	     thread cannot overlap, the high_water_mark will be
+	     *below* the range_start of either of the next diffs.  */
+
+	  if (high_water_mark < D_HIGHLINE (other_diff, FC))
+	    {
+	      high_water_thread ^= 1;
+	      high_water_mark = D_HIGHLINE (other_diff, FC);
+	    }
+
+	  /* Set the other diff */
+	  other_thread = high_water_thread ^ 0x1;
+	  other_diff = current[other_thread];
+	}
+
+      /* The using lists contain a list of all of the blocks to be
+	 included in this diff3_block.  Create it.  */
+
+      tmpblock = using_to_diff3_block (using, last_using,
+				       base_water_thread, high_water_thread,
+				       last_diff3);
+
+      if (!tmpblock)
+	fatal ("internal error: screwup in format of diff blocks");
+
+      /* Put it on the list.  */
+      *result_end = tmpblock;
+      result_end = &tmpblock->next;
+
+      /* Set up corresponding lines correctly.  */
+      last_diff3 = tmpblock;
+    }
+  return result;
+}
+
+/* Take two lists of blocks (from two separate diff threads) and put
+   them together into one diff3 block.  Return a pointer to this diff3
+   block or 0 for failure.
+
+   All arguments besides using are for the convenience of the routine;
+   they could be derived from the using array.  LAST_USING is a pair
+   of pointers to the last blocks in the using structure.  LOW_THREAD
+   and HIGH_THREAD tell which threads contain the lowest and highest
+   line numbers for File0.  LAST_DIFF3 contains the last diff produced
+   in the calling routine.  This is used for lines mappings that
+   would still be identical to the state that diff ended in.
+
+   A distinction should be made in this routine between the two diffs
+   that are part of a normal two diff block, and the three diffs that
+   are part of a diff3_block.  */
+
+static struct diff3_block *
+using_to_diff3_block (struct diff_block *using[2],
+		      struct diff_block *last_using[2],
+		      int low_thread, int high_thread,
+		      struct diff3_block const *last_diff3)
+{
+  lin low[2], high[2];
+  struct diff3_block *result;
+  struct diff_block *ptr;
+  int d;
+  lin i;
+
+  /* Find the range in the common file.  */
+  lin lowc = D_LOWLINE (using[low_thread], FC);
+  lin highc = D_HIGHLINE (last_using[high_thread], FC);
+
+  /* Find the ranges in the other files.
+     If using[d] is null, that means that the file to which that diff
+     refers is equivalent to the common file over this range.  */
+
+  for (d = 0; d < 2; d++)
+    if (using[d])
+      {
+	low[d] = D_LOW_MAPLINE (using[d], FC, FO, lowc);
+	high[d] = D_HIGH_MAPLINE (last_using[d], FC, FO, highc);
+      }
+    else
+      {
+	low[d] = D_HIGH_MAPLINE (last_diff3, FILEC, FILE0 + d, lowc);
+	high[d] = D_HIGH_MAPLINE (last_diff3, FILEC, FILE0 + d, highc);
+      }
+
+  /* Create a block with the appropriate sizes */
+  result = create_diff3_block (low[0], high[0], low[1], high[1], lowc, highc);
+
+  /* Copy information for the common file.
+     Return with a zero if any of the compares failed.  */
+
+  for (d = 0; d < 2; d++)
+    for (ptr = using[d]; ptr; ptr = D_NEXT (ptr))
+      {
+	lin result_offset = D_LOWLINE (ptr, FC) - lowc;
+
+	if (!copy_stringlist (D_LINEARRAY (ptr, FC),
+			      D_LENARRAY (ptr, FC),
+			      D_LINEARRAY (result, FILEC) + result_offset,
+			      D_LENARRAY (result, FILEC) + result_offset,
+			      D_NUMLINES (ptr, FC)))
+	  return 0;
+      }
+
+  /* Copy information for file d.  First deal with anything that might be
+     before the first diff.  */
+
+  for (d = 0; d < 2; d++)
+    {
+      struct diff_block *u = using[d];
+      lin lo = low[d], hi = high[d];
+
+      for (i = 0;
+	   i + lo < (u ? D_LOWLINE (u, FO) : hi + 1);
+	   i++)
+	{
+	  D_RELNUM (result, FILE0 + d, i) = D_RELNUM (result, FILEC, i);
+	  D_RELLEN (result, FILE0 + d, i) = D_RELLEN (result, FILEC, i);
+	}
+
+      for (ptr = u; ptr; ptr = D_NEXT (ptr))
+	{
+	  lin result_offset = D_LOWLINE (ptr, FO) - lo;
+	  lin linec;
+
+	  if (!copy_stringlist (D_LINEARRAY (ptr, FO),
+				D_LENARRAY (ptr, FO),
+				D_LINEARRAY (result, FILE0 + d) + result_offset,
+				D_LENARRAY (result, FILE0 + d) + result_offset,
+				D_NUMLINES (ptr, FO)))
+	    return 0;
+
+	  /* Catch the lines between here and the next diff */
+	  linec = D_HIGHLINE (ptr, FC) + 1 - lowc;
+	  for (i = D_HIGHLINE (ptr, FO) + 1 - lo;
+	       i < (D_NEXT (ptr) ? D_LOWLINE (D_NEXT (ptr), FO) : hi + 1) - lo;
+	       i++)
+	    {
+	      D_RELNUM (result, FILE0 + d, i) = D_RELNUM (result, FILEC, linec);
+	      D_RELLEN (result, FILE0 + d, i) = D_RELLEN (result, FILEC, linec);
+	      linec++;
+	    }
+	}
+    }
+
+  /* Set correspond */
+  if (!using[0])
+    D3_TYPE (result) = DIFF_2ND;
+  else if (!using[1])
+    D3_TYPE (result) = DIFF_1ST;
+  else
+    {
+      lin nl0 = D_NUMLINES (result, FILE0);
+      lin nl1 = D_NUMLINES (result, FILE1);
+
+      if (nl0 != nl1
+	  || !compare_line_list (D_LINEARRAY (result, FILE0),
+				 D_LENARRAY (result, FILE0),
+				 D_LINEARRAY (result, FILE1),
+				 D_LENARRAY (result, FILE1),
+				 nl0))
+	D3_TYPE (result) = DIFF_ALL;
+      else
+	D3_TYPE (result) = DIFF_3RD;
+    }
+
+  return result;
+}
+
+/* Copy pointers from a list of strings to a different list of
+   strings.  If a spot in the second list is already filled, make sure
+   that it is filled with the same string; if not, return false, the copy
+   incomplete.  Upon successful completion of the copy, return true.  */
+
+static bool
+copy_stringlist (char * const fromptrs[], size_t const fromlengths[],
+		 char *toptrs[], size_t tolengths[],
+		 lin copynum)
+{
+  register char * const *f = fromptrs;
+  register char **t = toptrs;
+  register size_t const *fl = fromlengths;
+  register size_t *tl = tolengths;
+
+  while (copynum--)
+    {
+      if (*t)
+	{
+	  if (*fl != *tl || memcmp (*f, *t, *fl) != 0)
+	    return false;
+	}
+      else
+	{
+	  *t = *f;
+	  *tl = *fl;
+	}
+
+      t++; f++; tl++; fl++;
+    }
+
+  return true;
+}
+
+/* Create a diff3_block, with ranges as specified in the arguments.
+   Allocate the arrays for the various pointers (and zero them) based
+   on the arguments passed.  Return the block as a result.  */
+
+static struct diff3_block *
+create_diff3_block (lin low0, lin high0,
+		    lin low1, lin high1,
+		    lin low2, lin high2)
+{
+  struct diff3_block *result = xmalloc (sizeof *result);
+  lin numlines;
+
+  D3_TYPE (result) = ERROR;
+  D_NEXT (result) = 0;
+
+  /* Assign ranges */
+  D_LOWLINE (result, FILE0) = low0;
+  D_HIGHLINE (result, FILE0) = high0;
+  D_LOWLINE (result, FILE1) = low1;
+  D_HIGHLINE (result, FILE1) = high1;
+  D_LOWLINE (result, FILE2) = low2;
+  D_HIGHLINE (result, FILE2) = high2;
+
+  /* Allocate and zero space */
+  numlines = D_NUMLINES (result, FILE0);
+  if (numlines)
+    {
+      D_LINEARRAY (result, FILE0) = xcalloc (numlines, sizeof (char *));
+      D_LENARRAY (result, FILE0) = xcalloc (numlines, sizeof (size_t));
+    }
+  else
+    {
+      D_LINEARRAY (result, FILE0) = 0;
+      D_LENARRAY (result, FILE0) = 0;
+    }
+
+  numlines = D_NUMLINES (result, FILE1);
+  if (numlines)
+    {
+      D_LINEARRAY (result, FILE1) = xcalloc (numlines, sizeof (char *));
+      D_LENARRAY (result, FILE1) = xcalloc (numlines, sizeof (size_t));
+    }
+  else
+    {
+      D_LINEARRAY (result, FILE1) = 0;
+      D_LENARRAY (result, FILE1) = 0;
+    }
+
+  numlines = D_NUMLINES (result, FILE2);
+  if (numlines)
+    {
+      D_LINEARRAY (result, FILE2) = xcalloc (numlines, sizeof (char *));
+      D_LENARRAY (result, FILE2) = xcalloc (numlines, sizeof (size_t));
+    }
+  else
+    {
+      D_LINEARRAY (result, FILE2) = 0;
+      D_LENARRAY (result, FILE2) = 0;
+    }
+
+  /* Return */
+  return result;
+}
+
+/* Compare two lists of lines of text.
+   Return 1 if they are equivalent, 0 if not.  */
+
+static bool
+compare_line_list (char * const list1[], size_t const lengths1[],
+		   char * const list2[], size_t const lengths2[],
+		   lin nl)
+{
+  char * const *l1 = list1;
+  char * const *l2 = list2;
+  size_t const *lgths1 = lengths1;
+  size_t const *lgths2 = lengths2;
+
+  while (nl--)
+    if (!*l1 || !*l2 || *lgths1 != *lgths2++
+	|| memcmp (*l1++, *l2++, *lgths1++) != 0)
+      return false;
+  return true;
+}
+
+/* Input and parse two way diffs.  */
+
+static struct diff_block *
+process_diff (char const *filea,
+	      char const *fileb,
+	      struct diff_block **last_block)
+{
+  char *diff_contents;
+  char *diff_limit;
+  char *scan_diff;
+  enum diff_type dt;
+  lin i;
+  struct diff_block *block_list;
+  struct diff_block **block_list_end = &block_list;
+  struct diff_block *bptr IF_LINT (= NULL);
+  size_t too_many_lines = (PTRDIFF_MAX
+			   / MIN (sizeof *bptr->lines[1],
+				  sizeof *bptr->lengths[1]));
+
+  diff_limit = read_diff (filea, fileb, &diff_contents);
+  scan_diff = diff_contents;
+
+  while (scan_diff < diff_limit)
+    {
+      bptr = xmalloc (sizeof *bptr);
+      bptr->lines[0] = bptr->lines[1] = 0;
+      bptr->lengths[0] = bptr->lengths[1] = 0;
+
+      dt = process_diff_control (&scan_diff, bptr);
+      if (dt == ERROR || *scan_diff != '\n')
+	{
+	  fprintf (stderr, _("%s: diff failed: "), program_name);
+	  do
+	    {
+	      putc (*scan_diff, stderr);
+	    }
+	  while (*scan_diff++ != '\n');
+	  exit (EXIT_TROUBLE);
+	}
+      scan_diff++;
+
+      /* Force appropriate ranges to be null, if necessary */
+      switch (dt)
+	{
+	case ADD:
+	  bptr->ranges[0][0]++;
+	  break;
+	case DELETE:
+	  bptr->ranges[1][0]++;
+	  break;
+	case CHANGE:
+	  break;
+	default:
+	  fatal ("internal error: invalid diff type in process_diff");
+	  break;
+	}
+
+      /* Allocate space for the pointers for the lines from filea, and
+	 parcel them out among these pointers */
+      if (dt != ADD)
+	{
+	  lin numlines = D_NUMLINES (bptr, 0);
+	  if (too_many_lines <= numlines)
+	    xalloc_die ();
+	  bptr->lines[0] = xmalloc (numlines * sizeof *bptr->lines[0]);
+	  bptr->lengths[0] = xmalloc (numlines * sizeof *bptr->lengths[0]);
+	  for (i = 0; i < numlines; i++)
+	    scan_diff = scan_diff_line (scan_diff,
+					&(bptr->lines[0][i]),
+					&(bptr->lengths[0][i]),
+					diff_limit,
+					'<');
+	}
+
+      /* Get past the separator for changes */
+      if (dt == CHANGE)
+	{
+	  if (strncmp (scan_diff, "---\n", 4))
+	    fatal ("invalid diff format; invalid change separator");
+	  scan_diff += 4;
+	}
+
+      /* Allocate space for the pointers for the lines from fileb, and
+	 parcel them out among these pointers */
+      if (dt != DELETE)
+	{
+	  lin numlines = D_NUMLINES (bptr, 1);
+	  if (too_many_lines <= numlines)
+	    xalloc_die ();
+	  bptr->lines[1] = xmalloc (numlines * sizeof *bptr->lines[1]);
+	  bptr->lengths[1] = xmalloc (numlines * sizeof *bptr->lengths[1]);
+	  for (i = 0; i < numlines; i++)
+	    scan_diff = scan_diff_line (scan_diff,
+					&(bptr->lines[1][i]),
+					&(bptr->lengths[1][i]),
+					diff_limit,
+					'>');
+	}
+
+      /* Place this block on the blocklist.  */
+      *block_list_end = bptr;
+      block_list_end = &bptr->next;
+    }
+
+  *block_list_end = NULL;
+  *last_block = bptr;
+  return block_list;
+}
+
+/* Skip tabs and spaces, and return the first character after them.  */
+
+static char *
+skipwhite (char *s)
+{
+  while (*s == ' ' || *s == '\t')
+    s++;
+  return s;
+}
+
+/* Read a nonnegative line number from S, returning the address of the
+   first character after the line number, and storing the number into
+   *PNUM.  Return 0 if S does not point to a valid line number.  */
+
+static char *
+readnum (char *s, lin *pnum)
+{
+  unsigned char c = *s;
+  lin num = 0;
+
+  if (! ISDIGIT (c))
+    return 0;
+
+  do
+    {
+      num = c - '0' + num * 10;
+      c = *++s;
+    }
+  while (ISDIGIT (c));
+
+  *pnum = num;
+  return s;
+}
+
+/* Parse a normal format diff control string.  Return the type of the
+   diff (ERROR if the format is bad).  All of the other important
+   information is filled into to the structure pointed to by db, and
+   the string pointer (whose location is passed to this routine) is
+   updated to point beyond the end of the string parsed.  Note that
+   only the ranges in the diff_block will be set by this routine.
+
+   If some specific pair of numbers has been reduced to a single
+   number, then both corresponding numbers in the diff block are set
+   to that number.  In general these numbers are interpreted as ranges
+   inclusive, unless being used by the ADD or DELETE commands.  It is
+   assumed that these will be special cased in a superior routine.   */
+
+static enum diff_type
+process_diff_control (char **string, struct diff_block *db)
+{
+  char *s = *string;
+  enum diff_type type;
+
+  /* Read first set of digits */
+  s = readnum (skipwhite (s), &db->ranges[0][RANGE_START]);
+  if (! s)
+    return ERROR;
+
+  /* Was that the only digit? */
+  s = skipwhite (s);
+  if (*s == ',')
+    {
+      s = readnum (s + 1, &db->ranges[0][RANGE_END]);
+      if (! s)
+	return ERROR;
+    }
+  else
+    db->ranges[0][RANGE_END] = db->ranges[0][RANGE_START];
+
+  /* Get the letter */
+  s = skipwhite (s);
+  switch (*s)
+    {
+    case 'a':
+      type = ADD;
+      break;
+    case 'c':
+      type = CHANGE;
+      break;
+    case 'd':
+      type = DELETE;
+      break;
+    default:
+      return ERROR;			/* Bad format */
+    }
+  s++;				/* Past letter */
+
+  /* Read second set of digits */
+  s = readnum (skipwhite (s), &db->ranges[1][RANGE_START]);
+  if (! s)
+    return ERROR;
+
+  /* Was that the only digit? */
+  s = skipwhite (s);
+  if (*s == ',')
+    {
+      s = readnum (s + 1, &db->ranges[1][RANGE_END]);
+      if (! s)
+	return ERROR;
+      s = skipwhite (s);		/* To move to end */
+    }
+  else
+    db->ranges[1][RANGE_END] = db->ranges[1][RANGE_START];
+
+  *string = s;
+  return type;
+}
+
+static char *
+read_diff (char const *filea,
+	   char const *fileb,
+	   char **output_placement)
+{
+  char *diff_result;
+  size_t current_chunk_size, total;
+  int fd, wstatus, status;
+  int werrno = 0;
+  struct stat pipestat;
+
+#if HAVE_WORKING_FORK || HAVE_WORKING_VFORK
+
+  char const *argv[9];
+  char const **ap;
+  int fds[2];
+  pid_t pid;
+
+  ap = argv;
+  *ap++ = diff_program;
+  if (text)
+    *ap++ = "-a";
+  if (strip_trailing_cr)
+    *ap++ = "--strip-trailing-cr";
+  *ap++ = "--horizon-lines=100";
+  *ap++ = "--";
+  *ap++ = filea;
+  *ap++ = fileb;
+  *ap = 0;
+
+  if (pipe (fds) != 0)
+    perror_with_exit ("pipe");
+
+  pid = vfork ();
+  if (pid == 0)
+    {
+      /* Child */
+      close (fds[0]);
+      if (fds[1] != STDOUT_FILENO)
+	{
+	  dup2 (fds[1], STDOUT_FILENO);
+	  close (fds[1]);
+	}
+
+      /* The cast to (char **) is needed for portability to older
+	 hosts with a nonstandard prototype for execvp.  */
+      execvp (diff_program, (char **) argv);
+
+      _exit (errno == ENOENT ? 127 : 126);
+    }
+
+  if (pid == -1)
+    perror_with_exit ("fork");
+
+  close (fds[1]);		/* Prevent erroneous lack of EOF */
+  fd = fds[0];
+
+#else
+
+  FILE *fpipe;
+  char const args[] = " --horizon-lines=100 -- ";
+  char *command = xmalloc (shell_quote_length (diff_program)
+			   + sizeof "-a"
+			   + sizeof "--strip-trailing-cr"
+			   + sizeof args - 1
+			   + shell_quote_length (filea) + 1
+			   + shell_quote_length (fileb) + 1);
+  char *p = command;
+  p = shell_quote_copy (p, diff_program);
+  if (text)
+    {
+      strcpy (p, " -a");
+      p += 3;
+    }
+  if (strip_trailing_cr)
+    {
+      strcpy (p, " --strip-trailing-cr");
+      p += 20;
+    }
+  strcpy (p, args);
+  p += sizeof args - 1;
+  p = shell_quote_copy (p, filea);
+  *p++ = ' ';
+  p = shell_quote_copy (p, fileb);
+  *p = 0;
+  errno = 0;
+  fpipe = popen (command, "r");
+  if (!fpipe)
+    perror_with_exit (command);
+  free (command);
+  fd = fileno (fpipe);
+
+#endif
+
+  if (fstat (fd, &pipestat) != 0)
+    perror_with_exit ("fstat");
+  current_chunk_size = MAX (1, STAT_BLOCKSIZE (pipestat));
+  diff_result = xmalloc (current_chunk_size);
+  total = 0;
+
+  for (;;)
+    {
+      size_t bytes_to_read = current_chunk_size - total;
+      size_t bytes = block_read (fd, diff_result + total, bytes_to_read);
+      total += bytes;
+      if (bytes != bytes_to_read)
+	{
+	  if (bytes == SIZE_MAX)
+	    perror_with_exit (_("read failed"));
+	  break;
+	}
+      if (PTRDIFF_MAX / 2 <= current_chunk_size)
+	xalloc_die ();
+      current_chunk_size *= 2;
+      diff_result = xrealloc (diff_result, current_chunk_size);
+    }
+
+  if (total != 0 && diff_result[total-1] != '\n')
+    fatal ("invalid diff format; incomplete last line");
+
+  *output_placement = diff_result;
+
+#if ! (HAVE_WORKING_FORK || HAVE_WORKING_VFORK)
+
+  wstatus = pclose (fpipe);
+  if (wstatus == -1)
+    werrno = errno;
+
+#else
+
+  if (close (fd) != 0)
+    perror_with_exit ("close");
+  if (waitpid (pid, &wstatus, 0) < 0)
+    perror_with_exit ("waitpid");
+
+#endif
+
+  status = ! werrno && WIFEXITED (wstatus) ? WEXITSTATUS (wstatus) : INT_MAX;
+
+  if (EXIT_TROUBLE <= status)
+    error (EXIT_TROUBLE, werrno,
+	   _(status == 126
+	     ? "subsidiary program '%s' could not be invoked"
+	     : status == 127
+	     ? "subsidiary program '%s' not found"
+	     : status == INT_MAX
+	     ? "subsidiary program '%s' failed"
+	     : "subsidiary program '%s' failed (exit status %d)"),
+	   diff_program, status);
+
+  return diff_result + total;
+}
+
+
+/* Scan a regular diff line (consisting of > or <, followed by a
+   space, followed by text (including nulls) up to a newline.
+
+   This next routine began life as a macro and many parameters in it
+   are used as call-by-reference values.  */
+static char *
+scan_diff_line (char *scan_ptr, char **set_start, size_t *set_length,
+		char *limit, char leadingchar)
+{
+  char *line_ptr;
+
+  if (!(scan_ptr[0] == leadingchar
+	&& scan_ptr[1] == ' '))
+    fatal ("invalid diff format; incorrect leading line chars");
+
+  *set_start = line_ptr = scan_ptr + 2;
+  while (*line_ptr++ != '\n')
+    continue;
+
+  /* Include newline if the original line ended in a newline,
+     or if an edit script is being generated.
+     Copy any missing newline message to stderr if an edit script is being
+     generated, because edit scripts cannot handle missing newlines.
+     Return the beginning of the next line.  */
+  *set_length = line_ptr - *set_start;
+  if (line_ptr < limit && *line_ptr == '\\')
+    {
+      if (edscript)
+	fprintf (stderr, "%s:", program_name);
+      else
+	--*set_length;
+      line_ptr++;
+      do
+	{
+	  if (edscript)
+	    putc (*line_ptr, stderr);
+	}
+      while (*line_ptr++ != '\n');
+    }
+
+  return line_ptr;
+}
+
+/* Output a three way diff passed as a list of diff3_block's.  The
+   argument MAPPING is indexed by external file number (in the
+   argument list) and contains the internal file number (from the diff
+   passed).  This is important because the user expects outputs in
+   terms of the argument list number, and the diff passed may have
+   been done slightly differently (if the last argument was "-", for
+   example).  REV_MAPPING is the inverse of MAPPING.  */
+
+static void
+output_diff3 (FILE *outputfile, struct diff3_block *diff,
+	      int const mapping[3], int const rev_mapping[3])
+{
+  int i;
+  int oddoneout;
+  char *cp;
+  struct diff3_block *ptr;
+  lin line;
+  size_t length;
+  int dontprint;
+  static int skew_increment[3] = { 2, 3, 1 }; /* 0==>2==>1==>3 */
+  char const *line_prefix = initial_tab ? "\t" : "  ";
+
+  for (ptr = diff; ptr; ptr = D_NEXT (ptr))
+    {
+      char x[2];
+
+      switch (ptr->correspond)
+	{
+	case DIFF_ALL:
+	  x[0] = 0;
+	  dontprint = 3;	/* Print them all */
+	  oddoneout = 3;	/* Nobody's odder than anyone else */
+	  break;
+	case DIFF_1ST:
+	case DIFF_2ND:
+	case DIFF_3RD:
+	  oddoneout = rev_mapping[ptr->correspond - DIFF_1ST];
+
+	  x[0] = oddoneout + '1';
+	  x[1] = 0;
+	  dontprint = oddoneout == 0;
+	  break;
+	default:
+	  fatal ("internal error: invalid diff type passed to output");
+	}
+      fprintf (outputfile, "====%s\n", x);
+
+      /* Go 0, 2, 1 if the first and third outputs are equivalent.  */
+      for (i = 0; i < 3;
+	   i = (oddoneout == 1 ? skew_increment[i] : i + 1))
+	{
+	  int realfile = mapping[i];
+	  lin lowt = D_LOWLINE (ptr, realfile);
+	  lin hight = D_HIGHLINE (ptr, realfile);
+	  long int llowt = lowt;
+	  long int lhight = hight;
+
+	  fprintf (outputfile, "%d:", i + 1);
+	  switch (lowt - hight)
+	    {
+	    case 1:
+	      fprintf (outputfile, "%lda\n", llowt - 1);
+	      break;
+	    case 0:
+	      fprintf (outputfile, "%ldc\n", llowt);
+	      break;
+	    default:
+	      fprintf (outputfile, "%ld,%ldc\n", llowt, lhight);
+	      break;
+	    }
+
+	  if (i == dontprint) continue;
+
+	  if (lowt <= hight)
+	    {
+	      line = 0;
+	      do
+		{
+		  fputs (line_prefix, outputfile);
+		  cp = D_RELNUM (ptr, realfile, line);
+		  length = D_RELLEN (ptr, realfile, line);
+		  fwrite (cp, sizeof (char), length, outputfile);
+		}
+	      while (++line < hight - lowt + 1);
+	      if (cp[length - 1] != '\n')
+		fprintf (outputfile, "\n\\ %s\n",
+			 _("No newline at end of file"));
+	    }
+	}
+    }
+}
+
+
+/* Output to OUTPUTFILE the lines of B taken from FILENUM.  Double any
+   initial '.'s; yield nonzero if any initial '.'s were doubled.  */
+
+static bool
+dotlines (FILE *outputfile, struct diff3_block *b, int filenum)
+{
+  lin i;
+  bool leading_dot = false;
+
+  for (i = 0;
+       i < D_NUMLINES (b, filenum);
+       i++)
+    {
+      char *line = D_RELNUM (b, filenum, i);
+      if (line[0] == '.')
+	{
+	  leading_dot = true;
+	  fputc ('.', outputfile);
+	}
+      fwrite (line, sizeof (char),
+	      D_RELLEN (b, filenum, i), outputfile);
+    }
+
+  return leading_dot;
+}
+
+/* Output to OUTPUTFILE a '.' line.  If LEADING_DOT is true, also
+   output a command that removes initial '.'s starting with line START
+   and continuing for NUM lines.  (START is long int, not lin, for
+   convenience with printf %ld formats.)  */
+
+static void
+undotlines (FILE *outputfile, bool leading_dot, long int start, lin num)
+{
+  fputs (".\n", outputfile);
+  if (leading_dot)
+    {
+      if (num == 1)
+	fprintf (outputfile, "%lds/^\\.//\n", start);
+      else
+	fprintf (outputfile, "%ld,%lds/^\\.//\n", start, start + num - 1);
+    }
+}
+
+/* Output a diff3 set of blocks as an ed script.  This script applies
+   the changes between file's 2 & 3 to file 1.  Take the precise
+   format of the ed script to be output from global variables set
+   during options processing.  Reverse the order of
+   the set of diff3 blocks in DIFF; this gets
+   around the problems involved with changing line numbers in an ed
+   script.
+
+   As in `output_diff3', the variable MAPPING maps from file number
+   according to the argument list to file number according to the diff
+   passed.  All files listed below are in terms of the argument list.
+   REV_MAPPING is the inverse of MAPPING.
+
+   FILE0, FILE1 and FILE2 are the strings to print as the names of the
+   three files.  These may be the actual names, or may be the
+   arguments specified with -L.
+
+   Return 1 if conflicts were found.  */
+
+static bool
+output_diff3_edscript (FILE *outputfile, struct diff3_block *diff,
+		       int const mapping[3], int const rev_mapping[3],
+		       char const *file0, char const *file1, char const *file2)
+{
+  bool leading_dot;
+  bool conflicts_found = false;
+  bool conflict;
+  struct diff3_block *b;
+
+  for (b = reverse_diff3_blocklist (diff); b; b = b->next)
+    {
+      /* Must do mapping correctly.  */
+      enum diff_type type
+	= (b->correspond == DIFF_ALL
+	   ? DIFF_ALL
+	   : DIFF_1ST + rev_mapping[b->correspond - DIFF_1ST]);
+
+      long int low0, high0;
+
+      /* If we aren't supposed to do this output block, skip it.  */
+      switch (type)
+	{
+	default: continue;
+	case DIFF_2ND: if (!show_2nd) continue; conflict = true; break;
+	case DIFF_3RD: if (overlap_only) continue; conflict = false; break;
+	case DIFF_ALL: if (simple_only) continue; conflict = flagging; break;
+	}
+
+      low0 = D_LOWLINE (b, mapping[FILE0]);
+      high0 = D_HIGHLINE (b, mapping[FILE0]);
+
+      if (conflict)
+	{
+	  conflicts_found = true;
+
+
+	  /* Mark end of conflict.  */
+
+	  fprintf (outputfile, "%lda\n", high0);
+	  leading_dot = false;
+	  if (type == DIFF_ALL)
+	    {
+	      if (show_2nd)
+		{
+		  /* Append lines from FILE1.  */
+		  fprintf (outputfile, "||||||| %s\n", file1);
+		  leading_dot = dotlines (outputfile, b, mapping[FILE1]);
+		}
+	      /* Append lines from FILE2.  */
+	      fputs ("=======\n", outputfile);
+	      leading_dot |= dotlines (outputfile, b, mapping[FILE2]);
+	    }
+	  fprintf (outputfile, ">>>>>>> %s\n", file2);
+	  undotlines (outputfile, leading_dot, high0 + 2,
+		      (D_NUMLINES (b, mapping[FILE1])
+		       + D_NUMLINES (b, mapping[FILE2]) + 1));
+
+
+	  /* Mark start of conflict.  */
+
+	  fprintf (outputfile, "%lda\n<<<<<<< %s\n", low0 - 1,
+		   type == DIFF_ALL ? file0 : file1);
+	  leading_dot = false;
+	  if (type == DIFF_2ND)
+	    {
+	      /* Prepend lines from FILE1.  */
+	      leading_dot = dotlines (outputfile, b, mapping[FILE1]);
+	      fputs ("=======\n", outputfile);
+	    }
+	  undotlines (outputfile, leading_dot, low0 + 1,
+		      D_NUMLINES (b, mapping[FILE1]));
+	}
+      else if (D_NUMLINES (b, mapping[FILE2]) == 0)
+	/* Write out a delete */
+	{
+	  if (low0 == high0)
+	    fprintf (outputfile, "%ldd\n", low0);
+	  else
+	    fprintf (outputfile, "%ld,%ldd\n", low0, high0);
+	}
+      else
+	/* Write out an add or change */
+	{
+	  switch (high0 - low0)
+	    {
+	    case -1:
+	      fprintf (outputfile, "%lda\n", high0);
+	      break;
+	    case 0:
+	      fprintf (outputfile, "%ldc\n", high0);
+	      break;
+	    default:
+	      fprintf (outputfile, "%ld,%ldc\n", low0, high0);
+	      break;
+	    }
+
+	  undotlines (outputfile, dotlines (outputfile, b, mapping[FILE2]),
+		      low0, D_NUMLINES (b, mapping[FILE2]));
+	}
+    }
+  if (finalwrite)
+    fputs ("w\nq\n", outputfile);
+  return conflicts_found;
+}
+
+/* Read from INFILE and output to OUTPUTFILE a set of diff3_blocks
+   DIFF as a merged file.  This acts like 'ed file0
+   <[output_diff3_edscript]', except that it works even for binary
+   data or incomplete lines.
+
+   As before, MAPPING maps from arg list file number to diff file
+   number, REV_MAPPING is its inverse, and FILE0, FILE1, and FILE2 are
+   the names of the files.
+
+   Return 1 if conflicts were found.  */
+
+static bool
+output_diff3_merge (FILE *infile, FILE *outputfile, struct diff3_block *diff,
+		    int const mapping[3], int const rev_mapping[3],
+		    char const *file0, char const *file1, char const *file2)
+{
+  int c;
+  lin i;
+  bool conflicts_found = false;
+  bool conflict;
+  struct diff3_block *b;
+  lin linesread = 0;
+
+  for (b = diff; b; b = b->next)
+    {
+      /* Must do mapping correctly.  */
+      enum diff_type type
+	= ((b->correspond == DIFF_ALL)
+	   ? DIFF_ALL
+	   : DIFF_1ST + rev_mapping[b->correspond - DIFF_1ST]);
+      char const *format_2nd = "<<<<<<< %s\n";
+
+      /* If we aren't supposed to do this output block, skip it.  */
+      switch (type)
+	{
+	default: continue;
+	case DIFF_2ND: if (!show_2nd) continue; conflict = true; break;
+	case DIFF_3RD: if (overlap_only) continue; conflict = false; break;
+	case DIFF_ALL: if (simple_only) continue; conflict = flagging;
+	  format_2nd = "||||||| %s\n";
+	  break;
+	}
+
+      /* Copy I lines from file 0.  */
+      i = D_LOWLINE (b, FILE0) - linesread - 1;
+      linesread += i;
+      while (0 <= --i)
+	do
+	  {
+	    c = getc (infile);
+	    if (c == EOF)
+	      {
+		if (ferror (infile))
+		  perror_with_exit (_("read failed"));
+		else if (feof (infile))
+		  fatal ("input file shrank");
+	      }
+	    putc (c, outputfile);
+	  }
+	while (c != '\n');
+
+      if (conflict)
+	{
+	  conflicts_found = true;
+
+	  if (type == DIFF_ALL)
+	    {
+	      /* Put in lines from FILE0 with bracket.  */
+	      fprintf (outputfile, "<<<<<<< %s\n", file0);
+	      for (i = 0;
+		   i < D_NUMLINES (b, mapping[FILE0]);
+		   i++)
+		fwrite (D_RELNUM (b, mapping[FILE0], i), sizeof (char),
+			D_RELLEN (b, mapping[FILE0], i), outputfile);
+	    }
+
+	  if (show_2nd)
+	    {
+	      /* Put in lines from FILE1 with bracket.  */
+	      fprintf (outputfile, format_2nd, file1);
+	      for (i = 0;
+		   i < D_NUMLINES (b, mapping[FILE1]);
+		   i++)
+		fwrite (D_RELNUM (b, mapping[FILE1], i), sizeof (char),
+			D_RELLEN (b, mapping[FILE1], i), outputfile);
+	    }
+
+	  fputs ("=======\n", outputfile);
+	}
+
+      /* Put in lines from FILE2.  */
+      for (i = 0;
+	   i < D_NUMLINES (b, mapping[FILE2]);
+	   i++)
+	fwrite (D_RELNUM (b, mapping[FILE2], i), sizeof (char),
+		D_RELLEN (b, mapping[FILE2], i), outputfile);
+
+      if (conflict)
+	fprintf (outputfile, ">>>>>>> %s\n", file2);
+
+      /* Skip I lines in file 0.  */
+      i = D_NUMLINES (b, FILE0);
+      linesread += i;
+      while (0 <= --i)
+	while ((c = getc (infile)) != '\n')
+	  if (c == EOF)
+	    {
+	      if (ferror (infile))
+		perror_with_exit (_("read failed"));
+	      else if (feof (infile))
+		{
+		  if (i || b->next)
+		    fatal ("input file shrank");
+		  return conflicts_found;
+		}
+	    }
+    }
+  /* Copy rest of common file.  */
+  while ((c = getc (infile)) != EOF || !(ferror (infile) | feof (infile)))
+    putc (c, outputfile);
+  return conflicts_found;
+}
+
+/* Reverse the order of the list of diff3 blocks.  */
+
+static struct diff3_block *
+reverse_diff3_blocklist (struct diff3_block *diff)
+{
+  register struct diff3_block *tmp, *next, *prev;
+
+  for (tmp = diff, prev = 0;  tmp;  tmp = next)
+    {
+      next = tmp->next;
+      tmp->next = prev;
+      prev = tmp;
+    }
+
+  return prev;
+}
+
+static void
+fatal (char const *msgid)
+{
+  error (EXIT_TROUBLE, 0, "%s", _(msgid));
+  abort ();
+}
+
+static void
+perror_with_exit (char const *string)
+{
+  error (EXIT_TROUBLE, errno, "%s", string);
+  abort ();
+}
diff --git a/diffutils-3.0/dir.c b/diffutils-3.0/dir.c
new file mode 100644
index 0000000..5e08318
--- /dev/null
+++ b/diffutils-3.0/dir.c
@@ -0,0 +1,283 @@
+/* Read, sort and compare two directories.  Used for GNU DIFF.
+
+   Copyright (C) 1988-1989, 1992-1995, 1998, 2001-2002, 2004, 2006-2007,
+   2009-2010 Free Software Foundation, Inc.
+
+   This file is part of GNU DIFF.
+
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+#include "diff.h"
+#include <error.h>
+#include <exclude.h>
+#include <setjmp.h>
+#include <xalloc.h>
+
+/* Read the directory named by DIR and store into DIRDATA a sorted vector
+   of filenames for its contents.  DIR->desc == -1 means this directory is
+   known to be nonexistent, so set DIRDATA to an empty vector.
+   Return -1 (setting errno) if error, 0 otherwise.  */
+
+struct dirdata
+{
+  size_t nnames;	/* Number of names.  */
+  char const **names;	/* Sorted names of files in dir, followed by 0.  */
+  char *data;	/* Allocated storage for file names.  */
+};
+
+/* Whether file names in directories should be compared with
+   locale-specific sorting.  */
+static bool locale_specific_sorting;
+
+/* Where to go if locale-specific sorting fails.  */
+static jmp_buf failed_locale_specific_sorting;
+
+static bool dir_loop (struct comparison const *, int);
+static int compare_names_for_qsort (void const *, void const *);
+
+
+/* Read a directory and get its vector of names.  */
+
+static bool
+dir_read (struct file_data const *dir, struct dirdata *dirdata)
+{
+  register struct dirent *next;
+  register size_t i;
+
+  /* Address of block containing the files that are described.  */
+  char const **names;
+
+  /* Number of files in directory.  */
+  size_t nnames;
+
+  /* Allocated and used storage for file name data.  */
+  char *data;
+  size_t data_alloc, data_used;
+
+  dirdata->names = 0;
+  dirdata->data = 0;
+  nnames = 0;
+  data = 0;
+
+  if (dir->desc != -1)
+    {
+      /* Open the directory and check for errors.  */
+      register DIR *reading = opendir (dir->name);
+      if (!reading)
+	return false;
+
+      /* Initialize the table of filenames.  */
+
+      data_alloc = 512;
+      data_used = 0;
+      dirdata->data = data = xmalloc (data_alloc);
+
+      /* Read the directory entries, and insert the subfiles
+	 into the `data' table.  */
+
+      while ((errno = 0, (next = readdir (reading)) != 0))
+	{
+	  char *d_name = next->d_name;
+	  size_t d_size = _D_EXACT_NAMLEN (next) + 1;
+
+	  /* Ignore "." and "..".  */
+	  if (d_name[0] == '.'
+	      && (d_name[1] == 0 || (d_name[1] == '.' && d_name[2] == 0)))
+	    continue;
+
+	  if (excluded_file_name (excluded, d_name))
+	    continue;
+
+	  while (data_alloc < data_used + d_size)
+	    {
+	      if (PTRDIFF_MAX / 2 <= data_alloc)
+		xalloc_die ();
+	      dirdata->data = data = xrealloc (data, data_alloc *= 2);
+	    }
+
+	  memcpy (data + data_used, d_name, d_size);
+	  data_used += d_size;
+	  nnames++;
+	}
+      if (errno)
+	{
+	  int e = errno;
+	  closedir (reading);
+	  errno = e;
+	  return false;
+	}
+#if CLOSEDIR_VOID
+      closedir (reading);
+#else
+      if (closedir (reading) != 0)
+	return false;
+#endif
+    }
+
+  /* Create the `names' table from the `data' table.  */
+  if (PTRDIFF_MAX / sizeof *names - 1 <= nnames)
+    xalloc_die ();
+  dirdata->names = names = xmalloc ((nnames + 1) * sizeof *names);
+  dirdata->nnames = nnames;
+  for (i = 0;  i < nnames;  i++)
+    {
+      names[i] = data;
+      data += strlen (data) + 1;
+    }
+  names[nnames] = 0;
+  return true;
+}
+
+/* Compare file names, returning a value compatible with strcmp.  */
+
+static int
+compare_names (char const *name1, char const *name2)
+{
+  if (locale_specific_sorting)
+    {
+      int r;
+      errno = 0;
+      if (ignore_file_name_case)
+	r = strcasecoll (name1, name2);
+      else
+	r = strcoll (name1, name2);
+      if (errno)
+	{
+	  error (0, errno, _("cannot compare file names '%s' and '%s'"),
+		 name1, name2);
+	  longjmp (failed_locale_specific_sorting, 1);
+	}
+      return r;
+    }
+
+  return (ignore_file_name_case
+	  ? strcasecmp (name1, name2)
+	  : file_name_cmp (name1, name2));
+}
+
+/* A wrapper for compare_names suitable as an argument for qsort.  */
+
+static int
+compare_names_for_qsort (void const *file1, void const *file2)
+{
+  char const *const *f1 = file1;
+  char const *const *f2 = file2;
+  return compare_names (*f1, *f2);
+}
+
+/* Compare the contents of two directories named in CMP.
+   This is a top-level routine; it does everything necessary for diff
+   on two directories.
+
+   CMP->file[0].desc == -1 says directory CMP->file[0] doesn't exist,
+   but pretend it is empty.  Likewise for CMP->file[1].
+
+   HANDLE_FILE is a caller-provided subroutine called to handle each file.
+   It gets three operands: CMP, name of file in dir 0, name of file in dir 1.
+   These names are relative to the original working directory.
+
+   For a file that appears in only one of the dirs, one of the name-args
+   to HANDLE_FILE is zero.
+
+   Returns the maximum of all the values returned by HANDLE_FILE,
+   or EXIT_TROUBLE if trouble is encountered in opening files.  */
+
+int
+diff_dirs (struct comparison const *cmp,
+	   int (*handle_file) (struct comparison const *,
+			       char const *, char const *))
+{
+  struct dirdata dirdata[2];
+  int volatile val = EXIT_SUCCESS;
+  int i;
+
+  if ((cmp->file[0].desc == -1 || dir_loop (cmp, 0))
+      && (cmp->file[1].desc == -1 || dir_loop (cmp, 1)))
+    {
+      error (0, 0, _("%s: recursive directory loop"),
+	     cmp->file[cmp->file[0].desc == -1].name);
+      return EXIT_TROUBLE;
+    }
+
+  /* Get contents of both dirs.  */
+  for (i = 0; i < 2; i++)
+    if (! dir_read (&cmp->file[i], &dirdata[i]))
+      {
+	perror_with_name (cmp->file[i].name);
+	val = EXIT_TROUBLE;
+      }
+
+  if (val == EXIT_SUCCESS)
+    {
+      char const **volatile names[2];
+      names[0] = dirdata[0].names;
+      names[1] = dirdata[1].names;
+
+      /* Use locale-specific sorting if possible, else native byte order.  */
+      locale_specific_sorting = true;
+      if (setjmp (failed_locale_specific_sorting))
+	locale_specific_sorting = false;
+
+      /* Sort the directories.  */
+      for (i = 0; i < 2; i++)
+	qsort (names[i], dirdata[i].nnames, sizeof *dirdata[i].names,
+	       compare_names_for_qsort);
+
+      /* If `-S name' was given, and this is the topmost level of comparison,
+	 ignore all file names less than the specified starting name.  */
+
+      if (starting_file && ! cmp->parent)
+	{
+	  while (*names[0] && compare_names (*names[0], starting_file) < 0)
+	    names[0]++;
+	  while (*names[1] && compare_names (*names[1], starting_file) < 0)
+	    names[1]++;
+	}
+
+      /* Loop while files remain in one or both dirs.  */
+      while (*names[0] || *names[1])
+	{
+	  /* Compare next name in dir 0 with next name in dir 1.
+	     At the end of a dir,
+	     pretend the "next name" in that dir is very large.  */
+	  int nameorder = (!*names[0] ? 1 : !*names[1] ? -1
+			   : compare_names (*names[0], *names[1]));
+	  int v1 = (*handle_file) (cmp,
+				   0 < nameorder ? 0 : *names[0]++,
+				   nameorder < 0 ? 0 : *names[1]++);
+	  if (val < v1)
+	    val = v1;
+	}
+    }
+
+  for (i = 0; i < 2; i++)
+    {
+      free (dirdata[i].names);
+      free (dirdata[i].data);
+    }
+
+  return val;
+}
+
+/* Return nonzero if CMP is looping recursively in argument I.  */
+
+static bool
+dir_loop (struct comparison const *cmp, int i)
+{
+  struct comparison const *p = cmp;
+  while ((p = p->parent))
+    if (0 < same_file (&p->file[i].stat, &cmp->file[i].stat))
+      return true;
+  return false;
+}
diff --git a/diffutils-3.0/ed.c b/diffutils-3.0/ed.c
new file mode 100644
index 0000000..08acf50
--- /dev/null
+++ b/diffutils-3.0/ed.c
@@ -0,0 +1,175 @@
+/* Output routines for ed-script format.
+
+   Copyright (C) 1988-1989, 1991-1993, 1995, 1998, 2001, 2004, 2006, 2009-2010
+   Free Software Foundation, Inc.
+
+   This file is part of GNU DIFF.
+
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+#include "diff.h"
+
+static void print_ed_hunk (struct change *);
+static void print_rcs_hunk (struct change *);
+static void pr_forward_ed_hunk (struct change *);
+
+/* Print our script as ed commands.  */
+
+void
+print_ed_script (struct change *script)
+{
+  print_script (script, find_reverse_change, print_ed_hunk);
+}
+
+/* Print a hunk of an ed diff */
+
+static void
+print_ed_hunk (struct change *hunk)
+{
+  lin f0, l0, f1, l1;
+  enum changes changes;
+
+#ifdef DEBUG
+  debug_script (hunk);
+#endif
+
+  /* Determine range of line numbers involved in each file.  */
+  changes = analyze_hunk (hunk, &f0, &l0, &f1, &l1);
+  if (!changes)
+    return;
+
+  begin_output ();
+
+  /* Print out the line number header for this hunk */
+  print_number_range (',', &files[0], f0, l0);
+  fputc (change_letter[changes], outfile);
+  fputc ('\n', outfile);
+
+  /* Print new/changed lines from second file, if needed */
+  if (changes != OLD)
+    {
+      lin i;
+      bool insert_mode = true;
+
+      for (i = f1; i <= l1; i++)
+	{
+	  if (!insert_mode)
+	    {
+	      fputs ("a\n", outfile);
+	      insert_mode = true;
+	    }
+	  if (files[1].linbuf[i][0] == '.' && files[1].linbuf[i][1] == '\n')
+	    {
+	      /* The file's line is just a dot, and it would exit
+		 insert mode.  Precede the dot with another dot, exit
+		 insert mode and remove the extra dot.  */
+	      fputs ("..\n.\ns/.//\n", outfile);
+	      insert_mode = false;
+	    }
+	  else
+	    print_1_line ("", &files[1].linbuf[i]);
+	}
+
+      if (insert_mode)
+	fputs (".\n", outfile);
+    }
+}
+
+/* Print change script in the style of ed commands,
+   but print the changes in the order they appear in the input files,
+   which means that the commands are not truly useful with ed.
+   Because of the issue with lines containing just a dot, the output
+   is not even parseable.  */
+
+void
+pr_forward_ed_script (struct change *script)
+{
+  print_script (script, find_change, pr_forward_ed_hunk);
+}
+
+static void
+pr_forward_ed_hunk (struct change *hunk)
+{
+  lin i, f0, l0, f1, l1;
+
+  /* Determine range of line numbers involved in each file.  */
+  enum changes changes = analyze_hunk (hunk, &f0, &l0, &f1, &l1);
+  if (!changes)
+    return;
+
+  begin_output ();
+
+  fputc (change_letter[changes], outfile);
+  print_number_range (' ', files, f0, l0);
+  fputc ('\n', outfile);
+
+  /* If deletion only, print just the number range.  */
+
+  if (changes == OLD)
+    return;
+
+  /* For insertion (with or without deletion), print the number range
+     and the lines from file 2.  */
+
+  for (i = f1; i <= l1; i++)
+    print_1_line ("", &files[1].linbuf[i]);
+
+  fputs (".\n", outfile);
+}
+
+/* Print in a format somewhat like ed commands
+   except that each insert command states the number of lines it inserts.
+   This format is used for RCS.  */
+
+void
+print_rcs_script (struct change *script)
+{
+  print_script (script, find_change, print_rcs_hunk);
+}
+
+/* Print a hunk of an RCS diff */
+
+static void
+print_rcs_hunk (struct change *hunk)
+{
+  lin i, f0, l0, f1, l1;
+  long int tf0, tl0, tf1, tl1;
+
+  /* Determine range of line numbers involved in each file.  */
+  enum changes changes = analyze_hunk (hunk, &f0, &l0, &f1, &l1);
+  if (!changes)
+    return;
+
+  begin_output ();
+
+  translate_range (&files[0], f0, l0, &tf0, &tl0);
+
+  if (changes & OLD)
+    {
+      /* For deletion, print just the starting line number from file 0
+	 and the number of lines deleted.  */
+      fprintf (outfile, "d%ld %ld\n", tf0, tf0 <= tl0 ? tl0 - tf0 + 1 : 1);
+    }
+
+  if (changes & NEW)
+    {
+      /* Take last-line-number from file 0 and # lines from file 1.  */
+      translate_range (&files[1], f1, l1, &tf1, &tl1);
+      fprintf (outfile, "a%ld %ld\n", tl0, tf1 <= tl1 ? tl1 - tf1 + 1 : 1);
+
+      /* Print the inserted lines.  */
+      for (i = f1; i <= l1; i++)
+	print_1_line ("", &files[1].linbuf[i]);
+    }
+}
diff --git a/diffutils-3.0/ifdef.c b/diffutils-3.0/ifdef.c
new file mode 100644
index 0000000..a48f830
--- /dev/null
+++ b/diffutils-3.0/ifdef.c
@@ -0,0 +1,430 @@
+/* #ifdef-format output routines for GNU DIFF.
+
+   Copyright (C) 1989, 1991-1994, 2001-2002, 2004, 2006, 2009-2010 Free
+   Software Foundation, Inc.
+
+   This file is part of GNU DIFF.
+
+   GNU DIFF is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY.  No author or distributor
+   accepts responsibility to anyone for the consequences of using it
+   or for whether it serves any particular purpose or works at all,
+   unless he says so in writing.  Refer to the GNU General Public
+   License for full details.
+
+   Everyone is granted permission to copy, modify and redistribute
+   GNU DIFF, but only under the conditions described in the
+   GNU General Public License.   A copy of this license is
+   supposed to have been given to you along with GNU DIFF so you
+   can know your rights and responsibilities.  It should be in a
+   file named COPYING.  Among other things, the copyright notice
+   and this notice must be preserved on all copies.  */
+
+#include "diff.h"
+
+#include <xalloc.h>
+
+struct group
+{
+  struct file_data const *file;
+  lin from, upto; /* start and limit lines for this group of lines */
+};
+
+static char const *format_group (FILE *, char const *, char,
+				 struct group const *);
+static char const *do_printf_spec (FILE *, char const *,
+				   struct file_data const *, lin,
+				   struct group const *);
+static char const *scan_char_literal (char const *, char *);
+static lin groups_letter_value (struct group const *, char);
+static void format_ifdef (char const *, lin, lin, lin, lin);
+static void print_ifdef_hunk (struct change *);
+static void print_ifdef_lines (FILE *, char const *, struct group const *);
+
+static lin next_line0;
+static lin next_line1;
+
+/* Print the edit-script SCRIPT as a merged #ifdef file.  */
+
+void
+print_ifdef_script (struct change *script)
+{
+  next_line0 = next_line1 = - files[0].prefix_lines;
+  print_script (script, find_change, print_ifdef_hunk);
+  if (next_line0 < files[0].valid_lines
+      || next_line1 < files[1].valid_lines)
+    {
+      begin_output ();
+      format_ifdef (group_format[UNCHANGED],
+		    next_line0, files[0].valid_lines,
+		    next_line1, files[1].valid_lines);
+    }
+}
+
+/* Print a hunk of an ifdef diff.
+   This is a contiguous portion of a complete edit script,
+   describing changes in consecutive lines.  */
+
+static void
+print_ifdef_hunk (struct change *hunk)
+{
+  lin first0, last0, first1, last1;
+
+  /* Determine range of line numbers involved in each file.  */
+  enum changes changes = analyze_hunk (hunk, &first0, &last0, &first1, &last1);
+  if (!changes)
+    return;
+
+  begin_output ();
+
+  /* Print lines up to this change.  */
+  if (next_line0 < first0 || next_line1 < first1)
+    format_ifdef (group_format[UNCHANGED],
+		  next_line0, first0,
+		  next_line1, first1);
+
+  /* Print this change.  */
+  next_line0 = last0 + 1;
+  next_line1 = last1 + 1;
+  format_ifdef (group_format[changes],
+		first0, next_line0,
+		first1, next_line1);
+}
+
+/* Print a set of lines according to FORMAT.
+   Lines BEG0 up to END0 are from the first file;
+   lines BEG1 up to END1 are from the second file.  */
+
+static void
+format_ifdef (char const *format, lin beg0, lin end0, lin beg1, lin end1)
+{
+  struct group groups[2];
+
+  groups[0].file = &files[0];
+  groups[0].from = beg0;
+  groups[0].upto = end0;
+  groups[1].file = &files[1];
+  groups[1].from = beg1;
+  groups[1].upto = end1;
+  format_group (outfile, format, 0, groups);
+}
+
+/* Print to file OUT a set of lines according to FORMAT.
+   The format ends at the first free instance of ENDCHAR.
+   Yield the address of the terminating character.
+   GROUPS specifies which lines to print.
+   If OUT is zero, do not actually print anything; just scan the format.  */
+
+static char const *
+format_group (register FILE *out, char const *format, char endchar,
+	      struct group const *groups)
+{
+  register char c;
+  register char const *f = format;
+
+  while ((c = *f) != endchar && c != 0)
+    {
+      char const *f1 = ++f;
+      if (c == '%')
+	switch ((c = *f++))
+	  {
+	  case '%':
+	    break;
+
+	  case '(':
+	    /* Print if-then-else format e.g. `%(n=1?thenpart:elsepart)'.  */
+	    {
+	      int i;
+	      uintmax_t value[2];
+	      FILE *thenout, *elseout;
+
+	      for (i = 0; i < 2; i++)
+		{
+		  if (ISDIGIT (*f))
+		    {
+		      char *fend;
+		      errno = 0;
+		      value[i] = strtoumax (f, &fend, 10);
+		      if (errno)
+			goto bad_format;
+		      f = fend;
+		    }
+		  else
+		    {
+		      value[i] = groups_letter_value (groups, *f);
+		      if (value[i] == -1)
+			goto bad_format;
+		      f++;
+		    }
+		  if (*f++ != "=?"[i])
+		    goto bad_format;
+		}
+	      if (value[0] == value[1])
+		thenout = out, elseout = 0;
+	      else
+		thenout = 0, elseout = out;
+	      f = format_group (thenout, f, ':', groups);
+	      if (*f)
+		{
+		  f = format_group (elseout, f + 1, ')', groups);
+		  if (*f)
+		    f++;
+		}
+	    }
+	    continue;
+
+	  case '<':
+	    /* Print lines deleted from first file.  */
+	    print_ifdef_lines (out, line_format[OLD], &groups[0]);
+	    continue;
+
+	  case '=':
+	    /* Print common lines.  */
+	    print_ifdef_lines (out, line_format[UNCHANGED], &groups[0]);
+	    continue;
+
+	  case '>':
+	    /* Print lines inserted from second file.  */
+	    print_ifdef_lines (out, line_format[NEW], &groups[1]);
+	    continue;
+
+	  default:
+	    f = do_printf_spec (out, f - 2, 0, 0, groups);
+	    if (f)
+	      continue;
+	    /* Fall through. */
+	  bad_format:
+	    c = '%';
+	    f = f1;
+	    break;
+	  }
+
+      if (out)
+	putc (c, out);
+    }
+
+  return f;
+}
+
+/* For the line group pair G, return the number corresponding to LETTER.
+   Return -1 if LETTER is not a group format letter.  */
+static lin
+groups_letter_value (struct group const *g, char letter)
+{
+  switch (letter)
+    {
+    case 'E': letter = 'e'; g++; break;
+    case 'F': letter = 'f'; g++; break;
+    case 'L': letter = 'l'; g++; break;
+    case 'M': letter = 'm'; g++; break;
+    case 'N': letter = 'n'; g++; break;
+    }
+
+  switch (letter)
+    {
+      case 'e': return translate_line_number (g->file, g->from) - 1;
+      case 'f': return translate_line_number (g->file, g->from);
+      case 'l': return translate_line_number (g->file, g->upto) - 1;
+      case 'm': return translate_line_number (g->file, g->upto);
+      case 'n': return g->upto - g->from;
+      default: return -1;
+    }
+}
+
+/* Print to file OUT, using FORMAT to print the line group GROUP.
+   But do nothing if OUT is zero.  */
+static void
+print_ifdef_lines (register FILE *out, char const *format,
+		   struct group const *group)
+{
+  struct file_data const *file = group->file;
+  char const * const *linbuf = file->linbuf;
+  lin from = group->from, upto = group->upto;
+
+  if (!out)
+    return;
+
+  /* If possible, use a single fwrite; it's faster.  */
+  if (!expand_tabs && format[0] == '%')
+    {
+      if (format[1] == 'l' && format[2] == '\n' && !format[3] && from < upto)
+	{
+	  fwrite (linbuf[from], sizeof (char),
+		  linbuf[upto] + (linbuf[upto][-1] != '\n') -  linbuf[from],
+		  out);
+	  return;
+	}
+      if (format[1] == 'L' && !format[2])
+	{
+	  fwrite (linbuf[from], sizeof (char),
+		  linbuf[upto] -  linbuf[from], out);
+	  return;
+	}
+    }
+
+  for (;  from < upto;  from++)
+    {
+      register char c;
+      register char const *f = format;
+
+      while ((c = *f++) != 0)
+	{
+	  char const *f1 = f;
+	  if (c == '%')
+	    switch ((c = *f++))
+	      {
+	      case '%':
+		break;
+
+	      case 'l':
+		output_1_line (linbuf[from],
+			       (linbuf[from + 1]
+				- (linbuf[from + 1][-1] == '\n')),
+			       0, 0);
+		continue;
+
+	      case 'L':
+		output_1_line (linbuf[from], linbuf[from + 1], 0, 0);
+		continue;
+
+	      default:
+		f = do_printf_spec (out, f - 2, file, from, 0);
+		if (f)
+		  continue;
+		c = '%';
+		f = f1;
+		break;
+	      }
+
+	  putc (c, out);
+	}
+    }
+}
+
+static char const *
+do_printf_spec (FILE *out, char const *spec,
+		struct file_data const *file, lin n,
+		struct group const *groups)
+{
+  char const *f = spec;
+  char c;
+  char c1;
+
+  /* Scan printf-style SPEC of the form %[-'0]*[0-9]*(.[0-9]*)?[cdoxX].  */
+  /* assert (*f == '%'); */
+  f++;
+  while ((c = *f++) == '-' || c == '\'' || c == '0')
+    continue;
+  while (ISDIGIT (c))
+    c = *f++;
+  if (c == '.')
+    while (ISDIGIT (c = *f++))
+      continue;
+  c1 = *f++;
+
+  switch (c)
+    {
+    case 'c':
+      if (c1 != '\'')
+	return 0;
+      else
+	{
+	  char value IF_LINT (= 0);
+	  f = scan_char_literal (f, &value);
+	  if (!f)
+	    return 0;
+	  if (out)
+	    putc (value, out);
+	}
+      break;
+
+    case 'd': case 'o': case 'x': case 'X':
+      {
+	lin value;
+
+	if (file)
+	  {
+	    if (c1 != 'n')
+	      return 0;
+	    value = translate_line_number (file, n);
+	  }
+	else
+	  {
+	    value = groups_letter_value (groups, c1);
+	    if (value < 0)
+	      return 0;
+	  }
+
+	if (out)
+	  {
+	    /* For example, if the spec is "%3xn", use the printf
+	       format spec "%3lx".  Here the spec prefix is "%3".  */
+	    long int long_value = value;
+	    size_t spec_prefix_len = f - spec - 2;
+#if HAVE_C_VARARRAYS
+	    char format[spec_prefix_len + 3];
+#else
+	    char *format = xmalloc (spec_prefix_len + 3);
+#endif
+	    char *p = format + spec_prefix_len;
+	    memcpy (format, spec, spec_prefix_len);
+	    *p++ = 'l';
+	    *p++ = c;
+	    *p = '\0';
+	    fprintf (out, format, long_value);
+#if ! HAVE_C_VARARRAYS
+	    free (format);
+#endif
+	  }
+      }
+      break;
+
+    default:
+      return 0;
+    }
+
+  return f;
+}
+
+/* Scan the character literal represented in the string LIT; LIT points just
+   after the initial apostrophe.  Put the literal's value into *VALPTR.
+   Yield the address of the first character after the closing apostrophe,
+   or a null pointer if the literal is ill-formed.  */
+static char const *
+scan_char_literal (char const *lit, char *valptr)
+{
+  register char const *p = lit;
+  char value;
+  ptrdiff_t digits;
+  char c = *p++;
+
+  switch (c)
+    {
+      case 0:
+      case '\'':
+	return NULL;
+
+      case '\\':
+	value = 0;
+	while ((c = *p++) != '\'')
+	  {
+	    unsigned int digit = c - '0';
+	    if (8 <= digit)
+	      return NULL;
+	    value = 8 * value + digit;
+	  }
+	digits = p - lit - 2;
+	if (! (1 <= digits && digits <= 3))
+	  return NULL;
+	break;
+
+      default:
+	value = c;
+	if (*p++ != '\'')
+	  return NULL;
+	break;
+    }
+
+  *valptr = value;
+  return p;
+}
diff --git a/diffutils-3.0/io.c b/diffutils-3.0/io.c
new file mode 100644
index 0000000..031be3d
--- /dev/null
+++ b/diffutils-3.0/io.c
@@ -0,0 +1,845 @@
+/* File I/O for GNU DIFF.
+
+   Copyright (C) 1988-1989, 1992-1995, 1998, 2001-2002, 2004, 2006, 2009-2010
+   Free Software Foundation, Inc.
+
+   This file is part of GNU DIFF.
+
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+#include "diff.h"
+#include <cmpbuf.h>
+#include <file-type.h>
+#include <xalloc.h>
+
+/* Rotate an unsigned value to the left.  */
+#define ROL(v, n) ((v) << (n) | (v) >> (sizeof (v) * CHAR_BIT - (n)))
+
+/* Given a hash value and a new character, return a new hash value.  */
+#define HASH(h, c) ((c) + ROL (h, 7))
+
+/* The type of a hash value.  */
+typedef size_t hash_value;
+verify (! TYPE_SIGNED (hash_value));
+
+/* Lines are put into equivalence classes of lines that match in lines_differ.
+   Each equivalence class is represented by one of these structures,
+   but only while the classes are being computed.
+   Afterward, each class is represented by a number.  */
+struct equivclass
+{
+  lin next;		/* Next item in this bucket.  */
+  hash_value hash;	/* Hash of lines in this class.  */
+  char const *line;	/* A line that fits this class.  */
+  size_t length;	/* That line's length, not counting its newline.  */
+};
+
+/* Hash-table: array of buckets, each being a chain of equivalence classes.
+   buckets[-1] is reserved for incomplete lines.  */
+static lin *buckets;
+
+/* Number of buckets in the hash table array, not counting buckets[-1].  */
+static size_t nbuckets;
+
+/* Array in which the equivalence classes are allocated.
+   The bucket-chains go through the elements in this array.
+   The number of an equivalence class is its index in this array.  */
+static struct equivclass *equivs;
+
+/* Index of first free element in the array `equivs'.  */
+static lin equivs_index;
+
+/* Number of elements allocated in the array `equivs'.  */
+static lin equivs_alloc;
+
+/* Read a block of data into a file buffer, checking for EOF and error.  */
+
+void
+file_block_read (struct file_data *current, size_t size)
+{
+  if (size && ! current->eof)
+    {
+      size_t s = block_read (current->desc,
+			     FILE_BUFFER (current) + current->buffered, size);
+      if (s == SIZE_MAX)
+	pfatal_with_name (current->name);
+      current->buffered += s;
+      current->eof = s < size;
+    }
+}
+
+/* Check for binary files and compare them for exact identity.  */
+
+/* Return 1 if BUF contains a non text character.
+   SIZE is the number of characters in BUF.  */
+
+#define binary_file_p(buf, size) (memchr (buf, 0, size) != 0)
+
+/* Get ready to read the current file.
+   Return nonzero if SKIP_TEST is zero,
+   and if it appears to be a binary file.  */
+
+static bool
+sip (struct file_data *current, bool skip_test)
+{
+  /* If we have a nonexistent file at this stage, treat it as empty.  */
+  if (current->desc < 0)
+    {
+      /* Leave room for a sentinel.  */
+      current->bufsize = sizeof (word);
+      current->buffer = xmalloc (current->bufsize);
+    }
+  else
+    {
+      current->bufsize = buffer_lcm (sizeof (word),
+				     STAT_BLOCKSIZE (current->stat),
+				     PTRDIFF_MAX - 2 * sizeof (word));
+      current->buffer = xmalloc (current->bufsize);
+
+      if (! skip_test)
+	{
+	  /* Check first part of file to see if it's a binary file.  */
+
+	  /* FIXME: if O_BINARY, this should revert to text mode
+	     if the file is not binary.  */
+
+	  file_block_read (current, current->bufsize);
+	  return binary_file_p (current->buffer, current->buffered);
+	}
+    }
+
+  current->buffered = 0;
+  current->eof = false;
+  return false;
+}
+
+/* Slurp the rest of the current file completely into memory.  */
+
+static void
+slurp (struct file_data *current)
+{
+  size_t cc;
+
+  if (current->desc < 0)
+    {
+      /* The file is nonexistent.  */
+      return;
+    }
+
+  if (S_ISREG (current->stat.st_mode))
+    {
+      /* It's a regular file; slurp in the rest all at once.  */
+
+      /* Get the size out of the stat block.
+	 Allocate just enough room for appended newline plus word sentinel,
+	 plus word-alignment since we want the buffer word-aligned.  */
+      size_t file_size = current->stat.st_size;
+      cc = file_size + 2 * sizeof (word) - file_size % sizeof (word);
+      if (file_size != current->stat.st_size || cc < file_size
+	  || PTRDIFF_MAX <= cc)
+	xalloc_die ();
+
+      if (current->bufsize < cc)
+	{
+	  current->bufsize = cc;
+	  current->buffer = xrealloc (current->buffer, cc);
+	}
+
+      /* Try to read at least 1 more byte than the size indicates, to
+	 detect whether the file is growing.  This is a nicety for
+	 users who run 'diff' on files while they are changing.  */
+
+      if (current->buffered <= file_size)
+	{
+	  file_block_read (current, file_size + 1 - current->buffered);
+	  if (current->buffered <= file_size)
+	    return;
+	}
+    }
+
+  /* It's not a regular file, or it's a growing regular file; read it,
+     growing the buffer as needed.  */
+
+  file_block_read (current, current->bufsize - current->buffered);
+
+  if (current->buffered)
+    {
+      while (current->buffered == current->bufsize)
+	{
+	  if (PTRDIFF_MAX / 2 - sizeof (word) < current->bufsize)
+	    xalloc_die ();
+	  current->bufsize *= 2;
+	  current->buffer = xrealloc (current->buffer, current->bufsize);
+	  file_block_read (current, current->bufsize - current->buffered);
+	}
+
+      /* Allocate just enough room for appended newline plus word
+	 sentinel, plus word-alignment.  */
+      cc = current->buffered + 2 * sizeof (word);
+      current->bufsize = cc - cc % sizeof (word);
+      current->buffer = xrealloc (current->buffer, current->bufsize);
+    }
+}
+
+/* Split the file into lines, simultaneously computing the equivalence
+   class for each line.  */
+
+static void
+find_and_hash_each_line (struct file_data *current)
+{
+  hash_value h;
+  char const *p = current->prefix_end;
+  unsigned char c;
+  lin i, *bucket;
+  size_t length;
+
+  /* Cache often-used quantities in local variables to help the compiler.  */
+  char const **linbuf = current->linbuf;
+  lin alloc_lines = current->alloc_lines;
+  lin line = 0;
+  lin linbuf_base = current->linbuf_base;
+  lin *cureqs = xmalloc (alloc_lines * sizeof *cureqs);
+  struct equivclass *eqs = equivs;
+  lin eqs_index = equivs_index;
+  lin eqs_alloc = equivs_alloc;
+  char const *suffix_begin = current->suffix_begin;
+  char const *bufend = FILE_BUFFER (current) + current->buffered;
+  bool diff_length_compare_anyway =
+    ignore_white_space != IGNORE_NO_WHITE_SPACE;
+  bool same_length_diff_contents_compare_anyway =
+    diff_length_compare_anyway | ignore_case;
+
+  while (p < suffix_begin)
+    {
+      char const *ip = p;
+
+      h = 0;
+
+      /* Hash this line until we find a newline.  */
+      if (ignore_case)
+	switch (ignore_white_space)
+	  {
+	  case IGNORE_ALL_SPACE:
+	    while ((c = *p++) != '\n')
+	      if (! isspace (c))
+		h = HASH (h, tolower (c));
+	    break;
+
+	  case IGNORE_SPACE_CHANGE:
+	    while ((c = *p++) != '\n')
+	      {
+		if (isspace (c))
+		  {
+		    do
+		      if ((c = *p++) == '\n')
+			goto hashing_done;
+		    while (isspace (c));
+
+		    h = HASH (h, ' ');
+		  }
+
+		/* C is now the first non-space.  */
+		h = HASH (h, tolower (c));
+	      }
+	    break;
+
+	  case IGNORE_TAB_EXPANSION:
+	    {
+	      size_t column = 0;
+	      while ((c = *p++) != '\n')
+		{
+		  size_t repetitions = 1;
+
+		  switch (c)
+		    {
+		    case '\b':
+		      column -= 0 < column;
+		      break;
+
+		    case '\t':
+		      c = ' ';
+		      repetitions = tabsize - column % tabsize;
+		      column = (column + repetitions < column
+				? 0
+				: column + repetitions);
+		      break;
+
+		    case '\r':
+		      column = 0;
+		      break;
+
+		    default:
+		      c = tolower (c);
+		      column++;
+		      break;
+		    }
+
+		  do
+		    h = HASH (h, c);
+		  while (--repetitions != 0);
+		}
+	    }
+	    break;
+
+	  default:
+	    while ((c = *p++) != '\n')
+	      h = HASH (h, tolower (c));
+	    break;
+	  }
+      else
+	switch (ignore_white_space)
+	  {
+	  case IGNORE_ALL_SPACE:
+	    while ((c = *p++) != '\n')
+	      if (! isspace (c))
+		h = HASH (h, c);
+	    break;
+
+	  case IGNORE_SPACE_CHANGE:
+	    while ((c = *p++) != '\n')
+	      {
+		if (isspace (c))
+		  {
+		    do
+		      if ((c = *p++) == '\n')
+			goto hashing_done;
+		    while (isspace (c));
+
+		    h = HASH (h, ' ');
+		  }
+
+		/* C is now the first non-space.  */
+		h = HASH (h, c);
+	      }
+	    break;
+
+	  case IGNORE_TAB_EXPANSION:
+	    {
+	      size_t column = 0;
+	      while ((c = *p++) != '\n')
+		{
+		  size_t repetitions = 1;
+
+		  switch (c)
+		    {
+		    case '\b':
+		      column -= 0 < column;
+		      break;
+
+		    case '\t':
+		      c = ' ';
+		      repetitions = tabsize - column % tabsize;
+		      column = (column + repetitions < column
+				? 0
+				: column + repetitions);
+		      break;
+
+		    case '\r':
+		      column = 0;
+		      break;
+
+		    default:
+		      column++;
+		      break;
+		    }
+
+		  do
+		    h = HASH (h, c);
+		  while (--repetitions != 0);
+		}
+	    }
+	    break;
+
+	  default:
+	    while ((c = *p++) != '\n')
+	      h = HASH (h, c);
+	    break;
+	  }
+
+   hashing_done:;
+
+      bucket = &buckets[h % nbuckets];
+      length = p - ip - 1;
+
+      if (p == bufend
+	  && current->missing_newline
+	  && ROBUST_OUTPUT_STYLE (output_style))
+	{
+	  /* The last line is incomplete and we do not silently
+	     complete lines.  If the line cannot compare equal to any
+	     complete line, put it into buckets[-1] so that it can
+	     compare equal only to the other file's incomplete line
+	     (if one exists).  */
+	  if (ignore_white_space < IGNORE_SPACE_CHANGE)
+	    bucket = &buckets[-1];
+	}
+
+      for (i = *bucket;  ;  i = eqs[i].next)
+	if (!i)
+	  {
+	    /* Create a new equivalence class in this bucket.  */
+	    i = eqs_index++;
+	    if (i == eqs_alloc)
+	      {
+		if (PTRDIFF_MAX / (2 * sizeof *eqs) <= eqs_alloc)
+		  xalloc_die ();
+		eqs_alloc *= 2;
+		eqs = xrealloc (eqs, eqs_alloc * sizeof *eqs);
+	      }
+	    eqs[i].next = *bucket;
+	    eqs[i].hash = h;
+	    eqs[i].line = ip;
+	    eqs[i].length = length;
+	    *bucket = i;
+	    break;
+	  }
+	else if (eqs[i].hash == h)
+	  {
+	    char const *eqline = eqs[i].line;
+
+	    /* Reuse existing class if lines_differ reports the lines
+               equal.  */
+	    if (eqs[i].length == length)
+	      {
+		/* Reuse existing equivalence class if the lines are identical.
+		   This detects the common case of exact identity
+		   faster than lines_differ would.  */
+		if (memcmp (eqline, ip, length) == 0)
+		  break;
+		if (!same_length_diff_contents_compare_anyway)
+		  continue;
+	      }
+	    else if (!diff_length_compare_anyway)
+	      continue;
+
+	    if (! lines_differ (eqline, ip))
+	      break;
+	  }
+
+      /* Maybe increase the size of the line table.  */
+      if (line == alloc_lines)
+	{
+	  /* Double (alloc_lines - linbuf_base) by adding to alloc_lines.  */
+	  if (PTRDIFF_MAX / 3 <= alloc_lines
+	      || PTRDIFF_MAX / sizeof *cureqs <= 2 * alloc_lines - linbuf_base
+	      || PTRDIFF_MAX / sizeof *linbuf <= alloc_lines - linbuf_base)
+	    xalloc_die ();
+	  alloc_lines = 2 * alloc_lines - linbuf_base;
+	  cureqs = xrealloc (cureqs, alloc_lines * sizeof *cureqs);
+	  linbuf += linbuf_base;
+	  linbuf = xrealloc (linbuf,
+			     (alloc_lines - linbuf_base) * sizeof *linbuf);
+	  linbuf -= linbuf_base;
+	}
+      linbuf[line] = ip;
+      cureqs[line] = i;
+      ++line;
+    }
+
+  current->buffered_lines = line;
+
+  for (i = 0;  ;  i++)
+    {
+      /* Record the line start for lines in the suffix that we care about.
+	 Record one more line start than lines,
+	 so that we can compute the length of any buffered line.  */
+      if (line == alloc_lines)
+	{
+	  /* Double (alloc_lines - linbuf_base) by adding to alloc_lines.  */
+	  if (PTRDIFF_MAX / 3 <= alloc_lines
+	      || PTRDIFF_MAX / sizeof *cureqs <= 2 * alloc_lines - linbuf_base
+	      || PTRDIFF_MAX / sizeof *linbuf <= alloc_lines - linbuf_base)
+	    xalloc_die ();
+	  alloc_lines = 2 * alloc_lines - linbuf_base;
+	  linbuf += linbuf_base;
+	  linbuf = xrealloc (linbuf,
+			     (alloc_lines - linbuf_base) * sizeof *linbuf);
+	  linbuf -= linbuf_base;
+	}
+      linbuf[line] = p;
+
+      if (p == bufend)
+	{
+	  /* If the last line is incomplete and we do not silently
+	     complete lines, don't count its appended newline.  */
+	  if (current->missing_newline && ROBUST_OUTPUT_STYLE (output_style))
+	    linbuf[line]--;
+	  break;
+	}
+
+      if (context <= i && no_diff_means_no_output)
+	break;
+
+      line++;
+
+      while (*p++ != '\n')
+	continue;
+    }
+
+  /* Done with cache in local variables.  */
+  current->linbuf = linbuf;
+  current->valid_lines = line;
+  current->alloc_lines = alloc_lines;
+  current->equivs = cureqs;
+  equivs = eqs;
+  equivs_alloc = eqs_alloc;
+  equivs_index = eqs_index;
+}
+
+/* Prepare the text.  Make sure the text end is initialized.
+   Make sure text ends in a newline,
+   but remember that we had to add one.
+   Strip trailing CRs, if that was requested.  */
+
+static void
+prepare_text (struct file_data *current)
+{
+  size_t buffered = current->buffered;
+  char *p = FILE_BUFFER (current);
+  char *dst;
+
+  if (buffered == 0 || p[buffered - 1] == '\n')
+    current->missing_newline = false;
+  else
+    {
+      p[buffered++] = '\n';
+      current->missing_newline = true;
+    }
+
+  if (!p)
+    return;
+
+  /* Don't use uninitialized storage when planting or using sentinels.  */
+  memset (p + buffered, 0, sizeof (word));
+
+  if (strip_trailing_cr && (dst = memchr (p, '\r', buffered)))
+    {
+      char const *src = dst;
+      char const *srclim = p + buffered;
+
+      do
+	dst += ! ((*dst = *src++) == '\r' && *src == '\n');
+      while (src < srclim);
+
+      buffered -= src - dst;
+    }
+
+  current->buffered = buffered;
+}
+
+/* We have found N lines in a buffer of size S; guess the
+   proportionate number of lines that will be found in a buffer of
+   size T.  However, do not guess a number of lines so large that the
+   resulting line table might cause overflow in size calculations.  */
+static lin
+guess_lines (lin n, size_t s, size_t t)
+{
+  size_t guessed_bytes_per_line = n < 10 ? 32 : s / (n - 1);
+  lin guessed_lines = MAX (1, t / guessed_bytes_per_line);
+  return MIN (guessed_lines, PTRDIFF_MAX / (2 * sizeof (char *) + 1) - 5) + 5;
+}
+
+/* Given a vector of two file_data objects, find the identical
+   prefixes and suffixes of each object.  */
+
+static void
+find_identical_ends (struct file_data filevec[])
+{
+  word *w0, *w1;
+  char *p0, *p1, *buffer0, *buffer1;
+  char const *end0, *beg0;
+  char const **linbuf0, **linbuf1;
+  lin i, lines;
+  size_t n0, n1;
+  lin alloc_lines0, alloc_lines1;
+  lin buffered_prefix, prefix_count, prefix_mask;
+  lin middle_guess, suffix_guess;
+
+  slurp (&filevec[0]);
+  prepare_text (&filevec[0]);
+  if (filevec[0].desc != filevec[1].desc)
+    {
+      slurp (&filevec[1]);
+      prepare_text (&filevec[1]);
+    }
+  else
+    {
+      filevec[1].buffer = filevec[0].buffer;
+      filevec[1].bufsize = filevec[0].bufsize;
+      filevec[1].buffered = filevec[0].buffered;
+      filevec[1].missing_newline = filevec[0].missing_newline;
+    }
+
+  /* Find identical prefix.  */
+
+  w0 = filevec[0].buffer;
+  w1 = filevec[1].buffer;
+  p0 = buffer0 = (char *) w0;
+  p1 = buffer1 = (char *) w1;
+  n0 = filevec[0].buffered;
+  n1 = filevec[1].buffered;
+
+  if (p0 == p1)
+    /* The buffers are the same; sentinels won't work.  */
+    p0 = p1 += n1;
+  else
+    {
+      /* Insert end sentinels, in this case characters that are guaranteed
+	 to make the equality test false, and thus terminate the loop.  */
+
+      if (n0 < n1)
+	p0[n0] = ~p1[n0];
+      else
+	p1[n1] = ~p0[n1];
+
+      /* Loop until first mismatch, or to the sentinel characters.  */
+
+      /* Compare a word at a time for speed.  */
+      while (*w0 == *w1)
+	w0++, w1++;
+
+      /* Do the last few bytes of comparison a byte at a time.  */
+      p0 = (char *) w0;
+      p1 = (char *) w1;
+      while (*p0 == *p1)
+	p0++, p1++;
+
+      /* Don't mistakenly count missing newline as part of prefix.  */
+      if (ROBUST_OUTPUT_STYLE (output_style)
+	  && ((buffer0 + n0 - filevec[0].missing_newline < p0)
+	      !=
+	      (buffer1 + n1 - filevec[1].missing_newline < p1)))
+	p0--, p1--;
+    }
+
+  /* Now P0 and P1 point at the first nonmatching characters.  */
+
+  /* Skip back to last line-beginning in the prefix,
+     and then discard up to HORIZON_LINES lines from the prefix.  */
+  i = horizon_lines;
+  while (p0 != buffer0 && (p0[-1] != '\n' || i--))
+    p0--, p1--;
+
+  /* Record the prefix.  */
+  filevec[0].prefix_end = p0;
+  filevec[1].prefix_end = p1;
+
+  /* Find identical suffix.  */
+
+  /* P0 and P1 point beyond the last chars not yet compared.  */
+  p0 = buffer0 + n0;
+  p1 = buffer1 + n1;
+
+  if (! ROBUST_OUTPUT_STYLE (output_style)
+      || filevec[0].missing_newline == filevec[1].missing_newline)
+    {
+      end0 = p0;	/* Addr of last char in file 0.  */
+
+      /* Get value of P0 at which we should stop scanning backward:
+	 this is when either P0 or P1 points just past the last char
+	 of the identical prefix.  */
+      beg0 = filevec[0].prefix_end + (n0 < n1 ? 0 : n0 - n1);
+
+      /* Scan back until chars don't match or we reach that point.  */
+      while (p0 != beg0)
+	if (*--p0 != *--p1)
+	  {
+	    /* Point at the first char of the matching suffix.  */
+	    ++p0, ++p1;
+	    beg0 = p0;
+	    break;
+	  }
+
+      /* Are we at a line-beginning in both files?  If not, add the rest of
+	 this line to the main body.  Discard up to HORIZON_LINES lines from
+	 the identical suffix.  Also, discard one extra line,
+	 because shift_boundaries may need it.  */
+      i = horizon_lines + !((buffer0 == p0 || p0[-1] == '\n')
+			    &&
+			    (buffer1 == p1 || p1[-1] == '\n'));
+      while (i-- && p0 != end0)
+	while (*p0++ != '\n')
+	  continue;
+
+      p1 += p0 - beg0;
+    }
+
+  /* Record the suffix.  */
+  filevec[0].suffix_begin = p0;
+  filevec[1].suffix_begin = p1;
+
+  /* Calculate number of lines of prefix to save.
+
+     prefix_count == 0 means save the whole prefix;
+     we need this for options like -D that output the whole file,
+     or for enormous contexts (to avoid worrying about arithmetic overflow).
+     We also need it for options like -F that output some preceding line;
+     at least we will need to find the last few lines,
+     but since we don't know how many, it's easiest to find them all.
+
+     Otherwise, prefix_count != 0.  Save just prefix_count lines at start
+     of the line buffer; they'll be moved to the proper location later.
+     Handle 1 more line than the context says (because we count 1 too many),
+     rounded up to the next power of 2 to speed index computation.  */
+
+  if (no_diff_means_no_output && ! function_regexp.fastmap
+      && context < LIN_MAX / 4 && context < n0)
+    {
+      middle_guess = guess_lines (0, 0, p0 - filevec[0].prefix_end);
+      suffix_guess = guess_lines (0, 0, buffer0 + n0 - p0);
+      for (prefix_count = 1;  prefix_count <= context;  prefix_count *= 2)
+	continue;
+      alloc_lines0 = (prefix_count + middle_guess
+		      + MIN (context, suffix_guess));
+    }
+  else
+    {
+      prefix_count = 0;
+      alloc_lines0 = guess_lines (0, 0, n0);
+    }
+
+  prefix_mask = prefix_count - 1;
+  lines = 0;
+  linbuf0 = xmalloc (alloc_lines0 * sizeof *linbuf0);
+  p0 = buffer0;
+
+  /* If the prefix is needed, find the prefix lines.  */
+  if (! (no_diff_means_no_output
+	 && filevec[0].prefix_end == p0
+	 && filevec[1].prefix_end == p1))
+    {
+      end0 = filevec[0].prefix_end;
+      while (p0 != end0)
+	{
+	  lin l = lines++ & prefix_mask;
+	  if (l == alloc_lines0)
+	    {
+	      if (PTRDIFF_MAX / (2 * sizeof *linbuf0) <= alloc_lines0)
+		xalloc_die ();
+	      alloc_lines0 *= 2;
+	      linbuf0 = xrealloc (linbuf0, alloc_lines0 * sizeof *linbuf0);
+	    }
+	  linbuf0[l] = p0;
+	  while (*p0++ != '\n')
+	    continue;
+	}
+    }
+  buffered_prefix = prefix_count && context < lines ? context : lines;
+
+  /* Allocate line buffer 1.  */
+
+  middle_guess = guess_lines (lines, p0 - buffer0, p1 - filevec[1].prefix_end);
+  suffix_guess = guess_lines (lines, p0 - buffer0, buffer1 + n1 - p1);
+  alloc_lines1 = buffered_prefix + middle_guess + MIN (context, suffix_guess);
+  if (alloc_lines1 < buffered_prefix
+      || PTRDIFF_MAX / sizeof *linbuf1 <= alloc_lines1)
+    xalloc_die ();
+  linbuf1 = xmalloc (alloc_lines1 * sizeof *linbuf1);
+
+  if (buffered_prefix != lines)
+    {
+      /* Rotate prefix lines to proper location.  */
+      for (i = 0;  i < buffered_prefix;  i++)
+	linbuf1[i] = linbuf0[(lines - context + i) & prefix_mask];
+      for (i = 0;  i < buffered_prefix;  i++)
+	linbuf0[i] = linbuf1[i];
+    }
+
+  /* Initialize line buffer 1 from line buffer 0.  */
+  for (i = 0; i < buffered_prefix; i++)
+    linbuf1[i] = linbuf0[i] - buffer0 + buffer1;
+
+  /* Record the line buffer, adjusted so that
+     linbuf[0] points at the first differing line.  */
+  filevec[0].linbuf = linbuf0 + buffered_prefix;
+  filevec[1].linbuf = linbuf1 + buffered_prefix;
+  filevec[0].linbuf_base = filevec[1].linbuf_base = - buffered_prefix;
+  filevec[0].alloc_lines = alloc_lines0 - buffered_prefix;
+  filevec[1].alloc_lines = alloc_lines1 - buffered_prefix;
+  filevec[0].prefix_lines = filevec[1].prefix_lines = lines;
+}
+
+/* If 1 < k, then (2**k - prime_offset[k]) is the largest prime less
+   than 2**k.  This table is derived from Chris K. Caldwell's list
+   <http://www.utm.edu/research/primes/lists/2small/>.  */
+
+static unsigned char const prime_offset[] =
+{
+  0, 0, 1, 1, 3, 1, 3, 1, 5, 3, 3, 9, 3, 1, 3, 19, 15, 1, 5, 1, 3, 9, 3,
+  15, 3, 39, 5, 39, 57, 3, 35, 1, 5, 9, 41, 31, 5, 25, 45, 7, 87, 21,
+  11, 57, 17, 55, 21, 115, 59, 81, 27, 129, 47, 111, 33, 55, 5, 13, 27,
+  55, 93, 1, 57, 25
+};
+
+/* Verify that this host's size_t is not too wide for the above table.  */
+
+verify (sizeof (size_t) * CHAR_BIT <= sizeof prime_offset);
+
+/* Given a vector of two file_data objects, read the file associated
+   with each one, and build the table of equivalence classes.
+   Return nonzero if either file appears to be a binary file.
+   If PRETEND_BINARY is nonzero, pretend they are binary regardless.  */
+
+bool
+read_files (struct file_data filevec[], bool pretend_binary)
+{
+  int i;
+  bool skip_test = text | pretend_binary;
+  bool appears_binary = pretend_binary | sip (&filevec[0], skip_test);
+
+  if (filevec[0].desc != filevec[1].desc)
+    appears_binary |= sip (&filevec[1], skip_test | appears_binary);
+  else
+    {
+      filevec[1].buffer = filevec[0].buffer;
+      filevec[1].bufsize = filevec[0].bufsize;
+      filevec[1].buffered = filevec[0].buffered;
+    }
+  if (appears_binary)
+    {
+      /* FIXME: If O_BINARY, this should set both files to binary mode.  */
+      return true;
+    }
+
+  find_identical_ends (filevec);
+
+  equivs_alloc = filevec[0].alloc_lines + filevec[1].alloc_lines + 1;
+  if (PTRDIFF_MAX / sizeof *equivs <= equivs_alloc)
+    xalloc_die ();
+  equivs = xmalloc (equivs_alloc * sizeof *equivs);
+  /* Equivalence class 0 is permanently safe for lines that were not
+     hashed.  Real equivalence classes start at 1.  */
+  equivs_index = 1;
+
+  /* Allocate (one plus) a prime number of hash buckets.  Use a prime
+     number between 1/3 and 2/3 of the value of equiv_allocs,
+     approximately.  */
+  for (i = 9; (size_t) 1 << i < equivs_alloc / 3; i++)
+    continue;
+  nbuckets = ((size_t) 1 << i) - prime_offset[i];
+  if (PTRDIFF_MAX / sizeof *buckets <= nbuckets)
+    xalloc_die ();
+  buckets = zalloc ((nbuckets + 1) * sizeof *buckets);
+  buckets++;
+
+  for (i = 0; i < 2; i++)
+    find_and_hash_each_line (&filevec[i]);
+
+  filevec[0].equiv_max = filevec[1].equiv_max = equivs_index;
+
+  free (equivs);
+  free (buckets - 1);
+
+  return false;
+}
diff --git a/diffutils-3.0/normal.c b/diffutils-3.0/normal.c
new file mode 100644
index 0000000..154efaa
--- /dev/null
+++ b/diffutils-3.0/normal.c
@@ -0,0 +1,69 @@
+/* Normal-format output routines for GNU DIFF.
+
+   Copyright (C) 1988-1989, 1993, 1995, 1998, 2001, 2006, 2009-2010 Free
+   Software Foundation, Inc.
+
+   This file is part of GNU DIFF.
+
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+#include "diff.h"
+
+static void print_normal_hunk (struct change *);
+
+/* Print the edit-script SCRIPT as a normal diff.
+   INF points to an array of descriptions of the two files.  */
+
+void
+print_normal_script (struct change *script)
+{
+  print_script (script, find_change, print_normal_hunk);
+}
+
+/* Print a hunk of a normal diff.
+   This is a contiguous portion of a complete edit script,
+   describing changes in consecutive lines.  */
+
+static void
+print_normal_hunk (struct change *hunk)
+{
+  lin first0, last0, first1, last1;
+  register lin i;
+
+  /* Determine range of line numbers involved in each file.  */
+  enum changes changes = analyze_hunk (hunk, &first0, &last0, &first1, &last1);
+  if (!changes)
+    return;
+
+  begin_output ();
+
+  /* Print out the line number header for this hunk */
+  print_number_range (',', &files[0], first0, last0);
+  fputc (change_letter[changes], outfile);
+  print_number_range (',', &files[1], first1, last1);
+  fputc ('\n', outfile);
+
+  /* Print the lines that the first file has.  */
+  if (changes & OLD)
+    for (i = first0; i <= last0; i++)
+      print_1_line ("<", &files[0].linbuf[i]);
+
+  if (changes == CHANGED)
+    fputs ("---\n", outfile);
+
+  /* Print the lines that the second file has.  */
+  if (changes & NEW)
+    for (i = first1; i <= last1; i++)
+      print_1_line (">", &files[1].linbuf[i]);
+}
diff --git a/diffutils-3.0/paths.h b/diffutils-3.0/paths.h
new file mode 100644
index 0000000..86dc41c
--- /dev/null
+++ b/diffutils-3.0/paths.h
@@ -0,0 +1,2 @@
+#define DEFAULT_DIFF_PROGRAM "diff"
+#define LOCALEDIR "/usr/local/share/locale"
diff --git a/diffutils-3.0/quote-3.0-test.txt b/diffutils-3.0/quote-3.0-test.txt
new file mode 100644
index 0000000..e69de29
diff --git a/diffutils-3.0/sdiff b/diffutils-3.0/sdiff
new file mode 100755
index 0000000000000000000000000000000000000000..e0e4bc0efb57189ae36663d2f344681b08d8d6eb
GIT binary patch
literal 182580
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

literal 0
HcmV?d00001

diff --git a/diffutils-3.0/sdiff.c b/diffutils-3.0/sdiff.c
new file mode 100644
index 0000000..6ea6f0a
--- /dev/null
+++ b/diffutils-3.0/sdiff.c
@@ -0,0 +1,1236 @@
+/* sdiff - side-by-side merge of file differences
+
+   Copyright (C) 1992-1996, 1998, 2001-2002, 2004, 2006-2007, 2009-2010 Free
+   Software Foundation, Inc.
+
+   This file is part of GNU DIFF.
+
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+#include "system.h"
+#include "paths.h"
+
+#include <stdio.h>
+#include <unlocked-io.h>
+
+#include <c-stack.h>
+#include <dirname.h>
+#include <error.h>
+#include <exitfail.h>
+#include <file-type.h>
+#include <getopt.h>
+#include <progname.h>
+#include <sh-quote.h>
+#include <version-etc.h>
+#include <xalloc.h>
+
+/* The official name of this program (e.g., no `g' prefix).  */
+#define PROGRAM_NAME "sdiff"
+
+#define AUTHORS \
+  proper_name ("Thomas Lord")
+
+/* Size of chunks read from files which must be parsed into lines.  */
+#define SDIFF_BUFSIZE ((size_t) 65536)
+
+static char const *editor_program = DEFAULT_EDITOR_PROGRAM;
+static char const **diffargv;
+
+static char * volatile tmpname;
+static FILE *tmp;
+
+#if HAVE_WORKING_FORK || HAVE_WORKING_VFORK
+static pid_t volatile diffpid;
+#endif
+
+struct line_filter;
+
+static void catchsig (int);
+static bool edit (struct line_filter *, char const *, lin, lin, struct line_filter *, char const *, lin, lin, FILE *);
+static bool interact (struct line_filter *, struct line_filter *, char const *, struct line_filter *, char const *, FILE *);
+static void checksigs (void);
+static void diffarg (char const *);
+static void fatal (char const *) __attribute__((noreturn));
+static void perror_fatal (char const *) __attribute__((noreturn));
+static void trapsigs (void);
+static void untrapsig (int);
+
+#define NUM_SIGS (sizeof sigs / sizeof *sigs)
+static int const sigs[] = {
+#ifdef SIGHUP
+       SIGHUP,
+#endif
+#ifdef SIGQUIT
+       SIGQUIT,
+#endif
+#ifdef SIGTERM
+       SIGTERM,
+#endif
+#ifdef SIGXCPU
+       SIGXCPU,
+#endif
+#ifdef SIGXFSZ
+       SIGXFSZ,
+#endif
+#ifdef SIGPIPE
+       SIGPIPE,
+# define handler_index_of_SIGPIPE (NUM_SIGS - 2)
+#endif
+       SIGINT
+#define handler_index_of_SIGINT (NUM_SIGS - 1)
+};
+
+#if HAVE_SIGACTION
+  /* Prefer `sigaction' if available, since `signal' can lose signals.  */
+  static struct sigaction initial_action[NUM_SIGS];
+# define initial_handler(i) (initial_action[i].sa_handler)
+  static void signal_handler (int, void (*) (int));
+#else
+  static void (*initial_action[NUM_SIGS]) ();
+# define initial_handler(i) (initial_action[i])
+# define signal_handler(sig, handler) signal (sig, handler)
+#endif
+
+#if ! HAVE_SIGPROCMASK
+# define sigset_t int
+# define sigemptyset(s) (*(s) = 0)
+# ifndef sigmask
+#  define sigmask(sig) (1 << ((sig) - 1))
+# endif
+# define sigaddset(s, sig) (*(s) |= sigmask (sig))
+# ifndef SIG_BLOCK
+#  define SIG_BLOCK 0
+# endif
+# ifndef SIG_SETMASK
+#  define SIG_SETMASK (! SIG_BLOCK)
+# endif
+# if ! HAVE_SIGBLOCK
+#  define sigblock(mask) (mask)
+#  define sigsetmask(mask) (mask)
+# endif
+# define sigprocmask(how, n, o) \
+    ((how) == SIG_BLOCK \
+     ? ((o) ? (*(sigset_t *) (o) = sigblock (*(n))) : sigblock (*(n))) \
+     : sigsetmask (*(n)))
+#endif
+
+static bool diraccess (char const *);
+static int temporary_file (void);
+
+/* Options: */
+
+/* Name of output file if -o specified.  */
+static char const *output;
+
+/* Do not print common lines.  */
+static bool suppress_common_lines;
+
+/* Value for the long option that does not have single-letter equivalents.  */
+enum
+{
+  DIFF_PROGRAM_OPTION = CHAR_MAX + 1,
+  HELP_OPTION,
+  STRIP_TRAILING_CR_OPTION,
+  TABSIZE_OPTION
+};
+
+static struct option const longopts[] =
+{
+  {"diff-program", 1, 0, DIFF_PROGRAM_OPTION},
+  {"expand-tabs", 0, 0, 't'},
+  {"help", 0, 0, HELP_OPTION},
+  {"ignore-all-space", 0, 0, 'W'}, /* swap W and w for historical reasons */
+  {"ignore-blank-lines", 0, 0, 'B'},
+  {"ignore-case", 0, 0, 'i'},
+  {"ignore-matching-lines", 1, 0, 'I'},
+  {"ignore-space-change", 0, 0, 'b'},
+  {"ignore-tab-expansion", 0, 0, 'E'},
+  {"left-column", 0, 0, 'l'},
+  {"minimal", 0, 0, 'd'},
+  {"output", 1, 0, 'o'},
+  {"speed-large-files", 0, 0, 'H'},
+  {"strip-trailing-cr", 0, 0, STRIP_TRAILING_CR_OPTION},
+  {"suppress-common-lines", 0, 0, 's'},
+  {"tabsize", 1, 0, TABSIZE_OPTION},
+  {"text", 0, 0, 'a'},
+  {"version", 0, 0, 'v'},
+  {"width", 1, 0, 'w'},
+  {0, 0, 0, 0}
+};
+
+static void try_help (char const *, char const *) __attribute__((noreturn));
+static void
+try_help (char const *reason_msgid, char const *operand)
+{
+  if (reason_msgid)
+    error (0, 0, _(reason_msgid), operand);
+  error (EXIT_TROUBLE, 0, _("Try '%s --help' for more information."),
+	 program_name);
+  abort ();
+}
+
+static void
+check_stdout (void)
+{
+  if (ferror (stdout))
+    fatal ("write failed");
+  else if (fclose (stdout) != 0)
+    perror_fatal (_("standard output"));
+}
+
+static char const * const option_help_msgid[] = {
+  N_("-o FILE  --output=FILE  Operate interactively, sending output to FILE."),
+  "",
+  N_("-i  --ignore-case  Consider upper- and lower-case to be the same."),
+  N_("-E  --ignore-tab-expansion  Ignore changes due to tab expansion."),
+  N_("-b  --ignore-space-change  Ignore changes in the amount of white space."),
+  N_("-W  --ignore-all-space  Ignore all white space."),
+  N_("-B  --ignore-blank-lines  Ignore changes whose lines are all blank."),
+  N_("-I RE  --ignore-matching-lines=RE  Ignore changes whose lines all match RE."),
+  N_("--strip-trailing-cr  Strip trailing carriage return on input."),
+  N_("-a  --text  Treat all files as text."),
+  "",
+  N_("-w NUM  --width=NUM  Output at most NUM (default 130) print columns."),
+  N_("-l  --left-column  Output only the left column of common lines."),
+  N_("-s  --suppress-common-lines  Do not output common lines."),
+  "",
+  N_("-t  --expand-tabs  Expand tabs to spaces in output."),
+  N_("--tabsize=NUM  Tab stops are every NUM (default 8) print columns."),
+  "",
+  N_("-d  --minimal  Try hard to find a smaller set of changes."),
+  N_("-H  --speed-large-files  Assume large files and many scattered small changes."),
+  N_("--diff-program=PROGRAM  Use PROGRAM to compare files."),
+  "",
+  N_("-v  --version  Output version info."),
+  N_("--help  Output this help."),
+  0
+};
+
+static void
+usage (void)
+{
+  char const * const *p;
+
+  printf (_("Usage: %s [OPTION]... FILE1 FILE2\n"), program_name);
+  printf ("%s\n\n", _("Side-by-side merge of file differences."));
+  for (p = option_help_msgid;  *p;  p++)
+    if (**p)
+      printf ("  %s\n", _(*p));
+    else
+      putchar ('\n');
+  printf ("\n%s\n%s\n",
+	  _("If a FILE is '-', read standard input."),
+	  _("Exit status is 0 if inputs are the same, 1 if different, 2 if trouble."));
+  emit_bug_reporting_address ();
+}
+
+/* Clean up after a signal or other failure.  This function is
+   async-signal-safe.  */
+static void
+cleanup (int signo __attribute__((unused)))
+{
+#if HAVE_WORKING_FORK || HAVE_WORKING_VFORK
+  if (0 < diffpid)
+    kill (diffpid, SIGPIPE);
+#endif
+  if (tmpname)
+    unlink (tmpname);
+}
+
+static void exiterr (void) __attribute__((noreturn));
+static void
+exiterr (void)
+{
+  cleanup (0);
+  untrapsig (0);
+  checksigs ();
+  exit (EXIT_TROUBLE);
+}
+
+static void
+fatal (char const *msgid)
+{
+  error (0, 0, "%s", _(msgid));
+  exiterr ();
+}
+
+static void
+perror_fatal (char const *msg)
+{
+  int e = errno;
+  checksigs ();
+  error (0, e, "%s", msg);
+  exiterr ();
+}
+
+static void
+check_child_status (int werrno, int wstatus, int max_ok_status,
+		    char const *subsidiary_program)
+{
+  int status = (! werrno && WIFEXITED (wstatus)
+		? WEXITSTATUS (wstatus)
+		: INT_MAX);
+
+  if (max_ok_status < status)
+    {
+      error (0, werrno,
+	     _(status == 126
+	       ? "subsidiary program '%s' could not be invoked"
+	       : status == 127
+	       ? "subsidiary program '%s' not found"
+	       : status == INT_MAX
+	       ? "subsidiary program '%s' failed"
+	       : "subsidiary program '%s' failed (exit status %d)"),
+	     subsidiary_program, status);
+      exiterr ();
+    }
+}
+
+static FILE *
+ck_fopen (char const *fname, char const *type)
+{
+  FILE *r = fopen (fname, type);
+  if (! r)
+    perror_fatal (fname);
+  return r;
+}
+
+static void
+ck_fclose (FILE *f)
+{
+  if (fclose (f))
+    perror_fatal ("fclose");
+}
+
+static size_t
+ck_fread (char *buf, size_t size, FILE *f)
+{
+  size_t r = fread (buf, sizeof (char), size, f);
+  if (r == 0 && ferror (f))
+    perror_fatal (_("read failed"));
+  return r;
+}
+
+static void
+ck_fwrite (char const *buf, size_t size, FILE *f)
+{
+  if (fwrite (buf, sizeof (char), size, f) != size)
+    perror_fatal (_("write failed"));
+}
+
+static void
+ck_fflush (FILE *f)
+{
+  if (fflush (f) != 0)
+    perror_fatal (_("write failed"));
+}
+
+static char const *
+expand_name (char *name, bool is_dir, char const *other_name)
+{
+  if (STREQ (name, "-"))
+    fatal ("cannot interactively merge standard input");
+  if (! is_dir)
+    return name;
+  else
+    {
+      /* Yield NAME/BASE, where BASE is OTHER_NAME's basename.  */
+      char const *base = last_component (other_name);
+      size_t namelen = strlen (name), baselen = base_len (base);
+      bool insert_slash = *last_component (name) && name[namelen - 1] != '/';
+      char *r = xmalloc (namelen + insert_slash + baselen + 1);
+      memcpy (r, name, namelen);
+      r[namelen] = '/';
+      memcpy (r + namelen + insert_slash, base, baselen);
+      r[namelen + insert_slash + baselen] = '\0';
+      return r;
+    }
+}
+
+struct line_filter {
+  FILE *infile;
+  char *bufpos;
+  char *buffer;
+  char *buflim;
+};
+
+static void
+lf_init (struct line_filter *lf, FILE *infile)
+{
+  lf->infile = infile;
+  lf->bufpos = lf->buffer = lf->buflim = xmalloc (SDIFF_BUFSIZE + 1);
+  lf->buflim[0] = '\n';
+}
+
+/* Fill an exhausted line_filter buffer from its INFILE */
+static size_t
+lf_refill (struct line_filter *lf)
+{
+  size_t s = ck_fread (lf->buffer, SDIFF_BUFSIZE, lf->infile);
+  lf->bufpos = lf->buffer;
+  lf->buflim = lf->buffer + s;
+  lf->buflim[0] = '\n';
+  checksigs ();
+  return s;
+}
+
+/* Advance LINES on LF's infile, copying lines to OUTFILE */
+static void
+lf_copy (struct line_filter *lf, lin lines, FILE *outfile)
+{
+  char *start = lf->bufpos;
+
+  while (lines)
+    {
+      lf->bufpos = (char *) memchr (lf->bufpos, '\n', lf->buflim - lf->bufpos);
+      if (! lf->bufpos)
+	{
+	  ck_fwrite (start, lf->buflim - start, outfile);
+	  if (! lf_refill (lf))
+	    return;
+	  start = lf->bufpos;
+	}
+      else
+	{
+	  --lines;
+	  ++lf->bufpos;
+	}
+    }
+
+  ck_fwrite (start, lf->bufpos - start, outfile);
+}
+
+/* Advance LINES on LF's infile without doing output */
+static void
+lf_skip (struct line_filter *lf, lin lines)
+{
+  while (lines)
+    {
+      lf->bufpos = (char *) memchr (lf->bufpos, '\n', lf->buflim - lf->bufpos);
+      if (! lf->bufpos)
+	{
+	  if (! lf_refill (lf))
+	    break;
+	}
+      else
+	{
+	  --lines;
+	  ++lf->bufpos;
+	}
+    }
+}
+
+/* Snarf a line into a buffer.  Return EOF if EOF, 0 if error, 1 if OK.  */
+static int
+lf_snarf (struct line_filter *lf, char *buffer, size_t bufsize)
+{
+  for (;;)
+    {
+      char *start = lf->bufpos;
+      char *next = (char *) memchr (start, '\n', lf->buflim + 1 - start);
+      size_t s = next - start;
+      if (bufsize <= s)
+	return 0;
+      memcpy (buffer, start, s);
+      if (next < lf->buflim)
+	{
+	  buffer[s] = 0;
+	  lf->bufpos = next + 1;
+	  return 1;
+	}
+      if (! lf_refill (lf))
+	return s ? 0 : EOF;
+      buffer += s;
+      bufsize -= s;
+    }
+}
+
+int
+main (int argc, char *argv[])
+{
+  int opt;
+  char const *prog;
+
+  exit_failure = EXIT_TROUBLE;
+  initialize_main (&argc, &argv);
+  set_program_name (argv[0]);
+  setlocale (LC_ALL, "");
+  bindtextdomain (PACKAGE, LOCALEDIR);
+  textdomain (PACKAGE);
+  c_stack_action (cleanup);
+
+  prog = getenv ("EDITOR");
+  if (prog)
+    editor_program = prog;
+
+  diffarg (DEFAULT_DIFF_PROGRAM);
+
+  /* parse command line args */
+  while ((opt = getopt_long (argc, argv, "abBdEHiI:lo:stvw:W", longopts, 0))
+	 != -1)
+    {
+      switch (opt)
+	{
+	case 'a':
+	  diffarg ("-a");
+	  break;
+
+	case 'b':
+	  diffarg ("-b");
+	  break;
+
+	case 'B':
+	  diffarg ("-B");
+	  break;
+
+	case 'd':
+	  diffarg ("-d");
+	  break;
+
+	case 'E':
+	  diffarg ("-E");
+	  break;
+
+	case 'H':
+	  diffarg ("-H");
+	  break;
+
+	case 'i':
+	  diffarg ("-i");
+	  break;
+
+	case 'I':
+	  diffarg ("-I");
+	  diffarg (optarg);
+	  break;
+
+	case 'l':
+	  diffarg ("--left-column");
+	  break;
+
+	case 'o':
+	  output = optarg;
+	  break;
+
+	case 's':
+	  suppress_common_lines = true;
+	  break;
+
+	case 't':
+	  diffarg ("-t");
+	  break;
+
+	case 'v':
+	  version_etc (stdout, PROGRAM_NAME, PACKAGE_NAME, PACKAGE_VERSION,
+		       AUTHORS, (char *) NULL);
+	  check_stdout ();
+	  return EXIT_SUCCESS;
+
+	case 'w':
+	  diffarg ("-W");
+	  diffarg (optarg);
+	  break;
+
+	case 'W':
+	  diffarg ("-w");
+	  break;
+
+	case DIFF_PROGRAM_OPTION:
+	  diffargv[0] = optarg;
+	  break;
+
+	case HELP_OPTION:
+	  usage ();
+	  check_stdout ();
+	  return EXIT_SUCCESS;
+
+	case STRIP_TRAILING_CR_OPTION:
+	  diffarg ("--strip-trailing-cr");
+	  break;
+
+	case TABSIZE_OPTION:
+	  diffarg ("--tabsize");
+	  diffarg (optarg);
+	  break;
+
+	default:
+	  try_help (0, 0);
+	}
+    }
+
+  if (argc - optind != 2)
+    {
+      if (argc - optind < 2)
+	try_help ("missing operand after '%s'", argv[argc - 1]);
+      else
+	try_help ("extra operand '%s'", argv[optind + 2]);
+    }
+
+  if (! output)
+    {
+      /* easy case: diff does everything for us */
+      if (suppress_common_lines)
+	diffarg ("--suppress-common-lines");
+      diffarg ("-y");
+      diffarg ("--");
+      diffarg (argv[optind]);
+      diffarg (argv[optind + 1]);
+      diffarg (0);
+      execvp (diffargv[0], (char **) diffargv);
+      perror_fatal (diffargv[0]);
+    }
+  else
+    {
+      char const *lname, *rname;
+      FILE *left, *right, *out, *diffout;
+      bool interact_ok;
+      struct line_filter lfilt;
+      struct line_filter rfilt;
+      struct line_filter diff_filt;
+      bool leftdir = diraccess (argv[optind]);
+      bool rightdir = diraccess (argv[optind + 1]);
+
+      if (leftdir & rightdir)
+	fatal ("both files to be compared are directories");
+
+      lname = expand_name (argv[optind], leftdir, argv[optind + 1]);
+      left = ck_fopen (lname, "r");
+      rname = expand_name (argv[optind + 1], rightdir, argv[optind]);
+      right = ck_fopen (rname, "r");
+      out = ck_fopen (output, "w");
+
+      diffarg ("--sdiff-merge-assist");
+      diffarg ("--");
+      diffarg (argv[optind]);
+      diffarg (argv[optind + 1]);
+      diffarg (0);
+
+      trapsigs ();
+
+#if ! (HAVE_WORKING_FORK || HAVE_WORKING_VFORK)
+      {
+	size_t cmdsize = 1;
+	char *p, *command;
+	int i;
+
+	for (i = 0;  diffargv[i];  i++)
+	  cmdsize += shell_quote_length (diffargv[i]) + 1;
+	command = p = xmalloc (cmdsize);
+	for (i = 0;  diffargv[i];  i++)
+	  {
+	    p = shell_quote_copy (p, diffargv[i]);
+	    *p++ = ' ';
+	  }
+	p[-1] = 0;
+	errno = 0;
+	diffout = popen (command, "r");
+	if (! diffout)
+	  perror_fatal (command);
+	free (command);
+      }
+#else
+      {
+	int diff_fds[2];
+# if HAVE_WORKING_VFORK
+	sigset_t procmask;
+	sigset_t blocked;
+# endif
+
+	if (pipe (diff_fds) != 0)
+	  perror_fatal ("pipe");
+
+# if HAVE_WORKING_VFORK
+	/* Block SIGINT and SIGPIPE.  */
+	sigemptyset (&blocked);
+	sigaddset (&blocked, SIGINT);
+	sigaddset (&blocked, SIGPIPE);
+	sigprocmask (SIG_BLOCK, &blocked, &procmask);
+# endif
+	diffpid = vfork ();
+	if (diffpid < 0)
+	  perror_fatal ("fork");
+	if (! diffpid)
+	  {
+	    /* Alter the child's SIGINT and SIGPIPE handlers;
+	       this may munge the parent.
+	       The child ignores SIGINT in case the user interrupts the editor.
+	       The child does not ignore SIGPIPE, even if the parent does.  */
+	    if (initial_handler (handler_index_of_SIGINT) != SIG_IGN)
+	      signal_handler (SIGINT, SIG_IGN);
+	    signal_handler (SIGPIPE, SIG_DFL);
+# if HAVE_WORKING_VFORK
+	    /* Stop blocking SIGINT and SIGPIPE in the child.  */
+	    sigprocmask (SIG_SETMASK, &procmask, 0);
+# endif
+	    close (diff_fds[0]);
+	    if (diff_fds[1] != STDOUT_FILENO)
+	      {
+		dup2 (diff_fds[1], STDOUT_FILENO);
+		close (diff_fds[1]);
+	      }
+
+	    execvp (diffargv[0], (char **) diffargv);
+	    _exit (errno == ENOENT ? 127 : 126);
+	  }
+
+# if HAVE_WORKING_VFORK
+	/* Restore the parent's SIGINT and SIGPIPE behavior.  */
+	if (initial_handler (handler_index_of_SIGINT) != SIG_IGN)
+	  signal_handler (SIGINT, catchsig);
+	if (initial_handler (handler_index_of_SIGPIPE) != SIG_IGN)
+	  signal_handler (SIGPIPE, catchsig);
+	else
+	  signal_handler (SIGPIPE, SIG_IGN);
+
+	/* Stop blocking SIGINT and SIGPIPE in the parent.  */
+	sigprocmask (SIG_SETMASK, &procmask, 0);
+# endif
+
+	close (diff_fds[1]);
+	diffout = fdopen (diff_fds[0], "r");
+	if (! diffout)
+	  perror_fatal ("fdopen");
+      }
+#endif
+
+      lf_init (&diff_filt, diffout);
+      lf_init (&lfilt, left);
+      lf_init (&rfilt, right);
+
+      interact_ok = interact (&diff_filt, &lfilt, lname, &rfilt, rname, out);
+
+      ck_fclose (left);
+      ck_fclose (right);
+      ck_fclose (out);
+
+      {
+	int wstatus;
+	int werrno = 0;
+
+#if ! (HAVE_WORKING_FORK || HAVE_WORKING_VFORK)
+	wstatus = pclose (diffout);
+	if (wstatus == -1)
+	  werrno = errno;
+#else
+	ck_fclose (diffout);
+	while (waitpid (diffpid, &wstatus, 0) < 0)
+	  if (errno == EINTR)
+	    checksigs ();
+	  else
+	    perror_fatal ("waitpid");
+	diffpid = 0;
+#endif
+
+	if (tmpname)
+	  {
+	    unlink (tmpname);
+	    tmpname = 0;
+	  }
+
+	if (! interact_ok)
+	  exiterr ();
+
+	check_child_status (werrno, wstatus, EXIT_FAILURE, diffargv[0]);
+	untrapsig (0);
+	checksigs ();
+	exit (WEXITSTATUS (wstatus));
+      }
+    }
+  return EXIT_SUCCESS;			/* Fool '-Wall'.  */
+}
+
+static void
+diffarg (char const *a)
+{
+  static size_t diffargs, diffarglim;
+
+  if (diffargs == diffarglim)
+    {
+      if (! diffarglim)
+	diffarglim = 16;
+      else if (PTRDIFF_MAX / (2 * sizeof *diffargv) <= diffarglim)
+	xalloc_die ();
+      else
+	diffarglim *= 2;
+      diffargv = xrealloc (diffargv, diffarglim * sizeof *diffargv);
+    }
+  diffargv[diffargs++] = a;
+}
+
+/* Signal handling */
+
+static bool volatile ignore_SIGINT;
+static int volatile signal_received;
+static bool sigs_trapped;
+
+static void
+catchsig (int s)
+{
+#if ! HAVE_SIGACTION
+  signal (s, SIG_IGN);
+#endif
+  if (! (s == SIGINT && ignore_SIGINT))
+    signal_received = s;
+}
+
+#if HAVE_SIGACTION
+static struct sigaction catchaction;
+
+static void
+signal_handler (int sig, void (*handler) (int))
+{
+  catchaction.sa_handler = handler;
+  sigaction (sig, &catchaction, 0);
+}
+#endif
+
+static void
+trapsigs (void)
+{
+  int i;
+
+#if HAVE_SIGACTION
+  catchaction.sa_flags = SA_RESTART;
+  sigemptyset (&catchaction.sa_mask);
+  for (i = 0;  i < NUM_SIGS;  i++)
+    sigaddset (&catchaction.sa_mask, sigs[i]);
+#endif
+
+  for (i = 0;  i < NUM_SIGS;  i++)
+    {
+#if HAVE_SIGACTION
+      sigaction (sigs[i], 0, &initial_action[i]);
+#else
+      initial_action[i] = signal (sigs[i], SIG_IGN);
+#endif
+      if (initial_handler (i) != SIG_IGN)
+	signal_handler (sigs[i], catchsig);
+    }
+
+#ifdef SIGCHLD
+  /* System V fork+wait does not work if SIGCHLD is ignored.  */
+  signal (SIGCHLD, SIG_DFL);
+#endif
+
+  sigs_trapped = true;
+}
+
+/* Untrap signal S, or all trapped signals if S is zero.  */
+static void
+untrapsig (int s)
+{
+  int i;
+
+  if (sigs_trapped)
+    for (i = 0;  i < NUM_SIGS;  i++)
+      if ((! s || sigs[i] == s)  &&  initial_handler (i) != SIG_IGN)
+	{
+#if HAVE_SIGACTION
+	  sigaction (sigs[i], &initial_action[i], 0);
+#else
+	  signal (sigs[i], initial_action[i]);
+#endif
+	}
+}
+
+/* Exit if a signal has been received.  */
+static void
+checksigs (void)
+{
+  int s = signal_received;
+  if (s)
+    {
+      cleanup (0);
+
+      /* Yield an exit status indicating that a signal was received.  */
+      untrapsig (s);
+      kill (getpid (), s);
+
+      /* That didn't work, so exit with error status.  */
+      exit (EXIT_TROUBLE);
+    }
+}
+
+static void
+give_help (void)
+{
+  fprintf (stderr, "%s", _("\
+ed:\tEdit then use both versions, each decorated with a header.\n\
+eb:\tEdit then use both versions.\n\
+el or e1:\tEdit then use the left version.\n\
+er or e2:\tEdit then use the right version.\n\
+e:\tDiscard both versions then edit a new one.\n\
+l or 1:\tUse the left version.\n\
+r or 2:\tUse the right version.\n\
+s:\tSilently include common lines.\n\
+v:\tVerbosely include common lines.\n\
+q:\tQuit.\n\
+"));
+}
+
+static int
+skip_white (void)
+{
+  int c;
+  for (;;)
+    {
+      c = getchar ();
+      if (! isspace (c) || c == '\n')
+	break;
+      checksigs ();
+    }
+  if (ferror (stdin))
+    perror_fatal (_("read failed"));
+  return c;
+}
+
+static void
+flush_line (void)
+{
+  int c;
+  while ((c = getchar ()) != '\n' && c != EOF)
+    continue;
+  if (ferror (stdin))
+    perror_fatal (_("read failed"));
+}
+
+
+/* interpret an edit command */
+static bool
+edit (struct line_filter *left, char const *lname, lin lline, lin llen,
+      struct line_filter *right, char const *rname, lin rline, lin rlen,
+      FILE *outfile)
+{
+  for (;;)
+    {
+      int cmd0 IF_LINT (= 0);
+      int cmd1 IF_LINT (= 0);
+      bool gotcmd = false;
+
+      while (! gotcmd)
+	{
+	  if (putchar ('%') != '%')
+	    perror_fatal (_("write failed"));
+	  ck_fflush (stdout);
+
+	  cmd0 = skip_white ();
+	  switch (cmd0)
+	    {
+	    case '1': case '2': case 'l': case 'r':
+	    case 's': case 'v': case 'q':
+	      if (skip_white () != '\n')
+		{
+		  give_help ();
+		  flush_line ();
+		  continue;
+		}
+	      gotcmd = true;
+	      break;
+
+	    case 'e':
+	      cmd1 = skip_white ();
+	      switch (cmd1)
+		{
+		case '1': case '2': case 'b': case 'd': case 'l': case 'r':
+		  if (skip_white () != '\n')
+		    {
+		      give_help ();
+		      flush_line ();
+		      continue;
+		    }
+		  gotcmd = true;
+		  break;
+		case '\n':
+		  gotcmd = true;
+		  break;
+		default:
+		  give_help ();
+		  flush_line ();
+		  continue;
+		}
+	      break;
+
+	    case EOF:
+	      if (feof (stdin))
+		{
+		  gotcmd = true;
+		  cmd0 = 'q';
+		  break;
+		}
+	      /* Fall through.  */
+	    default:
+	      flush_line ();
+	      /* Fall through.  */
+	    case '\n':
+	      give_help ();
+	      continue;
+	    }
+	}
+
+      switch (cmd0)
+	{
+	case '1': case 'l':
+	  lf_copy (left, llen, outfile);
+	  lf_skip (right, rlen);
+	  return true;
+	case '2': case 'r':
+	  lf_copy (right, rlen, outfile);
+	  lf_skip (left, llen);
+	  return true;
+	case 's':
+	  suppress_common_lines = true;
+	  break;
+	case 'v':
+	  suppress_common_lines = false;
+	  break;
+	case 'q':
+	  return false;
+	case 'e':
+	  {
+	    int fd;
+
+	    if (tmpname)
+	      tmp = fopen (tmpname, "w");
+	    else
+	      {
+		if ((fd = temporary_file ()) < 0)
+		  perror_fatal ("mkstemp");
+		tmp = fdopen (fd, "w");
+	      }
+
+	    if (! tmp)
+	      perror_fatal (tmpname);
+
+	    switch (cmd1)
+	      {
+	      case 'd':
+		if (llen)
+		  {
+		    if (llen == 1)
+		      fprintf (tmp, "--- %s %ld\n", lname, (long int) lline);
+		    else
+		      fprintf (tmp, "--- %s %ld,%ld\n", lname,
+			       (long int) lline,
+			       (long int) (lline + llen - 1));
+		  }
+		/* Fall through.  */
+	      case '1': case 'b': case 'l':
+		lf_copy (left, llen, tmp);
+		break;
+
+	      default:
+		lf_skip (left, llen);
+		break;
+	      }
+
+	    switch (cmd1)
+	      {
+	      case 'd':
+		if (rlen)
+		  {
+		    if (rlen == 1)
+		      fprintf (tmp, "+++ %s %ld\n", rname, (long int) rline);
+		    else
+		      fprintf (tmp, "+++ %s %ld,%ld\n", rname,
+			       (long int) rline,
+			       (long int) (rline + rlen - 1));
+		  }
+		/* Fall through.  */
+	      case '2': case 'b': case 'r':
+		lf_copy (right, rlen, tmp);
+		break;
+
+	      default:
+		lf_skip (right, rlen);
+		break;
+	      }
+
+	    ck_fclose (tmp);
+
+	    {
+	      int wstatus;
+	      int werrno = 0;
+	      ignore_SIGINT = true;
+	      checksigs ();
+
+	      {
+#if ! (HAVE_WORKING_FORK || HAVE_WORKING_VFORK)
+		char *command =
+		  xmalloc (shell_quote_length (editor_program)
+			   + 1 + strlen (tmpname) + 1);
+		sprintf (shell_quote_copy (command, editor_program),
+			 " %s", tmpname);
+		wstatus = system (command);
+		if (wstatus == -1)
+		  werrno = errno;
+		free (command);
+#else
+		pid_t pid;
+
+		pid = vfork ();
+		if (pid == 0)
+		  {
+		    char const *argv[3];
+		    int i = 0;
+
+		    argv[i++] = editor_program;
+		    argv[i++] = tmpname;
+		    argv[i] = 0;
+
+		    execvp (editor_program, (char **) argv);
+		    _exit (errno == ENOENT ? 127 : 126);
+		  }
+
+		if (pid < 0)
+		  perror_fatal ("fork");
+
+		while (waitpid (pid, &wstatus, 0) < 0)
+		  if (errno == EINTR)
+		    checksigs ();
+		  else
+		    perror_fatal ("waitpid");
+#endif
+	      }
+
+	      ignore_SIGINT = false;
+	      check_child_status (werrno, wstatus, EXIT_SUCCESS,
+				  editor_program);
+	    }
+
+	    {
+	      char buf[SDIFF_BUFSIZE];
+	      size_t size;
+	      tmp = ck_fopen (tmpname, "r");
+	      while ((size = ck_fread (buf, SDIFF_BUFSIZE, tmp)) != 0)
+		{
+		  checksigs ();
+		  ck_fwrite (buf, size, outfile);
+		}
+	      ck_fclose (tmp);
+	    }
+	    return true;
+	  }
+	default:
+	  give_help ();
+	  break;
+	}
+    }
+}
+
+/* Alternately reveal bursts of diff output and handle user commands.  */
+static bool
+interact (struct line_filter *diff,
+	  struct line_filter *left, char const *lname,
+	  struct line_filter *right, char const *rname,
+	  FILE *outfile)
+{
+  lin lline = 1, rline = 1;
+
+  for (;;)
+    {
+      char diff_help[256];
+      int snarfed = lf_snarf (diff, diff_help, sizeof diff_help);
+
+      if (snarfed <= 0)
+	return snarfed != 0;
+
+      checksigs ();
+
+      if (diff_help[0] == ' ')
+	puts (diff_help + 1);
+      else
+	{
+	  char *numend;
+	  uintmax_t val;
+	  lin llen, rlen, lenmax;
+	  errno = 0;
+	  llen = val = strtoumax (diff_help + 1, &numend, 10);
+	  if (llen < 0 || llen != val || errno || *numend != ',')
+	    fatal (diff_help);
+	  rlen = val = strtoumax (numend + 1, &numend, 10);
+	  if (rlen < 0 || rlen != val || errno || *numend)
+	    fatal (diff_help);
+
+	  lenmax = MAX (llen, rlen);
+
+	  switch (diff_help[0])
+	    {
+	    case 'i':
+	      if (suppress_common_lines)
+		lf_skip (diff, lenmax);
+	      else
+		lf_copy (diff, lenmax, stdout);
+
+	      lf_copy (left, llen, outfile);
+	      lf_skip (right, rlen);
+	      break;
+
+	    case 'c':
+	      lf_copy (diff, lenmax, stdout);
+	      if (! edit (left, lname, lline, llen,
+			  right, rname, rline, rlen,
+			  outfile))
+		return false;
+	      break;
+
+	    default:
+	      fatal (diff_help);
+	    }
+
+	  lline += llen;
+	  rline += rlen;
+	}
+    }
+}
+
+/* Return true if DIR is an existing directory.  */
+static bool
+diraccess (char const *dir)
+{
+  struct stat buf;
+  return stat (dir, &buf) == 0 && S_ISDIR (buf.st_mode);
+}
+
+#ifndef P_tmpdir
+# define P_tmpdir "/tmp"
+#endif
+#ifndef TMPDIR_ENV
+# define TMPDIR_ENV "TMPDIR"
+#endif
+
+/* Open a temporary file and return its file descriptor.  Put into
+   tmpname the address of a newly allocated buffer that holds the
+   file's name.  Use the prefix "sdiff".  */
+static int
+temporary_file (void)
+{
+  char const *tmpdir = getenv (TMPDIR_ENV);
+  char const *dir = tmpdir ? tmpdir : P_tmpdir;
+  char *buf = xmalloc (strlen (dir) + 1 + 5 + 6 + 1);
+  int fd;
+  int e;
+  sigset_t procmask;
+  sigset_t blocked;
+  sprintf (buf, "%s/sdiffXXXXXX", dir);
+  sigemptyset (&blocked);
+  sigaddset (&blocked, SIGINT);
+  sigprocmask (SIG_BLOCK, &blocked, &procmask);
+  fd = mkstemp (buf);
+  e = errno;
+  if (0 <= fd)
+    tmpname = buf;
+  sigprocmask (SIG_SETMASK, &procmask, 0);
+  errno = e;
+  return fd;
+}
diff --git a/diffutils-3.0/side.c b/diffutils-3.0/side.c
new file mode 100644
index 0000000..6aa96a9
--- /dev/null
+++ b/diffutils-3.0/side.c
@@ -0,0 +1,320 @@
+/* sdiff-format output routines for GNU DIFF.
+
+   Copyright (C) 1991-1993, 1998, 2001-2002, 2004, 2009-2010 Free Software
+   Foundation, Inc.
+
+   This file is part of GNU DIFF.
+
+   GNU DIFF is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY.  No author or distributor
+   accepts responsibility to anyone for the consequences of using it
+   or for whether it serves any particular purpose or works at all,
+   unless he says so in writing.  Refer to the GNU General Public
+   License for full details.
+
+   Everyone is granted permission to copy, modify and redistribute
+   GNU DIFF, but only under the conditions described in the
+   GNU General Public License.   A copy of this license is
+   supposed to have been given to you along with GNU DIFF so you
+   can know your rights and responsibilities.  It should be in a
+   file named COPYING.  Among other things, the copyright notice
+   and this notice must be preserved on all copies.  */
+
+#include "diff.h"
+
+#include <wchar.h>
+
+static void print_sdiff_common_lines (lin, lin);
+static void print_sdiff_hunk (struct change *);
+
+/* Next line number to be printed in the two input files.  */
+static lin next0, next1;
+
+/* Print the edit-script SCRIPT as a sdiff style output.  */
+
+void
+print_sdiff_script (struct change *script)
+{
+  begin_output ();
+
+  next0 = next1 = - files[0].prefix_lines;
+  print_script (script, find_change, print_sdiff_hunk);
+
+  print_sdiff_common_lines (files[0].valid_lines, files[1].valid_lines);
+}
+
+/* Tab from column FROM to column TO, where FROM <= TO.  Yield TO.  */
+
+static size_t
+tab_from_to (size_t from, size_t to)
+{
+  FILE *out = outfile;
+  size_t tab;
+  size_t tab_size = tabsize;
+
+  if (!expand_tabs)
+    for (tab = from + tab_size - from % tab_size;  tab <= to;  tab += tab_size)
+      {
+	putc ('\t', out);
+	from = tab;
+      }
+  while (from++ < to)
+    putc (' ', out);
+  return to;
+}
+
+/* Print the text for half an sdiff line.  This means truncate to
+   width observing tabs, and trim a trailing newline.  Return the
+   last column written (not the number of chars).  */
+
+static size_t
+print_half_line (char const *const *line, size_t indent, size_t out_bound)
+{
+  FILE *out = outfile;
+  register size_t in_position = 0;
+  register size_t out_position = 0;
+  register char const *text_pointer = line[0];
+  register char const *text_limit = line[1];
+  mbstate_t mbstate = { 0 };
+
+  while (text_pointer < text_limit)
+    {
+      char const *tp0 = text_pointer;
+      register char c = *text_pointer++;
+
+      switch (c)
+	{
+	case '\t':
+	  {
+	    size_t spaces = tabsize - in_position % tabsize;
+	    if (in_position == out_position)
+	      {
+		size_t tabstop = out_position + spaces;
+		if (expand_tabs)
+		  {
+		    if (out_bound < tabstop)
+		      tabstop = out_bound;
+		    for (;  out_position < tabstop;  out_position++)
+		      putc (' ', out);
+		  }
+		else
+		  if (tabstop < out_bound)
+		    {
+		      out_position = tabstop;
+		      putc (c, out);
+		    }
+	      }
+	    in_position += spaces;
+	  }
+	  break;
+
+	case '\r':
+	  {
+	    putc (c, out);
+	    tab_from_to (0, indent);
+	    in_position = out_position = 0;
+	  }
+	  break;
+
+	case '\b':
+	  if (in_position != 0 && --in_position < out_bound)
+	    {
+	      if (out_position <= in_position)
+		/* Add spaces to make up for suppressed tab past out_bound.  */
+		for (;  out_position < in_position;  out_position++)
+		  putc (' ', out);
+	      else
+		{
+		  out_position = in_position;
+		  putc (c, out);
+		}
+	    }
+	  break;
+
+	default:
+	  {
+	    wchar_t wc;
+	    size_t bytes = mbrtowc (&wc, tp0, text_limit - tp0, &mbstate);
+
+	    if (0 < bytes && bytes < (size_t) -2)
+	      {
+		int width = wcwidth (wc);
+		if (0 < width)
+		  in_position += width;
+		if (in_position <= out_bound)
+		  {
+		    out_position = in_position;
+		    fwrite (tp0, 1, bytes, stdout);
+		  }
+		text_pointer = tp0 + bytes;
+		break;
+	      }
+	  }
+	  /* Fall through.  */
+	case '\f':
+	case '\v':
+	  if (in_position < out_bound)
+	    putc (c, out);
+	  break;
+
+	case ' ': case '!': case '"': case '#': case '%':
+	case '&': case '\'': case '(': case ')': case '*':
+	case '+': case ',': case '-': case '.': case '/':
+	case '0': case '1': case '2': case '3': case '4':
+	case '5': case '6': case '7': case '8': case '9':
+	case ':': case ';': case '<': case '=': case '>':
+	case '?':
+	case 'A': case 'B': case 'C': case 'D': case 'E':
+	case 'F': case 'G': case 'H': case 'I': case 'J':
+	case 'K': case 'L': case 'M': case 'N': case 'O':
+	case 'P': case 'Q': case 'R': case 'S': case 'T':
+	case 'U': case 'V': case 'W': case 'X': case 'Y':
+	case 'Z':
+	case '[': case '\\': case ']': case '^': case '_':
+	case 'a': case 'b': case 'c': case 'd': case 'e':
+	case 'f': case 'g': case 'h': case 'i': case 'j':
+	case 'k': case 'l': case 'm': case 'n': case 'o':
+	case 'p': case 'q': case 'r': case 's': case 't':
+	case 'u': case 'v': case 'w': case 'x': case 'y':
+	case 'z': case '{': case '|': case '}': case '~':
+	  /* These characters are printable ASCII characters.  */
+	  if (in_position++ < out_bound)
+	    {
+	      out_position = in_position;
+	      putc (c, out);
+	    }
+	  break;
+
+	case '\n':
+	  return out_position;
+	}
+    }
+
+  return out_position;
+}
+
+/* Print side by side lines with a separator in the middle.
+   0 parameters are taken to indicate white space text.
+   Blank lines that can easily be caught are reduced to a single newline.  */
+
+static void
+print_1sdiff_line (char const *const *left, char sep,
+		   char const *const *right)
+{
+  FILE *out = outfile;
+  size_t hw = sdiff_half_width;
+  size_t c2o = sdiff_column2_offset;
+  size_t col = 0;
+  bool put_newline = false;
+
+  if (left)
+    {
+      put_newline |= left[1][-1] == '\n';
+      col = print_half_line (left, 0, hw);
+    }
+
+  if (sep != ' ')
+    {
+      col = tab_from_to (col, (hw + c2o - 1) / 2) + 1;
+      if (sep == '|' && put_newline != (right[1][-1] == '\n'))
+	sep = put_newline ? '/' : '\\';
+      putc (sep, out);
+    }
+
+  if (right)
+    {
+      put_newline |= right[1][-1] == '\n';
+      if (**right != '\n')
+	{
+	  col = tab_from_to (col, c2o);
+	  print_half_line (right, col, hw);
+	}
+    }
+
+  if (put_newline)
+    putc ('\n', out);
+}
+
+/* Print lines common to both files in side-by-side format.  */
+static void
+print_sdiff_common_lines (lin limit0, lin limit1)
+{
+  lin i0 = next0, i1 = next1;
+
+  if (!suppress_common_lines && (i0 != limit0 || i1 != limit1))
+    {
+      if (sdiff_merge_assist)
+	{
+	  long int len0 = limit0 - i0;
+	  long int len1 = limit1 - i1;
+	  fprintf (outfile, "i%ld,%ld\n", len0, len1);
+	}
+
+      if (!left_column)
+	{
+	  while (i0 != limit0 && i1 != limit1)
+	    print_1sdiff_line (&files[0].linbuf[i0++], ' ',
+			       &files[1].linbuf[i1++]);
+	  while (i1 != limit1)
+	    print_1sdiff_line (0, ')', &files[1].linbuf[i1++]);
+	}
+      while (i0 != limit0)
+	print_1sdiff_line (&files[0].linbuf[i0++], '(', 0);
+    }
+
+  next0 = limit0;
+  next1 = limit1;
+}
+
+/* Print a hunk of an sdiff diff.
+   This is a contiguous portion of a complete edit script,
+   describing changes in consecutive lines.  */
+
+static void
+print_sdiff_hunk (struct change *hunk)
+{
+  lin first0, last0, first1, last1;
+  register lin i, j;
+
+  /* Determine range of line numbers involved in each file.  */
+  enum changes changes =
+    analyze_hunk (hunk, &first0, &last0, &first1, &last1);
+  if (!changes)
+    return;
+
+  /* Print out lines up to this change.  */
+  print_sdiff_common_lines (first0, first1);
+
+  if (sdiff_merge_assist)
+    {
+      long int len0 = last0 - first0 + 1;
+      long int len1 = last1 - first1 + 1;
+      fprintf (outfile, "c%ld,%ld\n", len0, len1);
+    }
+
+  /* Print ``xxx  |  xxx '' lines */
+  if (changes == CHANGED)
+    {
+      for (i = first0, j = first1;  i <= last0 && j <= last1;  i++, j++)
+	print_1sdiff_line (&files[0].linbuf[i], '|', &files[1].linbuf[j]);
+      changes = (i <= last0 ? OLD : 0) + (j <= last1 ? NEW : 0);
+      next0 = first0 = i;
+      next1 = first1 = j;
+    }
+
+  /* Print ``     >  xxx '' lines */
+  if (changes & NEW)
+    {
+      for (j = first1; j <= last1; ++j)
+	print_1sdiff_line (0, '>', &files[1].linbuf[j]);
+      next1 = j;
+    }
+
+  /* Print ``xxx  <     '' lines */
+  if (changes & OLD)
+    {
+      for (i = first0; i <= last0; ++i)
+	print_1sdiff_line (&files[0].linbuf[i], '<', 0);
+      next0 = i;
+    }
+}
diff --git a/diffutils-3.0/system.h b/diffutils-3.0/system.h
new file mode 100644
index 0000000..8942296
--- /dev/null
+++ b/diffutils-3.0/system.h
@@ -0,0 +1,228 @@
+/* System dependent declarations.
+
+   Copyright (C) 1988-1989, 1992-1995, 1998, 2001-2002, 2004, 2006, 2009-2010
+   Free Software Foundation, Inc.
+
+   This file is part of GNU DIFF.
+
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+#include <config.h>
+
+/* Use this to suppress gcc's `...may be used before initialized' warnings. */
+#ifdef lint
+# define IF_LINT(Code) Code
+#else
+# define IF_LINT(Code) /* empty */
+#endif
+
+/* Define `__attribute__' and `volatile' first
+   so that they're used consistently in all system includes.  */
+#if __GNUC__ < 2 || (__GNUC__ == 2 && __GNUC_MINOR__ < 6) || __STRICT_ANSI__
+# define __attribute__(x)
+#endif
+
+#include <verify.h>
+
+#include <sys/types.h>
+
+#include <sys/stat.h>
+#include "stat-macros.h"
+
+#ifndef STAT_BLOCKSIZE
+# if HAVE_STRUCT_STAT_ST_BLKSIZE
+#  define STAT_BLOCKSIZE(s) ((s).st_blksize)
+# else
+#  define STAT_BLOCKSIZE(s) (8 * 1024)
+# endif
+#endif
+
+#include <unistd.h>
+
+#include <fcntl.h>
+#include <time.h>
+
+#include <sys/wait.h>
+#ifndef WEXITSTATUS
+# define WEXITSTATUS(stat_val) ((unsigned int) (stat_val) >> 8)
+#endif
+#ifndef WIFEXITED
+# define WIFEXITED(stat_val) (((stat_val) & 255) == 0)
+#endif
+
+#include <dirent.h>
+#ifndef _D_EXACT_NAMLEN
+# define _D_EXACT_NAMLEN(dp) strlen ((dp)->d_name)
+#endif
+
+#include <stdlib.h>
+#define EXIT_TROUBLE 2
+
+#include <limits.h>
+#include <locale.h>
+#include <stddef.h>
+#include <inttypes.h>
+
+#include <string.h>
+#if ! HAVE_STRCASECOLL
+# if HAVE_STRICOLL || defined stricoll
+#  define strcasecoll(a, b) stricoll (a, b)
+# else
+#  define strcasecoll(a, b) strcasecmp (a, b) /* best we can do */
+# endif
+#endif
+#if ! (HAVE_STRCASECMP || defined strcasecmp)
+int strcasecmp (char const *, char const *);
+#endif
+
+#include <gettext.h>
+#if ! ENABLE_NLS
+# undef textdomain
+# define textdomain(Domainname) /* empty */
+# undef bindtextdomain
+# define bindtextdomain(Domainname, Dirname) /* empty */
+#endif
+
+#define _(msgid) gettext (msgid)
+#define N_(msgid) msgid
+
+#include <ctype.h>
+
+/* ISDIGIT differs from isdigit, as follows:
+   - Its arg may be any int or unsigned int; it need not be an unsigned char.
+   - It's guaranteed to evaluate its argument exactly once.
+   - It's typically faster.
+   POSIX 1003.1-2001 says that only '0' through '9' are digits.
+   Prefer ISDIGIT to isdigit unless it's important to use the locale's
+   definition of `digit' even when the host does not conform to POSIX.  */
+#define ISDIGIT(c) ((unsigned int) (c) - '0' <= 9)
+
+#include <errno.h>
+
+#include <signal.h>
+#ifndef SA_RESTART
+# ifdef SA_INTERRUPT /* e.g. SunOS 4.1.x */
+#  define SA_RESTART SA_INTERRUPT
+# else
+#  define SA_RESTART 0
+# endif
+#endif
+#if !defined SIGCHLD && defined SIGCLD
+# define SIGCHLD SIGCLD
+#endif
+
+#undef MIN
+#undef MAX
+#define MIN(a, b) ((a) <= (b) ? (a) : (b))
+#define MAX(a, b) ((a) >= (b) ? (a) : (b))
+
+#include <stdbool.h>
+
+#if HAVE_VFORK_H
+# include <vfork.h>
+#endif
+
+#if ! HAVE_WORKING_VFORK
+# define vfork fork
+#endif
+
+#include <intprops.h>
+#include "propername.h"
+
+/* Type used for fast comparison of several bytes at a time.  */
+
+#ifndef word
+# define word uintmax_t
+#endif
+
+/* The integer type of a line number.  Since files are read into main
+   memory, ptrdiff_t should be wide enough.  */
+
+typedef ptrdiff_t lin;
+#define LIN_MAX PTRDIFF_MAX
+verify (TYPE_SIGNED (lin));
+verify (sizeof (ptrdiff_t) <= sizeof (lin));
+verify (sizeof (lin) <= sizeof (long int));
+
+/* This section contains POSIX-compliant defaults for macros
+   that are meant to be overridden by hand in config.h as needed.  */
+
+#ifndef file_name_cmp
+# define file_name_cmp strcmp
+#endif
+
+#ifndef initialize_main
+# define initialize_main(argcp, argvp)
+#endif
+
+#ifndef NULL_DEVICE
+# define NULL_DEVICE "/dev/null"
+#endif
+
+/* Do struct stat *S, *T describe the same special file?  */
+#ifndef same_special_file
+# if HAVE_ST_RDEV && defined S_ISBLK && defined S_ISCHR
+#  define same_special_file(s, t) \
+     (((S_ISBLK ((s)->st_mode) && S_ISBLK ((t)->st_mode)) \
+       || (S_ISCHR ((s)->st_mode) && S_ISCHR ((t)->st_mode))) \
+      && (s)->st_rdev == (t)->st_rdev)
+# else
+#  define same_special_file(s, t) 0
+# endif
+#endif
+
+/* Do struct stat *S, *T describe the same file?  Answer -1 if unknown.  */
+#ifndef same_file
+# define same_file(s, t) \
+    ((((s)->st_ino == (t)->st_ino) && ((s)->st_dev == (t)->st_dev)) \
+     || same_special_file (s, t))
+#endif
+
+/* Do struct stat *S, *T have the same file attributes?
+
+   POSIX says that two files are identical if st_ino and st_dev are
+   the same, but many file systems incorrectly assign the same (device,
+   inode) pair to two distinct files, including:
+
+   - GNU/Linux NFS servers that export all local file systems as a
+     single NFS file system, if a local device number (st_dev) exceeds
+     255, or if a local inode number (st_ino) exceeds 16777215.
+
+   - Network Appliance NFS servers in snapshot directories; see
+     Network Appliance bug #195.
+
+   - ClearCase MVFS; see bug id ATRia04618.
+
+   Check whether two files that purport to be the same have the same
+   attributes, to work around instances of this common bug.  Do not
+   inspect all attributes, only attributes useful in checking for this
+   bug.
+
+   It's possible for two distinct files on a buggy file system to have
+   the same attributes, but it's not worth slowing down all
+   implementations (or complicating the configuration) to cater to
+   these rare cases in buggy implementations.  */
+
+#ifndef same_file_attributes
+# define same_file_attributes(s, t) \
+   ((s)->st_mode == (t)->st_mode \
+    && (s)->st_nlink == (t)->st_nlink \
+    && (s)->st_uid == (t)->st_uid \
+    && (s)->st_gid == (t)->st_gid \
+    && (s)->st_size == (t)->st_size \
+    && (s)->st_mtime == (t)->st_mtime \
+    && (s)->st_ctime == (t)->st_ctime)
+#endif
+
+#define STREQ(a, b) (strcmp (a, b) == 0)
diff --git a/diffutils-3.0/util.c b/diffutils-3.0/util.c
new file mode 100644
index 0000000..d18bf38
--- /dev/null
+++ b/diffutils-3.0/util.c
@@ -0,0 +1,788 @@
+/* Support routines for GNU DIFF.
+
+   Copyright (C) 1988-1989, 1992-1995, 1998, 2001-2002, 2004, 2006, 2009-2010
+   Free Software Foundation, Inc.
+
+   This file is part of GNU DIFF.
+
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+#include "diff.h"
+#include <dirname.h>
+#include <error.h>
+#include <sh-quote.h>
+#include <xalloc.h>
+
+char const pr_program[] = PR_PROGRAM;
+
+/* Queue up one-line messages to be printed at the end,
+   when -l is specified.  Each message is recorded with a `struct msg'.  */
+
+struct msg
+{
+  struct msg *next;
+  char args[1]; /* Format + 4 args, each '\0' terminated, concatenated.  */
+};
+
+/* Head of the chain of queues messages.  */
+
+static struct msg *msg_chain;
+
+/* Tail of the chain of queues messages.  */
+
+static struct msg **msg_chain_end = &msg_chain;
+
+/* Use when a system call returns non-zero status.
+   NAME should normally be the file name.  */
+
+void
+perror_with_name (char const *name)
+{
+  error (0, errno, "%s", name);
+}
+
+/* Use when a system call returns non-zero status and that is fatal.  */
+
+void
+pfatal_with_name (char const *name)
+{
+  int e = errno;
+  print_message_queue ();
+  error (EXIT_TROUBLE, e, "%s", name);
+  abort ();
+}
+
+/* Print an error message containing MSGID, then exit.  */
+
+void
+fatal (char const *msgid)
+{
+  print_message_queue ();
+  error (EXIT_TROUBLE, 0, "%s", _(msgid));
+  abort ();
+}
+
+/* Like printf, except if -l in effect then save the message and print later.
+   This is used for things like "Only in ...".  */
+
+void
+message (char const *format_msgid, char const *arg1, char const *arg2)
+{
+  message5 (format_msgid, arg1, arg2, 0, 0);
+}
+
+void
+message5 (char const *format_msgid, char const *arg1, char const *arg2,
+	  char const *arg3, char const *arg4)
+{
+  if (paginate)
+    {
+      char *p;
+      char const *arg[5];
+      int i;
+      size_t size[5];
+      size_t total_size = offsetof (struct msg, args);
+      struct msg *new;
+
+      arg[0] = format_msgid;
+      arg[1] = arg1;
+      arg[2] = arg2;
+      arg[3] = arg3 ? arg3 : "";
+      arg[4] = arg4 ? arg4 : "";
+
+      for (i = 0;  i < 5;  i++)
+	total_size += size[i] = strlen (arg[i]) + 1;
+
+      new = xmalloc (total_size);
+
+      for (i = 0, p = new->args;  i < 5;  p += size[i++])
+	memcpy (p, arg[i], size[i]);
+
+      *msg_chain_end = new;
+      new->next = 0;
+      msg_chain_end = &new->next;
+    }
+  else
+    {
+      if (sdiff_merge_assist)
+	putchar (' ');
+      printf (_(format_msgid), arg1, arg2, arg3, arg4);
+    }
+}
+
+/* Output all the messages that were saved up by calls to `message'.  */
+
+void
+print_message_queue (void)
+{
+  char const *arg[5];
+  int i;
+  struct msg *m = msg_chain;
+
+  while (m)
+    {
+      struct msg *next = m->next;
+      arg[0] = m->args;
+      for (i = 0;  i < 4;  i++)
+	arg[i + 1] = arg[i] + strlen (arg[i]) + 1;
+      printf (_(arg[0]), arg[1], arg[2], arg[3], arg[4]);
+      free (m);
+      m = next;
+    }
+}
+
+/* Call before outputting the results of comparing files NAME0 and NAME1
+   to set up OUTFILE, the stdio stream for the output to go to.
+
+   Usually, OUTFILE is just stdout.  But when -l was specified
+   we fork off a `pr' and make OUTFILE a pipe to it.
+   `pr' then outputs to our stdout.  */
+
+static char const *current_name0;
+static char const *current_name1;
+static bool currently_recursive;
+
+void
+setup_output (char const *name0, char const *name1, bool recursive)
+{
+  current_name0 = name0;
+  current_name1 = name1;
+  currently_recursive = recursive;
+  outfile = 0;
+}
+
+#if HAVE_WORKING_FORK || HAVE_WORKING_VFORK
+static pid_t pr_pid;
+#endif
+
+void
+begin_output (void)
+{
+  char *name;
+
+  if (outfile != 0)
+    return;
+
+  /* Construct the header of this piece of diff.  */
+  name = xmalloc (strlen (current_name0) + strlen (current_name1)
+		  + strlen (switch_string) + 7);
+
+  /* POSIX 1003.1-2001 specifies this format.  But there are some bugs in
+     the standard: it says that we must print only the last component
+     of the pathnames, and it requires two spaces after "diff" if
+     there are no options.  These requirements are silly and do not
+     match historical practice.  */
+  sprintf (name, "diff%s %s %s", switch_string, current_name0, current_name1);
+
+  if (paginate)
+    {
+      if (fflush (stdout) != 0)
+	pfatal_with_name (_("write failed"));
+
+      /* Make OUTFILE a pipe to a subsidiary `pr'.  */
+      {
+#if HAVE_WORKING_FORK || HAVE_WORKING_VFORK
+	int pipes[2];
+
+	if (pipe (pipes) != 0)
+	  pfatal_with_name ("pipe");
+
+	pr_pid = vfork ();
+	if (pr_pid < 0)
+	  pfatal_with_name ("fork");
+
+	if (pr_pid == 0)
+	  {
+	    close (pipes[1]);
+	    if (pipes[0] != STDIN_FILENO)
+	      {
+		if (dup2 (pipes[0], STDIN_FILENO) < 0)
+		  pfatal_with_name ("dup2");
+		close (pipes[0]);
+	      }
+
+	    execl (pr_program, pr_program, "-h", name, (char *) 0);
+	    _exit (errno == ENOENT ? 127 : 126);
+	  }
+	else
+	  {
+	    close (pipes[0]);
+	    outfile = fdopen (pipes[1], "w");
+	    if (!outfile)
+	      pfatal_with_name ("fdopen");
+	  }
+#else
+	char *command = xmalloc (sizeof pr_program - 1 + 7
+				 + shell_quote_length (name) + 1);
+	char *p;
+	sprintf (command, "%s -f -h ", pr_program);
+	p = command + sizeof pr_program - 1 + 7;
+	p = shell_quote_copy (p, name);
+	*p = 0;
+	errno = 0;
+	outfile = popen (command, "w");
+	if (!outfile)
+	  pfatal_with_name (command);
+	free (command);
+#endif
+      }
+    }
+  else
+    {
+
+      /* If -l was not specified, output the diff straight to `stdout'.  */
+
+      outfile = stdout;
+
+      /* If handling multiple files (because scanning a directory),
+	 print which files the following output is about.  */
+      if (currently_recursive)
+	printf ("%s\n", name);
+    }
+
+  free (name);
+
+  /* A special header is needed at the beginning of context output.  */
+  switch (output_style)
+    {
+    case OUTPUT_CONTEXT:
+      print_context_header (files, false);
+      break;
+
+    case OUTPUT_UNIFIED:
+      print_context_header (files, true);
+      break;
+
+    default:
+      break;
+    }
+}
+
+/* Call after the end of output of diffs for one file.
+   Close OUTFILE and get rid of the `pr' subfork.  */
+
+void
+finish_output (void)
+{
+  if (outfile != 0 && outfile != stdout)
+    {
+      int status;
+      int wstatus;
+      int werrno = 0;
+      if (ferror (outfile))
+	fatal ("write failed");
+#if ! (HAVE_WORKING_FORK || HAVE_WORKING_VFORK)
+      wstatus = pclose (outfile);
+      if (wstatus == -1)
+	werrno = errno;
+#else
+      if (fclose (outfile) != 0)
+	pfatal_with_name (_("write failed"));
+      if (waitpid (pr_pid, &wstatus, 0) < 0)
+	pfatal_with_name ("waitpid");
+#endif
+      status = (! werrno && WIFEXITED (wstatus)
+		? WEXITSTATUS (wstatus)
+		: INT_MAX);
+      if (status)
+	error (EXIT_TROUBLE, werrno,
+	       _(status == 126
+		 ? "subsidiary program '%s' could not be invoked"
+		 : status == 127
+		 ? "subsidiary program '%s' not found"
+		 : status == INT_MAX
+		 ? "subsidiary program '%s' failed"
+		 : "subsidiary program '%s' failed (exit status %d)"),
+	       pr_program, status);
+    }
+
+  outfile = 0;
+}
+
+/* Compare two lines (typically one from each input file)
+   according to the command line options.
+   For efficiency, this is invoked only when the lines do not match exactly
+   but an option like -i might cause us to ignore the difference.
+   Return nonzero if the lines differ.  */
+
+bool
+lines_differ (char const *s1, char const *s2)
+{
+  register char const *t1 = s1;
+  register char const *t2 = s2;
+  size_t column = 0;
+
+  while (1)
+    {
+      register unsigned char c1 = *t1++;
+      register unsigned char c2 = *t2++;
+
+      /* Test for exact char equality first, since it's a common case.  */
+      if (c1 != c2)
+	{
+	  switch (ignore_white_space)
+	    {
+	    case IGNORE_ALL_SPACE:
+	      /* For -w, just skip past any white space.  */
+	      while (isspace (c1) && c1 != '\n') c1 = *t1++;
+	      while (isspace (c2) && c2 != '\n') c2 = *t2++;
+	      break;
+
+	    case IGNORE_SPACE_CHANGE:
+	      /* For -b, advance past any sequence of white space in
+		 line 1 and consider it just one space, or nothing at
+		 all if it is at the end of the line.  */
+	      if (isspace (c1))
+		{
+		  while (c1 != '\n')
+		    {
+		      c1 = *t1++;
+		      if (! isspace (c1))
+			{
+			  --t1;
+			  c1 = ' ';
+			  break;
+			}
+		    }
+		}
+
+	      /* Likewise for line 2.  */
+	      if (isspace (c2))
+		{
+		  while (c2 != '\n')
+		    {
+		      c2 = *t2++;
+		      if (! isspace (c2))
+			{
+			  --t2;
+			  c2 = ' ';
+			  break;
+			}
+		    }
+		}
+
+	      if (c1 != c2)
+		{
+		  /* If we went too far when doing the simple test
+		     for equality, go back to the first non-white-space
+		     character in both sides and try again.  */
+		  if (c2 == ' ' && c1 != '\n'
+		      && s1 + 1 < t1
+		      && isspace ((unsigned char) t1[-2]))
+		    {
+		      --t1;
+		      continue;
+		    }
+		  if (c1 == ' ' && c2 != '\n'
+		      && s2 + 1 < t2
+		      && isspace ((unsigned char) t2[-2]))
+		    {
+		      --t2;
+		      continue;
+		    }
+		}
+
+	      break;
+
+	    case IGNORE_TAB_EXPANSION:
+	      if ((c1 == ' ' && c2 == '\t')
+		  || (c1 == '\t' && c2 == ' '))
+		{
+		  size_t column2 = column;
+		  for (;; c1 = *t1++)
+		    {
+		      if (c1 == ' ')
+			column++;
+		      else if (c1 == '\t')
+			column += tabsize - column % tabsize;
+		      else
+			break;
+		    }
+		  for (;; c2 = *t2++)
+		    {
+		      if (c2 == ' ')
+			column2++;
+		      else if (c2 == '\t')
+			column2 += tabsize - column2 % tabsize;
+		      else
+			break;
+		    }
+		  if (column != column2)
+		    return true;
+		}
+	      break;
+
+	    case IGNORE_NO_WHITE_SPACE:
+	      break;
+	    }
+
+	  /* Lowercase all letters if -i is specified.  */
+
+	  if (ignore_case)
+	    {
+	      c1 = tolower (c1);
+	      c2 = tolower (c2);
+	    }
+
+	  if (c1 != c2)
+	    break;
+	}
+      if (c1 == '\n')
+	return false;
+
+      column += c1 == '\t' ? tabsize - column % tabsize : 1;
+    }
+
+  return true;
+}
+
+/* Find the consecutive changes at the start of the script START.
+   Return the last link before the first gap.  */
+
+struct change *
+find_change (struct change *start)
+{
+  return start;
+}
+
+struct change *
+find_reverse_change (struct change *start)
+{
+  return start;
+}
+
+/* Divide SCRIPT into pieces by calling HUNKFUN and
+   print each piece with PRINTFUN.
+   Both functions take one arg, an edit script.
+
+   HUNKFUN is called with the tail of the script
+   and returns the last link that belongs together with the start
+   of the tail.
+
+   PRINTFUN takes a subscript which belongs together (with a null
+   link at the end) and prints it.  */
+
+void
+print_script (struct change *script,
+	      struct change * (*hunkfun) (struct change *),
+	      void (*printfun) (struct change *))
+{
+  struct change *next = script;
+
+  while (next)
+    {
+      struct change *this, *end;
+
+      /* Find a set of changes that belong together.  */
+      this = next;
+      end = (*hunkfun) (next);
+
+      /* Disconnect them from the rest of the changes,
+	 making them a hunk, and remember the rest for next iteration.  */
+      next = end->link;
+      end->link = 0;
+#ifdef DEBUG
+      debug_script (this);
+#endif
+
+      /* Print this hunk.  */
+      (*printfun) (this);
+
+      /* Reconnect the script so it will all be freed properly.  */
+      end->link = next;
+    }
+}
+
+/* Print the text of a single line LINE,
+   flagging it with the characters in LINE_FLAG (which say whether
+   the line is inserted, deleted, changed, etc.).  LINE_FLAG must not
+   end in a blank, unless it is a single blank.  */
+
+void
+print_1_line (char const *line_flag, char const *const *line)
+{
+  char const *base = line[0], *limit = line[1]; /* Help the compiler.  */
+  FILE *out = outfile; /* Help the compiler some more.  */
+  char const *flag_format = 0;
+
+  /* If -T was specified, use a Tab between the line-flag and the text.
+     Otherwise use a Space (as Unix diff does).
+     Print neither space nor tab if line-flags are empty.
+     But omit trailing blanks if requested.  */
+
+  if (line_flag && *line_flag)
+    {
+      char const *flag_format_1 = flag_format = initial_tab ? "%s\t" : "%s ";
+      char const *line_flag_1 = line_flag;
+
+      if (suppress_blank_empty && **line == '\n')
+	{
+	  flag_format_1 = "%s";
+
+	  /* This hack to omit trailing blanks takes advantage of the
+	     fact that the only way that LINE_FLAG can end in a blank
+	     is when LINE_FLAG consists of a single blank.  */
+	  line_flag_1 += *line_flag_1 == ' ';
+	}
+
+      fprintf (out, flag_format_1, line_flag_1);
+    }
+
+  output_1_line (base, limit, flag_format, line_flag);
+
+  if ((!line_flag || line_flag[0]) && limit[-1] != '\n')
+    fprintf (out, "\n\\ %s\n", _("No newline at end of file"));
+}
+
+/* Output a line from BASE up to LIMIT.
+   With -t, expand white space characters to spaces, and if FLAG_FORMAT
+   is nonzero, output it with argument LINE_FLAG after every
+   internal carriage return, so that tab stops continue to line up.  */
+
+void
+output_1_line (char const *base, char const *limit, char const *flag_format,
+	       char const *line_flag)
+{
+  if (!expand_tabs)
+    fwrite (base, sizeof (char), limit - base, outfile);
+  else
+    {
+      register FILE *out = outfile;
+      register unsigned char c;
+      register char const *t = base;
+      register size_t column = 0;
+      size_t tab_size = tabsize;
+
+      while (t < limit)
+	switch ((c = *t++))
+	  {
+	  case '\t':
+	    {
+	      size_t spaces = tab_size - column % tab_size;
+	      column += spaces;
+	      do
+		putc (' ', out);
+	      while (--spaces);
+	    }
+	    break;
+
+	  case '\r':
+	    putc (c, out);
+	    if (flag_format && t < limit && *t != '\n')
+	      fprintf (out, flag_format, line_flag);
+	    column = 0;
+	    break;
+
+	  case '\b':
+	    if (column == 0)
+	      continue;
+	    column--;
+	    putc (c, out);
+	    break;
+
+	  default:
+	    column += isprint (c) != 0;
+	    putc (c, out);
+	    break;
+	  }
+    }
+}
+
+char const change_letter[] = { 0, 'd', 'a', 'c' };
+
+/* Translate an internal line number (an index into diff's table of lines)
+   into an actual line number in the input file.
+   The internal line number is I.  FILE points to the data on the file.
+
+   Internal line numbers count from 0 starting after the prefix.
+   Actual line numbers count from 1 within the entire file.  */
+
+lin
+translate_line_number (struct file_data const *file, lin i)
+{
+  return i + file->prefix_lines + 1;
+}
+
+/* Translate a line number range.  This is always done for printing,
+   so for convenience translate to long int rather than lin, so that the
+   caller can use printf with "%ld" without casting.  */
+
+void
+translate_range (struct file_data const *file,
+		 lin a, lin b,
+		 long int *aptr, long int *bptr)
+{
+  *aptr = translate_line_number (file, a - 1) + 1;
+  *bptr = translate_line_number (file, b + 1) - 1;
+}
+
+/* Print a pair of line numbers with SEPCHAR, translated for file FILE.
+   If the two numbers are identical, print just one number.
+
+   Args A and B are internal line numbers.
+   We print the translated (real) line numbers.  */
+
+void
+print_number_range (char sepchar, struct file_data *file, lin a, lin b)
+{
+  long int trans_a, trans_b;
+  translate_range (file, a, b, &trans_a, &trans_b);
+
+  /* Note: we can have B < A in the case of a range of no lines.
+     In this case, we should print the line number before the range,
+     which is B.  */
+  if (trans_b > trans_a)
+    fprintf (outfile, "%ld%c%ld", trans_a, sepchar, trans_b);
+  else
+    fprintf (outfile, "%ld", trans_b);
+}
+
+/* Look at a hunk of edit script and report the range of lines in each file
+   that it applies to.  HUNK is the start of the hunk, which is a chain
+   of `struct change'.  The first and last line numbers of file 0 are stored in
+   *FIRST0 and *LAST0, and likewise for file 1 in *FIRST1 and *LAST1.
+   Note that these are internal line numbers that count from 0.
+
+   If no lines from file 0 are deleted, then FIRST0 is LAST0+1.
+
+   Return UNCHANGED if only ignorable lines are inserted or deleted,
+   OLD if lines of file 0 are deleted,
+   NEW if lines of file 1 are inserted,
+   and CHANGED if both kinds of changes are found. */
+
+enum changes
+analyze_hunk (struct change *hunk,
+	      lin *first0, lin *last0,
+	      lin *first1, lin *last1)
+{
+  struct change *next;
+  lin l0, l1;
+  lin show_from, show_to;
+  lin i;
+  bool trivial = ignore_blank_lines || ignore_regexp.fastmap;
+  size_t trivial_length = ignore_blank_lines - 1;
+    /* If 0, ignore zero-length lines;
+       if SIZE_MAX, do not ignore lines just because of their length.  */
+  bool skip_leading_white_space =
+    (ignore_blank_lines && IGNORE_SPACE_CHANGE <= ignore_white_space);
+
+  char const * const *linbuf0 = files[0].linbuf;  /* Help the compiler.  */
+  char const * const *linbuf1 = files[1].linbuf;
+
+  show_from = show_to = 0;
+
+  *first0 = hunk->line0;
+  *first1 = hunk->line1;
+
+  next = hunk;
+  do
+    {
+      l0 = next->line0 + next->deleted - 1;
+      l1 = next->line1 + next->inserted - 1;
+      show_from += next->deleted;
+      show_to += next->inserted;
+
+      for (i = next->line0; i <= l0 && trivial; i++)
+	{
+	  char const *line = linbuf0[i];
+	  char const *newline = linbuf0[i + 1] - 1;
+	  size_t len = newline - line;
+	  char const *p = line;
+	  if (skip_leading_white_space)
+	    while (isspace ((unsigned char) *p) && *p != '\n')
+	      p++;
+	  if (newline - p != trivial_length
+	      && (! ignore_regexp.fastmap
+		  || re_search (&ignore_regexp, line, len, 0, len, 0) < 0))
+	    trivial = 0;
+	}
+
+      for (i = next->line1; i <= l1 && trivial; i++)
+	{
+	  char const *line = linbuf1[i];
+	  char const *newline = linbuf1[i + 1] - 1;
+	  size_t len = newline - line;
+	  char const *p = line;
+	  if (skip_leading_white_space)
+	    while (isspace ((unsigned char) *p) && *p != '\n')
+	      p++;
+	  if (newline - p != trivial_length
+	      && (! ignore_regexp.fastmap
+		  || re_search (&ignore_regexp, line, len, 0, len, 0) < 0))
+	    trivial = 0;
+	}
+    }
+  while ((next = next->link) != 0);
+
+  *last0 = l0;
+  *last1 = l1;
+
+  /* If all inserted or deleted lines are ignorable,
+     tell the caller to ignore this hunk.  */
+
+  if (trivial)
+    return UNCHANGED;
+
+  return (show_from ? OLD : UNCHANGED) | (show_to ? NEW : UNCHANGED);
+}
+
+/* Concatenate three strings, returning a newly malloc'd string.  */
+
+char *
+concat (char const *s1, char const *s2, char const *s3)
+{
+  char *new = xmalloc (strlen (s1) + strlen (s2) + strlen (s3) + 1);
+  sprintf (new, "%s%s%s", s1, s2, s3);
+  return new;
+}
+
+/* Yield a new block of SIZE bytes, initialized to zero.  */
+
+void *
+zalloc (size_t size)
+{
+  void *p = xmalloc (size);
+  memset (p, 0, size);
+  return p;
+}
+
+/* Yield the newly malloc'd pathname
+   of the file in DIR whose filename is FILE.  */
+
+char *
+dir_file_pathname (char const *dir, char const *file)
+{
+  char const *base = last_component (dir);
+  size_t baselen = base_len (base);
+  bool omit_slash = baselen == 0 || base[baselen - 1] == '/';
+  return concat (dir, "/" + omit_slash, file);
+}
+
+void
+debug_script (struct change *sp)
+{
+  fflush (stdout);
+
+  for (; sp; sp = sp->link)
+    {
+      long int line0 = sp->line0;
+      long int line1 = sp->line1;
+      long int deleted = sp->deleted;
+      long int inserted = sp->inserted;
+      fprintf (stderr, "%3ld %3ld delete %ld insert %ld\n",
+	       line0, line1, deleted, inserted);
+    }
+
+  fflush (stderr);
+}
diff --git a/quote-3.0-patch.txt b/quote-3.0-patch.txt
new file mode 100644
index 0000000..a532b8e
--- /dev/null
+++ b/quote-3.0-patch.txt
@@ -0,0 +1,357 @@
+diff --git a/src/cmp.c b/src/cmp.c
+index 2455dc4..ee3cde6 100644
+--- a/src/cmp.c
++++ b/src/cmp.c
+@@ -115,7 +115,7 @@ try_help (char const *reason_msgid, char const *operand)
+   if (reason_msgid)
+     error (0, 0, _(reason_msgid), operand);
+   error (EXIT_TROUBLE, 0,
+-	 _("Try `%s --help' for more information."), program_name);
++	 _("Try '%s --help' for more information."), program_name);
+   abort ();
+ }
+ 
+@@ -134,7 +134,7 @@ specify_ignore_initial (int f, char **argptr, char delimiter)
+   if (! (e == LONGINT_OK
+ 	 || (e == LONGINT_INVALID_SUFFIX_CHAR && **argptr == delimiter))
+       || TYPE_MAXIMUM (off_t) < val)
+-    try_help ("invalid --ignore-initial value `%s'", arg);
++    try_help ("invalid --ignore-initial value '%s'", arg);
+   if (ignore_initial[f] < val)
+     ignore_initial[f] = val;
+ }
+@@ -185,7 +185,7 @@ usage (void)
+ 	  _("SKIP values may be followed by the following multiplicative suffixes:\n\
+ kB 1000, K 1024, MB 1,000,000, M 1,048,576,\n\
+ GB 1,000,000,000, G 1,073,741,824, and so on for T, P, E, Z, Y."),
+-	  _("If a FILE is `-' or missing, read standard input."),
++	  _("If a FILE is '-' or missing, read standard input."),
+ 	  _("Exit status is 0 if inputs are the same, 1 if different, 2 if trouble."));
+   emit_bug_reporting_address ();
+ }
+@@ -231,7 +231,7 @@ main (int argc, char **argv)
+ 	{
+ 	  uintmax_t n;
+ 	  if (xstrtoumax (optarg, 0, 0, &n, valid_suffixes) != LONGINT_OK)
+-	    try_help ("invalid --bytes value `%s'", optarg);
++	    try_help ("invalid --bytes value '%s'", optarg);
+ 	  if (n < bytes)
+ 	    bytes = n;
+ 	}
+@@ -257,7 +257,7 @@ main (int argc, char **argv)
+       }
+ 
+   if (optind == argc)
+-    try_help ("missing operand after `%s'", argv[argc - 1]);
++    try_help ("missing operand after '%s'", argv[argc - 1]);
+ 
+   file[0] = argv[optind++];
+   file[1] = optind < argc ? argv[optind++] : "-";
+@@ -269,7 +269,7 @@ main (int argc, char **argv)
+     }
+ 
+   if (optind < argc)
+-    try_help ("extra operand `%s'", argv[optind]);
++    try_help ("extra operand '%s'", argv[optind]);
+ 
+   for (f = 0; f < 2; f++)
+     {
+@@ -377,7 +377,7 @@ cmp (void)
+   uintmax_t remaining = bytes;	/* Remaining number of bytes to compare.  */
+   size_t read0, read1;		/* Number of bytes read from each file. */
+   size_t first_diff;		/* Offset (0...) in buffers of 1st diff. */
+-  size_t smaller;		/* The lesser of `read0' and `read1'. */
++  size_t smaller;		/* The lesser of 'read0' and 'read1'. */
+   word *buffer0 = buffer[0];
+   word *buffer1 = buffer[1];
+   char *buf0 = (char *) buffer0;
+diff --git a/src/diff.c b/src/diff.c
+index cc1b611..d6e517b 100644
+--- a/src/diff.c
++++ b/src/diff.c
+@@ -57,9 +57,9 @@
+ struct regexp_list
+ {
+   char *regexps;	/* chars representing disjunction of the regexps */
+-  size_t len;		/* chars used in `regexps' */
+-  size_t size;		/* size malloc'ed for `regexps'; 0 if not malloc'ed */
+-  bool multiple_regexps;/* Does `regexps' represent a disjunction?  */
++  size_t len;		/* chars used in 'regexps' */
++  size_t size;		/* size malloc'ed for 'regexps'; 0 if not malloc'ed */
++  bool multiple_regexps;/* Does 'regexps' represent a disjunction?  */
+   struct re_pattern_buffer *buf;
+ };
+ 
+@@ -330,7 +330,7 @@ main (int argc, char **argv)
+ 	      {
+ 		numval = strtoumax (optarg, &numend, 10);
+ 		if (*numend)
+-		  try_help ("invalid context length `%s'", optarg);
++		  try_help ("invalid context length '%s'", optarg);
+ 		if (LIN_MAX < numval)
+ 		  numval = LIN_MAX;
+ 	      }
+@@ -505,7 +505,7 @@ main (int argc, char **argv)
+ 	case 'W':
+ 	  numval = strtoumax (optarg, &numend, 10);
+ 	  if (! (0 < numval && numval <= SIZE_MAX) || *numend)
+-	    try_help ("invalid width `%s'", optarg);
++	    try_help ("invalid width '%s'", optarg);
+ 	  if (width != numval)
+ 	    {
+ 	      if (width)
+@@ -534,7 +534,7 @@ main (int argc, char **argv)
+ 	case HORIZON_LINES_OPTION:
+ 	  numval = strtoumax (optarg, &numend, 10);
+ 	  if (*numend)
+-	    try_help ("invalid horizon length `%s'", optarg);
++	    try_help ("invalid horizon length '%s'", optarg);
+ 	  horizon_lines = MAX (horizon_lines, MIN (numval, LIN_MAX));
+ 	  break;
+ 
+@@ -585,7 +585,7 @@ main (int argc, char **argv)
+ 	case TABSIZE_OPTION:
+ 	  numval = strtoumax (optarg, &numend, 10);
+ 	  if (! (0 < numval && numval <= SIZE_MAX) || *numend)
+-	    try_help ("invalid tabsize `%s'", optarg);
++	    try_help ("invalid tabsize '%s'", optarg);
+ 	  if (tabsize != numval)
+ 	    {
+ 	      if (tabsize)
+@@ -744,9 +744,9 @@ main (int argc, char **argv)
+ 	  if (argc - optind != 2)
+ 	    {
+ 	      if (argc - optind < 2)
+-		try_help ("missing operand after `%s'", argv[argc - 1]);
++		try_help ("missing operand after '%s'", argv[argc - 1]);
+ 	      else
+-		try_help ("extra operand `%s'", argv[optind + 2]);
++		try_help ("extra operand '%s'", argv[optind + 2]);
+ 	    }
+ 
+ 	  exit_status = compare_files (NULL, argv[optind], argv[optind + 1]);
+@@ -826,7 +826,7 @@ try_help (char const *reason_msgid, char const *operand)
+ {
+   if (reason_msgid)
+     error (0, 0, _(reason_msgid), operand);
+-  error (EXIT_TROUBLE, 0, _("Try `%s --help' for more information."),
++  error (EXIT_TROUBLE, 0, _("Try '%s --help' for more information."),
+ 	 program_name);
+   abort ();
+ }
+@@ -870,11 +870,11 @@ static char const * const option_help_msgid[] = {
+   -W NUM  --width=NUM  Output at most NUM (default 130) print columns.\n\
+   --left-column  Output only the left column of common lines.\n\
+   --suppress-common-lines  Do not output common lines."),
+-  N_("-D NAME  --ifdef=NAME  Output merged file to show `#ifdef NAME' diffs."),
++  N_("-D NAME  --ifdef=NAME  Output merged file to show '#ifdef NAME' diffs."),
+   N_("--GTYPE-group-format=GFMT  Similar, but format GTYPE input groups with GFMT."),
+   N_("--line-format=LFMT  Similar, but format all input lines with LFMT."),
+   N_("--LTYPE-line-format=LFMT  Similar, but format LTYPE input lines with LFMT."),
+-  N_("  LTYPE is `old', `new', or `unchanged'.  GTYPE is LTYPE or `changed'."),
++  N_("  LTYPE is 'old', 'new', or 'unchanged'.  GTYPE is LTYPE or 'changed'."),
+   N_("  GFMT may contain:\n\
+     %<  lines from FILE1\n\
+     %>  lines from FILE2\n\
+@@ -895,7 +895,7 @@ static char const * const option_help_msgid[] = {
+     %c'C'  the single character C\n\
+     %c'\\OOO'  the character with octal code OOO"),
+   "",
+-  N_("-l  --paginate  Pass the output through `pr' to paginate it."),
++  N_("-l  --paginate  Pass the output through 'pr' to paginate it."),
+   N_("-t  --expand-tabs  Expand tabs to spaces in output."),
+   N_("-T  --initial-tab  Make tabs line up by prepending a tab."),
+   N_("--tabsize=NUM  Tab stops are every NUM (default 8) print columns."),
+@@ -918,9 +918,9 @@ static char const * const option_help_msgid[] = {
+   N_("-v  --version  Output version info."),
+   N_("--help  Output this help."),
+   "",
+-  N_("FILES are `FILE1 FILE2' or `DIR1 DIR2' or `DIR FILE...' or `FILE... DIR'."),
++  N_("FILES are 'FILE1 FILE2' or 'DIR1 DIR2' or 'DIR FILE...' or 'FILE... DIR'."),
+   N_("If --from-file or --to-file is given, there are no restrictions on FILES."),
+-  N_("If a FILE is `-', read standard input."),
++  N_("If a FILE is '-', read standard input."),
+   N_("Exit status is 0 if inputs are the same, 1 if different, 2 if trouble."),
+   0
+ };
+@@ -960,7 +960,7 @@ specify_value (char const **var, char const *value, char const *option)
+ {
+   if (*var && strcmp (*var, value) != 0)
+     {
+-      error (0, 0, _("conflicting %s option value `%s'"), option, value);
++      error (0, 0, _("conflicting %s option value '%s'"), option, value);
+       try_help (NULL, NULL);
+     }
+   *var = value;
+@@ -1159,7 +1159,7 @@ compare_files (struct comparison const *parent,
+ 	= dir_file_pathname (dir, last_component (fnm));
+ 
+       if (STREQ (fnm, "-"))
+-	fatal ("cannot compare `-' to a directory");
++	fatal ("cannot compare '-' to a directory");
+ 
+       if (stat (filename, &cmp.file[dir_arg].stat) != 0)
+ 	{
+diff --git a/src/diff3.c b/src/diff3.c
+index 0f11fdc..fbfb28b 100644
+--- a/src/diff3.c
++++ b/src/diff3.c
+@@ -316,9 +316,9 @@ main (int argc, char **argv)
+   if (argc - optind != 3)
+     {
+       if (argc - optind < 3)
+-	try_help ("missing operand after `%s'", argv[argc - 1]);
++	try_help ("missing operand after '%s'", argv[argc - 1]);
+       else
+-	try_help ("extra operand `%s'", argv[optind + 3]);
++	try_help ("extra operand '%s'", argv[optind + 3]);
+     }
+ 
+   file = &argv[optind];
+@@ -351,7 +351,7 @@ main (int argc, char **argv)
+ 	 file instead.  */
+       common = 3 - common;
+       if (STREQ (file[0], "-") || STREQ (file[common], "-"))
+-	fatal ("`-' specified for more than one input file");
++	fatal ("'-' specified for more than one input file");
+     }
+ 
+   mapping[0] = 0;
+@@ -412,7 +412,7 @@ try_help (char const *reason_msgid, char const *operand)
+   if (reason_msgid)
+     error (0, 0, _(reason_msgid), operand);
+   error (EXIT_TROUBLE, 0,
+-	 _("Try `%s --help' for more information."), program_name);
++	 _("Try '%s --help' for more information."), program_name);
+   abort ();
+ }
+ 
+@@ -435,7 +435,7 @@ static char const * const option_help_msgid[] = {
+   "",
+   N_("-m  --merge  Output merged file instead of ed script (default -A)."),
+   N_("-L LABEL  --label=LABEL  Use LABEL instead of file name."),
+-  N_("-i  Append `w' and `q' commands to ed scripts."),
++  N_("-i  Append 'w' and 'q' commands to ed scripts."),
+   N_("-a  --text  Treat all files as text."),
+   N_("--strip-trailing-cr  Strip trailing carriage return on input."),
+   N_("-T  --initial-tab  Make tabs line up by prepending a tab."),
+@@ -460,7 +460,7 @@ usage (void)
+     else
+       putchar ('\n');
+   printf ("\n%s\n%s\n",
+-	  _("If a FILE is `-', read standard input."),
++	  _("If a FILE is '-', read standard input."),
+ 	  _("Exit status is 0 if successful, 1 if conflicts, 2 if trouble."));
+   emit_bug_reporting_address ();
+ }
+@@ -1275,12 +1275,12 @@ read_diff (char const *filea,
+   if (EXIT_TROUBLE <= status)
+     error (EXIT_TROUBLE, werrno,
+ 	   _(status == 126
+-	     ? "subsidiary program `%s' could not be invoked"
++	     ? "subsidiary program '%s' could not be invoked"
+ 	     : status == 127
+-	     ? "subsidiary program `%s' not found"
++	     ? "subsidiary program '%s' not found"
+ 	     : status == INT_MAX
+-	     ? "subsidiary program `%s' failed"
+-	     : "subsidiary program `%s' failed (exit status %d)"),
++	     ? "subsidiary program '%s' failed"
++	     : "subsidiary program '%s' failed (exit status %d)"),
+ 	   diff_program, status);
+ 
+   return diff_result + total;
+diff --git a/src/dir.c b/src/dir.c
+index 5b4eaec..5e08318 100644
+--- a/src/dir.c
++++ b/src/dir.c
+@@ -154,7 +154,7 @@ compare_names (char const *name1, char const *name2)
+ 	r = strcoll (name1, name2);
+       if (errno)
+ 	{
+-	  error (0, errno, _("cannot compare file names `%s' and `%s'"),
++	  error (0, errno, _("cannot compare file names '%s' and '%s'"),
+ 		 name1, name2);
+ 	  longjmp (failed_locale_specific_sorting, 1);
+ 	}
+diff --git a/src/sdiff.c b/src/sdiff.c
+index 4344e8d..6ea6f0a 100644
+--- a/src/sdiff.c
++++ b/src/sdiff.c
+@@ -175,7 +175,7 @@ try_help (char const *reason_msgid, char const *operand)
+ {
+   if (reason_msgid)
+     error (0, 0, _(reason_msgid), operand);
+-  error (EXIT_TROUBLE, 0, _("Try `%s --help' for more information."),
++  error (EXIT_TROUBLE, 0, _("Try '%s --help' for more information."),
+ 	 program_name);
+   abort ();
+ }
+@@ -230,7 +230,7 @@ usage (void)
+     else
+       putchar ('\n');
+   printf ("\n%s\n%s\n",
+-	  _("If a FILE is `-', read standard input."),
++	  _("If a FILE is '-', read standard input."),
+ 	  _("Exit status is 0 if inputs are the same, 1 if different, 2 if trouble."));
+   emit_bug_reporting_address ();
+ }
+@@ -286,12 +286,12 @@ check_child_status (int werrno, int wstatus, int max_ok_status,
+     {
+       error (0, werrno,
+ 	     _(status == 126
+-	       ? "subsidiary program `%s' could not be invoked"
++	       ? "subsidiary program '%s' could not be invoked"
+ 	       : status == 127
+-	       ? "subsidiary program `%s' not found"
++	       ? "subsidiary program '%s' not found"
+ 	       : status == INT_MAX
+-	       ? "subsidiary program `%s' failed"
+-	       : "subsidiary program `%s' failed (exit status %d)"),
++	       ? "subsidiary program '%s' failed"
++	       : "subsidiary program '%s' failed (exit status %d)"),
+ 	     subsidiary_program, status);
+       exiterr ();
+     }
+@@ -572,9 +572,9 @@ main (int argc, char *argv[])
+   if (argc - optind != 2)
+     {
+       if (argc - optind < 2)
+-	try_help ("missing operand after `%s'", argv[argc - 1]);
++	try_help ("missing operand after '%s'", argv[argc - 1]);
+       else
+-	try_help ("extra operand `%s'", argv[optind + 2]);
++	try_help ("extra operand '%s'", argv[optind + 2]);
+     }
+ 
+   if (! output)
+@@ -747,7 +747,7 @@ main (int argc, char *argv[])
+ 	exit (WEXITSTATUS (wstatus));
+       }
+     }
+-  return EXIT_SUCCESS;			/* Fool `-Wall'.  */
++  return EXIT_SUCCESS;			/* Fool '-Wall'.  */
+ }
+ 
+ static void
+diff --git a/src/util.c b/src/util.c
+index 3be03e9..d18bf38 100644
+--- a/src/util.c
++++ b/src/util.c
+@@ -298,12 +298,12 @@ finish_output (void)
+       if (status)
+ 	error (EXIT_TROUBLE, werrno,
+ 	       _(status == 126
+-		 ? "subsidiary program `%s' could not be invoked"
++		 ? "subsidiary program '%s' could not be invoked"
+ 		 : status == 127
+-		 ? "subsidiary program `%s' not found"
++		 ? "subsidiary program '%s' not found"
+ 		 : status == INT_MAX
+-		 ? "subsidiary program `%s' failed"
+-		 : "subsidiary program `%s' failed (exit status %d)"),
++		 ? "subsidiary program '%s' failed"
++		 : "subsidiary program '%s' failed (exit status %d)"),
+ 	       pr_program, status);
+     }
+ 
diff --git a/quote-3.0-test.txt b/quote-3.0-test.txt
new file mode 100644
index 0000000..44f0a41
--- /dev/null
+++ b/quote-3.0-test.txt
@@ -0,0 +1 @@
+Only in diffutils-3.0: quote-3.0-test.txt
diff --git a/src/cmp.c.orig b/src/cmp.c.orig
new file mode 100644
index 0000000..ee3cde6
--- /dev/null
+++ b/src/cmp.c.orig
@@ -0,0 +1,685 @@
+/* cmp - compare two files byte by byte
+
+   Copyright (C) 1990-1996, 1998, 2001-2002, 2004, 2006-2007, 2009-2010 Free
+   Software Foundation, Inc.
+
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+#include "system.h"
+#include "paths.h"
+
+#include <stdio.h>
+
+#include <c-stack.h>
+#include <cmpbuf.h>
+#include <error.h>
+#include <exitfail.h>
+#include <file-type.h>
+#include <getopt.h>
+#include <hard-locale.h>
+#include <inttostr.h>
+#include <progname.h>
+#include <unlocked-io.h>
+#include <version-etc.h>
+#include <xalloc.h>
+#include <xfreopen.h>
+#include <xstrtol.h>
+
+/* The official name of this program (e.g., no `g' prefix).  */
+#define PROGRAM_NAME "cmp"
+
+#define AUTHORS \
+  proper_name_utf8 ("Torbjorn Granlund", "Torbj\303\266rn Granlund"), \
+  proper_name ("David MacKenzie")
+
+#if defined LC_MESSAGES && ENABLE_NLS
+# define hard_locale_LC_MESSAGES hard_locale (LC_MESSAGES)
+#else
+# define hard_locale_LC_MESSAGES 0
+#endif
+
+static int cmp (void);
+static off_t file_position (int);
+static size_t block_compare (word const *, word const *);
+static size_t block_compare_and_count (word const *, word const *, off_t *);
+static void sprintc (char *, unsigned char);
+
+/* Filenames of the compared files.  */
+static char const *file[2];
+
+/* File descriptors of the files.  */
+static int file_desc[2];
+
+/* Status of the files.  */
+static struct stat stat_buf[2];
+
+/* Read buffers for the files.  */
+static word *buffer[2];
+
+/* Optimal block size for the files.  */
+static size_t buf_size;
+
+/* Initial prefix to ignore for each file.  */
+static off_t ignore_initial[2];
+
+/* Number of bytes to compare.  */
+static uintmax_t bytes = UINTMAX_MAX;
+
+/* Output format.  */
+static enum comparison_type
+  {
+    type_first_diff,	/* Print the first difference.  */
+    type_all_diffs,	/* Print all differences.  */
+    type_no_stdout,	/* Do not output to stdout; only stderr.  */
+    type_status		/* Exit status only.  */
+  } comparison_type;
+
+/* If nonzero, print values of bytes quoted like cat -t does. */
+static bool opt_print_bytes;
+
+/* Values for long options that do not have single-letter equivalents.  */
+enum
+{
+  HELP_OPTION = CHAR_MAX + 1
+};
+
+static struct option const long_options[] =
+{
+  {"print-bytes", 0, 0, 'b'},
+  {"print-chars", 0, 0, 'c'}, /* obsolescent as of diffutils 2.7.3 */
+  {"ignore-initial", 1, 0, 'i'},
+  {"verbose", 0, 0, 'l'},
+  {"bytes", 1, 0, 'n'},
+  {"silent", 0, 0, 's'},
+  {"quiet", 0, 0, 's'},
+  {"version", 0, 0, 'v'},
+  {"help", 0, 0, HELP_OPTION},
+  {0, 0, 0, 0}
+};
+
+static void try_help (char const *, char const *) __attribute__((noreturn));
+static void
+try_help (char const *reason_msgid, char const *operand)
+{
+  if (reason_msgid)
+    error (0, 0, _(reason_msgid), operand);
+  error (EXIT_TROUBLE, 0,
+	 _("Try '%s --help' for more information."), program_name);
+  abort ();
+}
+
+static char const valid_suffixes[] = "kKMGTPEZY0";
+
+/* Update ignore_initial[F] according to the result of parsing an
+   *operand ARGPTR of --ignore-initial, updating *ARGPTR to point
+   *after the operand.  If DELIMITER is nonzero, the operand may be
+   *followed by DELIMITER; otherwise it must be null-terminated.  */
+static void
+specify_ignore_initial (int f, char **argptr, char delimiter)
+{
+  uintmax_t val;
+  char const *arg = *argptr;
+  strtol_error e = xstrtoumax (arg, argptr, 0, &val, valid_suffixes);
+  if (! (e == LONGINT_OK
+	 || (e == LONGINT_INVALID_SUFFIX_CHAR && **argptr == delimiter))
+      || TYPE_MAXIMUM (off_t) < val)
+    try_help ("invalid --ignore-initial value '%s'", arg);
+  if (ignore_initial[f] < val)
+    ignore_initial[f] = val;
+}
+
+/* Specify the output format.  */
+static void
+specify_comparison_type (enum comparison_type t)
+{
+  if (comparison_type && comparison_type != t)
+    try_help ("options -l and -s are incompatible", 0);
+  comparison_type = t;
+}
+
+static void
+check_stdout (void)
+{
+  if (ferror (stdout))
+    error (EXIT_TROUBLE, 0, "%s", _("write failed"));
+  else if (fclose (stdout) != 0)
+    error (EXIT_TROUBLE, errno, "%s", _("standard output"));
+}
+
+static char const * const option_help_msgid[] = {
+  N_("-b  --print-bytes  Print differing bytes."),
+  N_("-i SKIP  --ignore-initial=SKIP  Skip the first SKIP bytes of input."),
+  N_("-i SKIP1:SKIP2  --ignore-initial=SKIP1:SKIP2"),
+  N_("  Skip the first SKIP1 bytes of FILE1 and the first SKIP2 bytes of FILE2."),
+  N_("-l  --verbose  Output byte numbers and values of all differing bytes."),
+  N_("-n LIMIT  --bytes=LIMIT  Compare at most LIMIT bytes."),
+  N_("-s  --quiet  --silent  Output nothing; yield exit status only."),
+  N_("-v  --version  Output version info."),
+  N_("--help  Output this help."),
+  0
+};
+
+static void
+usage (void)
+{
+  char const * const *p;
+
+  printf (_("Usage: %s [OPTION]... FILE1 [FILE2 [SKIP1 [SKIP2]]]\n"),
+	  program_name);
+  printf ("%s\n\n", _("Compare two files byte by byte."));
+  for (p = option_help_msgid;  *p;  p++)
+    printf ("  %s\n", _(*p));
+  printf ("\n%s\n%s\n\n%s\n%s\n",
+	  _("SKIP1 and SKIP2 are the number of bytes to skip in each file."),
+	  _("SKIP values may be followed by the following multiplicative suffixes:\n\
+kB 1000, K 1024, MB 1,000,000, M 1,048,576,\n\
+GB 1,000,000,000, G 1,073,741,824, and so on for T, P, E, Z, Y."),
+	  _("If a FILE is '-' or missing, read standard input."),
+	  _("Exit status is 0 if inputs are the same, 1 if different, 2 if trouble."));
+  emit_bug_reporting_address ();
+}
+
+int
+main (int argc, char **argv)
+{
+  int c, f, exit_status;
+  size_t words_per_buffer;
+
+  exit_failure = EXIT_TROUBLE;
+  initialize_main (&argc, &argv);
+  set_program_name (argv[0]);
+  setlocale (LC_ALL, "");
+  bindtextdomain (PACKAGE, LOCALEDIR);
+  textdomain (PACKAGE);
+  c_stack_action (0);
+
+  /* Parse command line options.  */
+
+  while ((c = getopt_long (argc, argv, "bci:ln:sv", long_options, 0))
+	 != -1)
+    switch (c)
+      {
+      case 'b':
+      case 'c': /* 'c' is obsolescent as of diffutils 2.7.3 */
+	opt_print_bytes = true;
+	break;
+
+      case 'i':
+	specify_ignore_initial (0, &optarg, ':');
+	if (*optarg++ == ':')
+	  specify_ignore_initial (1, &optarg, 0);
+	else if (ignore_initial[1] < ignore_initial[0])
+	  ignore_initial[1] = ignore_initial[0];
+	break;
+
+      case 'l':
+	specify_comparison_type (type_all_diffs);
+	break;
+
+      case 'n':
+	{
+	  uintmax_t n;
+	  if (xstrtoumax (optarg, 0, 0, &n, valid_suffixes) != LONGINT_OK)
+	    try_help ("invalid --bytes value '%s'", optarg);
+	  if (n < bytes)
+	    bytes = n;
+	}
+	break;
+
+      case 's':
+	specify_comparison_type (type_status);
+	break;
+
+      case 'v':
+	version_etc (stdout, PROGRAM_NAME, PACKAGE_NAME, PACKAGE_VERSION,
+		     AUTHORS, (char *) NULL);
+	check_stdout ();
+	return EXIT_SUCCESS;
+
+      case HELP_OPTION:
+	usage ();
+	check_stdout ();
+	return EXIT_SUCCESS;
+
+      default:
+	try_help (0, 0);
+      }
+
+  if (optind == argc)
+    try_help ("missing operand after '%s'", argv[argc - 1]);
+
+  file[0] = argv[optind++];
+  file[1] = optind < argc ? argv[optind++] : "-";
+
+  for (f = 0; f < 2 && optind < argc; f++)
+    {
+      char *arg = argv[optind++];
+      specify_ignore_initial (f, &arg, 0);
+    }
+
+  if (optind < argc)
+    try_help ("extra operand '%s'", argv[optind]);
+
+  for (f = 0; f < 2; f++)
+    {
+      /* If file[1] is "-", treat it first; this avoids a misdiagnostic if
+	 stdin is closed and opening file[0] yields file descriptor 0.  */
+      int f1 = f ^ (STREQ (file[1], "-"));
+
+      /* Two files with the same name and offset are identical.
+	 But wait until we open the file once, for proper diagnostics.  */
+      if (f && ignore_initial[0] == ignore_initial[1]
+	  && file_name_cmp (file[0], file[1]) == 0)
+	return EXIT_SUCCESS;
+
+      if (STREQ (file[f1], "-"))
+	{
+	  file_desc[f1] = STDIN_FILENO;
+	  if (O_BINARY && ! isatty (STDIN_FILENO))
+	    xfreopen (NULL, "rb", stdin);
+	}
+      else
+	file_desc[f1] = open (file[f1], O_RDONLY | O_BINARY, 0);
+
+      if (file_desc[f1] < 0 || fstat (file_desc[f1], stat_buf + f1) != 0)
+	{
+	  if (file_desc[f1] < 0 && comparison_type == type_status)
+	    exit (EXIT_TROUBLE);
+	  else
+	    error (EXIT_TROUBLE, errno, "%s", file[f1]);
+	}
+    }
+
+  /* If the files are links to the same inode and have the same file position,
+     they are identical.  */
+
+  if (0 < same_file (&stat_buf[0], &stat_buf[1])
+      && same_file_attributes (&stat_buf[0], &stat_buf[1])
+      && file_position (0) == file_position (1))
+    return EXIT_SUCCESS;
+
+  /* If output is redirected to the null device, we can avoid some of
+     the work.  */
+
+  if (comparison_type != type_status)
+    {
+      struct stat outstat, nullstat;
+
+      if (fstat (STDOUT_FILENO, &outstat) == 0
+	  && stat (NULL_DEVICE, &nullstat) == 0
+	  && 0 < same_file (&outstat, &nullstat))
+	comparison_type = type_no_stdout;
+    }
+
+  /* If only a return code is needed,
+     and if both input descriptors are associated with plain files,
+     conclude that the files differ if they have different sizes
+     and if more bytes will be compared than are in the smaller file.  */
+
+  if (comparison_type == type_status
+      && S_ISREG (stat_buf[0].st_mode)
+      && S_ISREG (stat_buf[1].st_mode))
+    {
+      off_t s0 = stat_buf[0].st_size - file_position (0);
+      off_t s1 = stat_buf[1].st_size - file_position (1);
+      if (s0 < 0)
+	s0 = 0;
+      if (s1 < 0)
+	s1 = 0;
+      if (s0 != s1 && MIN (s0, s1) < bytes)
+	exit (EXIT_FAILURE);
+    }
+
+  /* Get the optimal block size of the files.  */
+
+  buf_size = buffer_lcm (STAT_BLOCKSIZE (stat_buf[0]),
+			 STAT_BLOCKSIZE (stat_buf[1]),
+			 PTRDIFF_MAX - sizeof (word));
+
+  /* Allocate word-aligned buffers, with space for sentinels at the end.  */
+
+  words_per_buffer = (buf_size + 2 * sizeof (word) - 1) / sizeof (word);
+  buffer[0] = xmalloc (2 * sizeof (word) * words_per_buffer);
+  buffer[1] = buffer[0] + words_per_buffer;
+
+  exit_status = cmp ();
+
+  for (f = 0; f < 2; f++)
+    if (close (file_desc[f]) != 0)
+      error (EXIT_TROUBLE, errno, "%s", file[f]);
+  if (exit_status != EXIT_SUCCESS && comparison_type < type_no_stdout)
+    check_stdout ();
+  exit (exit_status);
+  return exit_status;
+}
+
+/* Compare the two files already open on `file_desc[0]' and `file_desc[1]',
+   using `buffer[0]' and `buffer[1]'.
+   Return EXIT_SUCCESS if identical, EXIT_FAILURE if different,
+   >1 if error.  */
+
+static int
+cmp (void)
+{
+  off_t line_number = 1;	/* Line number (1...) of difference. */
+  off_t byte_number = 1;	/* Byte number (1...) of difference. */
+  uintmax_t remaining = bytes;	/* Remaining number of bytes to compare.  */
+  size_t read0, read1;		/* Number of bytes read from each file. */
+  size_t first_diff;		/* Offset (0...) in buffers of 1st diff. */
+  size_t smaller;		/* The lesser of 'read0' and 'read1'. */
+  word *buffer0 = buffer[0];
+  word *buffer1 = buffer[1];
+  char *buf0 = (char *) buffer0;
+  char *buf1 = (char *) buffer1;
+  int differing = 0;
+  int f;
+  int offset_width IF_LINT (= 0);
+
+  if (comparison_type == type_all_diffs)
+    {
+      off_t byte_number_max = MIN (bytes, TYPE_MAXIMUM (off_t));
+
+      for (f = 0; f < 2; f++)
+	if (S_ISREG (stat_buf[f].st_mode))
+	  {
+	    off_t file_bytes = stat_buf[f].st_size - file_position (f);
+	    if (file_bytes < byte_number_max)
+	      byte_number_max = file_bytes;
+	  }
+
+      for (offset_width = 1; (byte_number_max /= 10) != 0; offset_width++)
+	continue;
+    }
+
+  for (f = 0; f < 2; f++)
+    {
+      off_t ig = ignore_initial[f];
+      if (ig && file_position (f) == -1)
+	{
+	  /* lseek failed; read and discard the ignored initial prefix.  */
+	  do
+	    {
+	      size_t bytes_to_read = MIN (ig, buf_size);
+	      size_t r = block_read (file_desc[f], buf0, bytes_to_read);
+	      if (r != bytes_to_read)
+		{
+		  if (r == SIZE_MAX)
+		    error (EXIT_TROUBLE, errno, "%s", file[f]);
+		  break;
+		}
+	      ig -= r;
+	    }
+	  while (ig);
+	}
+    }
+
+  do
+    {
+      size_t bytes_to_read = buf_size;
+
+      if (remaining != UINTMAX_MAX)
+	{
+	  if (remaining < bytes_to_read)
+	    bytes_to_read = remaining;
+	  remaining -= bytes_to_read;
+	}
+
+      read0 = block_read (file_desc[0], buf0, bytes_to_read);
+      if (read0 == SIZE_MAX)
+	error (EXIT_TROUBLE, errno, "%s", file[0]);
+      read1 = block_read (file_desc[1], buf1, bytes_to_read);
+      if (read1 == SIZE_MAX)
+	error (EXIT_TROUBLE, errno, "%s", file[1]);
+
+      /* Insert sentinels for the block compare.  */
+
+      buf0[read0] = ~buf1[read0];
+      buf1[read1] = ~buf0[read1];
+
+      /* If the line number should be written for differing files,
+	 compare the blocks and count the number of newlines
+	 simultaneously.  */
+      first_diff = (comparison_type == type_first_diff
+		    ? block_compare_and_count (buffer0, buffer1, &line_number)
+		    : block_compare (buffer0, buffer1));
+
+      byte_number += first_diff;
+      smaller = MIN (read0, read1);
+
+      if (first_diff < smaller)
+	{
+	  switch (comparison_type)
+	    {
+	    case type_first_diff:
+	      {
+		char byte_buf[INT_BUFSIZE_BOUND (off_t)];
+		char line_buf[INT_BUFSIZE_BOUND (off_t)];
+		char const *byte_num = offtostr (byte_number, byte_buf);
+		char const *line_num = offtostr (line_number, line_buf);
+		if (!opt_print_bytes)
+		  {
+		    /* See POSIX 1003.1-2001 for this format.  This
+		       message is used only in the POSIX locale, so it
+		       need not be translated.  */
+		    static char const char_message[] =
+		      "%s %s differ: char %s, line %s\n";
+
+		    /* The POSIX rationale recommends using the word
+		       "byte" outside the POSIX locale.  Some gettext
+		       implementations translate even in the POSIX
+		       locale if certain other environment variables
+		       are set, so use "byte" if a translation is
+		       available, or if outside the POSIX locale.  */
+		    static char const byte_msgid[] =
+		      N_("%s %s differ: byte %s, line %s\n");
+		    char const *byte_message = _(byte_msgid);
+		    bool use_byte_message = (byte_message != byte_msgid
+					     || hard_locale_LC_MESSAGES);
+
+		    printf (use_byte_message ? byte_message : char_message,
+			    file[0], file[1], byte_num, line_num);
+		  }
+		else
+		  {
+		    unsigned char c0 = buf0[first_diff];
+		    unsigned char c1 = buf1[first_diff];
+		    char s0[5];
+		    char s1[5];
+		    sprintc (s0, c0);
+		    sprintc (s1, c1);
+		    printf (_("%s %s differ: byte %s, line %s is %3o %s %3o %s\n"),
+			    file[0], file[1], byte_num, line_num,
+			    c0, s0, c1, s1);
+		}
+	      }
+	      /* Fall through.  */
+	    case type_status:
+	      return EXIT_FAILURE;
+
+	    case type_all_diffs:
+	      do
+		{
+		  unsigned char c0 = buf0[first_diff];
+		  unsigned char c1 = buf1[first_diff];
+		  if (c0 != c1)
+		    {
+		      char byte_buf[INT_BUFSIZE_BOUND (off_t)];
+		      char const *byte_num = offtostr (byte_number, byte_buf);
+		      if (!opt_print_bytes)
+			{
+			  /* See POSIX 1003.1-2001 for this format.  */
+			  printf ("%*s %3o %3o\n",
+				  offset_width, byte_num, c0, c1);
+			}
+		      else
+			{
+			  char s0[5];
+			  char s1[5];
+			  sprintc (s0, c0);
+			  sprintc (s1, c1);
+			  printf ("%*s %3o %-4s %3o %s\n",
+				  offset_width, byte_num, c0, s0, c1, s1);
+			}
+		    }
+		  byte_number++;
+		  first_diff++;
+		}
+	      while (first_diff < smaller);
+	      differing = -1;
+	      break;
+
+	    case type_no_stdout:
+	      differing = 1;
+	      break;
+	    }
+	}
+
+      if (read0 != read1)
+	{
+	  if (differing <= 0 && comparison_type != type_status)
+	    {
+	      /* See POSIX 1003.1-2001 for this format.  */
+	      fprintf (stderr, _("cmp: EOF on %s\n"), file[read1 < read0]);
+	    }
+
+	  return EXIT_FAILURE;
+	}
+    }
+  while (differing <= 0 && read0 == buf_size);
+
+  return differing == 0 ? EXIT_SUCCESS : EXIT_FAILURE;
+}
+
+/* Compare two blocks of memory P0 and P1 until they differ,
+   and count the number of '\n' occurrences in the common
+   part of P0 and P1.
+   If the blocks are not guaranteed to be different, put sentinels at the ends
+   of the blocks before calling this function.
+
+   Return the offset of the first byte that differs.
+   Increment *COUNT by the count of '\n' occurrences.  */
+
+static size_t
+block_compare_and_count (word const *p0, word const *p1, off_t *count)
+{
+  word l;		/* One word from first buffer. */
+  word const *l0, *l1;	/* Pointers into each buffer. */
+  char const *c0, *c1;	/* Pointers for finding exact address. */
+  size_t cnt = 0;	/* Number of '\n' occurrences. */
+  word nnnn;		/* Newline, sizeof (word) times.  */
+  int i;
+
+  nnnn = 0;
+  for (i = 0; i < sizeof nnnn; i++)
+    nnnn = (nnnn << CHAR_BIT) | '\n';
+
+  /* Find the rough position of the first difference by reading words,
+     not bytes.  */
+
+  for (l0 = p0, l1 = p1;  (l = *l0) == *l1;  l0++, l1++)
+    {
+      l ^= nnnn;
+      for (i = 0; i < sizeof l; i++)
+	{
+	  unsigned char uc = l;
+	  cnt += ! uc;
+	  l >>= CHAR_BIT;
+	}
+    }
+
+  /* Find the exact differing position (endianness independent).  */
+
+  for (c0 = (char const *) l0, c1 = (char const *) l1;
+       *c0 == *c1;
+       c0++, c1++)
+    cnt += *c0 == '\n';
+
+  *count += cnt;
+  return c0 - (char const *) p0;
+}
+
+/* Compare two blocks of memory P0 and P1 until they differ.
+   If the blocks are not guaranteed to be different, put sentinels at the ends
+   of the blocks before calling this function.
+
+   Return the offset of the first byte that differs.  */
+
+static size_t
+block_compare (word const *p0, word const *p1)
+{
+  word const *l0, *l1;
+  char const *c0, *c1;
+
+  /* Find the rough position of the first difference by reading words,
+     not bytes.  */
+
+  for (l0 = p0, l1 = p1;  *l0 == *l1;  l0++, l1++)
+    continue;
+
+  /* Find the exact differing position (endianness independent).  */
+
+  for (c0 = (char const *) l0, c1 = (char const *) l1;
+       *c0 == *c1;
+       c0++, c1++)
+    continue;
+
+  return c0 - (char const *) p0;
+}
+
+/* Put into BUF the unsigned char C, making unprintable bytes
+   visible by quoting like cat -t does.  */
+
+static void
+sprintc (char *buf, unsigned char c)
+{
+  if (! isprint (c))
+    {
+      if (c >= 128)
+	{
+	  *buf++ = 'M';
+	  *buf++ = '-';
+	  c -= 128;
+	}
+      if (c < 32)
+	{
+	  *buf++ = '^';
+	  c += 64;
+	}
+      else if (c == 127)
+	{
+	  *buf++ = '^';
+	  c = '?';
+	}
+    }
+
+  *buf++ = c;
+  *buf = 0;
+}
+
+/* Position file F to ignore_initial[F] bytes from its initial position,
+   and yield its new position.  Don't try more than once.  */
+
+static off_t
+file_position (int f)
+{
+  static bool positioned[2];
+  static off_t position[2];
+
+  if (! positioned[f])
+    {
+      positioned[f] = true;
+      position[f] = lseek (file_desc[f], ignore_initial[f], SEEK_CUR);
+    }
+  return position[f];
+}
diff --git a/src/diff.c.orig b/src/diff.c.orig
new file mode 100644
index 0000000..d6e517b
--- /dev/null
+++ b/src/diff.c.orig
@@ -0,0 +1,1330 @@
+/* diff - compare files line by line
+
+   Copyright (C) 1988-1989, 1992-1994, 1996, 1998, 2001-2002, 2004, 2006-2007,
+   2009-2010 Free Software Foundation, Inc.
+
+   This file is part of GNU DIFF.
+
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+#define GDIFF_MAIN
+#include "diff.h"
+#include <assert.h>
+#include "paths.h"
+#include <c-stack.h>
+#include <dirname.h>
+#include <error.h>
+#include <exclude.h>
+#include <exitfail.h>
+#include <file-type.h>
+#include <fnmatch.h>
+#include <getopt.h>
+#include <hard-locale.h>
+#include <prepargs.h>
+#include <progname.h>
+#include <sh-quote.h>
+#include <stat-time.h>
+#include <timespec.h>
+#include <version-etc.h>
+#include <xalloc.h>
+#include <xfreopen.h>
+
+/* The official name of this program (e.g., no `g' prefix).  */
+#define PROGRAM_NAME "diff"
+
+#define AUTHORS \
+  proper_name ("Paul Eggert"), \
+  proper_name ("Mike Haertel"), \
+  proper_name ("David Hayes"), \
+  proper_name ("Richard Stallman"), \
+  proper_name ("Len Tower")
+
+#ifndef GUTTER_WIDTH_MINIMUM
+# define GUTTER_WIDTH_MINIMUM 3
+#endif
+
+struct regexp_list
+{
+  char *regexps;	/* chars representing disjunction of the regexps */
+  size_t len;		/* chars used in 'regexps' */
+  size_t size;		/* size malloc'ed for 'regexps'; 0 if not malloc'ed */
+  bool multiple_regexps;/* Does 'regexps' represent a disjunction?  */
+  struct re_pattern_buffer *buf;
+};
+
+static int compare_files (struct comparison const *, char const *, char const *);
+static void add_regexp (struct regexp_list *, char const *);
+static void summarize_regexp_list (struct regexp_list *);
+static void specify_style (enum output_style);
+static void specify_value (char const **, char const *, char const *);
+static void try_help (char const *, char const *) __attribute__((noreturn));
+static void check_stdout (void);
+static void usage (void);
+
+/* If comparing directories, compare their common subdirectories
+   recursively.  */
+static bool recursive;
+
+/* In context diffs, show previous lines that match these regexps.  */
+static struct regexp_list function_regexp_list;
+
+/* Ignore changes affecting only lines that match these regexps.  */
+static struct regexp_list ignore_regexp_list;
+
+#if O_BINARY
+/* Use binary I/O when reading and writing data (--binary).
+   On POSIX hosts, this has no effect.  */
+static bool binary;
+#else
+enum { binary = true };
+#endif
+
+/* When comparing directories, if a file appears only in one
+   directory, treat it as present but empty in the other (-N).
+   Then `patch' would create the file with appropriate contents.  */
+static bool new_file;
+
+/* When comparing directories, if a file appears only in the second
+   directory of the two, treat it as present but empty in the other
+   (--unidirectional-new-file).
+   Then `patch' would create the file with appropriate contents.  */
+static bool unidirectional_new_file;
+
+/* Report files compared that are the same (-s).
+   Normally nothing is output when that happens.  */
+static bool report_identical_files;
+
+static char const shortopts[] =
+"0123456789abBcC:dD:eEfF:hHiI:lL:nNpPqrsS:tTuU:vwW:x:X:y";
+
+/* Values for long options that do not have single-letter equivalents.  */
+enum
+{
+  BINARY_OPTION = CHAR_MAX + 1,
+  FROM_FILE_OPTION,
+  HELP_OPTION,
+  HORIZON_LINES_OPTION,
+  IGNORE_FILE_NAME_CASE_OPTION,
+  INHIBIT_HUNK_MERGE_OPTION,
+  LEFT_COLUMN_OPTION,
+  LINE_FORMAT_OPTION,
+  NO_IGNORE_FILE_NAME_CASE_OPTION,
+  NORMAL_OPTION,
+  SDIFF_MERGE_ASSIST_OPTION,
+  STRIP_TRAILING_CR_OPTION,
+  SUPPRESS_BLANK_EMPTY_OPTION,
+  SUPPRESS_COMMON_LINES_OPTION,
+  TABSIZE_OPTION,
+  TO_FILE_OPTION,
+
+  /* These options must be in sequence.  */
+  UNCHANGED_LINE_FORMAT_OPTION,
+  OLD_LINE_FORMAT_OPTION,
+  NEW_LINE_FORMAT_OPTION,
+
+  /* These options must be in sequence.  */
+  UNCHANGED_GROUP_FORMAT_OPTION,
+  OLD_GROUP_FORMAT_OPTION,
+  NEW_GROUP_FORMAT_OPTION,
+  CHANGED_GROUP_FORMAT_OPTION
+};
+
+static char const group_format_option[][sizeof "--unchanged-group-format"] =
+  {
+    "--unchanged-group-format",
+    "--old-group-format",
+    "--new-group-format",
+    "--changed-group-format"
+  };
+
+static char const line_format_option[][sizeof "--unchanged-line-format"] =
+  {
+    "--unchanged-line-format",
+    "--old-line-format",
+    "--new-line-format"
+  };
+
+static struct option const longopts[] =
+{
+  {"binary", 0, 0, BINARY_OPTION},
+  {"brief", 0, 0, 'q'},
+  {"changed-group-format", 1, 0, CHANGED_GROUP_FORMAT_OPTION},
+  {"context", 2, 0, 'C'},
+  {"ed", 0, 0, 'e'},
+  {"exclude", 1, 0, 'x'},
+  {"exclude-from", 1, 0, 'X'},
+  {"expand-tabs", 0, 0, 't'},
+  {"forward-ed", 0, 0, 'f'},
+  {"from-file", 1, 0, FROM_FILE_OPTION},
+  {"help", 0, 0, HELP_OPTION},
+  {"horizon-lines", 1, 0, HORIZON_LINES_OPTION},
+  {"ifdef", 1, 0, 'D'},
+  {"ignore-all-space", 0, 0, 'w'},
+  {"ignore-blank-lines", 0, 0, 'B'},
+  {"ignore-case", 0, 0, 'i'},
+  {"ignore-file-name-case", 0, 0, IGNORE_FILE_NAME_CASE_OPTION},
+  {"ignore-matching-lines", 1, 0, 'I'},
+  {"ignore-space-change", 0, 0, 'b'},
+  {"ignore-tab-expansion", 0, 0, 'E'},
+  {"inhibit-hunk-merge", 0, 0, INHIBIT_HUNK_MERGE_OPTION},
+  {"initial-tab", 0, 0, 'T'},
+  {"label", 1, 0, 'L'},
+  {"left-column", 0, 0, LEFT_COLUMN_OPTION},
+  {"line-format", 1, 0, LINE_FORMAT_OPTION},
+  {"minimal", 0, 0, 'd'},
+  {"new-file", 0, 0, 'N'},
+  {"new-group-format", 1, 0, NEW_GROUP_FORMAT_OPTION},
+  {"new-line-format", 1, 0, NEW_LINE_FORMAT_OPTION},
+  {"no-ignore-file-name-case", 0, 0, NO_IGNORE_FILE_NAME_CASE_OPTION},
+  {"normal", 0, 0, NORMAL_OPTION},
+  {"old-group-format", 1, 0, OLD_GROUP_FORMAT_OPTION},
+  {"old-line-format", 1, 0, OLD_LINE_FORMAT_OPTION},
+  {"paginate", 0, 0, 'l'},
+  {"rcs", 0, 0, 'n'},
+  {"recursive", 0, 0, 'r'},
+  {"report-identical-files", 0, 0, 's'},
+  {"sdiff-merge-assist", 0, 0, SDIFF_MERGE_ASSIST_OPTION},
+  {"show-c-function", 0, 0, 'p'},
+  {"show-function-line", 1, 0, 'F'},
+  {"side-by-side", 0, 0, 'y'},
+  {"speed-large-files", 0, 0, 'H'},
+  {"starting-file", 1, 0, 'S'},
+  {"strip-trailing-cr", 0, 0, STRIP_TRAILING_CR_OPTION},
+  {"suppress-blank-empty", 0, 0, SUPPRESS_BLANK_EMPTY_OPTION},
+  {"suppress-common-lines", 0, 0, SUPPRESS_COMMON_LINES_OPTION},
+  {"tabsize", 1, 0, TABSIZE_OPTION},
+  {"text", 0, 0, 'a'},
+  {"to-file", 1, 0, TO_FILE_OPTION},
+  {"unchanged-group-format", 1, 0, UNCHANGED_GROUP_FORMAT_OPTION},
+  {"unchanged-line-format", 1, 0, UNCHANGED_LINE_FORMAT_OPTION},
+  {"unidirectional-new-file", 0, 0, 'P'},
+  {"unified", 2, 0, 'U'},
+  {"version", 0, 0, 'v'},
+  {"width", 1, 0, 'W'},
+  {0, 0, 0, 0}
+};
+
+/* Return a string containing the command options with which diff was invoked.
+   Spaces appear between what were separate ARGV-elements.
+   There is a space at the beginning but none at the end.
+   If there were no options, the result is an empty string.
+
+   Arguments: OPTIONVEC, a vector containing separate ARGV-elements, and COUNT,
+   the length of that vector.  */
+
+static char *
+option_list (char **optionvec, int count)
+{
+  int i;
+  size_t size = 1;
+  char *result;
+  char *p;
+
+  for (i = 0; i < count; i++)
+    size += 1 + shell_quote_length (optionvec[i]);
+
+  p = result = xmalloc (size);
+
+  for (i = 0; i < count; i++)
+    {
+      *p++ = ' ';
+      p = shell_quote_copy (p, optionvec[i]);
+    }
+
+  *p = '\0';
+  return result;
+}
+
+
+/* Return an option value suitable for add_exclude.  */
+
+static int
+exclude_options (void)
+{
+  return EXCLUDE_WILDCARDS | (ignore_file_name_case ? FNM_CASEFOLD : 0);
+}
+
+int
+main (int argc, char **argv)
+{
+  int exit_status = EXIT_SUCCESS;
+  int c;
+  int i;
+  int prev = -1;
+  lin ocontext = -1;
+  bool explicit_context = false;
+  size_t width = 0;
+  bool show_c_function = false;
+  char const *from_file = NULL;
+  char const *to_file = NULL;
+  uintmax_t numval;
+  char *numend;
+
+  /* Do our initializations.  */
+  exit_failure = EXIT_TROUBLE;
+  initialize_main (&argc, &argv);
+  set_program_name (argv[0]);
+  setlocale (LC_ALL, "");
+  bindtextdomain (PACKAGE, LOCALEDIR);
+  textdomain (PACKAGE);
+  c_stack_action (0);
+  function_regexp_list.buf = &function_regexp;
+  ignore_regexp_list.buf = &ignore_regexp;
+  re_set_syntax (RE_SYNTAX_GREP | RE_NO_POSIX_BACKTRACKING);
+  excluded = new_exclude ();
+
+  /* Decode the options.  */
+
+  while ((c = getopt_long (argc, argv, shortopts, longopts, NULL)) != -1)
+    {
+      switch (c)
+	{
+	case 0:
+	  break;
+
+	case '0':
+	case '1':
+	case '2':
+	case '3':
+	case '4':
+	case '5':
+	case '6':
+	case '7':
+	case '8':
+	case '9':
+	  if (! ISDIGIT (prev))
+	    ocontext = c - '0';
+	  else if (LIN_MAX / 10 < ocontext
+		   || ((ocontext = 10 * ocontext + c - '0') < 0))
+	    ocontext = LIN_MAX;
+	  break;
+
+	case 'a':
+	  text = true;
+	  break;
+
+	case 'b':
+	  if (ignore_white_space < IGNORE_SPACE_CHANGE)
+	    ignore_white_space = IGNORE_SPACE_CHANGE;
+	  break;
+
+	case 'B':
+	  ignore_blank_lines = true;
+	  break;
+
+	case 'C':
+	case 'U':
+	  {
+	    if (optarg)
+	      {
+		numval = strtoumax (optarg, &numend, 10);
+		if (*numend)
+		  try_help ("invalid context length '%s'", optarg);
+		if (LIN_MAX < numval)
+		  numval = LIN_MAX;
+	      }
+	    else
+	      numval = 3;
+
+	    specify_style (c == 'U' ? OUTPUT_UNIFIED : OUTPUT_CONTEXT);
+	    if (context < numval)
+	      context = numval;
+	    explicit_context = true;
+	  }
+	  break;
+
+	case 'c':
+	  specify_style (OUTPUT_CONTEXT);
+	  if (context < 3)
+	    context = 3;
+	  break;
+
+	case 'd':
+	  minimal = true;
+	  break;
+
+	case 'D':
+	  specify_style (OUTPUT_IFDEF);
+	  {
+	    static char const C_ifdef_group_formats[] =
+	      "%%=%c#ifndef %s\n%%<#endif /* ! %s */\n%c#ifdef %s\n%%>#endif /* %s */\n%c#ifndef %s\n%%<#else /* %s */\n%%>#endif /* %s */\n";
+	    char *b = xmalloc (sizeof C_ifdef_group_formats
+			       + 7 * strlen (optarg) - 14 /* 7*"%s" */
+			       - 8 /* 5*"%%" + 3*"%c" */);
+	    sprintf (b, C_ifdef_group_formats,
+		     0,
+		     optarg, optarg, 0,
+		     optarg, optarg, 0,
+		     optarg, optarg, optarg);
+	    for (i = 0; i < sizeof group_format / sizeof group_format[0]; i++)
+	      {
+		specify_value (&group_format[i], b, "-D");
+		b += strlen (b) + 1;
+	      }
+	  }
+	  break;
+
+	case 'e':
+	  specify_style (OUTPUT_ED);
+	  break;
+
+	case 'E':
+	  if (ignore_white_space < IGNORE_TAB_EXPANSION)
+	    ignore_white_space = IGNORE_TAB_EXPANSION;
+	  break;
+
+	case 'f':
+	  specify_style (OUTPUT_FORWARD_ED);
+	  break;
+
+	case 'F':
+	  add_regexp (&function_regexp_list, optarg);
+	  break;
+
+	case 'h':
+	  /* Split the files into chunks for faster processing.
+	     Usually does not change the result.
+
+	     This currently has no effect.  */
+	  break;
+
+	case 'H':
+	  speed_large_files = true;
+	  break;
+
+	case 'i':
+	  ignore_case = true;
+	  break;
+
+	case 'I':
+	  add_regexp (&ignore_regexp_list, optarg);
+	  break;
+
+	case 'l':
+	  if (!pr_program[0])
+	    try_help ("pagination not supported on this host", NULL);
+	  paginate = true;
+#ifdef SIGCHLD
+	  /* Pagination requires forking and waiting, and
+	     System V fork+wait does not work if SIGCHLD is ignored.  */
+	  signal (SIGCHLD, SIG_DFL);
+#endif
+	  break;
+
+	case 'L':
+	  if (!file_label[0])
+	    file_label[0] = optarg;
+	  else if (!file_label[1])
+	    file_label[1] = optarg;
+	  else
+	    fatal ("too many file label options");
+	  break;
+
+	case 'n':
+	  specify_style (OUTPUT_RCS);
+	  break;
+
+	case 'N':
+	  new_file = true;
+	  break;
+
+	case 'p':
+	  show_c_function = true;
+	  add_regexp (&function_regexp_list, "^[[:alpha:]$_]");
+	  break;
+
+	case 'P':
+	  unidirectional_new_file = true;
+	  break;
+
+	case 'q':
+	  brief = true;
+	  break;
+
+	case 'r':
+	  recursive = true;
+	  break;
+
+	case 's':
+	  report_identical_files = true;
+	  break;
+
+	case 'S':
+	  specify_value (&starting_file, optarg, "-S");
+	  break;
+
+	case 't':
+	  expand_tabs = true;
+	  break;
+
+	case 'T':
+	  initial_tab = true;
+	  break;
+
+	case 'u':
+	  specify_style (OUTPUT_UNIFIED);
+	  if (context < 3)
+	    context = 3;
+	  break;
+
+	case 'v':
+	  version_etc (stdout, PROGRAM_NAME, PACKAGE_NAME, PACKAGE_VERSION,
+		       AUTHORS, (char *) NULL);
+	  check_stdout ();
+	  return EXIT_SUCCESS;
+
+	case 'w':
+	  ignore_white_space = IGNORE_ALL_SPACE;
+	  break;
+
+	case 'x':
+	  add_exclude (excluded, optarg, exclude_options ());
+	  break;
+
+	case 'X':
+	  if (add_exclude_file (add_exclude, excluded, optarg,
+				exclude_options (), '\n'))
+	    pfatal_with_name (optarg);
+	  break;
+
+	case 'y':
+	  specify_style (OUTPUT_SDIFF);
+	  break;
+
+	case 'W':
+	  numval = strtoumax (optarg, &numend, 10);
+	  if (! (0 < numval && numval <= SIZE_MAX) || *numend)
+	    try_help ("invalid width '%s'", optarg);
+	  if (width != numval)
+	    {
+	      if (width)
+		fatal ("conflicting width options");
+	      width = numval;
+	    }
+	  break;
+
+	case BINARY_OPTION:
+#if O_BINARY
+	  binary = true;
+	  if (! isatty (STDOUT_FILENO))
+	    xfreopen (NULL, "wb", stdout);
+#endif
+	  break;
+
+	case FROM_FILE_OPTION:
+	  specify_value (&from_file, optarg, "--from-file");
+	  break;
+
+	case HELP_OPTION:
+	  usage ();
+	  check_stdout ();
+	  return EXIT_SUCCESS;
+
+	case HORIZON_LINES_OPTION:
+	  numval = strtoumax (optarg, &numend, 10);
+	  if (*numend)
+	    try_help ("invalid horizon length '%s'", optarg);
+	  horizon_lines = MAX (horizon_lines, MIN (numval, LIN_MAX));
+	  break;
+
+	case IGNORE_FILE_NAME_CASE_OPTION:
+	  ignore_file_name_case = true;
+	  break;
+
+	case INHIBIT_HUNK_MERGE_OPTION:
+	  /* This option is obsolete, but accept it for backward
+             compatibility.  */
+	  break;
+
+	case LEFT_COLUMN_OPTION:
+	  left_column = true;
+	  break;
+
+	case LINE_FORMAT_OPTION:
+	  specify_style (OUTPUT_IFDEF);
+	  for (i = 0; i < sizeof line_format / sizeof line_format[0]; i++)
+	    specify_value (&line_format[i], optarg, "--line-format");
+	  break;
+
+	case NO_IGNORE_FILE_NAME_CASE_OPTION:
+	  ignore_file_name_case = false;
+	  break;
+
+	case NORMAL_OPTION:
+	  specify_style (OUTPUT_NORMAL);
+	  break;
+
+	case SDIFF_MERGE_ASSIST_OPTION:
+	  specify_style (OUTPUT_SDIFF);
+	  sdiff_merge_assist = true;
+	  break;
+
+	case STRIP_TRAILING_CR_OPTION:
+	  strip_trailing_cr = true;
+	  break;
+
+	case SUPPRESS_BLANK_EMPTY_OPTION:
+	  suppress_blank_empty = true;
+	  break;
+
+	case SUPPRESS_COMMON_LINES_OPTION:
+	  suppress_common_lines = true;
+	  break;
+
+	case TABSIZE_OPTION:
+	  numval = strtoumax (optarg, &numend, 10);
+	  if (! (0 < numval && numval <= SIZE_MAX) || *numend)
+	    try_help ("invalid tabsize '%s'", optarg);
+	  if (tabsize != numval)
+	    {
+	      if (tabsize)
+		fatal ("conflicting tabsize options");
+	      tabsize = numval;
+	    }
+	  break;
+
+	case TO_FILE_OPTION:
+	  specify_value (&to_file, optarg, "--to-file");
+	  break;
+
+	case UNCHANGED_LINE_FORMAT_OPTION:
+	case OLD_LINE_FORMAT_OPTION:
+	case NEW_LINE_FORMAT_OPTION:
+	  specify_style (OUTPUT_IFDEF);
+	  c -= UNCHANGED_LINE_FORMAT_OPTION;
+	  specify_value (&line_format[c], optarg, line_format_option[c]);
+	  break;
+
+	case UNCHANGED_GROUP_FORMAT_OPTION:
+	case OLD_GROUP_FORMAT_OPTION:
+	case NEW_GROUP_FORMAT_OPTION:
+	case CHANGED_GROUP_FORMAT_OPTION:
+	  specify_style (OUTPUT_IFDEF);
+	  c -= UNCHANGED_GROUP_FORMAT_OPTION;
+	  specify_value (&group_format[c], optarg, group_format_option[c]);
+	  break;
+
+	default:
+	  try_help (NULL, NULL);
+	}
+      prev = c;
+    }
+
+  if (output_style == OUTPUT_UNSPECIFIED)
+    {
+      if (show_c_function)
+	{
+	  specify_style (OUTPUT_CONTEXT);
+	  if (ocontext < 0)
+	    context = 3;
+	}
+      else
+	specify_style (OUTPUT_NORMAL);
+    }
+
+  if (output_style != OUTPUT_CONTEXT || hard_locale (LC_TIME))
+    {
+#if (defined STAT_TIMESPEC || defined STAT_TIMESPEC_NS \
+     || defined HAVE_STRUCT_STAT_ST_SPARE1)
+      time_format = "%Y-%m-%d %H:%M:%S.%N %z";
+#else
+      time_format = "%Y-%m-%d %H:%M:%S %z";
+#endif
+    }
+  else
+    {
+      /* See POSIX 1003.1-2001 for this format.  */
+      time_format = "%a %b %e %T %Y";
+    }
+
+  if (0 <= ocontext
+      && (output_style == OUTPUT_CONTEXT
+	  || output_style == OUTPUT_UNIFIED)
+      && (context < ocontext
+	  || (ocontext < context && ! explicit_context)))
+    context = ocontext;
+
+  if (! tabsize)
+    tabsize = 8;
+  if (! width)
+    width = 130;
+
+  {
+    /* Maximize first the half line width, and then the gutter width,
+       according to the following constraints:
+
+	1.  Two half lines plus a gutter must fit in a line.
+	2.  If the half line width is nonzero:
+	    a.  The gutter width is at least GUTTER_WIDTH_MINIMUM.
+	    b.  If tabs are not expanded to spaces,
+		a half line plus a gutter is an integral number of tabs,
+		so that tabs in the right column line up.  */
+
+    intmax_t t = expand_tabs ? 1 : tabsize;
+    intmax_t w = width;
+    intmax_t off = (w + t + GUTTER_WIDTH_MINIMUM) / (2 * t)  *  t;
+    sdiff_half_width = MAX (0, MIN (off - GUTTER_WIDTH_MINIMUM, w - off)),
+    sdiff_column2_offset = sdiff_half_width ? off : w;
+  }
+
+  /* Make the horizon at least as large as the context, so that
+     shift_boundaries has more freedom to shift the first and last hunks.  */
+  if (horizon_lines < context)
+    horizon_lines = context;
+
+  summarize_regexp_list (&function_regexp_list);
+  summarize_regexp_list (&ignore_regexp_list);
+
+  if (output_style == OUTPUT_IFDEF)
+    {
+      for (i = 0; i < sizeof line_format / sizeof line_format[0]; i++)
+	if (!line_format[i])
+	  line_format[i] = "%l\n";
+      if (!group_format[OLD])
+	group_format[OLD]
+	  = group_format[CHANGED] ? group_format[CHANGED] : "%<";
+      if (!group_format[NEW])
+	group_format[NEW]
+	  = group_format[CHANGED] ? group_format[CHANGED] : "%>";
+      if (!group_format[UNCHANGED])
+	group_format[UNCHANGED] = "%=";
+      if (!group_format[CHANGED])
+	group_format[CHANGED] = concat (group_format[OLD],
+					group_format[NEW], "");
+    }
+
+  no_diff_means_no_output =
+    (output_style == OUTPUT_IFDEF ?
+      (!*group_format[UNCHANGED]
+       || (STREQ (group_format[UNCHANGED], "%=")
+	   && !*line_format[UNCHANGED]))
+     : (output_style != OUTPUT_SDIFF) | suppress_common_lines);
+
+  files_can_be_treated_as_binary =
+    (brief & binary
+     & ~ (ignore_blank_lines | ignore_case | strip_trailing_cr
+	  | (ignore_regexp_list.regexps || ignore_white_space)));
+
+  switch_string = option_list (argv + 1, optind - 1);
+
+  if (from_file)
+    {
+      if (to_file)
+	fatal ("--from-file and --to-file both specified");
+      else
+	for (; optind < argc; optind++)
+	  {
+	    int status = compare_files (NULL, from_file, argv[optind]);
+	    if (exit_status < status)
+	      exit_status = status;
+	  }
+    }
+  else
+    {
+      if (to_file)
+	for (; optind < argc; optind++)
+	  {
+	    int status = compare_files (NULL, argv[optind], to_file);
+	    if (exit_status < status)
+	      exit_status = status;
+	  }
+      else
+	{
+	  if (argc - optind != 2)
+	    {
+	      if (argc - optind < 2)
+		try_help ("missing operand after '%s'", argv[argc - 1]);
+	      else
+		try_help ("extra operand '%s'", argv[optind + 2]);
+	    }
+
+	  exit_status = compare_files (NULL, argv[optind], argv[optind + 1]);
+	}
+    }
+
+  /* Print any messages that were saved up for last.  */
+  print_message_queue ();
+
+  check_stdout ();
+  exit (exit_status);
+  return exit_status;
+}
+
+/* Append to REGLIST the regexp PATTERN.  */
+
+static void
+add_regexp (struct regexp_list *reglist, char const *pattern)
+{
+  size_t patlen = strlen (pattern);
+  char const *m = re_compile_pattern (pattern, patlen, reglist->buf);
+
+  if (m != 0)
+    error (0, 0, "%s: %s", pattern, m);
+  else
+    {
+      char *regexps = reglist->regexps;
+      size_t len = reglist->len;
+      bool multiple_regexps = reglist->multiple_regexps = regexps != 0;
+      size_t newlen = reglist->len = len + 2 * multiple_regexps + patlen;
+      size_t size = reglist->size;
+
+      if (size <= newlen)
+	{
+	  if (!size)
+	    size = 1;
+
+	  do size *= 2;
+	  while (size <= newlen);
+
+	  reglist->size = size;
+	  reglist->regexps = regexps = xrealloc (regexps, size);
+	}
+      if (multiple_regexps)
+	{
+	  regexps[len++] = '\\';
+	  regexps[len++] = '|';
+	}
+      memcpy (regexps + len, pattern, patlen + 1);
+    }
+}
+
+/* Ensure that REGLIST represents the disjunction of its regexps.
+   This is done here, rather than earlier, to avoid O(N^2) behavior.  */
+
+static void
+summarize_regexp_list (struct regexp_list *reglist)
+{
+  if (reglist->regexps)
+    {
+      /* At least one regexp was specified.  Allocate a fastmap for it.  */
+      reglist->buf->fastmap = xmalloc (1 << CHAR_BIT);
+      if (reglist->multiple_regexps)
+	{
+	  /* Compile the disjunction of the regexps.
+	     (If just one regexp was specified, it is already compiled.)  */
+	  char const *m = re_compile_pattern (reglist->regexps, reglist->len,
+					      reglist->buf);
+	  if (m)
+	    error (EXIT_TROUBLE, 0, "%s: %s", reglist->regexps, m);
+	}
+    }
+}
+
+static void
+try_help (char const *reason_msgid, char const *operand)
+{
+  if (reason_msgid)
+    error (0, 0, _(reason_msgid), operand);
+  error (EXIT_TROUBLE, 0, _("Try '%s --help' for more information."),
+	 program_name);
+  abort ();
+}
+
+static void
+check_stdout (void)
+{
+  if (ferror (stdout))
+    fatal ("write failed");
+  else if (fclose (stdout) != 0)
+    pfatal_with_name (_("standard output"));
+}
+
+static char const * const option_help_msgid[] = {
+  N_("Compare files line by line."),
+  "",
+  N_("-i  --ignore-case  Ignore case differences in file contents."),
+  N_("--ignore-file-name-case  Ignore case when comparing file names."),
+  N_("--no-ignore-file-name-case  Consider case when comparing file names."),
+  N_("-E  --ignore-tab-expansion  Ignore changes due to tab expansion."),
+  N_("-b  --ignore-space-change  Ignore changes in the amount of white space."),
+  N_("-w  --ignore-all-space  Ignore all white space."),
+  N_("-B  --ignore-blank-lines  Ignore changes whose lines are all blank."),
+  N_("-I RE  --ignore-matching-lines=RE  Ignore changes whose lines all match RE."),
+  N_("--strip-trailing-cr  Strip trailing carriage return on input."),
+#if O_BINARY
+  N_("--binary  Read and write data in binary mode."),
+#endif
+  N_("-a  --text  Treat all files as text."),
+  "",
+  N_("-c  -C NUM  --context[=NUM]  Output NUM (default 3) lines of copied context.\n\
+-u  -U NUM  --unified[=NUM]  Output NUM (default 3) lines of unified context.\n\
+  --label LABEL  Use LABEL instead of file name.\n\
+  -p  --show-c-function  Show which C function each change is in.\n\
+  -F RE  --show-function-line=RE  Show the most recent line matching RE."),
+  N_("-q  --brief  Output only whether files differ."),
+  N_("-e  --ed  Output an ed script."),
+  N_("--normal  Output a normal diff."),
+  N_("-n  --rcs  Output an RCS format diff."),
+  N_("-y  --side-by-side  Output in two columns.\n\
+  -W NUM  --width=NUM  Output at most NUM (default 130) print columns.\n\
+  --left-column  Output only the left column of common lines.\n\
+  --suppress-common-lines  Do not output common lines."),
+  N_("-D NAME  --ifdef=NAME  Output merged file to show '#ifdef NAME' diffs."),
+  N_("--GTYPE-group-format=GFMT  Similar, but format GTYPE input groups with GFMT."),
+  N_("--line-format=LFMT  Similar, but format all input lines with LFMT."),
+  N_("--LTYPE-line-format=LFMT  Similar, but format LTYPE input lines with LFMT."),
+  N_("  LTYPE is 'old', 'new', or 'unchanged'.  GTYPE is LTYPE or 'changed'."),
+  N_("  GFMT may contain:\n\
+    %<  lines from FILE1\n\
+    %>  lines from FILE2\n\
+    %=  lines common to FILE1 and FILE2\n\
+    %[-][WIDTH][.[PREC]]{doxX}LETTER  printf-style spec for LETTER\n\
+      LETTERs are as follows for new group, lower case for old group:\n\
+        F  first line number\n\
+        L  last line number\n\
+        N  number of lines = L-F+1\n\
+        E  F-1\n\
+        M  L+1"),
+  N_("  LFMT may contain:\n\
+    %L  contents of line\n\
+    %l  contents of line, excluding any trailing newline\n\
+    %[-][WIDTH][.[PREC]]{doxX}n  printf-style spec for input line number"),
+  N_("  Either GFMT or LFMT may contain:\n\
+    %%  %\n\
+    %c'C'  the single character C\n\
+    %c'\\OOO'  the character with octal code OOO"),
+  "",
+  N_("-l  --paginate  Pass the output through 'pr' to paginate it."),
+  N_("-t  --expand-tabs  Expand tabs to spaces in output."),
+  N_("-T  --initial-tab  Make tabs line up by prepending a tab."),
+  N_("--tabsize=NUM  Tab stops are every NUM (default 8) print columns."),
+  N_("--suppress-blank-empty  Suppress space or tab before empty output lines."),
+  "",
+  N_("-r  --recursive  Recursively compare any subdirectories found."),
+  N_("-N  --new-file  Treat absent files as empty."),
+  N_("--unidirectional-new-file  Treat absent first files as empty."),
+  N_("-s  --report-identical-files  Report when two files are the same."),
+  N_("-x PAT  --exclude=PAT  Exclude files that match PAT."),
+  N_("-X FILE  --exclude-from=FILE  Exclude files that match any pattern in FILE."),
+  N_("-S FILE  --starting-file=FILE  Start with FILE when comparing directories."),
+  N_("--from-file=FILE1  Compare FILE1 to all operands.  FILE1 can be a directory."),
+  N_("--to-file=FILE2  Compare all operands to FILE2.  FILE2 can be a directory."),
+  "",
+  N_("--horizon-lines=NUM  Keep NUM lines of the common prefix and suffix."),
+  N_("-d  --minimal  Try hard to find a smaller set of changes."),
+  N_("--speed-large-files  Assume large files and many scattered small changes."),
+  "",
+  N_("-v  --version  Output version info."),
+  N_("--help  Output this help."),
+  "",
+  N_("FILES are 'FILE1 FILE2' or 'DIR1 DIR2' or 'DIR FILE...' or 'FILE... DIR'."),
+  N_("If --from-file or --to-file is given, there are no restrictions on FILES."),
+  N_("If a FILE is '-', read standard input."),
+  N_("Exit status is 0 if inputs are the same, 1 if different, 2 if trouble."),
+  0
+};
+
+static void
+usage (void)
+{
+  char const * const *p;
+
+  printf (_("Usage: %s [OPTION]... FILES\n"), program_name);
+
+  for (p = option_help_msgid;  *p;  p++)
+    {
+      if (!**p)
+	putchar ('\n');
+      else
+	{
+	  char const *msg = _(*p);
+	  char const *nl;
+	  while ((nl = strchr (msg, '\n')))
+	    {
+	      int msglen = nl + 1 - msg;
+	      printf ("  %.*s", msglen, msg);
+	      msg = nl + 1;
+	    }
+
+	  printf ("  %s\n" + 2 * (*msg != ' ' && *msg != '-'), msg);
+	}
+    }
+  emit_bug_reporting_address ();
+}
+
+/* Set VAR to VALUE, reporting an OPTION error if this is a
+   conflict.  */
+static void
+specify_value (char const **var, char const *value, char const *option)
+{
+  if (*var && strcmp (*var, value) != 0)
+    {
+      error (0, 0, _("conflicting %s option value '%s'"), option, value);
+      try_help (NULL, NULL);
+    }
+  *var = value;
+}
+
+/* Set the output style to STYLE, diagnosing conflicts.  */
+static void
+specify_style (enum output_style style)
+{
+  if (output_style != style)
+    {
+      if (output_style != OUTPUT_UNSPECIFIED)
+	try_help ("conflicting output style options", NULL);
+      output_style = style;
+    }
+}
+
+/* Set the last-modified time of *ST to be the current time.  */
+
+static void
+set_mtime_to_now (struct stat *st)
+{
+#ifdef STAT_TIMESPEC
+  gettime (&STAT_TIMESPEC (st, st_mtim));
+#else
+  struct timespec t;
+  gettime (&t);
+  st->st_mtime = t.tv_sec;
+# if defined STAT_TIMESPEC_NS
+  STAT_TIMESPEC_NS (st, st_mtim) = t.tv_nsec;
+# elif defined HAVE_STRUCT_STAT_ST_SPARE1
+  st->st_spare1 = t.tv_nsec / 1000;
+# endif
+#endif
+}
+
+/* Compare two files (or dirs) with parent comparison PARENT
+   and names NAME0 and NAME1.
+   (If PARENT is null, then the first name is just NAME0, etc.)
+   This is self-contained; it opens the files and closes them.
+
+   Value is EXIT_SUCCESS if files are the same, EXIT_FAILURE if
+   different, EXIT_TROUBLE if there is a problem opening them.  */
+
+static int
+compare_files (struct comparison const *parent,
+	       char const *name0,
+	       char const *name1)
+{
+  struct comparison cmp;
+#define DIR_P(f) (S_ISDIR (cmp.file[f].stat.st_mode) != 0)
+  register int f;
+  int status = EXIT_SUCCESS;
+  bool same_files;
+  char *free0;
+  char *free1;
+
+  /* If this is directory comparison, perhaps we have a file
+     that exists only in one of the directories.
+     If so, just print a message to that effect.  */
+
+  if (! ((name0 && name1)
+	 || (unidirectional_new_file && name1)
+	 || new_file))
+    {
+      char const *name = name0 ? name0 : name1;
+      char const *dir = parent->file[!name0].name;
+
+      /* See POSIX 1003.1-2001 for this format.  */
+      message ("Only in %s: %s\n", dir, name);
+
+      /* Return EXIT_FAILURE so that diff_dirs will return
+	 EXIT_FAILURE ("some files differ").  */
+      return EXIT_FAILURE;
+    }
+
+  memset (cmp.file, 0, sizeof cmp.file);
+  cmp.parent = parent;
+
+  /* cmp.file[f].desc markers */
+#define NONEXISTENT (-1) /* nonexistent file */
+#define UNOPENED (-2) /* unopened file (e.g. directory) */
+#define ERRNO_ENCODE(errno) (-3 - (errno)) /* encoded errno value */
+
+#define ERRNO_DECODE(desc) (-3 - (desc)) /* inverse of ERRNO_ENCODE */
+
+  cmp.file[0].desc = name0 ? UNOPENED : NONEXISTENT;
+  cmp.file[1].desc = name1 ? UNOPENED : NONEXISTENT;
+
+  /* Now record the full name of each file, including nonexistent ones.  */
+
+  if (!name0)
+    name0 = name1;
+  if (!name1)
+    name1 = name0;
+
+  if (!parent)
+    {
+      free0 = NULL;
+      free1 = NULL;
+      cmp.file[0].name = name0;
+      cmp.file[1].name = name1;
+    }
+  else
+    {
+      cmp.file[0].name = free0
+	= dir_file_pathname (parent->file[0].name, name0);
+      cmp.file[1].name = free1
+	= dir_file_pathname (parent->file[1].name, name1);
+    }
+
+  /* Stat the files.  */
+
+  for (f = 0; f < 2; f++)
+    {
+      if (cmp.file[f].desc != NONEXISTENT)
+	{
+	  if (f && file_name_cmp (cmp.file[f].name, cmp.file[0].name) == 0)
+	    {
+	      cmp.file[f].desc = cmp.file[0].desc;
+	      cmp.file[f].stat = cmp.file[0].stat;
+	    }
+	  else if (STREQ (cmp.file[f].name, "-"))
+	    {
+	      cmp.file[f].desc = STDIN_FILENO;
+	      if (O_BINARY && binary && ! isatty (STDIN_FILENO))
+		xfreopen (NULL, "rb", stdin);
+	      if (fstat (STDIN_FILENO, &cmp.file[f].stat) != 0)
+		cmp.file[f].desc = ERRNO_ENCODE (errno);
+	      else
+		{
+		  if (S_ISREG (cmp.file[f].stat.st_mode))
+		    {
+		      off_t pos = lseek (STDIN_FILENO, 0, SEEK_CUR);
+		      if (pos < 0)
+			cmp.file[f].desc = ERRNO_ENCODE (errno);
+		      else
+			cmp.file[f].stat.st_size =
+			  MAX (0, cmp.file[f].stat.st_size - pos);
+		    }
+
+		  /* POSIX 1003.1-2001 requires current time for
+		     stdin.  */
+		  set_mtime_to_now (&cmp.file[f].stat);
+		}
+	    }
+	  else if (stat (cmp.file[f].name, &cmp.file[f].stat) != 0)
+	    cmp.file[f].desc = ERRNO_ENCODE (errno);
+	}
+    }
+
+  /* Mark files as nonexistent as needed for -N and -P, if they are
+     inaccessible empty regular files (the kind of files that 'patch'
+     creates to indicate nonexistent backups), or if they are
+     top-level files that do not exist but their counterparts do
+     exist.  */
+  for (f = 0; f < 2; f++)
+    if ((new_file || (f == 0 && unidirectional_new_file))
+	&& (cmp.file[f].desc == UNOPENED
+	    ? (S_ISREG (cmp.file[f].stat.st_mode)
+	       && ! (cmp.file[f].stat.st_mode & (S_IRWXU | S_IRWXG | S_IRWXO))
+	       && cmp.file[f].stat.st_size == 0)
+	    : (cmp.file[f].desc == ERRNO_ENCODE (ENOENT)
+	       && ! parent
+	       && cmp.file[1 - f].desc == UNOPENED)))
+      cmp.file[f].desc = NONEXISTENT;
+
+  for (f = 0; f < 2; f++)
+    if (cmp.file[f].desc == NONEXISTENT)
+      {
+	memset (&cmp.file[f].stat, 0, sizeof cmp.file[f].stat);
+	cmp.file[f].stat.st_mode = cmp.file[1 - f].stat.st_mode;
+      }
+
+  for (f = 0; f < 2; f++)
+    {
+      int e = ERRNO_DECODE (cmp.file[f].desc);
+      if (0 <= e)
+	{
+	  errno = e;
+	  perror_with_name (cmp.file[f].name);
+	  status = EXIT_TROUBLE;
+	}
+    }
+
+  if (status == EXIT_SUCCESS && ! parent && DIR_P (0) != DIR_P (1))
+    {
+      /* If one is a directory, and it was specified in the command line,
+	 use the file in that dir with the other file's basename.  */
+
+      int fnm_arg = DIR_P (0);
+      int dir_arg = 1 - fnm_arg;
+      char const *fnm = cmp.file[fnm_arg].name;
+      char const *dir = cmp.file[dir_arg].name;
+      char const *filename = cmp.file[dir_arg].name = free0
+	= dir_file_pathname (dir, last_component (fnm));
+
+      if (STREQ (fnm, "-"))
+	fatal ("cannot compare '-' to a directory");
+
+      if (stat (filename, &cmp.file[dir_arg].stat) != 0)
+	{
+	  perror_with_name (filename);
+	  status = EXIT_TROUBLE;
+	}
+    }
+
+  if (status != EXIT_SUCCESS)
+    {
+      /* One of the files should exist but does not.  */
+    }
+  else if (cmp.file[0].desc == NONEXISTENT
+	   && cmp.file[1].desc == NONEXISTENT)
+    {
+      /* Neither file "exists", so there's nothing to compare.  */
+    }
+  else if ((same_files
+	    = (cmp.file[0].desc != NONEXISTENT
+	       && cmp.file[1].desc != NONEXISTENT
+	       && 0 < same_file (&cmp.file[0].stat, &cmp.file[1].stat)
+	       && same_file_attributes (&cmp.file[0].stat,
+					&cmp.file[1].stat)))
+	   && no_diff_means_no_output)
+    {
+      /* The two named files are actually the same physical file.
+	 We know they are identical without actually reading them.  */
+    }
+  else if (DIR_P (0) & DIR_P (1))
+    {
+      if (output_style == OUTPUT_IFDEF)
+	fatal ("-D option not supported with directories");
+
+      /* If both are directories, compare the files in them.  */
+
+      if (parent && !recursive)
+	{
+	  /* But don't compare dir contents one level down
+	     unless -r was specified.
+	     See POSIX 1003.1-2001 for this format.  */
+	  message ("Common subdirectories: %s and %s\n",
+		   cmp.file[0].name, cmp.file[1].name);
+	}
+      else
+	status = diff_dirs (&cmp, compare_files);
+    }
+  else if ((DIR_P (0) | DIR_P (1))
+	   || (parent
+	       && (! S_ISREG (cmp.file[0].stat.st_mode)
+		   || ! S_ISREG (cmp.file[1].stat.st_mode))))
+    {
+      if (cmp.file[0].desc == NONEXISTENT || cmp.file[1].desc == NONEXISTENT)
+	{
+	  /* We have a subdirectory that exists only in one directory.  */
+
+	  if ((DIR_P (0) | DIR_P (1))
+	      && recursive
+	      && (new_file
+		  || (unidirectional_new_file
+		      && cmp.file[0].desc == NONEXISTENT)))
+	    status = diff_dirs (&cmp, compare_files);
+	  else
+	    {
+	      char const *dir;
+
+	      /* PARENT must be non-NULL here.  */
+	      assert (parent);
+	      dir = parent->file[cmp.file[0].desc == NONEXISTENT].name;
+
+	      /* See POSIX 1003.1-2001 for this format.  */
+	      message ("Only in %s: %s\n", dir, name0);
+
+	      status = EXIT_FAILURE;
+	    }
+	}
+      else
+	{
+	  /* We have two files that are not to be compared.  */
+
+	  /* See POSIX 1003.1-2001 for this format.  */
+	  message5 ("File %s is a %s while file %s is a %s\n",
+		    file_label[0] ? file_label[0] : cmp.file[0].name,
+		    file_type (&cmp.file[0].stat),
+		    file_label[1] ? file_label[1] : cmp.file[1].name,
+		    file_type (&cmp.file[1].stat));
+
+	  /* This is a difference.  */
+	  status = EXIT_FAILURE;
+	}
+    }
+  else if (files_can_be_treated_as_binary
+	   && S_ISREG (cmp.file[0].stat.st_mode)
+	   && S_ISREG (cmp.file[1].stat.st_mode)
+	   && cmp.file[0].stat.st_size != cmp.file[1].stat.st_size)
+    {
+      message ("Files %s and %s differ\n",
+	       file_label[0] ? file_label[0] : cmp.file[0].name,
+	       file_label[1] ? file_label[1] : cmp.file[1].name);
+      status = EXIT_FAILURE;
+    }
+  else
+    {
+      /* Both exist and neither is a directory.  */
+
+      /* Open the files and record their descriptors.  */
+
+      int oflags = O_RDONLY | (binary ? O_BINARY : 0);
+
+      if (cmp.file[0].desc == UNOPENED)
+	if ((cmp.file[0].desc = open (cmp.file[0].name, oflags, 0)) < 0)
+	  {
+	    perror_with_name (cmp.file[0].name);
+	    status = EXIT_TROUBLE;
+	  }
+      if (cmp.file[1].desc == UNOPENED)
+	{
+	  if (same_files)
+	    cmp.file[1].desc = cmp.file[0].desc;
+	  else if ((cmp.file[1].desc = open (cmp.file[1].name, oflags, 0)) < 0)
+	    {
+	      perror_with_name (cmp.file[1].name);
+	      status = EXIT_TROUBLE;
+	    }
+	}
+
+      /* Compare the files, if no error was found.  */
+
+      if (status == EXIT_SUCCESS)
+	status = diff_2_files (&cmp);
+
+      /* Close the file descriptors.  */
+
+      if (0 <= cmp.file[0].desc && close (cmp.file[0].desc) != 0)
+	{
+	  perror_with_name (cmp.file[0].name);
+	  status = EXIT_TROUBLE;
+	}
+      if (0 <= cmp.file[1].desc && cmp.file[0].desc != cmp.file[1].desc
+	  && close (cmp.file[1].desc) != 0)
+	{
+	  perror_with_name (cmp.file[1].name);
+	  status = EXIT_TROUBLE;
+	}
+    }
+
+  /* Now the comparison has been done, if no error prevented it,
+     and STATUS is the value this function will return.  */
+
+  if (status == EXIT_SUCCESS)
+    {
+      if (report_identical_files && !DIR_P (0))
+	message ("Files %s and %s are identical\n",
+		 file_label[0] ? file_label[0] : cmp.file[0].name,
+		 file_label[1] ? file_label[1] : cmp.file[1].name);
+    }
+  else
+    {
+      /* Flush stdout so that the user sees differences immediately.
+	 This can hurt performance, unfortunately.  */
+      if (fflush (stdout) != 0)
+	pfatal_with_name (_("standard output"));
+    }
+
+  free (free0);
+  free (free1);
+
+  return status;
+}
diff --git a/src/diff3.c.orig b/src/diff3.c.orig
new file mode 100644
index 0000000..fbfb28b
--- /dev/null
+++ b/src/diff3.c.orig
@@ -0,0 +1,1747 @@
+/* diff3 - compare three files line by line
+
+   Copyright (C) 1988-1989, 1992-1996, 1998, 2001-2002, 2004, 2006, 2009-2010
+   Free Software Foundation, Inc.
+
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+#include "system.h"
+#include "paths.h"
+
+#include <stdio.h>
+#include <unlocked-io.h>
+
+#include <c-stack.h>
+#include <cmpbuf.h>
+#include <error.h>
+#include <exitfail.h>
+#include <file-type.h>
+#include <getopt.h>
+#include <inttostr.h>
+#include <progname.h>
+#include <sh-quote.h>
+#include <version-etc.h>
+#include <xalloc.h>
+#include <xfreopen.h>
+
+/* The official name of this program (e.g., no `g' prefix).  */
+#define PROGRAM_NAME "diff3"
+
+#define AUTHORS \
+  proper_name ("Randy Smith")
+
+/* Internal data structures and macros for the diff3 program; includes
+   data structures for both diff3 diffs and normal diffs.  */
+
+/* Different files within a three way diff.  */
+#define	FILE0	0
+#define	FILE1	1
+#define	FILE2	2
+
+/* A three way diff is built from two two-way diffs; the file which
+   the two two-way diffs share is:  */
+#define	FILEC	FILE2
+
+/* Different files within a two way diff.
+   FC is the common file, FO the other file.  */
+#define FO 0
+#define FC 1
+
+/* The ranges are indexed by */
+#define	RANGE_START	0
+#define	RANGE_END	1
+
+enum diff_type {
+  ERROR,			/* Should not be used */
+  ADD,				/* Two way diff add */
+  CHANGE,			/* Two way diff change */
+  DELETE,			/* Two way diff delete */
+  DIFF_ALL,			/* All three are different */
+  DIFF_1ST,			/* Only the first is different */
+  DIFF_2ND,			/* Only the second */
+  DIFF_3RD			/* Only the third */
+};
+
+/* Two way diff */
+struct diff_block {
+  lin ranges[2][2];		/* Ranges are inclusive */
+  char **lines[2];		/* The actual lines (may contain nulls) */
+  size_t *lengths[2];		/* Line lengths (including newlines, if any) */
+  struct diff_block *next;
+};
+
+/* Three way diff */
+
+struct diff3_block {
+  enum diff_type correspond;	/* Type of diff */
+  lin ranges[3][2];		/* Ranges are inclusive */
+  char **lines[3];		/* The actual lines (may contain nulls) */
+  size_t *lengths[3];		/* Line lengths (including newlines, if any) */
+  struct diff3_block *next;
+};
+
+/* Access the ranges on a diff block.  */
+#define	D_LOWLINE(diff, filenum)	\
+  ((diff)->ranges[filenum][RANGE_START])
+#define	D_HIGHLINE(diff, filenum)	\
+  ((diff)->ranges[filenum][RANGE_END])
+#define	D_NUMLINES(diff, filenum)	\
+  (D_HIGHLINE (diff, filenum) - D_LOWLINE (diff, filenum) + 1)
+
+/* Access the line numbers in a file in a diff by relative line
+   numbers (i.e. line number within the diff itself).  Note that these
+   are lvalues and can be used for assignment.  */
+#define	D_RELNUM(diff, filenum, linenum)	\
+  ((diff)->lines[filenum][linenum])
+#define	D_RELLEN(diff, filenum, linenum)	\
+  ((diff)->lengths[filenum][linenum])
+
+/* And get at them directly, when that should be necessary.  */
+#define	D_LINEARRAY(diff, filenum)	\
+  ((diff)->lines[filenum])
+#define	D_LENARRAY(diff, filenum)	\
+  ((diff)->lengths[filenum])
+
+/* Next block.  */
+#define	D_NEXT(diff)	((diff)->next)
+
+/* Access the type of a diff3 block.  */
+#define	D3_TYPE(diff)	((diff)->correspond)
+
+/* Line mappings based on diffs.  The first maps off the top of the
+   diff, the second off of the bottom.  */
+#define	D_HIGH_MAPLINE(diff, fromfile, tofile, linenum)	\
+  ((linenum)						\
+   - D_HIGHLINE ((diff), (fromfile))			\
+   + D_HIGHLINE ((diff), (tofile)))
+
+#define	D_LOW_MAPLINE(diff, fromfile, tofile, linenum)	\
+  ((linenum)						\
+   - D_LOWLINE ((diff), (fromfile))			\
+   + D_LOWLINE ((diff), (tofile)))
+
+/* Options variables for flags set on command line.  */
+
+/* If nonzero, treat all files as text files, never as binary.  */
+static bool text;
+
+/* Remove trailing carriage returns from input.  */
+static bool strip_trailing_cr;
+
+/* If nonzero, write out an ed script instead of the standard diff3 format.  */
+static bool edscript;
+
+/* If nonzero, in the case of overlapping diffs (type DIFF_ALL),
+   preserve the lines which would normally be deleted from
+   file 1 with a special flagging mechanism.  */
+static bool flagging;
+
+/* Use a tab to align output lines (-T).  */
+static bool initial_tab;
+
+/* If nonzero, do not output information for overlapping diffs.  */
+static bool simple_only;
+
+/* If nonzero, do not output information for non-overlapping diffs.  */
+static bool overlap_only;
+
+/* If nonzero, show information for DIFF_2ND diffs.  */
+static bool show_2nd;
+
+/* If nonzero, include `:wq' at the end of the script
+   to write out the file being edited.   */
+static bool finalwrite;
+
+/* If nonzero, output a merged file.  */
+static bool merge;
+
+static char *read_diff (char const *, char const *, char **);
+static char *scan_diff_line (char *, char **, size_t *, char *, char);
+static enum diff_type process_diff_control (char **, struct diff_block *);
+static bool compare_line_list (char * const[], size_t const[], char * const[], size_t const[], lin);
+static bool copy_stringlist (char * const[], size_t const[], char *[], size_t[], lin);
+static bool output_diff3_edscript (FILE *, struct diff3_block *, int const[3], int const[3], char const *, char const *, char const *);
+static bool output_diff3_merge (FILE *, FILE *, struct diff3_block *, int const[3], int const[3], char const *, char const *, char const *);
+static struct diff3_block *create_diff3_block (lin, lin, lin, lin, lin, lin);
+static struct diff3_block *make_3way_diff (struct diff_block *, struct diff_block *);
+static struct diff3_block *reverse_diff3_blocklist (struct diff3_block *);
+static struct diff3_block *using_to_diff3_block (struct diff_block *[2], struct diff_block *[2], int, int, struct diff3_block const *);
+static struct diff_block *process_diff (char const *, char const *, struct diff_block **);
+static void check_stdout (void);
+static void fatal (char const *) __attribute__((noreturn));
+static void output_diff3 (FILE *, struct diff3_block *, int const[3], int const[3]);
+static void perror_with_exit (char const *) __attribute__((noreturn));
+static void try_help (char const *, char const *) __attribute__((noreturn));
+static void usage (void);
+
+static char const *diff_program = DEFAULT_DIFF_PROGRAM;
+
+/* Values for long options that do not have single-letter equivalents.  */
+enum
+{
+  DIFF_PROGRAM_OPTION = CHAR_MAX + 1,
+  HELP_OPTION,
+  STRIP_TRAILING_CR_OPTION
+};
+
+static struct option const longopts[] =
+{
+  {"diff-program", 1, 0, DIFF_PROGRAM_OPTION},
+  {"easy-only", 0, 0, '3'},
+  {"ed", 0, 0, 'e'},
+  {"help", 0, 0, HELP_OPTION},
+  {"initial-tab", 0, 0, 'T'},
+  {"label", 1, 0, 'L'},
+  {"merge", 0, 0, 'm'},
+  {"overlap-only", 0, 0, 'x'},
+  {"show-all", 0, 0, 'A'},
+  {"show-overlap", 0, 0, 'E'},
+  {"strip-trailing-cr", 0, 0, STRIP_TRAILING_CR_OPTION},
+  {"text", 0, 0, 'a'},
+  {"version", 0, 0, 'v'},
+  {0, 0, 0, 0}
+};
+
+int
+main (int argc, char **argv)
+{
+  int c, i;
+  int common;
+  int mapping[3];
+  int rev_mapping[3];
+  int incompat = 0;
+  bool conflicts_found;
+  struct diff_block *thread0, *thread1, *last_block;
+  struct diff3_block *diff3;
+  int tag_count = 0;
+  char *tag_strings[3];
+  char *commonname;
+  char **file;
+  struct stat statb;
+
+  exit_failure = EXIT_TROUBLE;
+  initialize_main (&argc, &argv);
+  set_program_name (argv[0]);
+  setlocale (LC_ALL, "");
+  bindtextdomain (PACKAGE, LOCALEDIR);
+  textdomain (PACKAGE);
+  c_stack_action (0);
+
+  while ((c = getopt_long (argc, argv, "aeimvx3AEL:TX", longopts, 0)) != -1)
+    {
+      switch (c)
+	{
+	case 'a':
+	  text = true;
+	  break;
+	case 'A':
+	  show_2nd = true;
+	  flagging = true;
+	  incompat++;
+	  break;
+	case 'x':
+	  overlap_only = true;
+	  incompat++;
+	  break;
+	case '3':
+	  simple_only = true;
+	  incompat++;
+	  break;
+	case 'i':
+	  finalwrite = true;
+	  break;
+	case 'm':
+	  merge = true;
+	  break;
+	case 'X':
+	  overlap_only = true;
+	  /* Fall through.  */
+	case 'E':
+	  flagging = true;
+	  /* Fall through.  */
+	case 'e':
+	  incompat++;
+	  break;
+	case 'T':
+	  initial_tab = true;
+	  break;
+	case STRIP_TRAILING_CR_OPTION:
+	  strip_trailing_cr = true;
+	  break;
+	case 'v':
+	  version_etc (stdout, PROGRAM_NAME, PACKAGE_NAME, PACKAGE_VERSION,
+		       AUTHORS, (char *) NULL);
+	  check_stdout ();
+	  return EXIT_SUCCESS;
+	case DIFF_PROGRAM_OPTION:
+	  diff_program = optarg;
+	  break;
+	case HELP_OPTION:
+	  usage ();
+	  check_stdout ();
+	  return EXIT_SUCCESS;
+	case 'L':
+	  /* Handle up to three -L options.  */
+	  if (tag_count < 3)
+	    {
+	      tag_strings[tag_count++] = optarg;
+	      break;
+	    }
+	  try_help ("too many file label options", 0);
+	default:
+	  try_help (0, 0);
+	}
+    }
+
+  edscript = incompat & ~merge;  /* -AeExX3 without -m implies ed script.  */
+  show_2nd |= ~incompat & merge;  /* -m without -AeExX3 implies -A.  */
+  flagging |= ~incompat & merge;
+
+  if (incompat > 1  /* Ensure at most one of -AeExX3.  */
+      || finalwrite & merge /* -i -m would rewrite input file.  */
+      || (tag_count && ! flagging)) /* -L requires one of -AEX.  */
+    try_help ("incompatible options", 0);
+
+  if (argc - optind != 3)
+    {
+      if (argc - optind < 3)
+	try_help ("missing operand after '%s'", argv[argc - 1]);
+      else
+	try_help ("extra operand '%s'", argv[optind + 3]);
+    }
+
+  file = &argv[optind];
+
+  for (i = tag_count; i < 3; i++)
+    tag_strings[i] = file[i];
+
+  /* Always compare file1 to file2, even if file2 is "-".
+     This is needed for -mAeExX3.  Using the file0 as
+     the common file would produce wrong results, because if the
+     file0-file1 diffs didn't line up with the file0-file2 diffs
+     (which is entirely possible since we don't use diff's -n option),
+     diff3 might report phantom changes from file1 to file2.
+
+     Also, try to compare file0 to file1, because this is where
+     changes are expected to come from.  Diffing between these pairs
+     of files is more likely to avoid phantom changes from file0 to file1.
+
+     Historically, the default common file was file2, so some older
+     applications (e.g. Emacs ediff) used file2 as the ancestor.  So,
+     for compatibility, if this is a 3-way diff (not a merge or
+     edscript), prefer file2 as the common file.  */
+
+  common = 2 - (edscript | merge);
+
+  if (STREQ (file[common], "-"))
+    {
+      /* Sigh.  We've got standard input as the common file.  We can't
+	 call diff twice on stdin.  Use the other arg as the common
+	 file instead.  */
+      common = 3 - common;
+      if (STREQ (file[0], "-") || STREQ (file[common], "-"))
+	fatal ("'-' specified for more than one input file");
+    }
+
+  mapping[0] = 0;
+  mapping[1] = 3 - common;
+  mapping[2] = common;
+
+  for (i = 0; i < 3; i++)
+    rev_mapping[mapping[i]] = i;
+
+  for (i = 0; i < 3; i++)
+    if (strcmp (file[i], "-") != 0)
+      {
+	if (stat (file[i], &statb) < 0)
+	  perror_with_exit (file[i]);
+	else if (S_ISDIR (statb.st_mode))
+	  error (EXIT_TROUBLE, EISDIR, "%s", file[i]);
+      }
+
+#ifdef SIGCHLD
+  /* System V fork+wait does not work if SIGCHLD is ignored.  */
+  signal (SIGCHLD, SIG_DFL);
+#endif
+
+  /* Invoke diff twice on two pairs of input files, combine the two
+     diffs, and output them.  */
+
+  commonname = file[rev_mapping[FILEC]];
+  thread1 = process_diff (file[rev_mapping[FILE1]], commonname, &last_block);
+  thread0 = process_diff (file[rev_mapping[FILE0]], commonname, &last_block);
+  diff3 = make_3way_diff (thread0, thread1);
+  if (edscript)
+    conflicts_found
+      = output_diff3_edscript (stdout, diff3, mapping, rev_mapping,
+			       tag_strings[0], tag_strings[1], tag_strings[2]);
+  else if (merge)
+    {
+      xfreopen (file[rev_mapping[FILE0]], "r", stdin);
+      conflicts_found
+	= output_diff3_merge (stdin, stdout, diff3, mapping, rev_mapping,
+			      tag_strings[0], tag_strings[1], tag_strings[2]);
+      if (ferror (stdin))
+	fatal ("read failed");
+    }
+  else
+    {
+      output_diff3 (stdout, diff3, mapping, rev_mapping);
+      conflicts_found = false;
+    }
+
+  check_stdout ();
+  exit (conflicts_found);
+  return conflicts_found;
+}
+
+static void
+try_help (char const *reason_msgid, char const *operand)
+{
+  if (reason_msgid)
+    error (0, 0, _(reason_msgid), operand);
+  error (EXIT_TROUBLE, 0,
+	 _("Try '%s --help' for more information."), program_name);
+  abort ();
+}
+
+static void
+check_stdout (void)
+{
+  if (ferror (stdout))
+    fatal ("write failed");
+  else if (fclose (stdout) != 0)
+    perror_with_exit (_("standard output"));
+}
+
+static char const * const option_help_msgid[] = {
+  N_("-e  --ed  Output unmerged changes from OLDFILE to YOURFILE into MYFILE."),
+  N_("-E  --show-overlap  Output unmerged changes, bracketing conflicts."),
+  N_("-A  --show-all  Output all changes, bracketing conflicts."),
+  N_("-x  --overlap-only  Output overlapping changes."),
+  N_("-X  Output overlapping changes, bracketing them."),
+  N_("-3  --easy-only  Output unmerged nonoverlapping changes."),
+  "",
+  N_("-m  --merge  Output merged file instead of ed script (default -A)."),
+  N_("-L LABEL  --label=LABEL  Use LABEL instead of file name."),
+  N_("-i  Append 'w' and 'q' commands to ed scripts."),
+  N_("-a  --text  Treat all files as text."),
+  N_("--strip-trailing-cr  Strip trailing carriage return on input."),
+  N_("-T  --initial-tab  Make tabs line up by prepending a tab."),
+  N_("--diff-program=PROGRAM  Use PROGRAM to compare files."),
+  "",
+  N_("-v  --version  Output version info."),
+  N_("--help  Output this help."),
+  0
+};
+
+static void
+usage (void)
+{
+  char const * const *p;
+
+  printf (_("Usage: %s [OPTION]... MYFILE OLDFILE YOURFILE\n"),
+	  program_name);
+  printf ("%s\n\n", _("Compare three files line by line."));
+  for (p = option_help_msgid;  *p;  p++)
+    if (**p)
+      printf ("  %s\n", _(*p));
+    else
+      putchar ('\n');
+  printf ("\n%s\n%s\n",
+	  _("If a FILE is '-', read standard input."),
+	  _("Exit status is 0 if successful, 1 if conflicts, 2 if trouble."));
+  emit_bug_reporting_address ();
+}
+
+/* Combine the two diffs together into one.
+   Here is the algorithm:
+
+     File2 is shared in common between the two diffs.
+     Diff02 is the diff between 0 and 2.
+     Diff12 is the diff between 1 and 2.
+
+	1) Find the range for the first block in File2.
+	    a) Take the lowest of the two ranges (in File2) in the two
+	       current blocks (one from each diff) as being the low
+	       water mark.  Assign the upper end of this block as
+	       being the high water mark and move the current block up
+	       one.  Mark the block just moved over as to be used.
+	    b) Check the next block in the diff that the high water
+	       mark is *not* from.
+
+	       *If* the high water mark is above
+	       the low end of the range in that block,
+
+		   mark that block as to be used and move the current
+		   block up.  Set the high water mark to the max of
+		   the high end of this block and the current.  Repeat b.
+
+	 2) Find the corresponding ranges in File0 (from the blocks
+	    in diff02; line per line outside of diffs) and in File1.
+	    Create a diff3_block, reserving space as indicated by the ranges.
+
+	 3) Copy all of the pointers for file2 in.  At least for now,
+	    do memcmp's between corresponding strings in the two diffs.
+
+	 4) Copy all of the pointers for file0 and 1 in.  Get what is
+	    needed from file2 (when there isn't a diff block, it's
+	    identical to file2 within the range between diff blocks).
+
+	 5) If the diff blocks used came from only one of the two
+	    strings of diffs, then that file (i.e. the one other than
+	    the common file in that diff) is the odd person out.  If
+	    diff blocks are used from both sets, check to see if files
+	    0 and 1 match:
+
+		Same number of lines?  If so, do a set of memcmp's (if
+	    a memcmp matches; copy the pointer over; it'll be easier
+	    later during comparisons).  If they match, 0 & 1 are the
+	    same.  If not, all three different.
+
+     Then do it again, until the blocks are exhausted.  */
+
+
+/* Make a three way diff (chain of diff3_block's) from two two way
+   diffs (chains of diff_block's).  Assume that each of the two diffs
+   passed are onto the same file (i.e. that each of the diffs were
+   made "to" the same file).  Return a three way diff pointer with
+   numbering FILE0 = the other file in diff02, FILE1 = the other file
+   in diff12, and FILEC = the common file.  */
+
+static struct diff3_block *
+make_3way_diff (struct diff_block *thread0, struct diff_block *thread1)
+{
+  /* Work on the two diffs passed to it as threads.  Thread number 0
+     is diff02, thread number 1 is diff12.  USING is the base of the
+     list of blocks to be used to construct each block of the three
+     way diff; if no blocks from a particular thread are to be used,
+     that element of USING is 0.  LAST_USING contains the last
+     elements on each of the using lists.
+
+     HIGH_WATER_MARK is the highest line number in the common file
+     described in any of the diffs in either of the USING lists.
+     HIGH_WATER_THREAD names the thread.  Similarly BASE_WATER_MARK
+     and BASE_WATER_THREAD describe the lowest line number in the
+     common file described in any of the diffs in either of the USING
+     lists.  HIGH_WATER_DIFF is the diff from which the
+     HIGH_WATER_MARK was taken.
+
+     HIGH_WATER_DIFF should always be equal to
+     LAST_USING[HIGH_WATER_THREAD].  OTHER_DIFF is the next diff to
+     check for higher water, and should always be equal to
+     CURRENT[HIGH_WATER_THREAD ^ 1].  OTHER_THREAD is the thread in
+     which the OTHER_DIFF is, and hence should always be equal to
+     HIGH_WATER_THREAD ^ 1.
+
+     LAST_DIFF is the last diff block produced by this routine, for
+     line correspondence purposes between that diff and the one
+     currently being worked on.  It is ZERO_DIFF before any blocks
+     have been created.  */
+
+  struct diff_block *using[2];
+  struct diff_block *last_using[2];
+  struct diff_block *current[2];
+
+  lin high_water_mark;
+
+  int high_water_thread;
+  int base_water_thread;
+  int other_thread;
+
+  struct diff_block *high_water_diff;
+  struct diff_block *other_diff;
+
+  struct diff3_block *result;
+  struct diff3_block *tmpblock;
+  struct diff3_block **result_end;
+
+  struct diff3_block const *last_diff3;
+
+  static struct diff3_block const zero_diff3;
+
+  /* Initialization */
+  result = 0;
+  result_end = &result;
+  current[0] = thread0; current[1] = thread1;
+  last_diff3 = &zero_diff3;
+
+  /* Sniff up the threads until we reach the end */
+
+  while (current[0] || current[1])
+    {
+      using[0] = using[1] = last_using[0] = last_using[1] = 0;
+
+      /* Setup low and high water threads, diffs, and marks.  */
+      if (!current[0])
+	base_water_thread = 1;
+      else if (!current[1])
+	base_water_thread = 0;
+      else
+	base_water_thread =
+	  (D_LOWLINE (current[0], FC) > D_LOWLINE (current[1], FC));
+
+      high_water_thread = base_water_thread;
+
+      high_water_diff = current[high_water_thread];
+
+      high_water_mark = D_HIGHLINE (high_water_diff, FC);
+
+      /* Make the diff you just got info from into the using class */
+      using[high_water_thread]
+	= last_using[high_water_thread]
+	= high_water_diff;
+      current[high_water_thread] = high_water_diff->next;
+      last_using[high_water_thread]->next = 0;
+
+      /* And mark the other diff */
+      other_thread = high_water_thread ^ 0x1;
+      other_diff = current[other_thread];
+
+      /* Shuffle up the ladder, checking the other diff to see if it
+	 needs to be incorporated.  */
+      while (other_diff
+	     && D_LOWLINE (other_diff, FC) <= high_water_mark + 1)
+	{
+
+	  /* Incorporate this diff into the using list.  Note that
+	     this doesn't take it off the current list */
+	  if (using[other_thread])
+	    last_using[other_thread]->next = other_diff;
+	  else
+	    using[other_thread] = other_diff;
+	  last_using[other_thread] = other_diff;
+
+	  /* Take it off the current list.  Note that this following
+	     code assumes that other_diff enters it equal to
+	     current[high_water_thread ^ 0x1] */
+	  current[other_thread] = current[other_thread]->next;
+	  other_diff->next = 0;
+
+	  /* Set the high_water stuff
+	     If this comparison is equal, then this is the last pass
+	     through this loop; since diff blocks within a given
+	     thread cannot overlap, the high_water_mark will be
+	     *below* the range_start of either of the next diffs.  */
+
+	  if (high_water_mark < D_HIGHLINE (other_diff, FC))
+	    {
+	      high_water_thread ^= 1;
+	      high_water_mark = D_HIGHLINE (other_diff, FC);
+	    }
+
+	  /* Set the other diff */
+	  other_thread = high_water_thread ^ 0x1;
+	  other_diff = current[other_thread];
+	}
+
+      /* The using lists contain a list of all of the blocks to be
+	 included in this diff3_block.  Create it.  */
+
+      tmpblock = using_to_diff3_block (using, last_using,
+				       base_water_thread, high_water_thread,
+				       last_diff3);
+
+      if (!tmpblock)
+	fatal ("internal error: screwup in format of diff blocks");
+
+      /* Put it on the list.  */
+      *result_end = tmpblock;
+      result_end = &tmpblock->next;
+
+      /* Set up corresponding lines correctly.  */
+      last_diff3 = tmpblock;
+    }
+  return result;
+}
+
+/* Take two lists of blocks (from two separate diff threads) and put
+   them together into one diff3 block.  Return a pointer to this diff3
+   block or 0 for failure.
+
+   All arguments besides using are for the convenience of the routine;
+   they could be derived from the using array.  LAST_USING is a pair
+   of pointers to the last blocks in the using structure.  LOW_THREAD
+   and HIGH_THREAD tell which threads contain the lowest and highest
+   line numbers for File0.  LAST_DIFF3 contains the last diff produced
+   in the calling routine.  This is used for lines mappings that
+   would still be identical to the state that diff ended in.
+
+   A distinction should be made in this routine between the two diffs
+   that are part of a normal two diff block, and the three diffs that
+   are part of a diff3_block.  */
+
+static struct diff3_block *
+using_to_diff3_block (struct diff_block *using[2],
+		      struct diff_block *last_using[2],
+		      int low_thread, int high_thread,
+		      struct diff3_block const *last_diff3)
+{
+  lin low[2], high[2];
+  struct diff3_block *result;
+  struct diff_block *ptr;
+  int d;
+  lin i;
+
+  /* Find the range in the common file.  */
+  lin lowc = D_LOWLINE (using[low_thread], FC);
+  lin highc = D_HIGHLINE (last_using[high_thread], FC);
+
+  /* Find the ranges in the other files.
+     If using[d] is null, that means that the file to which that diff
+     refers is equivalent to the common file over this range.  */
+
+  for (d = 0; d < 2; d++)
+    if (using[d])
+      {
+	low[d] = D_LOW_MAPLINE (using[d], FC, FO, lowc);
+	high[d] = D_HIGH_MAPLINE (last_using[d], FC, FO, highc);
+      }
+    else
+      {
+	low[d] = D_HIGH_MAPLINE (last_diff3, FILEC, FILE0 + d, lowc);
+	high[d] = D_HIGH_MAPLINE (last_diff3, FILEC, FILE0 + d, highc);
+      }
+
+  /* Create a block with the appropriate sizes */
+  result = create_diff3_block (low[0], high[0], low[1], high[1], lowc, highc);
+
+  /* Copy information for the common file.
+     Return with a zero if any of the compares failed.  */
+
+  for (d = 0; d < 2; d++)
+    for (ptr = using[d]; ptr; ptr = D_NEXT (ptr))
+      {
+	lin result_offset = D_LOWLINE (ptr, FC) - lowc;
+
+	if (!copy_stringlist (D_LINEARRAY (ptr, FC),
+			      D_LENARRAY (ptr, FC),
+			      D_LINEARRAY (result, FILEC) + result_offset,
+			      D_LENARRAY (result, FILEC) + result_offset,
+			      D_NUMLINES (ptr, FC)))
+	  return 0;
+      }
+
+  /* Copy information for file d.  First deal with anything that might be
+     before the first diff.  */
+
+  for (d = 0; d < 2; d++)
+    {
+      struct diff_block *u = using[d];
+      lin lo = low[d], hi = high[d];
+
+      for (i = 0;
+	   i + lo < (u ? D_LOWLINE (u, FO) : hi + 1);
+	   i++)
+	{
+	  D_RELNUM (result, FILE0 + d, i) = D_RELNUM (result, FILEC, i);
+	  D_RELLEN (result, FILE0 + d, i) = D_RELLEN (result, FILEC, i);
+	}
+
+      for (ptr = u; ptr; ptr = D_NEXT (ptr))
+	{
+	  lin result_offset = D_LOWLINE (ptr, FO) - lo;
+	  lin linec;
+
+	  if (!copy_stringlist (D_LINEARRAY (ptr, FO),
+				D_LENARRAY (ptr, FO),
+				D_LINEARRAY (result, FILE0 + d) + result_offset,
+				D_LENARRAY (result, FILE0 + d) + result_offset,
+				D_NUMLINES (ptr, FO)))
+	    return 0;
+
+	  /* Catch the lines between here and the next diff */
+	  linec = D_HIGHLINE (ptr, FC) + 1 - lowc;
+	  for (i = D_HIGHLINE (ptr, FO) + 1 - lo;
+	       i < (D_NEXT (ptr) ? D_LOWLINE (D_NEXT (ptr), FO) : hi + 1) - lo;
+	       i++)
+	    {
+	      D_RELNUM (result, FILE0 + d, i) = D_RELNUM (result, FILEC, linec);
+	      D_RELLEN (result, FILE0 + d, i) = D_RELLEN (result, FILEC, linec);
+	      linec++;
+	    }
+	}
+    }
+
+  /* Set correspond */
+  if (!using[0])
+    D3_TYPE (result) = DIFF_2ND;
+  else if (!using[1])
+    D3_TYPE (result) = DIFF_1ST;
+  else
+    {
+      lin nl0 = D_NUMLINES (result, FILE0);
+      lin nl1 = D_NUMLINES (result, FILE1);
+
+      if (nl0 != nl1
+	  || !compare_line_list (D_LINEARRAY (result, FILE0),
+				 D_LENARRAY (result, FILE0),
+				 D_LINEARRAY (result, FILE1),
+				 D_LENARRAY (result, FILE1),
+				 nl0))
+	D3_TYPE (result) = DIFF_ALL;
+      else
+	D3_TYPE (result) = DIFF_3RD;
+    }
+
+  return result;
+}
+
+/* Copy pointers from a list of strings to a different list of
+   strings.  If a spot in the second list is already filled, make sure
+   that it is filled with the same string; if not, return false, the copy
+   incomplete.  Upon successful completion of the copy, return true.  */
+
+static bool
+copy_stringlist (char * const fromptrs[], size_t const fromlengths[],
+		 char *toptrs[], size_t tolengths[],
+		 lin copynum)
+{
+  register char * const *f = fromptrs;
+  register char **t = toptrs;
+  register size_t const *fl = fromlengths;
+  register size_t *tl = tolengths;
+
+  while (copynum--)
+    {
+      if (*t)
+	{
+	  if (*fl != *tl || memcmp (*f, *t, *fl) != 0)
+	    return false;
+	}
+      else
+	{
+	  *t = *f;
+	  *tl = *fl;
+	}
+
+      t++; f++; tl++; fl++;
+    }
+
+  return true;
+}
+
+/* Create a diff3_block, with ranges as specified in the arguments.
+   Allocate the arrays for the various pointers (and zero them) based
+   on the arguments passed.  Return the block as a result.  */
+
+static struct diff3_block *
+create_diff3_block (lin low0, lin high0,
+		    lin low1, lin high1,
+		    lin low2, lin high2)
+{
+  struct diff3_block *result = xmalloc (sizeof *result);
+  lin numlines;
+
+  D3_TYPE (result) = ERROR;
+  D_NEXT (result) = 0;
+
+  /* Assign ranges */
+  D_LOWLINE (result, FILE0) = low0;
+  D_HIGHLINE (result, FILE0) = high0;
+  D_LOWLINE (result, FILE1) = low1;
+  D_HIGHLINE (result, FILE1) = high1;
+  D_LOWLINE (result, FILE2) = low2;
+  D_HIGHLINE (result, FILE2) = high2;
+
+  /* Allocate and zero space */
+  numlines = D_NUMLINES (result, FILE0);
+  if (numlines)
+    {
+      D_LINEARRAY (result, FILE0) = xcalloc (numlines, sizeof (char *));
+      D_LENARRAY (result, FILE0) = xcalloc (numlines, sizeof (size_t));
+    }
+  else
+    {
+      D_LINEARRAY (result, FILE0) = 0;
+      D_LENARRAY (result, FILE0) = 0;
+    }
+
+  numlines = D_NUMLINES (result, FILE1);
+  if (numlines)
+    {
+      D_LINEARRAY (result, FILE1) = xcalloc (numlines, sizeof (char *));
+      D_LENARRAY (result, FILE1) = xcalloc (numlines, sizeof (size_t));
+    }
+  else
+    {
+      D_LINEARRAY (result, FILE1) = 0;
+      D_LENARRAY (result, FILE1) = 0;
+    }
+
+  numlines = D_NUMLINES (result, FILE2);
+  if (numlines)
+    {
+      D_LINEARRAY (result, FILE2) = xcalloc (numlines, sizeof (char *));
+      D_LENARRAY (result, FILE2) = xcalloc (numlines, sizeof (size_t));
+    }
+  else
+    {
+      D_LINEARRAY (result, FILE2) = 0;
+      D_LENARRAY (result, FILE2) = 0;
+    }
+
+  /* Return */
+  return result;
+}
+
+/* Compare two lists of lines of text.
+   Return 1 if they are equivalent, 0 if not.  */
+
+static bool
+compare_line_list (char * const list1[], size_t const lengths1[],
+		   char * const list2[], size_t const lengths2[],
+		   lin nl)
+{
+  char * const *l1 = list1;
+  char * const *l2 = list2;
+  size_t const *lgths1 = lengths1;
+  size_t const *lgths2 = lengths2;
+
+  while (nl--)
+    if (!*l1 || !*l2 || *lgths1 != *lgths2++
+	|| memcmp (*l1++, *l2++, *lgths1++) != 0)
+      return false;
+  return true;
+}
+
+/* Input and parse two way diffs.  */
+
+static struct diff_block *
+process_diff (char const *filea,
+	      char const *fileb,
+	      struct diff_block **last_block)
+{
+  char *diff_contents;
+  char *diff_limit;
+  char *scan_diff;
+  enum diff_type dt;
+  lin i;
+  struct diff_block *block_list;
+  struct diff_block **block_list_end = &block_list;
+  struct diff_block *bptr IF_LINT (= NULL);
+  size_t too_many_lines = (PTRDIFF_MAX
+			   / MIN (sizeof *bptr->lines[1],
+				  sizeof *bptr->lengths[1]));
+
+  diff_limit = read_diff (filea, fileb, &diff_contents);
+  scan_diff = diff_contents;
+
+  while (scan_diff < diff_limit)
+    {
+      bptr = xmalloc (sizeof *bptr);
+      bptr->lines[0] = bptr->lines[1] = 0;
+      bptr->lengths[0] = bptr->lengths[1] = 0;
+
+      dt = process_diff_control (&scan_diff, bptr);
+      if (dt == ERROR || *scan_diff != '\n')
+	{
+	  fprintf (stderr, _("%s: diff failed: "), program_name);
+	  do
+	    {
+	      putc (*scan_diff, stderr);
+	    }
+	  while (*scan_diff++ != '\n');
+	  exit (EXIT_TROUBLE);
+	}
+      scan_diff++;
+
+      /* Force appropriate ranges to be null, if necessary */
+      switch (dt)
+	{
+	case ADD:
+	  bptr->ranges[0][0]++;
+	  break;
+	case DELETE:
+	  bptr->ranges[1][0]++;
+	  break;
+	case CHANGE:
+	  break;
+	default:
+	  fatal ("internal error: invalid diff type in process_diff");
+	  break;
+	}
+
+      /* Allocate space for the pointers for the lines from filea, and
+	 parcel them out among these pointers */
+      if (dt != ADD)
+	{
+	  lin numlines = D_NUMLINES (bptr, 0);
+	  if (too_many_lines <= numlines)
+	    xalloc_die ();
+	  bptr->lines[0] = xmalloc (numlines * sizeof *bptr->lines[0]);
+	  bptr->lengths[0] = xmalloc (numlines * sizeof *bptr->lengths[0]);
+	  for (i = 0; i < numlines; i++)
+	    scan_diff = scan_diff_line (scan_diff,
+					&(bptr->lines[0][i]),
+					&(bptr->lengths[0][i]),
+					diff_limit,
+					'<');
+	}
+
+      /* Get past the separator for changes */
+      if (dt == CHANGE)
+	{
+	  if (strncmp (scan_diff, "---\n", 4))
+	    fatal ("invalid diff format; invalid change separator");
+	  scan_diff += 4;
+	}
+
+      /* Allocate space for the pointers for the lines from fileb, and
+	 parcel them out among these pointers */
+      if (dt != DELETE)
+	{
+	  lin numlines = D_NUMLINES (bptr, 1);
+	  if (too_many_lines <= numlines)
+	    xalloc_die ();
+	  bptr->lines[1] = xmalloc (numlines * sizeof *bptr->lines[1]);
+	  bptr->lengths[1] = xmalloc (numlines * sizeof *bptr->lengths[1]);
+	  for (i = 0; i < numlines; i++)
+	    scan_diff = scan_diff_line (scan_diff,
+					&(bptr->lines[1][i]),
+					&(bptr->lengths[1][i]),
+					diff_limit,
+					'>');
+	}
+
+      /* Place this block on the blocklist.  */
+      *block_list_end = bptr;
+      block_list_end = &bptr->next;
+    }
+
+  *block_list_end = NULL;
+  *last_block = bptr;
+  return block_list;
+}
+
+/* Skip tabs and spaces, and return the first character after them.  */
+
+static char *
+skipwhite (char *s)
+{
+  while (*s == ' ' || *s == '\t')
+    s++;
+  return s;
+}
+
+/* Read a nonnegative line number from S, returning the address of the
+   first character after the line number, and storing the number into
+   *PNUM.  Return 0 if S does not point to a valid line number.  */
+
+static char *
+readnum (char *s, lin *pnum)
+{
+  unsigned char c = *s;
+  lin num = 0;
+
+  if (! ISDIGIT (c))
+    return 0;
+
+  do
+    {
+      num = c - '0' + num * 10;
+      c = *++s;
+    }
+  while (ISDIGIT (c));
+
+  *pnum = num;
+  return s;
+}
+
+/* Parse a normal format diff control string.  Return the type of the
+   diff (ERROR if the format is bad).  All of the other important
+   information is filled into to the structure pointed to by db, and
+   the string pointer (whose location is passed to this routine) is
+   updated to point beyond the end of the string parsed.  Note that
+   only the ranges in the diff_block will be set by this routine.
+
+   If some specific pair of numbers has been reduced to a single
+   number, then both corresponding numbers in the diff block are set
+   to that number.  In general these numbers are interpreted as ranges
+   inclusive, unless being used by the ADD or DELETE commands.  It is
+   assumed that these will be special cased in a superior routine.   */
+
+static enum diff_type
+process_diff_control (char **string, struct diff_block *db)
+{
+  char *s = *string;
+  enum diff_type type;
+
+  /* Read first set of digits */
+  s = readnum (skipwhite (s), &db->ranges[0][RANGE_START]);
+  if (! s)
+    return ERROR;
+
+  /* Was that the only digit? */
+  s = skipwhite (s);
+  if (*s == ',')
+    {
+      s = readnum (s + 1, &db->ranges[0][RANGE_END]);
+      if (! s)
+	return ERROR;
+    }
+  else
+    db->ranges[0][RANGE_END] = db->ranges[0][RANGE_START];
+
+  /* Get the letter */
+  s = skipwhite (s);
+  switch (*s)
+    {
+    case 'a':
+      type = ADD;
+      break;
+    case 'c':
+      type = CHANGE;
+      break;
+    case 'd':
+      type = DELETE;
+      break;
+    default:
+      return ERROR;			/* Bad format */
+    }
+  s++;				/* Past letter */
+
+  /* Read second set of digits */
+  s = readnum (skipwhite (s), &db->ranges[1][RANGE_START]);
+  if (! s)
+    return ERROR;
+
+  /* Was that the only digit? */
+  s = skipwhite (s);
+  if (*s == ',')
+    {
+      s = readnum (s + 1, &db->ranges[1][RANGE_END]);
+      if (! s)
+	return ERROR;
+      s = skipwhite (s);		/* To move to end */
+    }
+  else
+    db->ranges[1][RANGE_END] = db->ranges[1][RANGE_START];
+
+  *string = s;
+  return type;
+}
+
+static char *
+read_diff (char const *filea,
+	   char const *fileb,
+	   char **output_placement)
+{
+  char *diff_result;
+  size_t current_chunk_size, total;
+  int fd, wstatus, status;
+  int werrno = 0;
+  struct stat pipestat;
+
+#if HAVE_WORKING_FORK || HAVE_WORKING_VFORK
+
+  char const *argv[9];
+  char const **ap;
+  int fds[2];
+  pid_t pid;
+
+  ap = argv;
+  *ap++ = diff_program;
+  if (text)
+    *ap++ = "-a";
+  if (strip_trailing_cr)
+    *ap++ = "--strip-trailing-cr";
+  *ap++ = "--horizon-lines=100";
+  *ap++ = "--";
+  *ap++ = filea;
+  *ap++ = fileb;
+  *ap = 0;
+
+  if (pipe (fds) != 0)
+    perror_with_exit ("pipe");
+
+  pid = vfork ();
+  if (pid == 0)
+    {
+      /* Child */
+      close (fds[0]);
+      if (fds[1] != STDOUT_FILENO)
+	{
+	  dup2 (fds[1], STDOUT_FILENO);
+	  close (fds[1]);
+	}
+
+      /* The cast to (char **) is needed for portability to older
+	 hosts with a nonstandard prototype for execvp.  */
+      execvp (diff_program, (char **) argv);
+
+      _exit (errno == ENOENT ? 127 : 126);
+    }
+
+  if (pid == -1)
+    perror_with_exit ("fork");
+
+  close (fds[1]);		/* Prevent erroneous lack of EOF */
+  fd = fds[0];
+
+#else
+
+  FILE *fpipe;
+  char const args[] = " --horizon-lines=100 -- ";
+  char *command = xmalloc (shell_quote_length (diff_program)
+			   + sizeof "-a"
+			   + sizeof "--strip-trailing-cr"
+			   + sizeof args - 1
+			   + shell_quote_length (filea) + 1
+			   + shell_quote_length (fileb) + 1);
+  char *p = command;
+  p = shell_quote_copy (p, diff_program);
+  if (text)
+    {
+      strcpy (p, " -a");
+      p += 3;
+    }
+  if (strip_trailing_cr)
+    {
+      strcpy (p, " --strip-trailing-cr");
+      p += 20;
+    }
+  strcpy (p, args);
+  p += sizeof args - 1;
+  p = shell_quote_copy (p, filea);
+  *p++ = ' ';
+  p = shell_quote_copy (p, fileb);
+  *p = 0;
+  errno = 0;
+  fpipe = popen (command, "r");
+  if (!fpipe)
+    perror_with_exit (command);
+  free (command);
+  fd = fileno (fpipe);
+
+#endif
+
+  if (fstat (fd, &pipestat) != 0)
+    perror_with_exit ("fstat");
+  current_chunk_size = MAX (1, STAT_BLOCKSIZE (pipestat));
+  diff_result = xmalloc (current_chunk_size);
+  total = 0;
+
+  for (;;)
+    {
+      size_t bytes_to_read = current_chunk_size - total;
+      size_t bytes = block_read (fd, diff_result + total, bytes_to_read);
+      total += bytes;
+      if (bytes != bytes_to_read)
+	{
+	  if (bytes == SIZE_MAX)
+	    perror_with_exit (_("read failed"));
+	  break;
+	}
+      if (PTRDIFF_MAX / 2 <= current_chunk_size)
+	xalloc_die ();
+      current_chunk_size *= 2;
+      diff_result = xrealloc (diff_result, current_chunk_size);
+    }
+
+  if (total != 0 && diff_result[total-1] != '\n')
+    fatal ("invalid diff format; incomplete last line");
+
+  *output_placement = diff_result;
+
+#if ! (HAVE_WORKING_FORK || HAVE_WORKING_VFORK)
+
+  wstatus = pclose (fpipe);
+  if (wstatus == -1)
+    werrno = errno;
+
+#else
+
+  if (close (fd) != 0)
+    perror_with_exit ("close");
+  if (waitpid (pid, &wstatus, 0) < 0)
+    perror_with_exit ("waitpid");
+
+#endif
+
+  status = ! werrno && WIFEXITED (wstatus) ? WEXITSTATUS (wstatus) : INT_MAX;
+
+  if (EXIT_TROUBLE <= status)
+    error (EXIT_TROUBLE, werrno,
+	   _(status == 126
+	     ? "subsidiary program '%s' could not be invoked"
+	     : status == 127
+	     ? "subsidiary program '%s' not found"
+	     : status == INT_MAX
+	     ? "subsidiary program '%s' failed"
+	     : "subsidiary program '%s' failed (exit status %d)"),
+	   diff_program, status);
+
+  return diff_result + total;
+}
+
+
+/* Scan a regular diff line (consisting of > or <, followed by a
+   space, followed by text (including nulls) up to a newline.
+
+   This next routine began life as a macro and many parameters in it
+   are used as call-by-reference values.  */
+static char *
+scan_diff_line (char *scan_ptr, char **set_start, size_t *set_length,
+		char *limit, char leadingchar)
+{
+  char *line_ptr;
+
+  if (!(scan_ptr[0] == leadingchar
+	&& scan_ptr[1] == ' '))
+    fatal ("invalid diff format; incorrect leading line chars");
+
+  *set_start = line_ptr = scan_ptr + 2;
+  while (*line_ptr++ != '\n')
+    continue;
+
+  /* Include newline if the original line ended in a newline,
+     or if an edit script is being generated.
+     Copy any missing newline message to stderr if an edit script is being
+     generated, because edit scripts cannot handle missing newlines.
+     Return the beginning of the next line.  */
+  *set_length = line_ptr - *set_start;
+  if (line_ptr < limit && *line_ptr == '\\')
+    {
+      if (edscript)
+	fprintf (stderr, "%s:", program_name);
+      else
+	--*set_length;
+      line_ptr++;
+      do
+	{
+	  if (edscript)
+	    putc (*line_ptr, stderr);
+	}
+      while (*line_ptr++ != '\n');
+    }
+
+  return line_ptr;
+}
+
+/* Output a three way diff passed as a list of diff3_block's.  The
+   argument MAPPING is indexed by external file number (in the
+   argument list) and contains the internal file number (from the diff
+   passed).  This is important because the user expects outputs in
+   terms of the argument list number, and the diff passed may have
+   been done slightly differently (if the last argument was "-", for
+   example).  REV_MAPPING is the inverse of MAPPING.  */
+
+static void
+output_diff3 (FILE *outputfile, struct diff3_block *diff,
+	      int const mapping[3], int const rev_mapping[3])
+{
+  int i;
+  int oddoneout;
+  char *cp;
+  struct diff3_block *ptr;
+  lin line;
+  size_t length;
+  int dontprint;
+  static int skew_increment[3] = { 2, 3, 1 }; /* 0==>2==>1==>3 */
+  char const *line_prefix = initial_tab ? "\t" : "  ";
+
+  for (ptr = diff; ptr; ptr = D_NEXT (ptr))
+    {
+      char x[2];
+
+      switch (ptr->correspond)
+	{
+	case DIFF_ALL:
+	  x[0] = 0;
+	  dontprint = 3;	/* Print them all */
+	  oddoneout = 3;	/* Nobody's odder than anyone else */
+	  break;
+	case DIFF_1ST:
+	case DIFF_2ND:
+	case DIFF_3RD:
+	  oddoneout = rev_mapping[ptr->correspond - DIFF_1ST];
+
+	  x[0] = oddoneout + '1';
+	  x[1] = 0;
+	  dontprint = oddoneout == 0;
+	  break;
+	default:
+	  fatal ("internal error: invalid diff type passed to output");
+	}
+      fprintf (outputfile, "====%s\n", x);
+
+      /* Go 0, 2, 1 if the first and third outputs are equivalent.  */
+      for (i = 0; i < 3;
+	   i = (oddoneout == 1 ? skew_increment[i] : i + 1))
+	{
+	  int realfile = mapping[i];
+	  lin lowt = D_LOWLINE (ptr, realfile);
+	  lin hight = D_HIGHLINE (ptr, realfile);
+	  long int llowt = lowt;
+	  long int lhight = hight;
+
+	  fprintf (outputfile, "%d:", i + 1);
+	  switch (lowt - hight)
+	    {
+	    case 1:
+	      fprintf (outputfile, "%lda\n", llowt - 1);
+	      break;
+	    case 0:
+	      fprintf (outputfile, "%ldc\n", llowt);
+	      break;
+	    default:
+	      fprintf (outputfile, "%ld,%ldc\n", llowt, lhight);
+	      break;
+	    }
+
+	  if (i == dontprint) continue;
+
+	  if (lowt <= hight)
+	    {
+	      line = 0;
+	      do
+		{
+		  fputs (line_prefix, outputfile);
+		  cp = D_RELNUM (ptr, realfile, line);
+		  length = D_RELLEN (ptr, realfile, line);
+		  fwrite (cp, sizeof (char), length, outputfile);
+		}
+	      while (++line < hight - lowt + 1);
+	      if (cp[length - 1] != '\n')
+		fprintf (outputfile, "\n\\ %s\n",
+			 _("No newline at end of file"));
+	    }
+	}
+    }
+}
+
+
+/* Output to OUTPUTFILE the lines of B taken from FILENUM.  Double any
+   initial '.'s; yield nonzero if any initial '.'s were doubled.  */
+
+static bool
+dotlines (FILE *outputfile, struct diff3_block *b, int filenum)
+{
+  lin i;
+  bool leading_dot = false;
+
+  for (i = 0;
+       i < D_NUMLINES (b, filenum);
+       i++)
+    {
+      char *line = D_RELNUM (b, filenum, i);
+      if (line[0] == '.')
+	{
+	  leading_dot = true;
+	  fputc ('.', outputfile);
+	}
+      fwrite (line, sizeof (char),
+	      D_RELLEN (b, filenum, i), outputfile);
+    }
+
+  return leading_dot;
+}
+
+/* Output to OUTPUTFILE a '.' line.  If LEADING_DOT is true, also
+   output a command that removes initial '.'s starting with line START
+   and continuing for NUM lines.  (START is long int, not lin, for
+   convenience with printf %ld formats.)  */
+
+static void
+undotlines (FILE *outputfile, bool leading_dot, long int start, lin num)
+{
+  fputs (".\n", outputfile);
+  if (leading_dot)
+    {
+      if (num == 1)
+	fprintf (outputfile, "%lds/^\\.//\n", start);
+      else
+	fprintf (outputfile, "%ld,%lds/^\\.//\n", start, start + num - 1);
+    }
+}
+
+/* Output a diff3 set of blocks as an ed script.  This script applies
+   the changes between file's 2 & 3 to file 1.  Take the precise
+   format of the ed script to be output from global variables set
+   during options processing.  Reverse the order of
+   the set of diff3 blocks in DIFF; this gets
+   around the problems involved with changing line numbers in an ed
+   script.
+
+   As in `output_diff3', the variable MAPPING maps from file number
+   according to the argument list to file number according to the diff
+   passed.  All files listed below are in terms of the argument list.
+   REV_MAPPING is the inverse of MAPPING.
+
+   FILE0, FILE1 and FILE2 are the strings to print as the names of the
+   three files.  These may be the actual names, or may be the
+   arguments specified with -L.
+
+   Return 1 if conflicts were found.  */
+
+static bool
+output_diff3_edscript (FILE *outputfile, struct diff3_block *diff,
+		       int const mapping[3], int const rev_mapping[3],
+		       char const *file0, char const *file1, char const *file2)
+{
+  bool leading_dot;
+  bool conflicts_found = false;
+  bool conflict;
+  struct diff3_block *b;
+
+  for (b = reverse_diff3_blocklist (diff); b; b = b->next)
+    {
+      /* Must do mapping correctly.  */
+      enum diff_type type
+	= (b->correspond == DIFF_ALL
+	   ? DIFF_ALL
+	   : DIFF_1ST + rev_mapping[b->correspond - DIFF_1ST]);
+
+      long int low0, high0;
+
+      /* If we aren't supposed to do this output block, skip it.  */
+      switch (type)
+	{
+	default: continue;
+	case DIFF_2ND: if (!show_2nd) continue; conflict = true; break;
+	case DIFF_3RD: if (overlap_only) continue; conflict = false; break;
+	case DIFF_ALL: if (simple_only) continue; conflict = flagging; break;
+	}
+
+      low0 = D_LOWLINE (b, mapping[FILE0]);
+      high0 = D_HIGHLINE (b, mapping[FILE0]);
+
+      if (conflict)
+	{
+	  conflicts_found = true;
+
+
+	  /* Mark end of conflict.  */
+
+	  fprintf (outputfile, "%lda\n", high0);
+	  leading_dot = false;
+	  if (type == DIFF_ALL)
+	    {
+	      if (show_2nd)
+		{
+		  /* Append lines from FILE1.  */
+		  fprintf (outputfile, "||||||| %s\n", file1);
+		  leading_dot = dotlines (outputfile, b, mapping[FILE1]);
+		}
+	      /* Append lines from FILE2.  */
+	      fputs ("=======\n", outputfile);
+	      leading_dot |= dotlines (outputfile, b, mapping[FILE2]);
+	    }
+	  fprintf (outputfile, ">>>>>>> %s\n", file2);
+	  undotlines (outputfile, leading_dot, high0 + 2,
+		      (D_NUMLINES (b, mapping[FILE1])
+		       + D_NUMLINES (b, mapping[FILE2]) + 1));
+
+
+	  /* Mark start of conflict.  */
+
+	  fprintf (outputfile, "%lda\n<<<<<<< %s\n", low0 - 1,
+		   type == DIFF_ALL ? file0 : file1);
+	  leading_dot = false;
+	  if (type == DIFF_2ND)
+	    {
+	      /* Prepend lines from FILE1.  */
+	      leading_dot = dotlines (outputfile, b, mapping[FILE1]);
+	      fputs ("=======\n", outputfile);
+	    }
+	  undotlines (outputfile, leading_dot, low0 + 1,
+		      D_NUMLINES (b, mapping[FILE1]));
+	}
+      else if (D_NUMLINES (b, mapping[FILE2]) == 0)
+	/* Write out a delete */
+	{
+	  if (low0 == high0)
+	    fprintf (outputfile, "%ldd\n", low0);
+	  else
+	    fprintf (outputfile, "%ld,%ldd\n", low0, high0);
+	}
+      else
+	/* Write out an add or change */
+	{
+	  switch (high0 - low0)
+	    {
+	    case -1:
+	      fprintf (outputfile, "%lda\n", high0);
+	      break;
+	    case 0:
+	      fprintf (outputfile, "%ldc\n", high0);
+	      break;
+	    default:
+	      fprintf (outputfile, "%ld,%ldc\n", low0, high0);
+	      break;
+	    }
+
+	  undotlines (outputfile, dotlines (outputfile, b, mapping[FILE2]),
+		      low0, D_NUMLINES (b, mapping[FILE2]));
+	}
+    }
+  if (finalwrite)
+    fputs ("w\nq\n", outputfile);
+  return conflicts_found;
+}
+
+/* Read from INFILE and output to OUTPUTFILE a set of diff3_blocks
+   DIFF as a merged file.  This acts like 'ed file0
+   <[output_diff3_edscript]', except that it works even for binary
+   data or incomplete lines.
+
+   As before, MAPPING maps from arg list file number to diff file
+   number, REV_MAPPING is its inverse, and FILE0, FILE1, and FILE2 are
+   the names of the files.
+
+   Return 1 if conflicts were found.  */
+
+static bool
+output_diff3_merge (FILE *infile, FILE *outputfile, struct diff3_block *diff,
+		    int const mapping[3], int const rev_mapping[3],
+		    char const *file0, char const *file1, char const *file2)
+{
+  int c;
+  lin i;
+  bool conflicts_found = false;
+  bool conflict;
+  struct diff3_block *b;
+  lin linesread = 0;
+
+  for (b = diff; b; b = b->next)
+    {
+      /* Must do mapping correctly.  */
+      enum diff_type type
+	= ((b->correspond == DIFF_ALL)
+	   ? DIFF_ALL
+	   : DIFF_1ST + rev_mapping[b->correspond - DIFF_1ST]);
+      char const *format_2nd = "<<<<<<< %s\n";
+
+      /* If we aren't supposed to do this output block, skip it.  */
+      switch (type)
+	{
+	default: continue;
+	case DIFF_2ND: if (!show_2nd) continue; conflict = true; break;
+	case DIFF_3RD: if (overlap_only) continue; conflict = false; break;
+	case DIFF_ALL: if (simple_only) continue; conflict = flagging;
+	  format_2nd = "||||||| %s\n";
+	  break;
+	}
+
+      /* Copy I lines from file 0.  */
+      i = D_LOWLINE (b, FILE0) - linesread - 1;
+      linesread += i;
+      while (0 <= --i)
+	do
+	  {
+	    c = getc (infile);
+	    if (c == EOF)
+	      {
+		if (ferror (infile))
+		  perror_with_exit (_("read failed"));
+		else if (feof (infile))
+		  fatal ("input file shrank");
+	      }
+	    putc (c, outputfile);
+	  }
+	while (c != '\n');
+
+      if (conflict)
+	{
+	  conflicts_found = true;
+
+	  if (type == DIFF_ALL)
+	    {
+	      /* Put in lines from FILE0 with bracket.  */
+	      fprintf (outputfile, "<<<<<<< %s\n", file0);
+	      for (i = 0;
+		   i < D_NUMLINES (b, mapping[FILE0]);
+		   i++)
+		fwrite (D_RELNUM (b, mapping[FILE0], i), sizeof (char),
+			D_RELLEN (b, mapping[FILE0], i), outputfile);
+	    }
+
+	  if (show_2nd)
+	    {
+	      /* Put in lines from FILE1 with bracket.  */
+	      fprintf (outputfile, format_2nd, file1);
+	      for (i = 0;
+		   i < D_NUMLINES (b, mapping[FILE1]);
+		   i++)
+		fwrite (D_RELNUM (b, mapping[FILE1], i), sizeof (char),
+			D_RELLEN (b, mapping[FILE1], i), outputfile);
+	    }
+
+	  fputs ("=======\n", outputfile);
+	}
+
+      /* Put in lines from FILE2.  */
+      for (i = 0;
+	   i < D_NUMLINES (b, mapping[FILE2]);
+	   i++)
+	fwrite (D_RELNUM (b, mapping[FILE2], i), sizeof (char),
+		D_RELLEN (b, mapping[FILE2], i), outputfile);
+
+      if (conflict)
+	fprintf (outputfile, ">>>>>>> %s\n", file2);
+
+      /* Skip I lines in file 0.  */
+      i = D_NUMLINES (b, FILE0);
+      linesread += i;
+      while (0 <= --i)
+	while ((c = getc (infile)) != '\n')
+	  if (c == EOF)
+	    {
+	      if (ferror (infile))
+		perror_with_exit (_("read failed"));
+	      else if (feof (infile))
+		{
+		  if (i || b->next)
+		    fatal ("input file shrank");
+		  return conflicts_found;
+		}
+	    }
+    }
+  /* Copy rest of common file.  */
+  while ((c = getc (infile)) != EOF || !(ferror (infile) | feof (infile)))
+    putc (c, outputfile);
+  return conflicts_found;
+}
+
+/* Reverse the order of the list of diff3 blocks.  */
+
+static struct diff3_block *
+reverse_diff3_blocklist (struct diff3_block *diff)
+{
+  register struct diff3_block *tmp, *next, *prev;
+
+  for (tmp = diff, prev = 0;  tmp;  tmp = next)
+    {
+      next = tmp->next;
+      tmp->next = prev;
+      prev = tmp;
+    }
+
+  return prev;
+}
+
+static void
+fatal (char const *msgid)
+{
+  error (EXIT_TROUBLE, 0, "%s", _(msgid));
+  abort ();
+}
+
+static void
+perror_with_exit (char const *string)
+{
+  error (EXIT_TROUBLE, errno, "%s", string);
+  abort ();
+}
diff --git a/src/dir.c.orig b/src/dir.c.orig
new file mode 100644
index 0000000..5e08318
--- /dev/null
+++ b/src/dir.c.orig
@@ -0,0 +1,283 @@
+/* Read, sort and compare two directories.  Used for GNU DIFF.
+
+   Copyright (C) 1988-1989, 1992-1995, 1998, 2001-2002, 2004, 2006-2007,
+   2009-2010 Free Software Foundation, Inc.
+
+   This file is part of GNU DIFF.
+
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+#include "diff.h"
+#include <error.h>
+#include <exclude.h>
+#include <setjmp.h>
+#include <xalloc.h>
+
+/* Read the directory named by DIR and store into DIRDATA a sorted vector
+   of filenames for its contents.  DIR->desc == -1 means this directory is
+   known to be nonexistent, so set DIRDATA to an empty vector.
+   Return -1 (setting errno) if error, 0 otherwise.  */
+
+struct dirdata
+{
+  size_t nnames;	/* Number of names.  */
+  char const **names;	/* Sorted names of files in dir, followed by 0.  */
+  char *data;	/* Allocated storage for file names.  */
+};
+
+/* Whether file names in directories should be compared with
+   locale-specific sorting.  */
+static bool locale_specific_sorting;
+
+/* Where to go if locale-specific sorting fails.  */
+static jmp_buf failed_locale_specific_sorting;
+
+static bool dir_loop (struct comparison const *, int);
+static int compare_names_for_qsort (void const *, void const *);
+
+
+/* Read a directory and get its vector of names.  */
+
+static bool
+dir_read (struct file_data const *dir, struct dirdata *dirdata)
+{
+  register struct dirent *next;
+  register size_t i;
+
+  /* Address of block containing the files that are described.  */
+  char const **names;
+
+  /* Number of files in directory.  */
+  size_t nnames;
+
+  /* Allocated and used storage for file name data.  */
+  char *data;
+  size_t data_alloc, data_used;
+
+  dirdata->names = 0;
+  dirdata->data = 0;
+  nnames = 0;
+  data = 0;
+
+  if (dir->desc != -1)
+    {
+      /* Open the directory and check for errors.  */
+      register DIR *reading = opendir (dir->name);
+      if (!reading)
+	return false;
+
+      /* Initialize the table of filenames.  */
+
+      data_alloc = 512;
+      data_used = 0;
+      dirdata->data = data = xmalloc (data_alloc);
+
+      /* Read the directory entries, and insert the subfiles
+	 into the `data' table.  */
+
+      while ((errno = 0, (next = readdir (reading)) != 0))
+	{
+	  char *d_name = next->d_name;
+	  size_t d_size = _D_EXACT_NAMLEN (next) + 1;
+
+	  /* Ignore "." and "..".  */
+	  if (d_name[0] == '.'
+	      && (d_name[1] == 0 || (d_name[1] == '.' && d_name[2] == 0)))
+	    continue;
+
+	  if (excluded_file_name (excluded, d_name))
+	    continue;
+
+	  while (data_alloc < data_used + d_size)
+	    {
+	      if (PTRDIFF_MAX / 2 <= data_alloc)
+		xalloc_die ();
+	      dirdata->data = data = xrealloc (data, data_alloc *= 2);
+	    }
+
+	  memcpy (data + data_used, d_name, d_size);
+	  data_used += d_size;
+	  nnames++;
+	}
+      if (errno)
+	{
+	  int e = errno;
+	  closedir (reading);
+	  errno = e;
+	  return false;
+	}
+#if CLOSEDIR_VOID
+      closedir (reading);
+#else
+      if (closedir (reading) != 0)
+	return false;
+#endif
+    }
+
+  /* Create the `names' table from the `data' table.  */
+  if (PTRDIFF_MAX / sizeof *names - 1 <= nnames)
+    xalloc_die ();
+  dirdata->names = names = xmalloc ((nnames + 1) * sizeof *names);
+  dirdata->nnames = nnames;
+  for (i = 0;  i < nnames;  i++)
+    {
+      names[i] = data;
+      data += strlen (data) + 1;
+    }
+  names[nnames] = 0;
+  return true;
+}
+
+/* Compare file names, returning a value compatible with strcmp.  */
+
+static int
+compare_names (char const *name1, char const *name2)
+{
+  if (locale_specific_sorting)
+    {
+      int r;
+      errno = 0;
+      if (ignore_file_name_case)
+	r = strcasecoll (name1, name2);
+      else
+	r = strcoll (name1, name2);
+      if (errno)
+	{
+	  error (0, errno, _("cannot compare file names '%s' and '%s'"),
+		 name1, name2);
+	  longjmp (failed_locale_specific_sorting, 1);
+	}
+      return r;
+    }
+
+  return (ignore_file_name_case
+	  ? strcasecmp (name1, name2)
+	  : file_name_cmp (name1, name2));
+}
+
+/* A wrapper for compare_names suitable as an argument for qsort.  */
+
+static int
+compare_names_for_qsort (void const *file1, void const *file2)
+{
+  char const *const *f1 = file1;
+  char const *const *f2 = file2;
+  return compare_names (*f1, *f2);
+}
+
+/* Compare the contents of two directories named in CMP.
+   This is a top-level routine; it does everything necessary for diff
+   on two directories.
+
+   CMP->file[0].desc == -1 says directory CMP->file[0] doesn't exist,
+   but pretend it is empty.  Likewise for CMP->file[1].
+
+   HANDLE_FILE is a caller-provided subroutine called to handle each file.
+   It gets three operands: CMP, name of file in dir 0, name of file in dir 1.
+   These names are relative to the original working directory.
+
+   For a file that appears in only one of the dirs, one of the name-args
+   to HANDLE_FILE is zero.
+
+   Returns the maximum of all the values returned by HANDLE_FILE,
+   or EXIT_TROUBLE if trouble is encountered in opening files.  */
+
+int
+diff_dirs (struct comparison const *cmp,
+	   int (*handle_file) (struct comparison const *,
+			       char const *, char const *))
+{
+  struct dirdata dirdata[2];
+  int volatile val = EXIT_SUCCESS;
+  int i;
+
+  if ((cmp->file[0].desc == -1 || dir_loop (cmp, 0))
+      && (cmp->file[1].desc == -1 || dir_loop (cmp, 1)))
+    {
+      error (0, 0, _("%s: recursive directory loop"),
+	     cmp->file[cmp->file[0].desc == -1].name);
+      return EXIT_TROUBLE;
+    }
+
+  /* Get contents of both dirs.  */
+  for (i = 0; i < 2; i++)
+    if (! dir_read (&cmp->file[i], &dirdata[i]))
+      {
+	perror_with_name (cmp->file[i].name);
+	val = EXIT_TROUBLE;
+      }
+
+  if (val == EXIT_SUCCESS)
+    {
+      char const **volatile names[2];
+      names[0] = dirdata[0].names;
+      names[1] = dirdata[1].names;
+
+      /* Use locale-specific sorting if possible, else native byte order.  */
+      locale_specific_sorting = true;
+      if (setjmp (failed_locale_specific_sorting))
+	locale_specific_sorting = false;
+
+      /* Sort the directories.  */
+      for (i = 0; i < 2; i++)
+	qsort (names[i], dirdata[i].nnames, sizeof *dirdata[i].names,
+	       compare_names_for_qsort);
+
+      /* If `-S name' was given, and this is the topmost level of comparison,
+	 ignore all file names less than the specified starting name.  */
+
+      if (starting_file && ! cmp->parent)
+	{
+	  while (*names[0] && compare_names (*names[0], starting_file) < 0)
+	    names[0]++;
+	  while (*names[1] && compare_names (*names[1], starting_file) < 0)
+	    names[1]++;
+	}
+
+      /* Loop while files remain in one or both dirs.  */
+      while (*names[0] || *names[1])
+	{
+	  /* Compare next name in dir 0 with next name in dir 1.
+	     At the end of a dir,
+	     pretend the "next name" in that dir is very large.  */
+	  int nameorder = (!*names[0] ? 1 : !*names[1] ? -1
+			   : compare_names (*names[0], *names[1]));
+	  int v1 = (*handle_file) (cmp,
+				   0 < nameorder ? 0 : *names[0]++,
+				   nameorder < 0 ? 0 : *names[1]++);
+	  if (val < v1)
+	    val = v1;
+	}
+    }
+
+  for (i = 0; i < 2; i++)
+    {
+      free (dirdata[i].names);
+      free (dirdata[i].data);
+    }
+
+  return val;
+}
+
+/* Return nonzero if CMP is looping recursively in argument I.  */
+
+static bool
+dir_loop (struct comparison const *cmp, int i)
+{
+  struct comparison const *p = cmp;
+  while ((p = p->parent))
+    if (0 < same_file (&p->file[i].stat, &cmp->file[i].stat))
+      return true;
+  return false;
+}
diff --git a/src/sdiff.c.orig b/src/sdiff.c.orig
new file mode 100644
index 0000000..6ea6f0a
--- /dev/null
+++ b/src/sdiff.c.orig
@@ -0,0 +1,1236 @@
+/* sdiff - side-by-side merge of file differences
+
+   Copyright (C) 1992-1996, 1998, 2001-2002, 2004, 2006-2007, 2009-2010 Free
+   Software Foundation, Inc.
+
+   This file is part of GNU DIFF.
+
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+#include "system.h"
+#include "paths.h"
+
+#include <stdio.h>
+#include <unlocked-io.h>
+
+#include <c-stack.h>
+#include <dirname.h>
+#include <error.h>
+#include <exitfail.h>
+#include <file-type.h>
+#include <getopt.h>
+#include <progname.h>
+#include <sh-quote.h>
+#include <version-etc.h>
+#include <xalloc.h>
+
+/* The official name of this program (e.g., no `g' prefix).  */
+#define PROGRAM_NAME "sdiff"
+
+#define AUTHORS \
+  proper_name ("Thomas Lord")
+
+/* Size of chunks read from files which must be parsed into lines.  */
+#define SDIFF_BUFSIZE ((size_t) 65536)
+
+static char const *editor_program = DEFAULT_EDITOR_PROGRAM;
+static char const **diffargv;
+
+static char * volatile tmpname;
+static FILE *tmp;
+
+#if HAVE_WORKING_FORK || HAVE_WORKING_VFORK
+static pid_t volatile diffpid;
+#endif
+
+struct line_filter;
+
+static void catchsig (int);
+static bool edit (struct line_filter *, char const *, lin, lin, struct line_filter *, char const *, lin, lin, FILE *);
+static bool interact (struct line_filter *, struct line_filter *, char const *, struct line_filter *, char const *, FILE *);
+static void checksigs (void);
+static void diffarg (char const *);
+static void fatal (char const *) __attribute__((noreturn));
+static void perror_fatal (char const *) __attribute__((noreturn));
+static void trapsigs (void);
+static void untrapsig (int);
+
+#define NUM_SIGS (sizeof sigs / sizeof *sigs)
+static int const sigs[] = {
+#ifdef SIGHUP
+       SIGHUP,
+#endif
+#ifdef SIGQUIT
+       SIGQUIT,
+#endif
+#ifdef SIGTERM
+       SIGTERM,
+#endif
+#ifdef SIGXCPU
+       SIGXCPU,
+#endif
+#ifdef SIGXFSZ
+       SIGXFSZ,
+#endif
+#ifdef SIGPIPE
+       SIGPIPE,
+# define handler_index_of_SIGPIPE (NUM_SIGS - 2)
+#endif
+       SIGINT
+#define handler_index_of_SIGINT (NUM_SIGS - 1)
+};
+
+#if HAVE_SIGACTION
+  /* Prefer `sigaction' if available, since `signal' can lose signals.  */
+  static struct sigaction initial_action[NUM_SIGS];
+# define initial_handler(i) (initial_action[i].sa_handler)
+  static void signal_handler (int, void (*) (int));
+#else
+  static void (*initial_action[NUM_SIGS]) ();
+# define initial_handler(i) (initial_action[i])
+# define signal_handler(sig, handler) signal (sig, handler)
+#endif
+
+#if ! HAVE_SIGPROCMASK
+# define sigset_t int
+# define sigemptyset(s) (*(s) = 0)
+# ifndef sigmask
+#  define sigmask(sig) (1 << ((sig) - 1))
+# endif
+# define sigaddset(s, sig) (*(s) |= sigmask (sig))
+# ifndef SIG_BLOCK
+#  define SIG_BLOCK 0
+# endif
+# ifndef SIG_SETMASK
+#  define SIG_SETMASK (! SIG_BLOCK)
+# endif
+# if ! HAVE_SIGBLOCK
+#  define sigblock(mask) (mask)
+#  define sigsetmask(mask) (mask)
+# endif
+# define sigprocmask(how, n, o) \
+    ((how) == SIG_BLOCK \
+     ? ((o) ? (*(sigset_t *) (o) = sigblock (*(n))) : sigblock (*(n))) \
+     : sigsetmask (*(n)))
+#endif
+
+static bool diraccess (char const *);
+static int temporary_file (void);
+
+/* Options: */
+
+/* Name of output file if -o specified.  */
+static char const *output;
+
+/* Do not print common lines.  */
+static bool suppress_common_lines;
+
+/* Value for the long option that does not have single-letter equivalents.  */
+enum
+{
+  DIFF_PROGRAM_OPTION = CHAR_MAX + 1,
+  HELP_OPTION,
+  STRIP_TRAILING_CR_OPTION,
+  TABSIZE_OPTION
+};
+
+static struct option const longopts[] =
+{
+  {"diff-program", 1, 0, DIFF_PROGRAM_OPTION},
+  {"expand-tabs", 0, 0, 't'},
+  {"help", 0, 0, HELP_OPTION},
+  {"ignore-all-space", 0, 0, 'W'}, /* swap W and w for historical reasons */
+  {"ignore-blank-lines", 0, 0, 'B'},
+  {"ignore-case", 0, 0, 'i'},
+  {"ignore-matching-lines", 1, 0, 'I'},
+  {"ignore-space-change", 0, 0, 'b'},
+  {"ignore-tab-expansion", 0, 0, 'E'},
+  {"left-column", 0, 0, 'l'},
+  {"minimal", 0, 0, 'd'},
+  {"output", 1, 0, 'o'},
+  {"speed-large-files", 0, 0, 'H'},
+  {"strip-trailing-cr", 0, 0, STRIP_TRAILING_CR_OPTION},
+  {"suppress-common-lines", 0, 0, 's'},
+  {"tabsize", 1, 0, TABSIZE_OPTION},
+  {"text", 0, 0, 'a'},
+  {"version", 0, 0, 'v'},
+  {"width", 1, 0, 'w'},
+  {0, 0, 0, 0}
+};
+
+static void try_help (char const *, char const *) __attribute__((noreturn));
+static void
+try_help (char const *reason_msgid, char const *operand)
+{
+  if (reason_msgid)
+    error (0, 0, _(reason_msgid), operand);
+  error (EXIT_TROUBLE, 0, _("Try '%s --help' for more information."),
+	 program_name);
+  abort ();
+}
+
+static void
+check_stdout (void)
+{
+  if (ferror (stdout))
+    fatal ("write failed");
+  else if (fclose (stdout) != 0)
+    perror_fatal (_("standard output"));
+}
+
+static char const * const option_help_msgid[] = {
+  N_("-o FILE  --output=FILE  Operate interactively, sending output to FILE."),
+  "",
+  N_("-i  --ignore-case  Consider upper- and lower-case to be the same."),
+  N_("-E  --ignore-tab-expansion  Ignore changes due to tab expansion."),
+  N_("-b  --ignore-space-change  Ignore changes in the amount of white space."),
+  N_("-W  --ignore-all-space  Ignore all white space."),
+  N_("-B  --ignore-blank-lines  Ignore changes whose lines are all blank."),
+  N_("-I RE  --ignore-matching-lines=RE  Ignore changes whose lines all match RE."),
+  N_("--strip-trailing-cr  Strip trailing carriage return on input."),
+  N_("-a  --text  Treat all files as text."),
+  "",
+  N_("-w NUM  --width=NUM  Output at most NUM (default 130) print columns."),
+  N_("-l  --left-column  Output only the left column of common lines."),
+  N_("-s  --suppress-common-lines  Do not output common lines."),
+  "",
+  N_("-t  --expand-tabs  Expand tabs to spaces in output."),
+  N_("--tabsize=NUM  Tab stops are every NUM (default 8) print columns."),
+  "",
+  N_("-d  --minimal  Try hard to find a smaller set of changes."),
+  N_("-H  --speed-large-files  Assume large files and many scattered small changes."),
+  N_("--diff-program=PROGRAM  Use PROGRAM to compare files."),
+  "",
+  N_("-v  --version  Output version info."),
+  N_("--help  Output this help."),
+  0
+};
+
+static void
+usage (void)
+{
+  char const * const *p;
+
+  printf (_("Usage: %s [OPTION]... FILE1 FILE2\n"), program_name);
+  printf ("%s\n\n", _("Side-by-side merge of file differences."));
+  for (p = option_help_msgid;  *p;  p++)
+    if (**p)
+      printf ("  %s\n", _(*p));
+    else
+      putchar ('\n');
+  printf ("\n%s\n%s\n",
+	  _("If a FILE is '-', read standard input."),
+	  _("Exit status is 0 if inputs are the same, 1 if different, 2 if trouble."));
+  emit_bug_reporting_address ();
+}
+
+/* Clean up after a signal or other failure.  This function is
+   async-signal-safe.  */
+static void
+cleanup (int signo __attribute__((unused)))
+{
+#if HAVE_WORKING_FORK || HAVE_WORKING_VFORK
+  if (0 < diffpid)
+    kill (diffpid, SIGPIPE);
+#endif
+  if (tmpname)
+    unlink (tmpname);
+}
+
+static void exiterr (void) __attribute__((noreturn));
+static void
+exiterr (void)
+{
+  cleanup (0);
+  untrapsig (0);
+  checksigs ();
+  exit (EXIT_TROUBLE);
+}
+
+static void
+fatal (char const *msgid)
+{
+  error (0, 0, "%s", _(msgid));
+  exiterr ();
+}
+
+static void
+perror_fatal (char const *msg)
+{
+  int e = errno;
+  checksigs ();
+  error (0, e, "%s", msg);
+  exiterr ();
+}
+
+static void
+check_child_status (int werrno, int wstatus, int max_ok_status,
+		    char const *subsidiary_program)
+{
+  int status = (! werrno && WIFEXITED (wstatus)
+		? WEXITSTATUS (wstatus)
+		: INT_MAX);
+
+  if (max_ok_status < status)
+    {
+      error (0, werrno,
+	     _(status == 126
+	       ? "subsidiary program '%s' could not be invoked"
+	       : status == 127
+	       ? "subsidiary program '%s' not found"
+	       : status == INT_MAX
+	       ? "subsidiary program '%s' failed"
+	       : "subsidiary program '%s' failed (exit status %d)"),
+	     subsidiary_program, status);
+      exiterr ();
+    }
+}
+
+static FILE *
+ck_fopen (char const *fname, char const *type)
+{
+  FILE *r = fopen (fname, type);
+  if (! r)
+    perror_fatal (fname);
+  return r;
+}
+
+static void
+ck_fclose (FILE *f)
+{
+  if (fclose (f))
+    perror_fatal ("fclose");
+}
+
+static size_t
+ck_fread (char *buf, size_t size, FILE *f)
+{
+  size_t r = fread (buf, sizeof (char), size, f);
+  if (r == 0 && ferror (f))
+    perror_fatal (_("read failed"));
+  return r;
+}
+
+static void
+ck_fwrite (char const *buf, size_t size, FILE *f)
+{
+  if (fwrite (buf, sizeof (char), size, f) != size)
+    perror_fatal (_("write failed"));
+}
+
+static void
+ck_fflush (FILE *f)
+{
+  if (fflush (f) != 0)
+    perror_fatal (_("write failed"));
+}
+
+static char const *
+expand_name (char *name, bool is_dir, char const *other_name)
+{
+  if (STREQ (name, "-"))
+    fatal ("cannot interactively merge standard input");
+  if (! is_dir)
+    return name;
+  else
+    {
+      /* Yield NAME/BASE, where BASE is OTHER_NAME's basename.  */
+      char const *base = last_component (other_name);
+      size_t namelen = strlen (name), baselen = base_len (base);
+      bool insert_slash = *last_component (name) && name[namelen - 1] != '/';
+      char *r = xmalloc (namelen + insert_slash + baselen + 1);
+      memcpy (r, name, namelen);
+      r[namelen] = '/';
+      memcpy (r + namelen + insert_slash, base, baselen);
+      r[namelen + insert_slash + baselen] = '\0';
+      return r;
+    }
+}
+
+struct line_filter {
+  FILE *infile;
+  char *bufpos;
+  char *buffer;
+  char *buflim;
+};
+
+static void
+lf_init (struct line_filter *lf, FILE *infile)
+{
+  lf->infile = infile;
+  lf->bufpos = lf->buffer = lf->buflim = xmalloc (SDIFF_BUFSIZE + 1);
+  lf->buflim[0] = '\n';
+}
+
+/* Fill an exhausted line_filter buffer from its INFILE */
+static size_t
+lf_refill (struct line_filter *lf)
+{
+  size_t s = ck_fread (lf->buffer, SDIFF_BUFSIZE, lf->infile);
+  lf->bufpos = lf->buffer;
+  lf->buflim = lf->buffer + s;
+  lf->buflim[0] = '\n';
+  checksigs ();
+  return s;
+}
+
+/* Advance LINES on LF's infile, copying lines to OUTFILE */
+static void
+lf_copy (struct line_filter *lf, lin lines, FILE *outfile)
+{
+  char *start = lf->bufpos;
+
+  while (lines)
+    {
+      lf->bufpos = (char *) memchr (lf->bufpos, '\n', lf->buflim - lf->bufpos);
+      if (! lf->bufpos)
+	{
+	  ck_fwrite (start, lf->buflim - start, outfile);
+	  if (! lf_refill (lf))
+	    return;
+	  start = lf->bufpos;
+	}
+      else
+	{
+	  --lines;
+	  ++lf->bufpos;
+	}
+    }
+
+  ck_fwrite (start, lf->bufpos - start, outfile);
+}
+
+/* Advance LINES on LF's infile without doing output */
+static void
+lf_skip (struct line_filter *lf, lin lines)
+{
+  while (lines)
+    {
+      lf->bufpos = (char *) memchr (lf->bufpos, '\n', lf->buflim - lf->bufpos);
+      if (! lf->bufpos)
+	{
+	  if (! lf_refill (lf))
+	    break;
+	}
+      else
+	{
+	  --lines;
+	  ++lf->bufpos;
+	}
+    }
+}
+
+/* Snarf a line into a buffer.  Return EOF if EOF, 0 if error, 1 if OK.  */
+static int
+lf_snarf (struct line_filter *lf, char *buffer, size_t bufsize)
+{
+  for (;;)
+    {
+      char *start = lf->bufpos;
+      char *next = (char *) memchr (start, '\n', lf->buflim + 1 - start);
+      size_t s = next - start;
+      if (bufsize <= s)
+	return 0;
+      memcpy (buffer, start, s);
+      if (next < lf->buflim)
+	{
+	  buffer[s] = 0;
+	  lf->bufpos = next + 1;
+	  return 1;
+	}
+      if (! lf_refill (lf))
+	return s ? 0 : EOF;
+      buffer += s;
+      bufsize -= s;
+    }
+}
+
+int
+main (int argc, char *argv[])
+{
+  int opt;
+  char const *prog;
+
+  exit_failure = EXIT_TROUBLE;
+  initialize_main (&argc, &argv);
+  set_program_name (argv[0]);
+  setlocale (LC_ALL, "");
+  bindtextdomain (PACKAGE, LOCALEDIR);
+  textdomain (PACKAGE);
+  c_stack_action (cleanup);
+
+  prog = getenv ("EDITOR");
+  if (prog)
+    editor_program = prog;
+
+  diffarg (DEFAULT_DIFF_PROGRAM);
+
+  /* parse command line args */
+  while ((opt = getopt_long (argc, argv, "abBdEHiI:lo:stvw:W", longopts, 0))
+	 != -1)
+    {
+      switch (opt)
+	{
+	case 'a':
+	  diffarg ("-a");
+	  break;
+
+	case 'b':
+	  diffarg ("-b");
+	  break;
+
+	case 'B':
+	  diffarg ("-B");
+	  break;
+
+	case 'd':
+	  diffarg ("-d");
+	  break;
+
+	case 'E':
+	  diffarg ("-E");
+	  break;
+
+	case 'H':
+	  diffarg ("-H");
+	  break;
+
+	case 'i':
+	  diffarg ("-i");
+	  break;
+
+	case 'I':
+	  diffarg ("-I");
+	  diffarg (optarg);
+	  break;
+
+	case 'l':
+	  diffarg ("--left-column");
+	  break;
+
+	case 'o':
+	  output = optarg;
+	  break;
+
+	case 's':
+	  suppress_common_lines = true;
+	  break;
+
+	case 't':
+	  diffarg ("-t");
+	  break;
+
+	case 'v':
+	  version_etc (stdout, PROGRAM_NAME, PACKAGE_NAME, PACKAGE_VERSION,
+		       AUTHORS, (char *) NULL);
+	  check_stdout ();
+	  return EXIT_SUCCESS;
+
+	case 'w':
+	  diffarg ("-W");
+	  diffarg (optarg);
+	  break;
+
+	case 'W':
+	  diffarg ("-w");
+	  break;
+
+	case DIFF_PROGRAM_OPTION:
+	  diffargv[0] = optarg;
+	  break;
+
+	case HELP_OPTION:
+	  usage ();
+	  check_stdout ();
+	  return EXIT_SUCCESS;
+
+	case STRIP_TRAILING_CR_OPTION:
+	  diffarg ("--strip-trailing-cr");
+	  break;
+
+	case TABSIZE_OPTION:
+	  diffarg ("--tabsize");
+	  diffarg (optarg);
+	  break;
+
+	default:
+	  try_help (0, 0);
+	}
+    }
+
+  if (argc - optind != 2)
+    {
+      if (argc - optind < 2)
+	try_help ("missing operand after '%s'", argv[argc - 1]);
+      else
+	try_help ("extra operand '%s'", argv[optind + 2]);
+    }
+
+  if (! output)
+    {
+      /* easy case: diff does everything for us */
+      if (suppress_common_lines)
+	diffarg ("--suppress-common-lines");
+      diffarg ("-y");
+      diffarg ("--");
+      diffarg (argv[optind]);
+      diffarg (argv[optind + 1]);
+      diffarg (0);
+      execvp (diffargv[0], (char **) diffargv);
+      perror_fatal (diffargv[0]);
+    }
+  else
+    {
+      char const *lname, *rname;
+      FILE *left, *right, *out, *diffout;
+      bool interact_ok;
+      struct line_filter lfilt;
+      struct line_filter rfilt;
+      struct line_filter diff_filt;
+      bool leftdir = diraccess (argv[optind]);
+      bool rightdir = diraccess (argv[optind + 1]);
+
+      if (leftdir & rightdir)
+	fatal ("both files to be compared are directories");
+
+      lname = expand_name (argv[optind], leftdir, argv[optind + 1]);
+      left = ck_fopen (lname, "r");
+      rname = expand_name (argv[optind + 1], rightdir, argv[optind]);
+      right = ck_fopen (rname, "r");
+      out = ck_fopen (output, "w");
+
+      diffarg ("--sdiff-merge-assist");
+      diffarg ("--");
+      diffarg (argv[optind]);
+      diffarg (argv[optind + 1]);
+      diffarg (0);
+
+      trapsigs ();
+
+#if ! (HAVE_WORKING_FORK || HAVE_WORKING_VFORK)
+      {
+	size_t cmdsize = 1;
+	char *p, *command;
+	int i;
+
+	for (i = 0;  diffargv[i];  i++)
+	  cmdsize += shell_quote_length (diffargv[i]) + 1;
+	command = p = xmalloc (cmdsize);
+	for (i = 0;  diffargv[i];  i++)
+	  {
+	    p = shell_quote_copy (p, diffargv[i]);
+	    *p++ = ' ';
+	  }
+	p[-1] = 0;
+	errno = 0;
+	diffout = popen (command, "r");
+	if (! diffout)
+	  perror_fatal (command);
+	free (command);
+      }
+#else
+      {
+	int diff_fds[2];
+# if HAVE_WORKING_VFORK
+	sigset_t procmask;
+	sigset_t blocked;
+# endif
+
+	if (pipe (diff_fds) != 0)
+	  perror_fatal ("pipe");
+
+# if HAVE_WORKING_VFORK
+	/* Block SIGINT and SIGPIPE.  */
+	sigemptyset (&blocked);
+	sigaddset (&blocked, SIGINT);
+	sigaddset (&blocked, SIGPIPE);
+	sigprocmask (SIG_BLOCK, &blocked, &procmask);
+# endif
+	diffpid = vfork ();
+	if (diffpid < 0)
+	  perror_fatal ("fork");
+	if (! diffpid)
+	  {
+	    /* Alter the child's SIGINT and SIGPIPE handlers;
+	       this may munge the parent.
+	       The child ignores SIGINT in case the user interrupts the editor.
+	       The child does not ignore SIGPIPE, even if the parent does.  */
+	    if (initial_handler (handler_index_of_SIGINT) != SIG_IGN)
+	      signal_handler (SIGINT, SIG_IGN);
+	    signal_handler (SIGPIPE, SIG_DFL);
+# if HAVE_WORKING_VFORK
+	    /* Stop blocking SIGINT and SIGPIPE in the child.  */
+	    sigprocmask (SIG_SETMASK, &procmask, 0);
+# endif
+	    close (diff_fds[0]);
+	    if (diff_fds[1] != STDOUT_FILENO)
+	      {
+		dup2 (diff_fds[1], STDOUT_FILENO);
+		close (diff_fds[1]);
+	      }
+
+	    execvp (diffargv[0], (char **) diffargv);
+	    _exit (errno == ENOENT ? 127 : 126);
+	  }
+
+# if HAVE_WORKING_VFORK
+	/* Restore the parent's SIGINT and SIGPIPE behavior.  */
+	if (initial_handler (handler_index_of_SIGINT) != SIG_IGN)
+	  signal_handler (SIGINT, catchsig);
+	if (initial_handler (handler_index_of_SIGPIPE) != SIG_IGN)
+	  signal_handler (SIGPIPE, catchsig);
+	else
+	  signal_handler (SIGPIPE, SIG_IGN);
+
+	/* Stop blocking SIGINT and SIGPIPE in the parent.  */
+	sigprocmask (SIG_SETMASK, &procmask, 0);
+# endif
+
+	close (diff_fds[1]);
+	diffout = fdopen (diff_fds[0], "r");
+	if (! diffout)
+	  perror_fatal ("fdopen");
+      }
+#endif
+
+      lf_init (&diff_filt, diffout);
+      lf_init (&lfilt, left);
+      lf_init (&rfilt, right);
+
+      interact_ok = interact (&diff_filt, &lfilt, lname, &rfilt, rname, out);
+
+      ck_fclose (left);
+      ck_fclose (right);
+      ck_fclose (out);
+
+      {
+	int wstatus;
+	int werrno = 0;
+
+#if ! (HAVE_WORKING_FORK || HAVE_WORKING_VFORK)
+	wstatus = pclose (diffout);
+	if (wstatus == -1)
+	  werrno = errno;
+#else
+	ck_fclose (diffout);
+	while (waitpid (diffpid, &wstatus, 0) < 0)
+	  if (errno == EINTR)
+	    checksigs ();
+	  else
+	    perror_fatal ("waitpid");
+	diffpid = 0;
+#endif
+
+	if (tmpname)
+	  {
+	    unlink (tmpname);
+	    tmpname = 0;
+	  }
+
+	if (! interact_ok)
+	  exiterr ();
+
+	check_child_status (werrno, wstatus, EXIT_FAILURE, diffargv[0]);
+	untrapsig (0);
+	checksigs ();
+	exit (WEXITSTATUS (wstatus));
+      }
+    }
+  return EXIT_SUCCESS;			/* Fool '-Wall'.  */
+}
+
+static void
+diffarg (char const *a)
+{
+  static size_t diffargs, diffarglim;
+
+  if (diffargs == diffarglim)
+    {
+      if (! diffarglim)
+	diffarglim = 16;
+      else if (PTRDIFF_MAX / (2 * sizeof *diffargv) <= diffarglim)
+	xalloc_die ();
+      else
+	diffarglim *= 2;
+      diffargv = xrealloc (diffargv, diffarglim * sizeof *diffargv);
+    }
+  diffargv[diffargs++] = a;
+}
+
+/* Signal handling */
+
+static bool volatile ignore_SIGINT;
+static int volatile signal_received;
+static bool sigs_trapped;
+
+static void
+catchsig (int s)
+{
+#if ! HAVE_SIGACTION
+  signal (s, SIG_IGN);
+#endif
+  if (! (s == SIGINT && ignore_SIGINT))
+    signal_received = s;
+}
+
+#if HAVE_SIGACTION
+static struct sigaction catchaction;
+
+static void
+signal_handler (int sig, void (*handler) (int))
+{
+  catchaction.sa_handler = handler;
+  sigaction (sig, &catchaction, 0);
+}
+#endif
+
+static void
+trapsigs (void)
+{
+  int i;
+
+#if HAVE_SIGACTION
+  catchaction.sa_flags = SA_RESTART;
+  sigemptyset (&catchaction.sa_mask);
+  for (i = 0;  i < NUM_SIGS;  i++)
+    sigaddset (&catchaction.sa_mask, sigs[i]);
+#endif
+
+  for (i = 0;  i < NUM_SIGS;  i++)
+    {
+#if HAVE_SIGACTION
+      sigaction (sigs[i], 0, &initial_action[i]);
+#else
+      initial_action[i] = signal (sigs[i], SIG_IGN);
+#endif
+      if (initial_handler (i) != SIG_IGN)
+	signal_handler (sigs[i], catchsig);
+    }
+
+#ifdef SIGCHLD
+  /* System V fork+wait does not work if SIGCHLD is ignored.  */
+  signal (SIGCHLD, SIG_DFL);
+#endif
+
+  sigs_trapped = true;
+}
+
+/* Untrap signal S, or all trapped signals if S is zero.  */
+static void
+untrapsig (int s)
+{
+  int i;
+
+  if (sigs_trapped)
+    for (i = 0;  i < NUM_SIGS;  i++)
+      if ((! s || sigs[i] == s)  &&  initial_handler (i) != SIG_IGN)
+	{
+#if HAVE_SIGACTION
+	  sigaction (sigs[i], &initial_action[i], 0);
+#else
+	  signal (sigs[i], initial_action[i]);
+#endif
+	}
+}
+
+/* Exit if a signal has been received.  */
+static void
+checksigs (void)
+{
+  int s = signal_received;
+  if (s)
+    {
+      cleanup (0);
+
+      /* Yield an exit status indicating that a signal was received.  */
+      untrapsig (s);
+      kill (getpid (), s);
+
+      /* That didn't work, so exit with error status.  */
+      exit (EXIT_TROUBLE);
+    }
+}
+
+static void
+give_help (void)
+{
+  fprintf (stderr, "%s", _("\
+ed:\tEdit then use both versions, each decorated with a header.\n\
+eb:\tEdit then use both versions.\n\
+el or e1:\tEdit then use the left version.\n\
+er or e2:\tEdit then use the right version.\n\
+e:\tDiscard both versions then edit a new one.\n\
+l or 1:\tUse the left version.\n\
+r or 2:\tUse the right version.\n\
+s:\tSilently include common lines.\n\
+v:\tVerbosely include common lines.\n\
+q:\tQuit.\n\
+"));
+}
+
+static int
+skip_white (void)
+{
+  int c;
+  for (;;)
+    {
+      c = getchar ();
+      if (! isspace (c) || c == '\n')
+	break;
+      checksigs ();
+    }
+  if (ferror (stdin))
+    perror_fatal (_("read failed"));
+  return c;
+}
+
+static void
+flush_line (void)
+{
+  int c;
+  while ((c = getchar ()) != '\n' && c != EOF)
+    continue;
+  if (ferror (stdin))
+    perror_fatal (_("read failed"));
+}
+
+
+/* interpret an edit command */
+static bool
+edit (struct line_filter *left, char const *lname, lin lline, lin llen,
+      struct line_filter *right, char const *rname, lin rline, lin rlen,
+      FILE *outfile)
+{
+  for (;;)
+    {
+      int cmd0 IF_LINT (= 0);
+      int cmd1 IF_LINT (= 0);
+      bool gotcmd = false;
+
+      while (! gotcmd)
+	{
+	  if (putchar ('%') != '%')
+	    perror_fatal (_("write failed"));
+	  ck_fflush (stdout);
+
+	  cmd0 = skip_white ();
+	  switch (cmd0)
+	    {
+	    case '1': case '2': case 'l': case 'r':
+	    case 's': case 'v': case 'q':
+	      if (skip_white () != '\n')
+		{
+		  give_help ();
+		  flush_line ();
+		  continue;
+		}
+	      gotcmd = true;
+	      break;
+
+	    case 'e':
+	      cmd1 = skip_white ();
+	      switch (cmd1)
+		{
+		case '1': case '2': case 'b': case 'd': case 'l': case 'r':
+		  if (skip_white () != '\n')
+		    {
+		      give_help ();
+		      flush_line ();
+		      continue;
+		    }
+		  gotcmd = true;
+		  break;
+		case '\n':
+		  gotcmd = true;
+		  break;
+		default:
+		  give_help ();
+		  flush_line ();
+		  continue;
+		}
+	      break;
+
+	    case EOF:
+	      if (feof (stdin))
+		{
+		  gotcmd = true;
+		  cmd0 = 'q';
+		  break;
+		}
+	      /* Fall through.  */
+	    default:
+	      flush_line ();
+	      /* Fall through.  */
+	    case '\n':
+	      give_help ();
+	      continue;
+	    }
+	}
+
+      switch (cmd0)
+	{
+	case '1': case 'l':
+	  lf_copy (left, llen, outfile);
+	  lf_skip (right, rlen);
+	  return true;
+	case '2': case 'r':
+	  lf_copy (right, rlen, outfile);
+	  lf_skip (left, llen);
+	  return true;
+	case 's':
+	  suppress_common_lines = true;
+	  break;
+	case 'v':
+	  suppress_common_lines = false;
+	  break;
+	case 'q':
+	  return false;
+	case 'e':
+	  {
+	    int fd;
+
+	    if (tmpname)
+	      tmp = fopen (tmpname, "w");
+	    else
+	      {
+		if ((fd = temporary_file ()) < 0)
+		  perror_fatal ("mkstemp");
+		tmp = fdopen (fd, "w");
+	      }
+
+	    if (! tmp)
+	      perror_fatal (tmpname);
+
+	    switch (cmd1)
+	      {
+	      case 'd':
+		if (llen)
+		  {
+		    if (llen == 1)
+		      fprintf (tmp, "--- %s %ld\n", lname, (long int) lline);
+		    else
+		      fprintf (tmp, "--- %s %ld,%ld\n", lname,
+			       (long int) lline,
+			       (long int) (lline + llen - 1));
+		  }
+		/* Fall through.  */
+	      case '1': case 'b': case 'l':
+		lf_copy (left, llen, tmp);
+		break;
+
+	      default:
+		lf_skip (left, llen);
+		break;
+	      }
+
+	    switch (cmd1)
+	      {
+	      case 'd':
+		if (rlen)
+		  {
+		    if (rlen == 1)
+		      fprintf (tmp, "+++ %s %ld\n", rname, (long int) rline);
+		    else
+		      fprintf (tmp, "+++ %s %ld,%ld\n", rname,
+			       (long int) rline,
+			       (long int) (rline + rlen - 1));
+		  }
+		/* Fall through.  */
+	      case '2': case 'b': case 'r':
+		lf_copy (right, rlen, tmp);
+		break;
+
+	      default:
+		lf_skip (right, rlen);
+		break;
+	      }
+
+	    ck_fclose (tmp);
+
+	    {
+	      int wstatus;
+	      int werrno = 0;
+	      ignore_SIGINT = true;
+	      checksigs ();
+
+	      {
+#if ! (HAVE_WORKING_FORK || HAVE_WORKING_VFORK)
+		char *command =
+		  xmalloc (shell_quote_length (editor_program)
+			   + 1 + strlen (tmpname) + 1);
+		sprintf (shell_quote_copy (command, editor_program),
+			 " %s", tmpname);
+		wstatus = system (command);
+		if (wstatus == -1)
+		  werrno = errno;
+		free (command);
+#else
+		pid_t pid;
+
+		pid = vfork ();
+		if (pid == 0)
+		  {
+		    char const *argv[3];
+		    int i = 0;
+
+		    argv[i++] = editor_program;
+		    argv[i++] = tmpname;
+		    argv[i] = 0;
+
+		    execvp (editor_program, (char **) argv);
+		    _exit (errno == ENOENT ? 127 : 126);
+		  }
+
+		if (pid < 0)
+		  perror_fatal ("fork");
+
+		while (waitpid (pid, &wstatus, 0) < 0)
+		  if (errno == EINTR)
+		    checksigs ();
+		  else
+		    perror_fatal ("waitpid");
+#endif
+	      }
+
+	      ignore_SIGINT = false;
+	      check_child_status (werrno, wstatus, EXIT_SUCCESS,
+				  editor_program);
+	    }
+
+	    {
+	      char buf[SDIFF_BUFSIZE];
+	      size_t size;
+	      tmp = ck_fopen (tmpname, "r");
+	      while ((size = ck_fread (buf, SDIFF_BUFSIZE, tmp)) != 0)
+		{
+		  checksigs ();
+		  ck_fwrite (buf, size, outfile);
+		}
+	      ck_fclose (tmp);
+	    }
+	    return true;
+	  }
+	default:
+	  give_help ();
+	  break;
+	}
+    }
+}
+
+/* Alternately reveal bursts of diff output and handle user commands.  */
+static bool
+interact (struct line_filter *diff,
+	  struct line_filter *left, char const *lname,
+	  struct line_filter *right, char const *rname,
+	  FILE *outfile)
+{
+  lin lline = 1, rline = 1;
+
+  for (;;)
+    {
+      char diff_help[256];
+      int snarfed = lf_snarf (diff, diff_help, sizeof diff_help);
+
+      if (snarfed <= 0)
+	return snarfed != 0;
+
+      checksigs ();
+
+      if (diff_help[0] == ' ')
+	puts (diff_help + 1);
+      else
+	{
+	  char *numend;
+	  uintmax_t val;
+	  lin llen, rlen, lenmax;
+	  errno = 0;
+	  llen = val = strtoumax (diff_help + 1, &numend, 10);
+	  if (llen < 0 || llen != val || errno || *numend != ',')
+	    fatal (diff_help);
+	  rlen = val = strtoumax (numend + 1, &numend, 10);
+	  if (rlen < 0 || rlen != val || errno || *numend)
+	    fatal (diff_help);
+
+	  lenmax = MAX (llen, rlen);
+
+	  switch (diff_help[0])
+	    {
+	    case 'i':
+	      if (suppress_common_lines)
+		lf_skip (diff, lenmax);
+	      else
+		lf_copy (diff, lenmax, stdout);
+
+	      lf_copy (left, llen, outfile);
+	      lf_skip (right, rlen);
+	      break;
+
+	    case 'c':
+	      lf_copy (diff, lenmax, stdout);
+	      if (! edit (left, lname, lline, llen,
+			  right, rname, rline, rlen,
+			  outfile))
+		return false;
+	      break;
+
+	    default:
+	      fatal (diff_help);
+	    }
+
+	  lline += llen;
+	  rline += rlen;
+	}
+    }
+}
+
+/* Return true if DIR is an existing directory.  */
+static bool
+diraccess (char const *dir)
+{
+  struct stat buf;
+  return stat (dir, &buf) == 0 && S_ISDIR (buf.st_mode);
+}
+
+#ifndef P_tmpdir
+# define P_tmpdir "/tmp"
+#endif
+#ifndef TMPDIR_ENV
+# define TMPDIR_ENV "TMPDIR"
+#endif
+
+/* Open a temporary file and return its file descriptor.  Put into
+   tmpname the address of a newly allocated buffer that holds the
+   file's name.  Use the prefix "sdiff".  */
+static int
+temporary_file (void)
+{
+  char const *tmpdir = getenv (TMPDIR_ENV);
+  char const *dir = tmpdir ? tmpdir : P_tmpdir;
+  char *buf = xmalloc (strlen (dir) + 1 + 5 + 6 + 1);
+  int fd;
+  int e;
+  sigset_t procmask;
+  sigset_t blocked;
+  sprintf (buf, "%s/sdiffXXXXXX", dir);
+  sigemptyset (&blocked);
+  sigaddset (&blocked, SIGINT);
+  sigprocmask (SIG_BLOCK, &blocked, &procmask);
+  fd = mkstemp (buf);
+  e = errno;
+  if (0 <= fd)
+    tmpname = buf;
+  sigprocmask (SIG_SETMASK, &procmask, 0);
+  errno = e;
+  return fd;
+}
diff --git a/src/util.c.orig b/src/util.c.orig
new file mode 100644
index 0000000..d18bf38
--- /dev/null
+++ b/src/util.c.orig
@@ -0,0 +1,788 @@
+/* Support routines for GNU DIFF.
+
+   Copyright (C) 1988-1989, 1992-1995, 1998, 2001-2002, 2004, 2006, 2009-2010
+   Free Software Foundation, Inc.
+
+   This file is part of GNU DIFF.
+
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+#include "diff.h"
+#include <dirname.h>
+#include <error.h>
+#include <sh-quote.h>
+#include <xalloc.h>
+
+char const pr_program[] = PR_PROGRAM;
+
+/* Queue up one-line messages to be printed at the end,
+   when -l is specified.  Each message is recorded with a `struct msg'.  */
+
+struct msg
+{
+  struct msg *next;
+  char args[1]; /* Format + 4 args, each '\0' terminated, concatenated.  */
+};
+
+/* Head of the chain of queues messages.  */
+
+static struct msg *msg_chain;
+
+/* Tail of the chain of queues messages.  */
+
+static struct msg **msg_chain_end = &msg_chain;
+
+/* Use when a system call returns non-zero status.
+   NAME should normally be the file name.  */
+
+void
+perror_with_name (char const *name)
+{
+  error (0, errno, "%s", name);
+}
+
+/* Use when a system call returns non-zero status and that is fatal.  */
+
+void
+pfatal_with_name (char const *name)
+{
+  int e = errno;
+  print_message_queue ();
+  error (EXIT_TROUBLE, e, "%s", name);
+  abort ();
+}
+
+/* Print an error message containing MSGID, then exit.  */
+
+void
+fatal (char const *msgid)
+{
+  print_message_queue ();
+  error (EXIT_TROUBLE, 0, "%s", _(msgid));
+  abort ();
+}
+
+/* Like printf, except if -l in effect then save the message and print later.
+   This is used for things like "Only in ...".  */
+
+void
+message (char const *format_msgid, char const *arg1, char const *arg2)
+{
+  message5 (format_msgid, arg1, arg2, 0, 0);
+}
+
+void
+message5 (char const *format_msgid, char const *arg1, char const *arg2,
+	  char const *arg3, char const *arg4)
+{
+  if (paginate)
+    {
+      char *p;
+      char const *arg[5];
+      int i;
+      size_t size[5];
+      size_t total_size = offsetof (struct msg, args);
+      struct msg *new;
+
+      arg[0] = format_msgid;
+      arg[1] = arg1;
+      arg[2] = arg2;
+      arg[3] = arg3 ? arg3 : "";
+      arg[4] = arg4 ? arg4 : "";
+
+      for (i = 0;  i < 5;  i++)
+	total_size += size[i] = strlen (arg[i]) + 1;
+
+      new = xmalloc (total_size);
+
+      for (i = 0, p = new->args;  i < 5;  p += size[i++])
+	memcpy (p, arg[i], size[i]);
+
+      *msg_chain_end = new;
+      new->next = 0;
+      msg_chain_end = &new->next;
+    }
+  else
+    {
+      if (sdiff_merge_assist)
+	putchar (' ');
+      printf (_(format_msgid), arg1, arg2, arg3, arg4);
+    }
+}
+
+/* Output all the messages that were saved up by calls to `message'.  */
+
+void
+print_message_queue (void)
+{
+  char const *arg[5];
+  int i;
+  struct msg *m = msg_chain;
+
+  while (m)
+    {
+      struct msg *next = m->next;
+      arg[0] = m->args;
+      for (i = 0;  i < 4;  i++)
+	arg[i + 1] = arg[i] + strlen (arg[i]) + 1;
+      printf (_(arg[0]), arg[1], arg[2], arg[3], arg[4]);
+      free (m);
+      m = next;
+    }
+}
+
+/* Call before outputting the results of comparing files NAME0 and NAME1
+   to set up OUTFILE, the stdio stream for the output to go to.
+
+   Usually, OUTFILE is just stdout.  But when -l was specified
+   we fork off a `pr' and make OUTFILE a pipe to it.
+   `pr' then outputs to our stdout.  */
+
+static char const *current_name0;
+static char const *current_name1;
+static bool currently_recursive;
+
+void
+setup_output (char const *name0, char const *name1, bool recursive)
+{
+  current_name0 = name0;
+  current_name1 = name1;
+  currently_recursive = recursive;
+  outfile = 0;
+}
+
+#if HAVE_WORKING_FORK || HAVE_WORKING_VFORK
+static pid_t pr_pid;
+#endif
+
+void
+begin_output (void)
+{
+  char *name;
+
+  if (outfile != 0)
+    return;
+
+  /* Construct the header of this piece of diff.  */
+  name = xmalloc (strlen (current_name0) + strlen (current_name1)
+		  + strlen (switch_string) + 7);
+
+  /* POSIX 1003.1-2001 specifies this format.  But there are some bugs in
+     the standard: it says that we must print only the last component
+     of the pathnames, and it requires two spaces after "diff" if
+     there are no options.  These requirements are silly and do not
+     match historical practice.  */
+  sprintf (name, "diff%s %s %s", switch_string, current_name0, current_name1);
+
+  if (paginate)
+    {
+      if (fflush (stdout) != 0)
+	pfatal_with_name (_("write failed"));
+
+      /* Make OUTFILE a pipe to a subsidiary `pr'.  */
+      {
+#if HAVE_WORKING_FORK || HAVE_WORKING_VFORK
+	int pipes[2];
+
+	if (pipe (pipes) != 0)
+	  pfatal_with_name ("pipe");
+
+	pr_pid = vfork ();
+	if (pr_pid < 0)
+	  pfatal_with_name ("fork");
+
+	if (pr_pid == 0)
+	  {
+	    close (pipes[1]);
+	    if (pipes[0] != STDIN_FILENO)
+	      {
+		if (dup2 (pipes[0], STDIN_FILENO) < 0)
+		  pfatal_with_name ("dup2");
+		close (pipes[0]);
+	      }
+
+	    execl (pr_program, pr_program, "-h", name, (char *) 0);
+	    _exit (errno == ENOENT ? 127 : 126);
+	  }
+	else
+	  {
+	    close (pipes[0]);
+	    outfile = fdopen (pipes[1], "w");
+	    if (!outfile)
+	      pfatal_with_name ("fdopen");
+	  }
+#else
+	char *command = xmalloc (sizeof pr_program - 1 + 7
+				 + shell_quote_length (name) + 1);
+	char *p;
+	sprintf (command, "%s -f -h ", pr_program);
+	p = command + sizeof pr_program - 1 + 7;
+	p = shell_quote_copy (p, name);
+	*p = 0;
+	errno = 0;
+	outfile = popen (command, "w");
+	if (!outfile)
+	  pfatal_with_name (command);
+	free (command);
+#endif
+      }
+    }
+  else
+    {
+
+      /* If -l was not specified, output the diff straight to `stdout'.  */
+
+      outfile = stdout;
+
+      /* If handling multiple files (because scanning a directory),
+	 print which files the following output is about.  */
+      if (currently_recursive)
+	printf ("%s\n", name);
+    }
+
+  free (name);
+
+  /* A special header is needed at the beginning of context output.  */
+  switch (output_style)
+    {
+    case OUTPUT_CONTEXT:
+      print_context_header (files, false);
+      break;
+
+    case OUTPUT_UNIFIED:
+      print_context_header (files, true);
+      break;
+
+    default:
+      break;
+    }
+}
+
+/* Call after the end of output of diffs for one file.
+   Close OUTFILE and get rid of the `pr' subfork.  */
+
+void
+finish_output (void)
+{
+  if (outfile != 0 && outfile != stdout)
+    {
+      int status;
+      int wstatus;
+      int werrno = 0;
+      if (ferror (outfile))
+	fatal ("write failed");
+#if ! (HAVE_WORKING_FORK || HAVE_WORKING_VFORK)
+      wstatus = pclose (outfile);
+      if (wstatus == -1)
+	werrno = errno;
+#else
+      if (fclose (outfile) != 0)
+	pfatal_with_name (_("write failed"));
+      if (waitpid (pr_pid, &wstatus, 0) < 0)
+	pfatal_with_name ("waitpid");
+#endif
+      status = (! werrno && WIFEXITED (wstatus)
+		? WEXITSTATUS (wstatus)
+		: INT_MAX);
+      if (status)
+	error (EXIT_TROUBLE, werrno,
+	       _(status == 126
+		 ? "subsidiary program '%s' could not be invoked"
+		 : status == 127
+		 ? "subsidiary program '%s' not found"
+		 : status == INT_MAX
+		 ? "subsidiary program '%s' failed"
+		 : "subsidiary program '%s' failed (exit status %d)"),
+	       pr_program, status);
+    }
+
+  outfile = 0;
+}
+
+/* Compare two lines (typically one from each input file)
+   according to the command line options.
+   For efficiency, this is invoked only when the lines do not match exactly
+   but an option like -i might cause us to ignore the difference.
+   Return nonzero if the lines differ.  */
+
+bool
+lines_differ (char const *s1, char const *s2)
+{
+  register char const *t1 = s1;
+  register char const *t2 = s2;
+  size_t column = 0;
+
+  while (1)
+    {
+      register unsigned char c1 = *t1++;
+      register unsigned char c2 = *t2++;
+
+      /* Test for exact char equality first, since it's a common case.  */
+      if (c1 != c2)
+	{
+	  switch (ignore_white_space)
+	    {
+	    case IGNORE_ALL_SPACE:
+	      /* For -w, just skip past any white space.  */
+	      while (isspace (c1) && c1 != '\n') c1 = *t1++;
+	      while (isspace (c2) && c2 != '\n') c2 = *t2++;
+	      break;
+
+	    case IGNORE_SPACE_CHANGE:
+	      /* For -b, advance past any sequence of white space in
+		 line 1 and consider it just one space, or nothing at
+		 all if it is at the end of the line.  */
+	      if (isspace (c1))
+		{
+		  while (c1 != '\n')
+		    {
+		      c1 = *t1++;
+		      if (! isspace (c1))
+			{
+			  --t1;
+			  c1 = ' ';
+			  break;
+			}
+		    }
+		}
+
+	      /* Likewise for line 2.  */
+	      if (isspace (c2))
+		{
+		  while (c2 != '\n')
+		    {
+		      c2 = *t2++;
+		      if (! isspace (c2))
+			{
+			  --t2;
+			  c2 = ' ';
+			  break;
+			}
+		    }
+		}
+
+	      if (c1 != c2)
+		{
+		  /* If we went too far when doing the simple test
+		     for equality, go back to the first non-white-space
+		     character in both sides and try again.  */
+		  if (c2 == ' ' && c1 != '\n'
+		      && s1 + 1 < t1
+		      && isspace ((unsigned char) t1[-2]))
+		    {
+		      --t1;
+		      continue;
+		    }
+		  if (c1 == ' ' && c2 != '\n'
+		      && s2 + 1 < t2
+		      && isspace ((unsigned char) t2[-2]))
+		    {
+		      --t2;
+		      continue;
+		    }
+		}
+
+	      break;
+
+	    case IGNORE_TAB_EXPANSION:
+	      if ((c1 == ' ' && c2 == '\t')
+		  || (c1 == '\t' && c2 == ' '))
+		{
+		  size_t column2 = column;
+		  for (;; c1 = *t1++)
+		    {
+		      if (c1 == ' ')
+			column++;
+		      else if (c1 == '\t')
+			column += tabsize - column % tabsize;
+		      else
+			break;
+		    }
+		  for (;; c2 = *t2++)
+		    {
+		      if (c2 == ' ')
+			column2++;
+		      else if (c2 == '\t')
+			column2 += tabsize - column2 % tabsize;
+		      else
+			break;
+		    }
+		  if (column != column2)
+		    return true;
+		}
+	      break;
+
+	    case IGNORE_NO_WHITE_SPACE:
+	      break;
+	    }
+
+	  /* Lowercase all letters if -i is specified.  */
+
+	  if (ignore_case)
+	    {
+	      c1 = tolower (c1);
+	      c2 = tolower (c2);
+	    }
+
+	  if (c1 != c2)
+	    break;
+	}
+      if (c1 == '\n')
+	return false;
+
+      column += c1 == '\t' ? tabsize - column % tabsize : 1;
+    }
+
+  return true;
+}
+
+/* Find the consecutive changes at the start of the script START.
+   Return the last link before the first gap.  */
+
+struct change *
+find_change (struct change *start)
+{
+  return start;
+}
+
+struct change *
+find_reverse_change (struct change *start)
+{
+  return start;
+}
+
+/* Divide SCRIPT into pieces by calling HUNKFUN and
+   print each piece with PRINTFUN.
+   Both functions take one arg, an edit script.
+
+   HUNKFUN is called with the tail of the script
+   and returns the last link that belongs together with the start
+   of the tail.
+
+   PRINTFUN takes a subscript which belongs together (with a null
+   link at the end) and prints it.  */
+
+void
+print_script (struct change *script,
+	      struct change * (*hunkfun) (struct change *),
+	      void (*printfun) (struct change *))
+{
+  struct change *next = script;
+
+  while (next)
+    {
+      struct change *this, *end;
+
+      /* Find a set of changes that belong together.  */
+      this = next;
+      end = (*hunkfun) (next);
+
+      /* Disconnect them from the rest of the changes,
+	 making them a hunk, and remember the rest for next iteration.  */
+      next = end->link;
+      end->link = 0;
+#ifdef DEBUG
+      debug_script (this);
+#endif
+
+      /* Print this hunk.  */
+      (*printfun) (this);
+
+      /* Reconnect the script so it will all be freed properly.  */
+      end->link = next;
+    }
+}
+
+/* Print the text of a single line LINE,
+   flagging it with the characters in LINE_FLAG (which say whether
+   the line is inserted, deleted, changed, etc.).  LINE_FLAG must not
+   end in a blank, unless it is a single blank.  */
+
+void
+print_1_line (char const *line_flag, char const *const *line)
+{
+  char const *base = line[0], *limit = line[1]; /* Help the compiler.  */
+  FILE *out = outfile; /* Help the compiler some more.  */
+  char const *flag_format = 0;
+
+  /* If -T was specified, use a Tab between the line-flag and the text.
+     Otherwise use a Space (as Unix diff does).
+     Print neither space nor tab if line-flags are empty.
+     But omit trailing blanks if requested.  */
+
+  if (line_flag && *line_flag)
+    {
+      char const *flag_format_1 = flag_format = initial_tab ? "%s\t" : "%s ";
+      char const *line_flag_1 = line_flag;
+
+      if (suppress_blank_empty && **line == '\n')
+	{
+	  flag_format_1 = "%s";
+
+	  /* This hack to omit trailing blanks takes advantage of the
+	     fact that the only way that LINE_FLAG can end in a blank
+	     is when LINE_FLAG consists of a single blank.  */
+	  line_flag_1 += *line_flag_1 == ' ';
+	}
+
+      fprintf (out, flag_format_1, line_flag_1);
+    }
+
+  output_1_line (base, limit, flag_format, line_flag);
+
+  if ((!line_flag || line_flag[0]) && limit[-1] != '\n')
+    fprintf (out, "\n\\ %s\n", _("No newline at end of file"));
+}
+
+/* Output a line from BASE up to LIMIT.
+   With -t, expand white space characters to spaces, and if FLAG_FORMAT
+   is nonzero, output it with argument LINE_FLAG after every
+   internal carriage return, so that tab stops continue to line up.  */
+
+void
+output_1_line (char const *base, char const *limit, char const *flag_format,
+	       char const *line_flag)
+{
+  if (!expand_tabs)
+    fwrite (base, sizeof (char), limit - base, outfile);
+  else
+    {
+      register FILE *out = outfile;
+      register unsigned char c;
+      register char const *t = base;
+      register size_t column = 0;
+      size_t tab_size = tabsize;
+
+      while (t < limit)
+	switch ((c = *t++))
+	  {
+	  case '\t':
+	    {
+	      size_t spaces = tab_size - column % tab_size;
+	      column += spaces;
+	      do
+		putc (' ', out);
+	      while (--spaces);
+	    }
+	    break;
+
+	  case '\r':
+	    putc (c, out);
+	    if (flag_format && t < limit && *t != '\n')
+	      fprintf (out, flag_format, line_flag);
+	    column = 0;
+	    break;
+
+	  case '\b':
+	    if (column == 0)
+	      continue;
+	    column--;
+	    putc (c, out);
+	    break;
+
+	  default:
+	    column += isprint (c) != 0;
+	    putc (c, out);
+	    break;
+	  }
+    }
+}
+
+char const change_letter[] = { 0, 'd', 'a', 'c' };
+
+/* Translate an internal line number (an index into diff's table of lines)
+   into an actual line number in the input file.
+   The internal line number is I.  FILE points to the data on the file.
+
+   Internal line numbers count from 0 starting after the prefix.
+   Actual line numbers count from 1 within the entire file.  */
+
+lin
+translate_line_number (struct file_data const *file, lin i)
+{
+  return i + file->prefix_lines + 1;
+}
+
+/* Translate a line number range.  This is always done for printing,
+   so for convenience translate to long int rather than lin, so that the
+   caller can use printf with "%ld" without casting.  */
+
+void
+translate_range (struct file_data const *file,
+		 lin a, lin b,
+		 long int *aptr, long int *bptr)
+{
+  *aptr = translate_line_number (file, a - 1) + 1;
+  *bptr = translate_line_number (file, b + 1) - 1;
+}
+
+/* Print a pair of line numbers with SEPCHAR, translated for file FILE.
+   If the two numbers are identical, print just one number.
+
+   Args A and B are internal line numbers.
+   We print the translated (real) line numbers.  */
+
+void
+print_number_range (char sepchar, struct file_data *file, lin a, lin b)
+{
+  long int trans_a, trans_b;
+  translate_range (file, a, b, &trans_a, &trans_b);
+
+  /* Note: we can have B < A in the case of a range of no lines.
+     In this case, we should print the line number before the range,
+     which is B.  */
+  if (trans_b > trans_a)
+    fprintf (outfile, "%ld%c%ld", trans_a, sepchar, trans_b);
+  else
+    fprintf (outfile, "%ld", trans_b);
+}
+
+/* Look at a hunk of edit script and report the range of lines in each file
+   that it applies to.  HUNK is the start of the hunk, which is a chain
+   of `struct change'.  The first and last line numbers of file 0 are stored in
+   *FIRST0 and *LAST0, and likewise for file 1 in *FIRST1 and *LAST1.
+   Note that these are internal line numbers that count from 0.
+
+   If no lines from file 0 are deleted, then FIRST0 is LAST0+1.
+
+   Return UNCHANGED if only ignorable lines are inserted or deleted,
+   OLD if lines of file 0 are deleted,
+   NEW if lines of file 1 are inserted,
+   and CHANGED if both kinds of changes are found. */
+
+enum changes
+analyze_hunk (struct change *hunk,
+	      lin *first0, lin *last0,
+	      lin *first1, lin *last1)
+{
+  struct change *next;
+  lin l0, l1;
+  lin show_from, show_to;
+  lin i;
+  bool trivial = ignore_blank_lines || ignore_regexp.fastmap;
+  size_t trivial_length = ignore_blank_lines - 1;
+    /* If 0, ignore zero-length lines;
+       if SIZE_MAX, do not ignore lines just because of their length.  */
+  bool skip_leading_white_space =
+    (ignore_blank_lines && IGNORE_SPACE_CHANGE <= ignore_white_space);
+
+  char const * const *linbuf0 = files[0].linbuf;  /* Help the compiler.  */
+  char const * const *linbuf1 = files[1].linbuf;
+
+  show_from = show_to = 0;
+
+  *first0 = hunk->line0;
+  *first1 = hunk->line1;
+
+  next = hunk;
+  do
+    {
+      l0 = next->line0 + next->deleted - 1;
+      l1 = next->line1 + next->inserted - 1;
+      show_from += next->deleted;
+      show_to += next->inserted;
+
+      for (i = next->line0; i <= l0 && trivial; i++)
+	{
+	  char const *line = linbuf0[i];
+	  char const *newline = linbuf0[i + 1] - 1;
+	  size_t len = newline - line;
+	  char const *p = line;
+	  if (skip_leading_white_space)
+	    while (isspace ((unsigned char) *p) && *p != '\n')
+	      p++;
+	  if (newline - p != trivial_length
+	      && (! ignore_regexp.fastmap
+		  || re_search (&ignore_regexp, line, len, 0, len, 0) < 0))
+	    trivial = 0;
+	}
+
+      for (i = next->line1; i <= l1 && trivial; i++)
+	{
+	  char const *line = linbuf1[i];
+	  char const *newline = linbuf1[i + 1] - 1;
+	  size_t len = newline - line;
+	  char const *p = line;
+	  if (skip_leading_white_space)
+	    while (isspace ((unsigned char) *p) && *p != '\n')
+	      p++;
+	  if (newline - p != trivial_length
+	      && (! ignore_regexp.fastmap
+		  || re_search (&ignore_regexp, line, len, 0, len, 0) < 0))
+	    trivial = 0;
+	}
+    }
+  while ((next = next->link) != 0);
+
+  *last0 = l0;
+  *last1 = l1;
+
+  /* If all inserted or deleted lines are ignorable,
+     tell the caller to ignore this hunk.  */
+
+  if (trivial)
+    return UNCHANGED;
+
+  return (show_from ? OLD : UNCHANGED) | (show_to ? NEW : UNCHANGED);
+}
+
+/* Concatenate three strings, returning a newly malloc'd string.  */
+
+char *
+concat (char const *s1, char const *s2, char const *s3)
+{
+  char *new = xmalloc (strlen (s1) + strlen (s2) + strlen (s3) + 1);
+  sprintf (new, "%s%s%s", s1, s2, s3);
+  return new;
+}
+
+/* Yield a new block of SIZE bytes, initialized to zero.  */
+
+void *
+zalloc (size_t size)
+{
+  void *p = xmalloc (size);
+  memset (p, 0, size);
+  return p;
+}
+
+/* Yield the newly malloc'd pathname
+   of the file in DIR whose filename is FILE.  */
+
+char *
+dir_file_pathname (char const *dir, char const *file)
+{
+  char const *base = last_component (dir);
+  size_t baselen = base_len (base);
+  bool omit_slash = baselen == 0 || base[baselen - 1] == '/';
+  return concat (dir, "/" + omit_slash, file);
+}
+
+void
+debug_script (struct change *sp)
+{
+  fflush (stdout);
+
+  for (; sp; sp = sp->link)
+    {
+      long int line0 = sp->line0;
+      long int line1 = sp->line1;
+      long int deleted = sp->deleted;
+      long int inserted = sp->inserted;
+      fprintf (stderr, "%3ld %3ld delete %ld insert %ld\n",
+	       line0, line1, deleted, inserted);
+    }
+
+  fflush (stderr);
+}
-- 
1.7.1

